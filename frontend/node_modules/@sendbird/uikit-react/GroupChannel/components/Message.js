import { _ as __assign } from '../../chunks/bundle-BosquA9C.js';
import React__default from 'react';
import { useIIFE } from '@sendbird/uikit-tools';
import { l as isSendableMessage, g as getSuggestedReplies } from '../../chunks/bundle-Ug7rKzFJ.js';
import { i as isDisabledBecauseFrozen, a as isDisabledBecauseMuted } from '../../chunks/bundle-DgO_xXWo.js';
import { M as MessageView } from '../../chunks/bundle-DL8bJVs5.js';
import { FileViewer } from './FileViewer.js';
import { RemoveMessageModal } from './RemoveMessageModal.js';
import { T as ThreadReplySelectType } from '../../chunks/bundle-mxwNwHvq.js';
import { u as useGroupChannel } from '../../chunks/bundle-DPw-2E0C.js';
import { u as useSendbird } from '../../chunks/bundle-Bk7vYzLW.js';
import '@sendbird/chat/groupChannel';
import '../../utils/message/getOutgoingMessageState.js';
import '../../chunks/bundle-CWd47dzy.js';
import '../../chunks/bundle-BA9ZfQ-7.js';
import '../../chunks/bundle-BovMsFd4.js';
import '../../chunks/bundle-BDIF-bj_.js';
import '../../chunks/bundle-CDOQ--pz.js';
import '../../chunks/bundle-BRWYGzyd.js';
import '../../chunks/bundle-y-yf0Djs.js';
import '../../chunks/bundle-DXRcwk7R.js';
import '../../Message/hooks/useDirtyGetMentions.js';
import '../../ui/DateSeparator.js';
import '../../chunks/bundle-DU7VpG0M.js';
import '../../chunks/bundle-MoKyCGQH.js';
import '../../ui/MessageInput.js';
import '../../chunks/bundle-B-wIh5Qv.js';
import '../../ui/IconButton.js';
import '../../ui/Button.js';
import '../../chunks/bundle-Ob8Qv8ze.js';
import 'dompurify';
import '../../chunks/bundle-CnWjrGUf.js';
import '../../chunks/bundle-B602cp-8.js';
import '../../chunks/bundle-CXh4vzCv.js';
import '../../ui/Icon.js';
import '../../chunks/bundle-Bc1fdQjj.js';
import '../../chunks/bundle-BJl-Stow.js';
import '../../ui/MessageContent.js';
import '../../chunks/bundle-SEoRcjBh.js';
import '../../ui/Loader.js';
import '../../chunks/bundle-B_HhSA6x.js';
import '../../chunks/bundle-BBGwVlcE.js';
import '../../chunks/bundle-iiHh_YqB.js';
import '../../chunks/bundle-BEUsrftF.js';
import 'react-dom';
import '@sendbird/chat';
import '@sendbird/chat/openChannel';
import '../../ui/SortByRow.js';
import '../../chunks/bundle-BGRwc73U.js';
import '../../chunks/bundle-CK7w7gep.js';
import '../../ui/MessageItemReactionMenu.js';
import '../../ui/ImageRenderer.js';
import '../../ui/ReactionButton.js';
import '../../chunks/bundle-BSieP1ow.js';
import '../../chunks/bundle-DvgqpwmQ.js';
import '../../ui/EmojiReactions.js';
import '../../ui/ReactionBadge.js';
import '../../ui/BottomSheet.js';
import '../../hooks/useModal.js';
import '../../chunks/bundle-ZMBEGemL.js';
import '../../ui/UserListItem.js';
import '../../chunks/bundle-ByW5tGii.js';
import '../../chunks/bundle-BkCv3z1C.js';
import '../../chunks/bundle-MdZYxYNf.js';
import '../../ui/MutedAvatarOverlay.js';
import '../../ui/Checkbox.js';
import '../../ui/UserProfile.js';
import '../../sendbirdSelectors.js';
import '../../chunks/bundle-DxUY6hv0.js';
import '../../ui/Tooltip.js';
import '../../ui/TooltipWrapper.js';
import '../../Message/context.js';
import '../../chunks/bundle-B61f7NvF.js';
import '../../ui/AdminMessage.js';
import '../../ui/QuoteMessage.js';
import '../../chunks/bundle-COu2UBrG.js';
import '@sendbird/chat/message';
import '../../ui/MobileMenu.js';
import '../../ui/ThreadReplies.js';
import '../../chunks/bundle-DEVtRtKL.js';
import '../../ui/OGMessageItemBody.js';
import '../../chunks/bundle-bLHW4VuD.js';
import '../../ui/MentionLabel.js';
import '../../ui/LinkLabel.js';
import '../../ui/TextMessageItemBody.js';
import '../../ui/FileMessageItemBody.js';
import '../../ui/TextButton.js';
import '../../chunks/bundle-CxdqLaUY.js';
import '../../ui/FileViewer.js';
import '../../chunks/bundle-CsZOw9J5.js';
import '../../ui/VoiceMessageItemBody.js';
import '../../ui/ProgressBar.js';
import '../../VoicePlayer/useVoicePlayer.js';
import '../../chunks/bundle-B6tSyuRm.js';
import '../../VoiceRecorder/context.js';
import '../../ui/PlaybackTime.js';
import '../../ui/ThumbnailMessageItemBody.js';
import '../../ui/UnknownMessageItemBody.js';
import '../../ui/TemplateMessageItemBody.js';
import '../../chunks/bundle-D9VCJ_xd.js';
import '../../ui/FallbackTemplateMessageItemBody.tsx.js';
import '../../ui/LoadingTemplateMessageItemBody.tsx.js';
import '../../ui/MessageFeedbackFailedModal.js';
import '../../ui/FeedbackIconButton.js';
import '../../ui/MobileFeedbackMenu.js';
import '../../ui/MessageFeedbackModal.js';
import '../../ui/Input.js';
import '../../chunks/bundle-C-Qr6Xbj.js';
import './SuggestedReplies.js';
import '../../chunks/bundle-CaZn7sCJ.js';
import '../../chunks/bundle-BoobDQ7G.js';
import '../../chunks/bundle-DiNcrytb.js';
import '../../chunks/bundle-DMQ4ARs5.js';
import '../../chunks/bundle-DtQBJOWR.js';
import '../../chunks/bundle-CCDeoxT_.js';
import '../../chunks/bundle-Dx43PGfx.js';

var Message = function (props) {
    var state = useSendbird().state;
    var config = state.config, emojiManager = state.emojiManager;
    var _a = useGroupChannel(), _b = _a.state, loading = _b.loading, currentChannel = _b.currentChannel, animatedMessageId = _b.animatedMessageId, replyType = _b.replyType, threadReplySelectType = _b.threadReplySelectType, isReactionEnabled = _b.isReactionEnabled, nicknamesMap = _b.nicknamesMap, renderUserMentionItem = _b.renderUserMentionItem, filterEmojiCategoryIds = _b.filterEmojiCategoryIds, onQuoteMessageClick = _b.onQuoteMessageClick, onReplyInThreadClick = _b.onReplyInThreadClick, onMessageAnimated = _b.onMessageAnimated, onBeforeDownloadFileMessage = _b.onBeforeDownloadFileMessage, messages = _b.messages, _c = _a.actions, toggleReaction = _c.toggleReaction, setQuoteMessage = _c.setQuoteMessage, setAnimatedMessageId = _c.setAnimatedMessageId, scrollToMessage = _c.scrollToMessage, updateUserMessage = _c.updateUserMessage, sendUserMessage = _c.sendUserMessage, resendMessage = _c.resendMessage, deleteMessage = _c.deleteMessage;
    var message = props.message;
    var initialized = !loading && Boolean(currentChannel);
    var shouldRenderSuggestedReplies = useIIFE(function () {
        var _a = config.groupChannel, enableSuggestedReplies = _a.enableSuggestedReplies, showSuggestedRepliesFor = _a.showSuggestedRepliesFor;
        // Use `allMessages[allMessages.length - 1]` instead of `currentGroupChannel.lastMessage`
        // because lastMessage is not updated when **Bot** sends messages
        var lastMessageInView = messages[messages.length - 1];
        var hasUnsentMessage = isSendableMessage(lastMessageInView) && lastMessageInView.sendingStatus !== 'succeeded';
        var showSuggestedReplies = showSuggestedRepliesFor === 'all_messages'
            ? true
            : message.messageId === lastMessageInView.messageId;
        return enableSuggestedReplies && getSuggestedReplies(message).length > 0 && !hasUnsentMessage && showSuggestedReplies;
    });
    return (React__default.createElement(MessageView, __assign({}, props, { channel: currentChannel, emojiContainer: emojiManager.emojiContainer, editInputDisabled: !initialized
            || isDisabledBecauseFrozen(currentChannel !== null && currentChannel !== void 0 ? currentChannel : undefined)
            || isDisabledBecauseMuted(currentChannel !== null && currentChannel !== void 0 ? currentChannel : undefined)
            || !config.isOnline, shouldRenderSuggestedReplies: shouldRenderSuggestedReplies, isReactionEnabled: isReactionEnabled !== null && isReactionEnabled !== void 0 ? isReactionEnabled : false, replyType: replyType !== null && replyType !== void 0 ? replyType : 'NONE', threadReplySelectType: threadReplySelectType !== null && threadReplySelectType !== void 0 ? threadReplySelectType : ThreadReplySelectType.PARENT, nicknamesMap: nicknamesMap, renderUserMentionItem: renderUserMentionItem, filterEmojiCategoryIds: filterEmojiCategoryIds, scrollToMessage: scrollToMessage, toggleReaction: toggleReaction, setQuoteMessage: setQuoteMessage, onQuoteMessageClick: onQuoteMessageClick, onReplyInThreadClick: onReplyInThreadClick, sendUserMessage: sendUserMessage, updateUserMessage: updateUserMessage, resendMessage: resendMessage, deleteMessage: deleteMessage, animatedMessageId: animatedMessageId, setAnimatedMessageId: setAnimatedMessageId, onMessageAnimated: onMessageAnimated, renderFileViewer: function (props) { return React__default.createElement(FileViewer, __assign({}, props)); }, renderRemoveMessageModal: function (props) { return React__default.createElement(RemoveMessageModal, __assign({}, props)); }, usedInLegacy: false, onBeforeDownloadFileMessage: onBeforeDownloadFileMessage })));
};

export { Message, Message as default };
//# sourceMappingURL=Message.js.map

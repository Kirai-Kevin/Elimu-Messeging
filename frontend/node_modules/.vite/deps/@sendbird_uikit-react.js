import {
  AccordionGroupProvider,
  ChannelList,
  EmojiManager,
  GroupChannel,
  GroupChannelList,
  MessageSearchPannel,
  MobileLayout,
  OpenChannelInput,
  OpenChannelMessageList$1,
  OpenChannelProvider,
  OpenChannelSettingsProvider,
  Thread,
  cssVars,
  kFormatter,
  mapColorKeys,
  pubSubFactory,
  schedulerFactory,
  useAccordionGroupContext,
  useDeepCompareEffect,
  useMarkAsDeliveredScheduler,
  useOnlineStatus,
  useOpenChannelContext,
  useOpenChannelSettingsContext,
  useSendbirdStateContext,
  useUnmount
} from "./chunk-IPWJWI74.js";
import "./chunk-CQ3PGAZU.js";
import "./chunk-4P4SLGZP.js";
import {
  Channel,
  GlobalModalProvider,
  TypingIndicatorType,
  VoicePlayerProvider,
  VoiceRecorderProvider,
  getCaseResolvedReplyType
} from "./chunk-ELYTTIPP.js";
import {
  ChannelSettings
} from "./chunk-JJFSYBLM.js";
import {
  APP_LAYOUT_ROOT,
  Avatar$1,
  Button,
  ButtonSizes,
  ButtonTypes,
  ContextMenu,
  EmojiReactionListRoot,
  Icon,
  IconButton,
  IconColors,
  IconTypes,
  Input,
  InputLabel,
  Label,
  LabelColors,
  LabelTypography,
  LocalizationContext,
  LocalizationProvider,
  MediaQueryProvider,
  MenuItem,
  MenuItems,
  MenuRoot,
  Modal,
  ModalRoot,
  MuteMenuItem,
  MutedAvatarOverlay,
  OperatorMenuItem,
  PlaceHolder,
  PlaceHolderTypes,
  SendbirdContext,
  TextButton,
  UIKitConfigProvider,
  UserListItem,
  UserProfile,
  __assign,
  __awaiter,
  __generator,
  __spreadArray,
  classnames,
  createSendbirdContextStore,
  deleteNullish,
  getOpenChannelAvatar,
  getStringSet,
  noop,
  pubSubTopics,
  sendbirdSelectors,
  useMediaQueryContext,
  useSendbird,
  useSendbirdStore,
  useUIKitConfig,
  useUserProfileContext
} from "./chunk-G45O5RRC.js";
import {
  CACHED_MESSAGE_TEMPLATES_KEY,
  CACHED_MESSAGE_TEMPLATES_TOKEN_KEY,
  DEFAULT_MULTIPLE_FILES_MESSAGE_LIMIT,
  DEFAULT_UPLOAD_SIZE_LIMIT,
  VOICE_PLAYER_ROOT_ID,
  VOICE_RECORDER_DEFAULT_MAX,
  VOICE_RECORDER_DEFAULT_MIN
} from "./chunk-5WPCGI6B.js";
import "./chunk-DHPKMF2M.js";
import {
  require_react_dom
} from "./chunk-G52XTN3B.js";
import "./chunk-7RQKLDUL.js";
import {
  require_react
} from "./chunk-LXGCQ6UQ.js";
import "./chunk-JVBXJ32W.js";
import "./chunk-NLX4ICU2.js";
import "./chunk-YS32VLIJ.js";
import {
  tn
} from "./chunk-TTFJWE4I.js";
import "./chunk-KXGQOUB2.js";
import {
  __toESM
} from "./chunk-ROME4SDB.js";

// node_modules/@sendbird/uikit-react/SendbirdProvider.js
var import_react = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
function uikitConfigMapper(_a) {
  var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8;
  var legacyConfig = _a.legacyConfig, _9 = _a.uikitOptions, uikitOptions = _9 === void 0 ? {} : _9;
  var replyType = legacyConfig.replyType, isMentionEnabled = legacyConfig.isMentionEnabled, isReactionEnabled = legacyConfig.isReactionEnabled, disableUserProfile = legacyConfig.disableUserProfile, isVoiceMessageEnabled = legacyConfig.isVoiceMessageEnabled, isTypingIndicatorEnabledOnChannelList = legacyConfig.isTypingIndicatorEnabledOnChannelList, isMessageReceiptStatusEnabledOnChannelList = legacyConfig.isMessageReceiptStatusEnabledOnChannelList, showSearchIcon = legacyConfig.showSearchIcon;
  return {
    common: {
      enableUsingDefaultUserProfile: (_c = (_b = uikitOptions.common) === null || _b === void 0 ? void 0 : _b.enableUsingDefaultUserProfile) !== null && _c !== void 0 ? _c : typeof disableUserProfile === "boolean" ? !disableUserProfile : void 0
    },
    groupChannel: {
      enableOgtag: (_d = uikitOptions.groupChannel) === null || _d === void 0 ? void 0 : _d.enableOgtag,
      enableMention: (_f = (_e = uikitOptions.groupChannel) === null || _e === void 0 ? void 0 : _e.enableMention) !== null && _f !== void 0 ? _f : isMentionEnabled,
      enableReactions: (_h = (_g = uikitOptions.groupChannel) === null || _g === void 0 ? void 0 : _g.enableReactions) !== null && _h !== void 0 ? _h : isReactionEnabled,
      enableReactionsSupergroup: (_j = uikitOptions.groupChannel) === null || _j === void 0 ? void 0 : _j.enableReactionsSupergroup,
      enableTypingIndicator: (_k = uikitOptions.groupChannel) === null || _k === void 0 ? void 0 : _k.enableTypingIndicator,
      enableVoiceMessage: (_m = (_l = uikitOptions.groupChannel) === null || _l === void 0 ? void 0 : _l.enableVoiceMessage) !== null && _m !== void 0 ? _m : isVoiceMessageEnabled,
      replyType: (_p = (_o = uikitOptions.groupChannel) === null || _o === void 0 ? void 0 : _o.replyType) !== null && _p !== void 0 ? _p : replyType != null ? getCaseResolvedReplyType(replyType).lowerCase : void 0,
      threadReplySelectType: (_q = uikitOptions.groupChannel) === null || _q === void 0 ? void 0 : _q.threadReplySelectType,
      input: {
        enableDocument: (_s = (_r = uikitOptions.groupChannel) === null || _r === void 0 ? void 0 : _r.input) === null || _s === void 0 ? void 0 : _s.enableDocument
      },
      typingIndicatorTypes: (_t = uikitOptions.groupChannel) === null || _t === void 0 ? void 0 : _t.typingIndicatorTypes,
      enableFeedback: (_u = uikitOptions.groupChannel) === null || _u === void 0 ? void 0 : _u.enableFeedback,
      enableSuggestedReplies: (_v = uikitOptions.groupChannel) === null || _v === void 0 ? void 0 : _v.enableSuggestedReplies,
      showSuggestedRepliesFor: (_w = uikitOptions.groupChannel) === null || _w === void 0 ? void 0 : _w.showSuggestedRepliesFor,
      suggestedRepliesDirection: (_x = uikitOptions.groupChannel) === null || _x === void 0 ? void 0 : _x.suggestedRepliesDirection,
      enableMarkdownForUserMessage: (_y = uikitOptions.groupChannel) === null || _y === void 0 ? void 0 : _y.enableMarkdownForUserMessage,
      enableFormTypeMessage: (_z = uikitOptions.groupChannel) === null || _z === void 0 ? void 0 : _z.enableFormTypeMessage
    },
    groupChannelList: {
      enableTypingIndicator: (_1 = (_0 = uikitOptions.groupChannelList) === null || _0 === void 0 ? void 0 : _0.enableTypingIndicator) !== null && _1 !== void 0 ? _1 : isTypingIndicatorEnabledOnChannelList,
      enableMessageReceiptStatus: (_3 = (_2 = uikitOptions.groupChannelList) === null || _2 === void 0 ? void 0 : _2.enableMessageReceiptStatus) !== null && _3 !== void 0 ? _3 : isMessageReceiptStatusEnabledOnChannelList
    },
    groupChannelSettings: {
      enableMessageSearch: (_5 = (_4 = uikitOptions.groupChannelSettings) === null || _4 === void 0 ? void 0 : _4.enableMessageSearch) !== null && _5 !== void 0 ? _5 : showSearchIcon
    },
    openChannel: {
      enableOgtag: (_6 = uikitOptions.openChannel) === null || _6 === void 0 ? void 0 : _6.enableOgtag,
      input: {
        enableDocument: (_8 = (_7 = uikitOptions.openChannel) === null || _7 === void 0 ? void 0 : _7.input) === null || _8 === void 0 ? void 0 : _8.enableDocument
      }
    }
  };
}
var uikitConfigStorage = {
  getItem: function(key) {
    return __awaiter(this, void 0, void 0, function() {
      var _a;
      return __generator(this, function(_b) {
        return [2, (_a = localStorage.getItem(key)) !== null && _a !== void 0 ? _a : null];
      });
    });
  },
  setItem: function(key, value) {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_a) {
        return [2, localStorage.setItem(key, value)];
      });
    });
  }
};
var VoiceMessageProvider = function(_a) {
  var children = _a.children;
  return import_react.default.createElement(
    VoicePlayerProvider,
    null,
    import_react.default.createElement(VoiceRecorderProvider, null, children)
  );
};
var LOG_LEVELS = {
  DEBUG: "debug",
  WARNING: "warning",
  ERROR: "error",
  INFO: "info",
  ALL: "all"
};
var colorLog = function(level) {
  switch (level) {
    case LOG_LEVELS.WARNING:
      return "color: Orange";
    case LOG_LEVELS.ERROR:
      return "color: Red";
    default:
      return "color: Gray";
  }
};
var printLog = function(_a) {
  var level = _a.level, title = _a.title, _b = _a.description, description = _b === void 0 ? "" : _b, _c = _a.payload, payload = _c === void 0 ? [] : _c;
  console.log.apply(console, __spreadArray(["%c SendbirdUIKit | ".concat(level, " | ").concat((/* @__PURE__ */ new Date()).toISOString(), " | ").concat(title, " ").concat(description && "|"), colorLog(level), description], payload, false));
};
var getDefaultLogger = function() {
  return {
    info: noop,
    error: noop,
    warning: noop
  };
};
var LoggerFactory = function(lvl, customInterface) {
  var logInterface = printLog;
  var lvlArray = Array.isArray(lvl) ? lvl : [lvl];
  var applyLog = function(lgLvl) {
    return function(title, description) {
      var payload = [];
      for (var _i = 2; _i < arguments.length; _i++) {
        payload[_i - 2] = arguments[_i];
      }
      return logInterface({
        level: lgLvl,
        title,
        description,
        payload
      });
    };
  };
  return lvlArray.reduce(function(accumulator, currentLvl) {
    if (currentLvl === LOG_LEVELS.DEBUG || currentLvl === LOG_LEVELS.ALL) {
      return __assign(__assign({}, accumulator), { info: applyLog(LOG_LEVELS.INFO), error: applyLog(LOG_LEVELS.ERROR), warning: applyLog(LOG_LEVELS.WARNING) });
    }
    if (currentLvl === LOG_LEVELS.INFO) {
      return __assign(__assign({}, accumulator), { info: applyLog(LOG_LEVELS.INFO) });
    }
    if (currentLvl === LOG_LEVELS.ERROR) {
      return __assign(__assign({}, accumulator), { error: applyLog(LOG_LEVELS.ERROR) });
    }
    if (currentLvl === LOG_LEVELS.WARNING) {
      return __assign(__assign({}, accumulator), { warning: applyLog(LOG_LEVELS.WARNING) });
    }
    return __assign({}, accumulator);
  }, getDefaultLogger());
};
var DEFAULT_COLOR_SET = {
  "--sendbird-dark-primary-500": "#4d2aa6",
  "--sendbird-dark-primary-400": "#6440C4",
  "--sendbird-dark-primary-300": "#7B53EF",
  "--sendbird-dark-primary-200": "#9E8CF5",
  "--sendbird-dark-primary-100": "#E2DFFF",
  "--sendbird-dark-secondary-500": "#007A7A",
  "--sendbird-dark-secondary-400": "#189A8D",
  "--sendbird-dark-secondary-300": "#2EBA9F",
  "--sendbird-dark-secondary-200": "#6FD6BE",
  "--sendbird-dark-secondary-100": "#AEF2DC",
  "--sendbird-dark-information-100": "#b2d9ff",
  "--sendbird-dark-error-500": "#A30E2D",
  "--sendbird-dark-error-400": "#C11F41",
  "--sendbird-dark-error-300": "#E53157",
  "--sendbird-dark-error-200": "#FF6183",
  "--sendbird-dark-error-100": "#FFABBD",
  "--sendbird-dark-background-700": "#000000",
  "--sendbird-dark-background-600": "#161616",
  "--sendbird-dark-background-500": "#2C2C2C",
  "--sendbird-dark-background-400": "#393939",
  "--sendbird-dark-background-300": "#A8A8A8",
  "--sendbird-dark-background-200": "#D9D9D9",
  "--sendbird-dark-background-100": "#F0F0F0",
  "--sendbird-dark-background-50": "#FFFFFF",
  "--sendbird-dark-overlay": "rgba(0, 0, 0, 0.32)",
  "--sendbird-dark-onlight-01": "rgba(0, 0, 0, 0.88)",
  "--sendbird-dark-onlight-02": "rgba(0, 0, 0, 0.50)",
  "--sendbird-dark-onlight-03": "rgba(0, 0, 0, 0.38)",
  "--sendbird-dark-onlight-04": "rgba(0, 0, 0, 0.12)",
  "--sendbird-dark-ondark-01": "rgba(255, 255, 255, 0.88)",
  "--sendbird-dark-ondark-02": "rgba(255, 255, 255, 0.50)",
  "--sendbird-dark-ondark-03": "rgba(255, 255, 255, 0.38)",
  "--sendbird-dark-ondark-04": "rgba(255, 255, 255, 0.12)",
  "--sendbird-dark-shadow-01": "0 1px 5px 0 rgba(33, 34, 66, 0.04), 0 0 3px 0 rgba(0, 0, 0, 0.08), 0 2px 1px 0 rgba(0, 0, 0, 0.12)",
  "--sendbird-dark-shadow-02": "0 3px 5px -3px rgba(33, 34, 66, 0.04), 0 3px 14px 2px rgba(0, 0, 0, 0.08), 0 8px 10px 1px rgba(0, 0, 0, 0.12)",
  "--sendbird-dark-shadow-03": "0 6px 10px -5px rgba(0, 0, 0, 0.04), 0 6px 30px 5px rgba(0, 0, 0, 0.08), 0 16px 24px 2px rgba(0, 0, 0, 0.12)",
  "--sendbird-dark-shadow-04": "0 9px 15px -7px rgba(0, 0, 0, 0.04), 0 9px 46px 8px rgba(0, 0, 0, 0.08), 0 24px 38px 3px rgba(0, 0, 0, 0.12)",
  "--sendbird-dark-shadow-message-input": "0 1px 5px 0 rgba(33, 34, 66, 0.12), 0 0 1px 0 rgba(33, 34, 66, 0.16), 0 2px 1px 0 rgba(33, 34, 66, 0.08), 0 1px 5px 0 rgba(0, 0, 0, 0.12)",
  "--sendbird-light-primary-500": "#4d2aa6",
  "--sendbird-light-primary-400": "#6440C4",
  "--sendbird-light-primary-300": "#7B53EF",
  "--sendbird-light-primary-200": "#9E8CF5",
  "--sendbird-light-primary-100": "#E2DFFF",
  "--sendbird-light-secondary-500": "#007A7A",
  "--sendbird-light-secondary-400": "#189A8D",
  "--sendbird-light-secondary-300": "#2EBA9F",
  "--sendbird-light-secondary-200": "#6FD6BE",
  "--sendbird-light-secondary-100": "#AEF2DC",
  "--sendbird-light-information-100": "#b2d9ff",
  "--sendbird-light-error-500": "#A30E2D",
  "--sendbird-light-error-400": "#C11F41",
  "--sendbird-light-error-300": "#E53157",
  "--sendbird-light-error-200": "#FF6183",
  "--sendbird-light-error-100": "#FFABBD",
  "--sendbird-light-background-700": "#000000",
  "--sendbird-light-background-600": "#161616",
  "--sendbird-light-background-500": "#2C2C2C",
  "--sendbird-light-background-400": "#393939",
  "--sendbird-light-background-300": "#A8A8A8",
  "--sendbird-light-background-200": "#D9D9D9",
  "--sendbird-light-background-100": "#F0F0F0",
  "--sendbird-light-background-50": " #FFFFFF",
  "--sendbird-light-overlay": "rgba(0, 0, 0, 0.32)",
  "--sendbird-light-onlight-01": "rgba(0, 0, 0, 0.88)",
  "--sendbird-light-onlight-02": "rgba(0, 0, 0, 0.50)",
  "--sendbird-light-onlight-03": "rgba(0, 0, 0, 0.38)",
  "--sendbird-light-onlight-04": "rgba(0, 0, 0, 0.12)",
  "--sendbird-light-ondark-01": "rgba(255, 255, 255, 0.88)",
  "--sendbird-light-ondark-02": "rgba(255, 255, 255, 0.50)",
  "--sendbird-light-ondark-03": "rgba(255, 255, 255, 0.38)",
  "--sendbird-light-ondark-04": "rgba(255, 255, 255, 0.12)",
  "--sendbird-light-shadow-01": "0 1px 5px 0 rgba(33, 34, 66, 0.04), 0 0 3px 0 rgba(0, 0, 0, 0.08), 0 2px 1px 0 rgba(0, 0, 0, 0.12)",
  "--sendbird-light-shadow-02": "0 3px 5px -3px rgba(33, 34, 66, 0.04), 0 3px 14px 2px rgba(0, 0, 0, 0.08), 0 8px 10px 1px rgba(0, 0, 0, 0.12)",
  "--sendbird-light-shadow-03": "0 6px 10px -5px rgba(0, 0, 0, 0.04), 0 6px 30px 5px rgba(0, 0, 0, 0.08), 0 16px 24px 2px rgba(0, 0, 0, 0.12)",
  "--sendbird-light-shadow-04": "0 9px 15px -7px rgba(0, 0, 0, 0.04), 0 9px 46px 8px rgba(0, 0, 0, 0.08), 0 24px 38px 3px rgba(0, 0, 0, 0.12)",
  "--sendbird-light-shadow-message-input": "0 1px 5px 0 rgba(33, 34, 66, 0.12), 0 0 1px 0 rgba(33, 34, 66, 0.16), 0 2px 1px 0 rgba(33, 34, 66, 0.08), 0 1px 5px 0 rgba(0, 0, 0, 0.12)"
};
var isEmpty = function(obj) {
  if (obj === null || obj === void 0) {
    return true;
  }
  for (var prop in obj) {
    if (obj.hasOwnProperty(prop)) {
      return false;
    }
  }
  return JSON.stringify(obj) === JSON.stringify({});
};
var useTheme = function(overrides) {
  (0, import_react.useLayoutEffect)(function() {
    if (!isEmpty(overrides)) {
      var variables = __assign(__assign({}, DEFAULT_COLOR_SET), mapColorKeys(overrides));
      cssVars({ variables });
    }
  }, [overrides]);
};
var MESSAGE_TEMPLATES_FETCH_LIMIT = 20;
var getProcessedTemplate = function(parsedTemplate) {
  return {
    version: Number(parsedTemplate.ui_template.version),
    uiTemplate: JSON.stringify(parsedTemplate.ui_template.body.items),
    colorVariables: parsedTemplate.color_variables
  };
};
var getProcessedTemplatesMap = function(parsedTemplates) {
  var processedTemplates = {};
  parsedTemplates.forEach(function(template) {
    processedTemplates[template.key] = getProcessedTemplate(template);
  });
  return processedTemplates;
};
function useMessageTemplateUtils(_a) {
  var _this = this;
  var _b;
  var sdk = _a.sdk, logger = _a.logger, appInfoStore = _a.appInfoStore, actions = _a.actions;
  var messageTemplatesInfo = appInfoStore === null || appInfoStore === void 0 ? void 0 : appInfoStore.messageTemplatesInfo;
  var getCachedTemplate = (0, import_react.useCallback)(function(key) {
    var _a2, _b2;
    if (!messageTemplatesInfo)
      return null;
    var cachedTemplate = null;
    var cachedMessageTemplates = (_a2 = messageTemplatesInfo === null || messageTemplatesInfo === void 0 ? void 0 : messageTemplatesInfo.templatesMap) !== null && _a2 !== void 0 ? _a2 : null;
    if (cachedMessageTemplates) {
      cachedTemplate = (_b2 = cachedMessageTemplates[key]) !== null && _b2 !== void 0 ? _b2 : null;
    }
    return cachedTemplate;
  }, [appInfoStore === null || appInfoStore === void 0 ? void 0 : appInfoStore.messageTemplatesInfo]);
  var fetchAllMessageTemplates = function(readySdk) {
    return __awaiter(_this, void 0, void 0, function() {
      var hasMore, paginationToken, fetchedTemplates, res;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            hasMore = true;
            paginationToken = null;
            fetchedTemplates = [];
            _a2.label = 1;
          case 1:
            if (!hasMore)
              return [3, 3];
            return [4, readySdk.message.getMessageTemplatesByToken(paginationToken, { limit: MESSAGE_TEMPLATES_FETCH_LIMIT })];
          case 2:
            res = _a2.sent();
            hasMore = res.hasMore;
            paginationToken = res.token;
            res.templates.forEach(function(messageTemplate) {
              fetchedTemplates.push(JSON.parse(messageTemplate.template));
            });
            return [3, 1];
          case 3:
            return [2, fetchedTemplates];
        }
      });
    });
  };
  var initializeMessageTemplatesInfo = function(readySdk) {
    return __awaiter(_this, void 0, void 0, function() {
      var sdkMessageTemplateToken, cachedMessageTemplatesToken, cachedMessageTemplates, parsedTemplates, newMessageTemplatesInfo, parsedTemplates, newMessageTemplatesInfo;
      var _a2;
      return __generator(this, function(_b2) {
        switch (_b2.label) {
          case 0:
            sdkMessageTemplateToken = (_a2 = readySdk.appInfo) === null || _a2 === void 0 ? void 0 : _a2.messageTemplateInfo.token;
            if (!sdkMessageTemplateToken) {
              localStorage.removeItem(CACHED_MESSAGE_TEMPLATES_TOKEN_KEY);
              localStorage.removeItem(CACHED_MESSAGE_TEMPLATES_KEY);
              return [
                2
                /*return*/
              ];
            }
            cachedMessageTemplatesToken = localStorage.getItem(CACHED_MESSAGE_TEMPLATES_TOKEN_KEY);
            cachedMessageTemplates = localStorage.getItem(CACHED_MESSAGE_TEMPLATES_KEY);
            if (!(!cachedMessageTemplatesToken || cachedMessageTemplatesToken !== sdkMessageTemplateToken))
              return [3, 2];
            return [4, fetchAllMessageTemplates(readySdk)];
          case 1:
            parsedTemplates = _b2.sent();
            newMessageTemplatesInfo = {
              token: sdkMessageTemplateToken,
              templatesMap: getProcessedTemplatesMap(parsedTemplates)
            };
            actions.initMessageTemplateInfo({ payload: newMessageTemplatesInfo });
            localStorage.setItem(CACHED_MESSAGE_TEMPLATES_TOKEN_KEY, sdkMessageTemplateToken);
            localStorage.setItem(CACHED_MESSAGE_TEMPLATES_KEY, JSON.stringify(parsedTemplates));
            return [3, 3];
          case 2:
            if (cachedMessageTemplatesToken && cachedMessageTemplatesToken === sdkMessageTemplateToken && cachedMessageTemplates) {
              parsedTemplates = JSON.parse(cachedMessageTemplates);
              newMessageTemplatesInfo = {
                token: sdkMessageTemplateToken,
                templatesMap: getProcessedTemplatesMap(parsedTemplates)
              };
              actions.initMessageTemplateInfo({ payload: newMessageTemplatesInfo });
            }
            _b2.label = 3;
          case 3:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  };
  var updateMessageTemplatesInfo = (0, import_react.useCallback)(function(templateKeys, messageId, requestedAt) {
    return __awaiter(_this, void 0, void 0, function() {
      var newParsedTemplates, hasMore, token, result, e_1, cachedMessageTemplates, parsedTemplates_1, existingKeys_1;
      var _a2;
      return __generator(this, function(_b2) {
        switch (_b2.label) {
          case 0:
            actions.upsertWaitingTemplateKeys({ keys: templateKeys, requestedAt });
            newParsedTemplates = [];
            _b2.label = 1;
          case 1:
            _b2.trys.push([1, 5, , 6]);
            hasMore = true;
            token = null;
            _b2.label = 2;
          case 2:
            if (!hasMore)
              return [3, 4];
            return [4, sdk.message.getMessageTemplatesByToken(token, {
              keys: templateKeys
            })];
          case 3:
            result = _b2.sent();
            result.templates.forEach(function(newTemplate) {
              newParsedTemplates.push(JSON.parse(newTemplate.template));
            });
            hasMore = result.hasMore;
            token = result.token;
            return [3, 2];
          case 4:
            return [3, 6];
          case 5:
            e_1 = _b2.sent();
            (_a2 = logger === null || logger === void 0 ? void 0 : logger.error) === null || _a2 === void 0 ? void 0 : _a2.call(logger, "Sendbird | fetchProcessedMessageTemplates failed", e_1, templateKeys);
            return [3, 6];
          case 6:
            if (newParsedTemplates.length > 0) {
              cachedMessageTemplates = localStorage.getItem(CACHED_MESSAGE_TEMPLATES_KEY);
              if (cachedMessageTemplates) {
                parsedTemplates_1 = JSON.parse(cachedMessageTemplates);
                existingKeys_1 = parsedTemplates_1.map(function(parsedTemplate) {
                  return parsedTemplate.key;
                });
                newParsedTemplates.forEach(function(newParsedTemplate) {
                  if (!existingKeys_1.includes(newParsedTemplate.key)) {
                    parsedTemplates_1.push(newParsedTemplate);
                  }
                });
                localStorage.setItem(CACHED_MESSAGE_TEMPLATES_KEY, JSON.stringify(parsedTemplates_1));
              } else {
                localStorage.setItem(CACHED_MESSAGE_TEMPLATES_KEY, JSON.stringify([newParsedTemplates]));
              }
              actions.upsertMessageTemplates({
                payload: newParsedTemplates.map(function(newParsedTemplate) {
                  return {
                    key: newParsedTemplate.key,
                    template: getProcessedTemplate(newParsedTemplate)
                  };
                })
              });
            } else {
              actions.markErrorWaitingTemplateKeys({
                keys: templateKeys,
                messageId
              });
            }
            return [
              2
              /*return*/
            ];
        }
      });
    });
  }, [
    actions.upsertMessageTemplates,
    actions.upsertWaitingTemplateKeys,
    (_b = sdk === null || sdk === void 0 ? void 0 : sdk.message) === null || _b === void 0 ? void 0 : _b.getMessageTemplatesByToken
  ]);
  return {
    getCachedTemplate,
    updateMessageTemplatesInfo,
    initializeMessageTemplatesInfo
  };
}
var useHTMLTextDirection = function(direction) {
  (0, import_react.useEffect)(function() {
    var targetElement = document.getElementById(VOICE_PLAYER_ROOT_ID);
    targetElement.parentElement.dir = direction;
  }, [direction]);
};
function useMarkAsReadScheduler(_a, _b) {
  var isConnected = _a.isConnected;
  var logger = _b.logger;
  var markAsReadScheduler = (0, import_react.useMemo)(function() {
    return schedulerFactory({
      logger,
      cb: function(channel) {
        try {
          channel.markAsRead();
        } catch (error) {
          logger.warning("Channel: Mark as delivered failed", { channel, error });
        }
      }
    });
  }, []);
  (0, import_react.useEffect)(function() {
    if (!isConnected) {
      markAsReadScheduler.clear();
    }
  }, [isConnected]);
  useUnmount(function() {
    markAsReadScheduler.clear();
  });
  return markAsReadScheduler;
}
var SendbirdContextManager = function(_a) {
  var _b;
  var appId = _a.appId, userId = _a.userId, accessToken = _a.accessToken, customApiHost = _a.customApiHost, customWebSocketHost = _a.customWebSocketHost, configureSession = _a.configureSession, _c = _a.theme, theme = _c === void 0 ? "light" : _c, logger = _a.logger, _d = _a.config, config = _d === void 0 ? {} : _d, _e = _a.nickname, nickname = _e === void 0 ? "" : _e, colorSet = _a.colorSet, _f = _a.profileUrl, profileUrl = _f === void 0 ? "" : _f, voiceRecord = _a.voiceRecord, userListQuery = _a.userListQuery, _g = _a.imageCompression, imageCompression = _g === void 0 ? {} : _g, _h = _a.allowProfileEdit, allowProfileEdit = _h === void 0 ? false : _h, _j = _a.disableMarkAsDelivered, disableMarkAsDelivered = _j === void 0 ? false : _j, renderUserProfile = _a.renderUserProfile, _onUserProfileMessage = _a.onUserProfileMessage, _onStartDirectMessage = _a.onStartDirectMessage, _k = _a.isUserIdUsedForNickname, isUserIdUsedForNickname = _k === void 0 ? true : _k, sdkInitParams = _a.sdkInitParams, customExtensionParams = _a.customExtensionParams, _l = _a.isMultipleFilesMessageEnabled, isMultipleFilesMessageEnabled = _l === void 0 ? false : _l, eventHandlers = _a.eventHandlers, _m = _a.htmlTextDirection, htmlTextDirection = _m === void 0 ? "ltr" : _m, _o = _a.forceLeftToRightMessageLayout, forceLeftToRightMessageLayout = _o === void 0 ? false : _o;
  var onStartDirectMessage = _onStartDirectMessage !== null && _onStartDirectMessage !== void 0 ? _onStartDirectMessage : _onUserProfileMessage;
  var _p = config.userMention, userMention = _p === void 0 ? {} : _p, _q = config.isREMUnitEnabled, isREMUnitEnabled = _q === void 0 ? false : _q, customPubSub = config.pubSub;
  var isMobile = useMediaQueryContext().isMobile;
  var pubSub = (0, import_react.useState)(customPubSub !== null && customPubSub !== void 0 ? customPubSub : pubSubFactory())[0];
  var _r = useSendbirdStore(), state = _r.state, updateState = _r.updateState;
  var actions = useSendbird().actions;
  var _s = state.stores, sdkStore = _s.sdkStore, appInfoStore = _s.appInfoStore;
  var _t = useUIKitConfig(), configs = _t.configs, configsWithAppAttr = _t.configsWithAppAttr, initDashboardConfigs = _t.initDashboardConfigs;
  var sdkInitialized = sdkStore.initialized;
  var sdk = sdkStore === null || sdkStore === void 0 ? void 0 : sdkStore.sdk;
  var _u = (_b = sdk === null || sdk === void 0 ? void 0 : sdk.appInfo) !== null && _b !== void 0 ? _b : {}, uploadSizeLimit = _u.uploadSizeLimit, multipleFilesMessageFileCountLimit = _u.multipleFilesMessageFileCountLimit;
  useTheme(colorSet);
  var _v = useMessageTemplateUtils({
    sdk,
    logger,
    appInfoStore,
    actions
  }), getCachedTemplate = _v.getCachedTemplate, updateMessageTemplatesInfo = _v.updateMessageTemplatesInfo, initializeMessageTemplatesInfo = _v.initializeMessageTemplatesInfo;
  (0, import_react.useEffect)(function() {
    actions.connect({
      appId,
      userId,
      accessToken,
      isUserIdUsedForNickname,
      isMobile,
      logger,
      nickname,
      profileUrl,
      configureSession,
      customApiHost,
      customWebSocketHost,
      sdkInitParams,
      customExtensionParams,
      initDashboardConfigs,
      eventHandlers,
      initializeMessageTemplatesInfo
    });
  }, [appId, userId]);
  useUnmount(function() {
    actions.disconnect({ logger });
  });
  var _w = (0, import_react.useState)(theme), currentTheme = _w[0], setCurrentTheme = _w[1];
  (0, import_react.useEffect)(function() {
    setCurrentTheme(theme);
  }, [theme]);
  (0, import_react.useEffect)(function() {
    var body = document.querySelector("body");
    body === null || body === void 0 ? void 0 : body.classList.remove("sendbird-experimental__rem__units");
    if (isREMUnitEnabled) {
      body === null || body === void 0 ? void 0 : body.classList.add("sendbird-experimental__rem__units");
    }
  }, [isREMUnitEnabled]);
  (0, import_react.useEffect)(function() {
    logger.info("Setup theme", "Theme: ".concat(currentTheme));
    try {
      var body = document.querySelector("body");
      body === null || body === void 0 ? void 0 : body.classList.remove("sendbird-theme--light");
      body === null || body === void 0 ? void 0 : body.classList.remove("sendbird-theme--dark");
      body === null || body === void 0 ? void 0 : body.classList.add("sendbird-theme--".concat(currentTheme || "light"));
      logger.info("Finish setup theme");
    } catch (e) {
      logger.warning("Setup theme failed", "".concat(e));
    }
    return function() {
      try {
        var body2 = document.querySelector("body");
        body2 === null || body2 === void 0 ? void 0 : body2.classList.remove("sendbird-theme--light");
        body2 === null || body2 === void 0 ? void 0 : body2.classList.remove("sendbird-theme--dark");
      } catch (_a2) {
      }
    };
  }, [currentTheme]);
  useHTMLTextDirection(htmlTextDirection);
  var isOnline = useOnlineStatus(sdkStore.sdk, logger);
  var markAsReadScheduler = useMarkAsReadScheduler({ isConnected: isOnline }, { logger });
  var markAsDeliveredScheduler = useMarkAsDeliveredScheduler({ isConnected: isOnline }, { logger });
  var uikitMultipleFilesMessageLimit = (0, import_react.useMemo)(function() {
    return Math.min(DEFAULT_MULTIPLE_FILES_MESSAGE_LIMIT, multipleFilesMessageFileCountLimit !== null && multipleFilesMessageFileCountLimit !== void 0 ? multipleFilesMessageFileCountLimit : Number.MAX_SAFE_INTEGER);
  }, [multipleFilesMessageFileCountLimit]);
  var emojiManager = (0, import_react.useMemo)(function() {
    return new EmojiManager({
      sdk,
      logger
    });
  }, [sdkStore.initialized]);
  var uikitConfigs = (0, import_react.useMemo)(function() {
    return {
      common: {
        enableUsingDefaultUserProfile: configs.common.enableUsingDefaultUserProfile
      },
      groupChannel: {
        enableOgtag: sdkInitialized && configsWithAppAttr(sdk).groupChannel.channel.enableOgtag,
        enableTypingIndicator: configs.groupChannel.channel.enableTypingIndicator,
        enableReactions: sdkInitialized && configsWithAppAttr(sdk).groupChannel.channel.enableReactions,
        enableMention: configs.groupChannel.channel.enableMention,
        replyType: configs.groupChannel.channel.replyType,
        threadReplySelectType: configs.groupChannel.channel.threadReplySelectType,
        enableVoiceMessage: configs.groupChannel.channel.enableVoiceMessage,
        enableDocument: configs.groupChannel.channel.input.enableDocument,
        typingIndicatorTypes: configs.groupChannel.channel.typingIndicatorTypes,
        enableFeedback: configs.groupChannel.channel.enableFeedback,
        enableSuggestedReplies: configs.groupChannel.channel.enableSuggestedReplies,
        showSuggestedRepliesFor: configs.groupChannel.channel.showSuggestedRepliesFor,
        suggestedRepliesDirection: configs.groupChannel.channel.suggestedRepliesDirection,
        enableMarkdownForUserMessage: configs.groupChannel.channel.enableMarkdownForUserMessage,
        enableFormTypeMessage: configs.groupChannel.channel.enableFormTypeMessage,
        enableReactionsSupergroup: sdkInitialized && configsWithAppAttr(sdk).groupChannel.channel.enableReactionsSupergroup
      },
      groupChannelList: {
        enableTypingIndicator: configs.groupChannel.channelList.enableTypingIndicator,
        enableMessageReceiptStatus: configs.groupChannel.channelList.enableMessageReceiptStatus
      },
      groupChannelSettings: {
        enableMessageSearch: sdkInitialized && configsWithAppAttr(sdk).groupChannel.setting.enableMessageSearch
      },
      openChannel: {
        enableOgtag: sdkInitialized && configsWithAppAttr(sdk).openChannel.channel.enableOgtag,
        enableDocument: configs.openChannel.channel.input.enableDocument
      }
    };
  }, [
    sdkInitialized,
    configs.common,
    configs.groupChannel.channel,
    configs.groupChannel.channelList,
    configs.groupChannel.setting,
    configs.openChannel.channel
  ]);
  var storeState = (0, import_react.useMemo)(function() {
    return {
      stores: {
        sdkStore: state.stores.sdkStore,
        userStore: state.stores.userStore,
        appInfoStore: state.stores.appInfoStore
      }
    };
  }, [
    state.stores.sdkStore,
    state.stores.userStore,
    state.stores.appInfoStore
  ]);
  var uikitUploadSizeLimit = (0, import_react.useMemo)(function() {
    return uploadSizeLimit !== null && uploadSizeLimit !== void 0 ? uploadSizeLimit : DEFAULT_UPLOAD_SIZE_LIMIT;
  }, [uploadSizeLimit, DEFAULT_UPLOAD_SIZE_LIMIT]);
  var configImageCompression = (0, import_react.useMemo)(function() {
    return __assign({ compressionRate: 0.7, outputFormat: "preserve" }, imageCompression);
  }, [imageCompression]);
  var configVoiceRecord = (0, import_react.useMemo)(function() {
    var _a2, _b2;
    return {
      maxRecordingTime: (_a2 = voiceRecord === null || voiceRecord === void 0 ? void 0 : voiceRecord.maxRecordingTime) !== null && _a2 !== void 0 ? _a2 : VOICE_RECORDER_DEFAULT_MAX,
      minRecordingTime: (_b2 = voiceRecord === null || voiceRecord === void 0 ? void 0 : voiceRecord.minRecordingTime) !== null && _b2 !== void 0 ? _b2 : VOICE_RECORDER_DEFAULT_MIN
    };
  }, [
    voiceRecord === null || voiceRecord === void 0 ? void 0 : voiceRecord.maxRecordingTime,
    voiceRecord === null || voiceRecord === void 0 ? void 0 : voiceRecord.minRecordingTime
  ]);
  var configUserMention = (0, import_react.useMemo)(function() {
    return {
      maxMentionCount: (userMention === null || userMention === void 0 ? void 0 : userMention.maxMentionCount) || 10,
      maxSuggestionCount: (userMention === null || userMention === void 0 ? void 0 : userMention.maxSuggestionCount) || 15
    };
  }, [
    userMention === null || userMention === void 0 ? void 0 : userMention.maxMentionCount,
    userMention === null || userMention === void 0 ? void 0 : userMention.maxSuggestionCount
  ]);
  var deprecatedConfigs = (0, import_react.useMemo)(function() {
    return {
      disableUserProfile: !configs.common.enableUsingDefaultUserProfile,
      isReactionEnabled: sdkInitialized && configsWithAppAttr(sdk).groupChannel.channel.enableReactions,
      isMentionEnabled: configs.groupChannel.channel.enableMention,
      isVoiceMessageEnabled: configs.groupChannel.channel.enableVoiceMessage,
      replyType: getCaseResolvedReplyType(configs.groupChannel.channel.replyType).upperCase,
      isTypingIndicatorEnabledOnChannelList: configs.groupChannel.channelList.enableTypingIndicator,
      isMessageReceiptStatusEnabledOnChannelList: configs.groupChannel.channelList.enableMessageReceiptStatus,
      showSearchIcon: sdkInitialized && configsWithAppAttr(sdk).groupChannel.setting.enableMessageSearch
    };
  }, [
    sdkInitialized,
    configsWithAppAttr,
    configs.common.enableUsingDefaultUserProfile,
    configs.groupChannel.channel.enableReactions,
    configs.groupChannel.channel.enableMention,
    configs.groupChannel.channel.enableVoiceMessage,
    configs.groupChannel.channel.replyType,
    configs.groupChannel.channelList.enableTypingIndicator,
    configs.groupChannel.channelList.enableMessageReceiptStatus,
    configs.groupChannel.setting.enableMessageSearch
  ]);
  var configState = (0, import_react.useMemo)(function() {
    return {
      config: __assign(__assign({
        disableMarkAsDelivered,
        renderUserProfile,
        onStartDirectMessage,
        onUserProfileMessage: onStartDirectMessage,
        // legacy of onStartDirectMessage
        allowProfileEdit,
        isOnline,
        userId,
        appId,
        accessToken,
        theme: currentTheme,
        setCurrentTheme,
        setCurrenttheme: setCurrentTheme,
        // deprecated: typo
        isMultipleFilesMessageEnabled,
        uikitMultipleFilesMessageLimit,
        logger,
        pubSub,
        userListQuery,
        htmlTextDirection,
        forceLeftToRightMessageLayout,
        markAsReadScheduler,
        markAsDeliveredScheduler,
        uikitUploadSizeLimit,
        imageCompression: configImageCompression,
        voiceRecord: configVoiceRecord,
        userMention: configUserMention
      }, uikitConfigs), deprecatedConfigs)
    };
  }, [
    disableMarkAsDelivered,
    renderUserProfile,
    onStartDirectMessage,
    allowProfileEdit,
    isOnline,
    userId,
    appId,
    accessToken,
    currentTheme,
    setCurrentTheme,
    isMultipleFilesMessageEnabled,
    uikitMultipleFilesMessageLimit,
    logger,
    pubSub,
    userListQuery,
    htmlTextDirection,
    forceLeftToRightMessageLayout,
    markAsReadScheduler,
    markAsDeliveredScheduler,
    uikitUploadSizeLimit,
    configImageCompression,
    configVoiceRecord,
    configUserMention,
    uikitConfigs,
    deprecatedConfigs
  ]);
  var utilsState = (0, import_react.useMemo)(function() {
    return {
      utils: {
        updateMessageTemplatesInfo,
        getCachedTemplate
      }
    };
  }, [
    updateMessageTemplatesInfo,
    getCachedTemplate
  ]);
  useDeepCompareEffect(function() {
    updateState(__assign(__assign(__assign(__assign({}, storeState), utilsState), configState), { eventHandlers, emojiManager }));
  }, [
    storeState,
    configState,
    eventHandlers,
    emojiManager,
    utilsState
  ]);
  return null;
};
var InternalSendbirdProvider = function(props) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _j;
  var children = props.children, stringSet = props.stringSet, breakpoint = props.breakpoint, dateLocale = props.dateLocale;
  var defaultProps = deleteNullish({
    config: {
      renderUserProfile: props === null || props === void 0 ? void 0 : props.renderUserProfile,
      onStartDirectMessage: props === null || props === void 0 ? void 0 : props.onStartDirectMessage,
      allowProfileEdit: props === null || props === void 0 ? void 0 : props.allowProfileEdit,
      appId: props === null || props === void 0 ? void 0 : props.appId,
      userId: props === null || props === void 0 ? void 0 : props.userId,
      accessToken: props === null || props === void 0 ? void 0 : props.accessToken,
      theme: props === null || props === void 0 ? void 0 : props.theme,
      htmlTextDirection: props === null || props === void 0 ? void 0 : props.htmlTextDirection,
      forceLeftToRightMessageLayout: props === null || props === void 0 ? void 0 : props.forceLeftToRightMessageLayout,
      pubSub: (_a = props === null || props === void 0 ? void 0 : props.config) === null || _a === void 0 ? void 0 : _a.pubSub,
      logger: props === null || props === void 0 ? void 0 : props.logger,
      userListQuery: props === null || props === void 0 ? void 0 : props.userListQuery,
      voiceRecord: {
        maxRecordingTime: (_c = (_b = props === null || props === void 0 ? void 0 : props.voiceRecord) === null || _b === void 0 ? void 0 : _b.maxRecordingTime) !== null && _c !== void 0 ? _c : VOICE_RECORDER_DEFAULT_MAX,
        minRecordingTime: (_e = (_d = props === null || props === void 0 ? void 0 : props.voiceRecord) === null || _d === void 0 ? void 0 : _d.minRecordingTime) !== null && _e !== void 0 ? _e : VOICE_RECORDER_DEFAULT_MIN
      },
      userMention: {
        maxMentionCount: ((_g = (_f = props === null || props === void 0 ? void 0 : props.config) === null || _f === void 0 ? void 0 : _f.userMention) === null || _g === void 0 ? void 0 : _g.maxMentionCount) || 10,
        maxSuggestionCount: ((_j = (_h = props === null || props === void 0 ? void 0 : props.config) === null || _h === void 0 ? void 0 : _h.userMention) === null || _j === void 0 ? void 0 : _j.maxSuggestionCount) || 15
      },
      imageCompression: __assign({ compressionRate: 0.7, outputFormat: "preserve" }, props === null || props === void 0 ? void 0 : props.imageCompression),
      disableMarkAsDelivered: props === null || props === void 0 ? void 0 : props.disableMarkAsDelivered,
      isMultipleFilesMessageEnabled: props === null || props === void 0 ? void 0 : props.isMultipleFilesMessageEnabled
    },
    eventHandlers: props === null || props === void 0 ? void 0 : props.eventHandlers
  });
  var storeRef = (0, import_react.useRef)(createSendbirdContextStore(defaultProps));
  var localeStringSet = (0, import_react.useMemo)(function() {
    return __assign(__assign({}, getStringSet("en")), stringSet);
  }, [stringSet]);
  return import_react.default.createElement(
    SendbirdContext.Provider,
    { value: storeRef.current },
    import_react.default.createElement(
      MediaQueryProvider,
      { logger: storeRef.current.getState().config.logger, breakpoint },
      import_react.default.createElement(
        LocalizationProvider,
        { stringSet: localeStringSet, dateLocale },
        import_react.default.createElement(
          VoiceMessageProvider,
          null,
          import_react.default.createElement(GlobalModalProvider, null, children)
        )
      )
    ),
    import_react.default.createElement(EmojiReactionListRoot, null),
    import_react.default.createElement(ModalRoot, null),
    import_react.default.createElement(MenuRoot, null)
  );
};
var SendbirdContextProvider = function(props) {
  var children = props.children, config = props.config;
  var logLevel = config === null || config === void 0 ? void 0 : config.logLevel;
  var _a = (0, import_react.useState)(LoggerFactory(logLevel)), logger = _a[0], setLogger = _a[1];
  (0, import_react.useEffect)(function() {
    setLogger(LoggerFactory(logLevel));
  }, [logLevel]);
  return import_react.default.createElement(
    InternalSendbirdProvider,
    __assign({}, props, { logger }),
    import_react.default.createElement(SendbirdContextManager, __assign({}, props, { logger })),
    children
  );
};
var SendbirdProvider = function(props) {
  var localConfigs = uikitConfigMapper({
    legacyConfig: {
      replyType: props.replyType,
      isMentionEnabled: props.isMentionEnabled,
      isReactionEnabled: props.isReactionEnabled,
      disableUserProfile: props.disableUserProfile,
      isVoiceMessageEnabled: props.isVoiceMessageEnabled,
      isTypingIndicatorEnabledOnChannelList: props.isTypingIndicatorEnabledOnChannelList,
      isMessageReceiptStatusEnabledOnChannelList: props.isMessageReceiptStatusEnabledOnChannelList,
      showSearchIcon: props.showSearchIcon
    },
    uikitOptions: props.uikitOptions
  });
  return import_react.default.createElement(
    UIKitConfigProvider,
    { storage: uikitConfigStorage, localConfigs: {
      common: localConfigs === null || localConfigs === void 0 ? void 0 : localConfigs.common,
      groupChannel: {
        channel: localConfigs === null || localConfigs === void 0 ? void 0 : localConfigs.groupChannel,
        channelList: localConfigs === null || localConfigs === void 0 ? void 0 : localConfigs.groupChannelList,
        setting: localConfigs === null || localConfigs === void 0 ? void 0 : localConfigs.groupChannelSettings
      },
      openChannel: {
        channel: localConfigs === null || localConfigs === void 0 ? void 0 : localConfigs.openChannel
      }
    } },
    import_react.default.createElement(SendbirdContextProvider, __assign({}, props))
  );
};
var withSendbirdContext = function(OriginalComponent, mapStoreToProps) {
  var ContextAwareComponent = function(props) {
    var _a = useSendbird(), state = _a.state, actions = _a.actions;
    var context = __assign(__assign({}, state), actions);
    if (!mapStoreToProps || typeof mapStoreToProps !== "function") {
      console.warn("Second parameter to withSendbirdContext must be a pure function");
    }
    var mergedProps = mapStoreToProps && typeof mapStoreToProps === "function" ? __assign(__assign({}, mapStoreToProps(context)), props) : __assign(__assign({}, context), props);
    return import_react.default.createElement(
      import_react.default.Fragment,
      null,
      import_react.default.createElement(OriginalComponent, __assign({}, mergedProps))
    );
  };
  var componentName = OriginalComponent.displayName || OriginalComponent.name || "Component";
  ContextAwareComponent.displayName = "SendbirdAware".concat(componentName);
  return ContextAwareComponent;
};
var withSendBird = withSendbirdContext;

// node_modules/@sendbird/uikit-react/App.js
var import_react2 = __toESM(require_react(), 1);
var import_react_dom2 = __toESM(require_react_dom(), 1);
var DesktopLayout = function(props) {
  var isReactionEnabled = props.isReactionEnabled, replyType = props.replyType, isMessageGroupingEnabled = props.isMessageGroupingEnabled, isMultipleFilesMessageEnabled = props.isMultipleFilesMessageEnabled, allowProfileEdit = props.allowProfileEdit, showSearchIcon = props.showSearchIcon, onProfileEditSuccess = props.onProfileEditSuccess, disableAutoSelect = props.disableAutoSelect, currentChannel = props.currentChannel, setCurrentChannel = props.setCurrentChannel, showSettings = props.showSettings, setShowSettings = props.setShowSettings, showSearch = props.showSearch, setShowSearch = props.setShowSearch, highlightedMessage = props.highlightedMessage, setHighlightedMessage = props.setHighlightedMessage, startingPoint = props.startingPoint, setStartingPoint = props.setStartingPoint, showThread = props.showThread, setShowThread = props.setShowThread, threadTargetMessage = props.threadTargetMessage, setThreadTargetMessage = props.setThreadTargetMessage, enableLegacyChannelModules = props.enableLegacyChannelModules;
  var updateFocusedChannel = function(channel) {
    setStartingPoint === null || setStartingPoint === void 0 ? void 0 : setStartingPoint(null);
    setHighlightedMessage === null || setHighlightedMessage === void 0 ? void 0 : setHighlightedMessage(null);
    if (channel) {
      setCurrentChannel(channel);
    } else {
      setCurrentChannel(void 0);
    }
  };
  var onClickThreadReply = function(_a) {
    var message = _a.message;
    setShowSettings(false);
    setShowSearch(false);
    if (replyType === "THREAD") {
      setThreadTargetMessage(message);
      setShowThread(true);
    }
  };
  var channelListProps = {
    allowProfileEdit,
    activeChannelUrl: currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url,
    onProfileEditSuccess,
    disableAutoSelect,
    onChannelSelect: updateFocusedChannel,
    // for GroupChannelList
    selectedChannelUrl: currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url,
    onChannelCreated: updateFocusedChannel,
    onUserProfileUpdated: onProfileEditSuccess
  };
  var channelProps = {
    channelUrl: (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) || "",
    onChatHeaderActionClick: function() {
      setShowSearch(false);
      setShowThread(false);
      setShowSettings(!showSettings);
    },
    onSearchClick: function() {
      setShowSettings(false);
      setShowThread(false);
      setShowSearch(!showSearch);
    },
    onReplyInThread: onClickThreadReply,
    onQuoteMessageClick: function(_a) {
      var message = _a.message;
      setShowSettings(false);
      setShowSearch(false);
      if (replyType === "THREAD") {
        setThreadTargetMessage(message);
        setShowThread(true);
      }
    },
    animatedMessage: highlightedMessage,
    onMessageAnimated: function() {
      return setHighlightedMessage === null || setHighlightedMessage === void 0 ? void 0 : setHighlightedMessage(null);
    },
    showSearchIcon,
    startingPoint: startingPoint !== null && startingPoint !== void 0 ? startingPoint : void 0,
    isReactionEnabled,
    replyType,
    isMessageGroupingEnabled,
    isMultipleFilesMessageEnabled,
    // for GroupChannel
    animatedMessageId: highlightedMessage,
    onReplyInThreadClick: onClickThreadReply
  };
  return import_react2.default.createElement(
    "div",
    { className: "sendbird-app__wrap", id: APP_LAYOUT_ROOT },
    import_react2.default.createElement("div", { className: "sendbird-app__channellist-wrap" }, enableLegacyChannelModules ? import_react2.default.createElement(ChannelList, __assign({}, channelListProps)) : import_react2.default.createElement(GroupChannelList, __assign({}, channelListProps))),
    import_react2.default.createElement("div", { className: classnames("sendbird-app__conversation-wrap", showSettings && "sendbird-app__conversation--settings-open", showSearch && "sendbird-app__conversation--search-open") }, enableLegacyChannelModules ? import_react2.default.createElement(Channel, __assign({}, channelProps)) : import_react2.default.createElement(GroupChannel, __assign({}, channelProps))),
    showSettings && import_react2.default.createElement(
      "div",
      { className: "sendbird-app__settingspanel-wrap" },
      import_react2.default.createElement(ChannelSettings, { className: "sendbird-channel-settings", channelUrl: (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) || "", onCloseClick: function() {
        setShowSettings(false);
      } })
    ),
    showSearch && import_react2.default.createElement(
      "div",
      { className: "sendbird-app__searchpanel-wrap" },
      import_react2.default.createElement(MessageSearchPannel, { channelUrl: (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) || "", onResultClick: function(message) {
        if (message.messageId === highlightedMessage) {
          setHighlightedMessage === null || setHighlightedMessage === void 0 ? void 0 : setHighlightedMessage(null);
          setTimeout(function() {
            setHighlightedMessage === null || setHighlightedMessage === void 0 ? void 0 : setHighlightedMessage(message.messageId);
          });
        } else {
          setStartingPoint === null || setStartingPoint === void 0 ? void 0 : setStartingPoint(message.createdAt);
          setHighlightedMessage === null || setHighlightedMessage === void 0 ? void 0 : setHighlightedMessage(message.messageId);
        }
      }, onCloseClick: function() {
        setShowSearch(false);
      } })
    ),
    showThread && import_react2.default.createElement(Thread, { className: "sendbird-app__thread", channelUrl: (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url) || "", message: threadTargetMessage, onHeaderActionClick: function() {
      setShowThread(false);
    }, onMoveToParentMessage: function(_a) {
      var message = _a.message, channel = _a.channel;
      if ((channel === null || channel === void 0 ? void 0 : channel.url) !== (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url)) {
        setCurrentChannel(channel);
      }
      setTimeout(function() {
        if ((message === null || message === void 0 ? void 0 : message.messageId) !== highlightedMessage) {
          setStartingPoint === null || setStartingPoint === void 0 ? void 0 : setStartingPoint(message === null || message === void 0 ? void 0 : message.createdAt);
        }
      }, 200);
      setTimeout(function() {
        setStartingPoint === null || setStartingPoint === void 0 ? void 0 : setStartingPoint(null);
        setHighlightedMessage === null || setHighlightedMessage === void 0 ? void 0 : setHighlightedMessage(message === null || message === void 0 ? void 0 : message.messageId);
      }, 500);
    } })
  );
};
var AppLayout = function(props) {
  var _a, _b, _c;
  var isMessageGroupingEnabled = props.isMessageGroupingEnabled, allowProfileEdit = props.allowProfileEdit, onProfileEditSuccess = props.onProfileEditSuccess, disableAutoSelect = props.disableAutoSelect, currentChannel = props.currentChannel, setCurrentChannel = props.setCurrentChannel, enableLegacyChannelModules = props.enableLegacyChannelModules;
  var state = useSendbird().state;
  var globalConfigs = state.config;
  var _d = (0, import_react2.useState)(false), showThread = _d[0], setShowThread = _d[1];
  var _e = (0, import_react2.useState)(null), threadTargetMessage = _e[0], setThreadTargetMessage = _e[1];
  var _f = (0, import_react2.useState)(false), showSettings = _f[0], setShowSettings = _f[1];
  var _g = (0, import_react2.useState)(false), showSearch = _g[0], setShowSearch = _g[1];
  var _h = (0, import_react2.useState)(null), highlightedMessage = _h[0], setHighlightedMessage = _h[1];
  var _j = (0, import_react2.useState)(null), startingPoint = _j[0], setStartingPoint = _j[1];
  var isMobile = useMediaQueryContext().isMobile;
  var replyType = (_a = props.replyType) !== null && _a !== void 0 ? _a : getCaseResolvedReplyType(globalConfigs.groupChannel.replyType).upperCase;
  var isReactionEnabled = (_b = props.isReactionEnabled) !== null && _b !== void 0 ? _b : globalConfigs.groupChannel.enableReactions;
  var showSearchIcon = (_c = props.showSearchIcon) !== null && _c !== void 0 ? _c : globalConfigs.groupChannelSettings.enableMessageSearch;
  return import_react2.default.createElement(import_react2.default.Fragment, null, isMobile ? import_react2.default.createElement(MobileLayout, { replyType, showSearchIcon, isReactionEnabled, isMessageGroupingEnabled, allowProfileEdit, onProfileEditSuccess, currentChannel, setCurrentChannel, highlightedMessage, setHighlightedMessage, startingPoint, setStartingPoint, threadTargetMessage, setThreadTargetMessage, enableLegacyChannelModules }) : import_react2.default.createElement(DesktopLayout, { replyType, isReactionEnabled, showSearchIcon, isMessageGroupingEnabled, allowProfileEdit, onProfileEditSuccess, disableAutoSelect, currentChannel, setCurrentChannel, showThread, setShowThread, threadTargetMessage, setThreadTargetMessage, showSettings, setShowSettings, showSearch, setShowSearch, highlightedMessage, setHighlightedMessage, startingPoint, setStartingPoint, enableLegacyChannelModules }));
};
function App(props) {
  var appId = props.appId, userId = props.userId, _a = props.accessToken, accessToken = _a === void 0 ? "" : _a, _b = props.customApiHost, customApiHost = _b === void 0 ? "" : _b, _c = props.customWebSocketHost, customWebSocketHost = _c === void 0 ? "" : _c, breakpoint = props.breakpoint, _d = props.theme, theme = _d === void 0 ? "light" : _d, userListQuery = props.userListQuery, _e = props.nickname, nickname = _e === void 0 ? "" : _e, _f = props.profileUrl, profileUrl = _f === void 0 ? "" : _f, dateLocale = props.dateLocale, _g = props.config, config = _g === void 0 ? {} : _g, voiceRecord = props.voiceRecord, _h = props.isMessageGroupingEnabled, isMessageGroupingEnabled = _h === void 0 ? true : _h, colorSet = props.colorSet, stringSet = props.stringSet, _j = props.allowProfileEdit, allowProfileEdit = _j === void 0 ? false : _j, _k = props.disableMarkAsDelivered, disableMarkAsDelivered = _k === void 0 ? false : _k, renderUserProfile = props.renderUserProfile, onProfileEditSuccess = props.onProfileEditSuccess, _l = props.imageCompression, imageCompression = _l === void 0 ? {} : _l, _m = props.disableAutoSelect, disableAutoSelect = _m === void 0 ? false : _m, sdkInitParams = props.sdkInitParams, customExtensionParams = props.customExtensionParams, eventHandlers = props.eventHandlers, isMultipleFilesMessageEnabled = props.isMultipleFilesMessageEnabled, _o = props.isUserIdUsedForNickname, isUserIdUsedForNickname = _o === void 0 ? true : _o, _p = props.enableLegacyChannelModules, enableLegacyChannelModules = _p === void 0 ? false : _p, uikitOptions = props.uikitOptions, _q = props.htmlTextDirection, htmlTextDirection = _q === void 0 ? "ltr" : _q, _r = props.forceLeftToRightMessageLayout, forceLeftToRightMessageLayout = _r === void 0 ? false : _r, showSearchIcon = props.showSearchIcon, isMentionEnabled = props.isMentionEnabled, isReactionEnabled = props.isReactionEnabled, replyType = props.replyType, disableUserProfile = props.disableUserProfile, isVoiceMessageEnabled = props.isVoiceMessageEnabled, isTypingIndicatorEnabledOnChannelList = props.isTypingIndicatorEnabledOnChannelList, isMessageReceiptStatusEnabledOnChannelList = props.isMessageReceiptStatusEnabledOnChannelList;
  var _s = (0, import_react2.useState)(), currentChannel = _s[0], setCurrentChannel = _s[1];
  return import_react2.default.createElement(
    SendbirdProvider,
    { stringSet, appId, userId, accessToken, customApiHost, customWebSocketHost, breakpoint, theme, nickname, profileUrl, dateLocale, userListQuery, config, colorSet, disableMarkAsDelivered, renderUserProfile, imageCompression, isMultipleFilesMessageEnabled, voiceRecord, onStartDirectMessage: function(channel) {
      setCurrentChannel(channel);
    }, uikitOptions, isUserIdUsedForNickname, sdkInitParams, customExtensionParams, eventHandlers, isTypingIndicatorEnabledOnChannelList, isMessageReceiptStatusEnabledOnChannelList, replyType, showSearchIcon, disableUserProfile, isReactionEnabled, isMentionEnabled, isVoiceMessageEnabled, htmlTextDirection, forceLeftToRightMessageLayout },
    import_react2.default.createElement(AppLayout, { isMessageGroupingEnabled, allowProfileEdit, onProfileEditSuccess, disableAutoSelect, currentChannel, setCurrentChannel, enableLegacyChannelModules, isReactionEnabled, replyType, showSearchIcon })
  );
}

// node_modules/@sendbird/uikit-react/OpenChannel.js
var import_react6 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/OpenChannel/components/OpenChannelUI.js
var import_react5 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/OpenChannel/components/FrozenChannelNotification.js
var import_react3 = __toESM(require_react(), 1);
var FrozenNotification = function() {
  var stringSet = (0, import_react3.useContext)(LocalizationContext).stringSet;
  return import_react3.default.createElement(
    "div",
    { className: "sendbird-frozen-channel-notification" },
    import_react3.default.createElement(Label, { className: "sendbird-frozen-channel-notification__text", type: LabelTypography.CAPTION_2 }, stringSet.CHANNEL_FROZEN)
  );
};

// node_modules/@sendbird/uikit-react/OpenChannel/components/OpenChannelHeader.js
var import_react4 = __toESM(require_react(), 1);
var import_react_dom3 = __toESM(require_react_dom(), 1);
function OpenchannelConversationHeader() {
  var stringSet = (0, import_react4.useContext)(LocalizationContext).stringSet;
  var _a = useOpenChannelContext(), currentOpenChannel = _a.currentOpenChannel, onChatHeaderActionClick = _a.onChatHeaderActionClick, amIOperator = _a.amIOperator, onBackClick = _a.onBackClick;
  var title = currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.name;
  var subTitle = "".concat(kFormatter(currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.participantCount), " ").concat(stringSet.OPEN_CHANNEL_CONVERSATION__TITLE_PARTICIPANTS);
  var coverImage = currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.coverUrl;
  var isMobile = useMediaQueryContext().isMobile;
  return import_react4.default.createElement(
    "div",
    { className: "sendbird-openchannel-conversation-header" },
    import_react4.default.createElement(
      "div",
      { className: "sendbird-openchannel-conversation-header__left" },
      isMobile && import_react4.default.createElement(Icon, { className: "sendbird-oepnchannel-header__icon_back", onClick: onBackClick, fillColor: IconColors.PRIMARY, width: "24px", height: "24px", type: IconTypes.ARROW_LEFT }),
      coverImage ? import_react4.default.createElement(Avatar$1, { className: "sendbird-openchannel-conversation-header__left__cover-image", src: coverImage, alt: "channel cover image", width: "32px", height: "32px" }) : import_react4.default.createElement(
        "div",
        { className: "sendbird-openchannel-conversation-header__left__cover-image--icon", style: { width: 32, height: 32 } },
        import_react4.default.createElement(Icon, { type: IconTypes.CHANNELS, fillColor: IconColors.CONTENT, width: "18px", height: "18px" })
      ),
      import_react4.default.createElement(Label, { className: "sendbird-openchannel-conversation-header__left__title", type: LabelTypography.H_2, color: LabelColors.ONBACKGROUND_1 }, title || stringSet.NO_TITLE),
      import_react4.default.createElement(Label, { className: "sendbird-openchannel-conversation-header__left__sub-title", type: LabelTypography.BODY_2, color: LabelColors.ONBACKGROUND_2 }, subTitle || stringSet.NO_TITLE)
    ),
    import_react4.default.createElement(
      "div",
      { className: "sendbird-openchannel-conversation-header__right" },
      import_react4.default.createElement(
        IconButton,
        { className: "sendbird-openchannel-conversation-header__right__trigger", width: "32px", height: "32px", onClick: onChatHeaderActionClick },
        import_react4.default.createElement(Icon, { type: amIOperator ? IconTypes.INFO : IconTypes.MEMBERS, fillColor: IconColors.PRIMARY, width: "24px", height: "24px" })
      )
    )
  );
}

// node_modules/@sendbird/uikit-react/OpenChannel/components/OpenChannelUI.js
var import_react_dom4 = __toESM(require_react_dom(), 1);
var COMPONENT_CLASS_NAME = "sendbird-openchannel-conversation";
var OpenChannelUI = function(_a) {
  var renderMessage = _a.renderMessage, renderHeader = _a.renderHeader, renderPlaceHolderEmptyList = _a.renderPlaceHolderEmptyList, renderPlaceHolderError = _a.renderPlaceHolderError, renderPlaceHolderLoading = _a.renderPlaceHolderLoading, renderMessageInput = _a.renderMessageInput, renderInput = _a.renderInput;
  var _b = useOpenChannelContext(), currentOpenChannel = _b.currentOpenChannel, amIBanned = _b.amIBanned, loading = _b.loading, isInvalid = _b.isInvalid, messageInputRef = _b.messageInputRef, conversationScrollRef = _b.conversationScrollRef;
  if (!currentOpenChannel || !(currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.url) || amIBanned) {
    return (renderPlaceHolderError === null || renderPlaceHolderError === void 0 ? void 0 : renderPlaceHolderError()) || import_react5.default.createElement(
      "div",
      { className: COMPONENT_CLASS_NAME },
      import_react5.default.createElement(PlaceHolder, { type: PlaceHolderTypes.NO_CHANNELS })
    );
  }
  if (loading) {
    return (renderPlaceHolderLoading === null || renderPlaceHolderLoading === void 0 ? void 0 : renderPlaceHolderLoading()) || import_react5.default.createElement(
      "div",
      { className: COMPONENT_CLASS_NAME },
      import_react5.default.createElement(PlaceHolder, { type: PlaceHolderTypes.LOADING })
    );
  }
  if (isInvalid) {
    return (renderPlaceHolderError === null || renderPlaceHolderError === void 0 ? void 0 : renderPlaceHolderError()) || import_react5.default.createElement(
      "div",
      { className: COMPONENT_CLASS_NAME },
      import_react5.default.createElement(PlaceHolder, { type: PlaceHolderTypes.WRONG })
    );
  }
  var renderInputComponent = renderMessageInput || renderInput;
  return import_react5.default.createElement(
    "div",
    { className: COMPONENT_CLASS_NAME },
    (renderHeader === null || renderHeader === void 0 ? void 0 : renderHeader()) || import_react5.default.createElement(OpenchannelConversationHeader, null),
    (currentOpenChannel === null || currentOpenChannel === void 0 ? void 0 : currentOpenChannel.isFrozen) && import_react5.default.createElement(FrozenNotification, null),
    import_react5.default.createElement(OpenChannelMessageList$1, { ref: conversationScrollRef, renderMessage, renderPlaceHolderEmptyList }),
    (renderInputComponent === null || renderInputComponent === void 0 ? void 0 : renderInputComponent()) || import_react5.default.createElement(OpenChannelInput, { ref: messageInputRef })
  );
};

// node_modules/@sendbird/uikit-react/OpenChannel.js
var import_react_dom5 = __toESM(require_react_dom(), 1);
var OpenChannel = function(props) {
  return import_react6.default.createElement(
    OpenChannelProvider,
    { channelUrl: props === null || props === void 0 ? void 0 : props.channelUrl, isMessageGroupingEnabled: props === null || props === void 0 ? void 0 : props.isMessageGroupingEnabled, queries: props === null || props === void 0 ? void 0 : props.queries, messageLimit: props === null || props === void 0 ? void 0 : props.messageLimit, onBeforeSendUserMessage: props === null || props === void 0 ? void 0 : props.onBeforeSendUserMessage, onBeforeSendFileMessage: props === null || props === void 0 ? void 0 : props.onBeforeSendFileMessage, onChatHeaderActionClick: props === null || props === void 0 ? void 0 : props.onChatHeaderActionClick, disableUserProfile: props === null || props === void 0 ? void 0 : props.disableUserProfile, renderUserProfile: props === null || props === void 0 ? void 0 : props.renderUserProfile, onBackClick: props === null || props === void 0 ? void 0 : props.onBackClick },
    import_react6.default.createElement(OpenChannelUI, { renderMessage: props === null || props === void 0 ? void 0 : props.renderMessage, renderHeader: props === null || props === void 0 ? void 0 : props.renderHeader, renderInput: props === null || props === void 0 ? void 0 : props.renderInput, renderMessageInput: props === null || props === void 0 ? void 0 : props.renderMessageInput, renderPlaceHolderEmptyList: props === null || props === void 0 ? void 0 : props.renderPlaceHolderEmptyList, renderPlaceHolderError: props === null || props === void 0 ? void 0 : props.renderPlaceHolderError, renderPlaceHolderLoading: props === null || props === void 0 ? void 0 : props.renderPlaceHolderLoading })
  );
};

// node_modules/@sendbird/uikit-react/OpenChannelSettings.js
var import_react14 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/OpenChannelSettings/components/OpenChannelSettingsUI.js
var import_react13 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/OpenChannelSettings/components/OperatorUI.js
var import_react12 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/OpenChannelSettings/components/OpenChannelProfile.js
var import_react9 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/ui/OpenChannelAvatar.js
var import_react7 = __toESM(require_react(), 1);
function ChannelAvatar(_a) {
  var channel = _a.channel, theme = _a.theme, _b = _a.height, height = _b === void 0 ? 56 : _b, _c = _a.width, width = _c === void 0 ? 56 : _c;
  var stringSet = (0, import_react7.useContext)(LocalizationContext).stringSet;
  var memoizedAvatar = (0, import_react7.useMemo)(function() {
    return import_react7.default.createElement(Avatar$1, { className: "sendbird-chat-header__avatar--open-channel", src: getOpenChannelAvatar(channel), width: "".concat(width, "px"), height: "".concat(height, "px"), alt: (channel === null || channel === void 0 ? void 0 : channel.name) || stringSet.OPEN_CHANNEL_SETTINGS__NO_TITLE });
  }, [channel === null || channel === void 0 ? void 0 : channel.coverUrl, theme]);
  return import_react7.default.createElement(import_react7.default.Fragment, null, memoizedAvatar);
}

// node_modules/@sendbird/uikit-react/OpenChannelSettings/components/EditDetailsModal.js
var import_react8 = __toESM(require_react(), 1);
var import_react_dom6 = __toESM(require_react_dom(), 1);
var EditDetails = function(props) {
  var onCancel = props.onCancel;
  var state = useSendbird().state;
  var _a = state.config, logger = _a.logger, theme = _a.theme, pubSub = _a.pubSub;
  var _b = useOpenChannelSettingsContext(), channel = _b.channel, onBeforeUpdateChannel = _b.onBeforeUpdateChannel, onChannelModified = _b.onChannelModified, setChannel = _b.setChannel;
  var inputRef = (0, import_react8.useRef)(null);
  var formRef = (0, import_react8.useRef)(null);
  var hiddenInputRef = (0, import_react8.useRef)(null);
  var _c = (0, import_react8.useState)(null), currentImg = _c[0], setCurrentImg = _c[1];
  var _d = (0, import_react8.useState)(null), newFile = _d[0], setNewFile = _d[1];
  var stringSet = (0, import_react8.useContext)(LocalizationContext).stringSet;
  var title = channel === null || channel === void 0 ? void 0 : channel.name;
  return import_react8.default.createElement(
    Modal,
    { isFullScreenOnMobile: true, titleText: stringSet.MODAL__CHANNEL_INFORMATION__TITLE, submitText: stringSet.BUTTON__SAVE, onCancel, onSubmit: function() {
      var _a2, _b2, _c2, _d2, _e;
      if (title !== "" && !((_a2 = inputRef.current) === null || _a2 === void 0 ? void 0 : _a2.value)) {
        if ((_b2 = formRef.current) === null || _b2 === void 0 ? void 0 : _b2.reportValidity) {
          formRef.current.reportValidity();
        }
        return;
      }
      var currentTitle = (_d2 = (_c2 = inputRef.current) === null || _c2 === void 0 ? void 0 : _c2.value) !== null && _d2 !== void 0 ? _d2 : "";
      var currentImg2 = newFile;
      logger.info("ChannelSettings: Channel information being updated");
      var params = onBeforeUpdateChannel ? onBeforeUpdateChannel(currentTitle, currentImg2, (_e = channel === null || channel === void 0 ? void 0 : channel.data) !== null && _e !== void 0 ? _e : "") : {
        name: currentTitle,
        coverUrlOrImage: currentImg2 !== null && currentImg2 !== void 0 ? currentImg2 : void 0,
        data: channel === null || channel === void 0 ? void 0 : channel.data
      };
      logger.info("ChannelSettings: Updating channel information", params);
      channel === null || channel === void 0 ? void 0 : channel.updateChannel(params).then(function(updatedChannel) {
        logger.info("ChannelSettings: Channel information update succeeded", updatedChannel);
        onChannelModified === null || onChannelModified === void 0 ? void 0 : onChannelModified(updatedChannel);
        setChannel === null || setChannel === void 0 ? void 0 : setChannel(updatedChannel);
        pubSub === null || pubSub === void 0 ? void 0 : pubSub.publish(pubSubTopics.UPDATE_OPEN_CHANNEL, updatedChannel);
      }).catch(function(error) {
        logger.error("ChannelSettings: Channel infomation update failed", error);
        setChannel === null || setChannel === void 0 ? void 0 : setChannel(null);
      });
      onCancel();
    }, type: ButtonTypes.PRIMARY },
    import_react8.default.createElement(
      "form",
      { className: "channel-profile-form", ref: formRef, onSubmit: function(e) {
        e.preventDefault();
      } },
      import_react8.default.createElement(
        "div",
        { className: "channel-profile-form__img-section" },
        import_react8.default.createElement(InputLabel, null, stringSet.MODAL__CHANNEL_INFORMATION__CHANNEL_IMAGE),
        import_react8.default.createElement("div", { className: "channel-profile-form__avatar" }, currentImg ? import_react8.default.createElement(Avatar$1, { height: "80px", width: "80px", src: currentImg }) : import_react8.default.createElement(ChannelAvatar, { height: 80, width: 80, channel, theme })),
        import_react8.default.createElement("input", { ref: hiddenInputRef, type: "file", accept: "image/gif, image/jpeg, image/png", style: { display: "none" }, onChange: function(e) {
          if (e.target.files) {
            setCurrentImg(URL.createObjectURL(e.target.files[0]));
            setNewFile(e.target.files[0]);
          }
          if (hiddenInputRef.current)
            hiddenInputRef.current.value = "";
        } }),
        import_react8.default.createElement(
          TextButton,
          { className: "channel-profile-form__avatar-button", onClick: function() {
            var _a2;
            return (_a2 = hiddenInputRef.current) === null || _a2 === void 0 ? void 0 : _a2.click();
          }, disableUnderline: true },
          import_react8.default.createElement(Label, { type: LabelTypography.BUTTON_1, color: LabelColors.PRIMARY }, stringSet.MODAL__CHANNEL_INFORMATION__UPLOAD)
        )
      ),
      import_react8.default.createElement(
        "div",
        { className: "channel-profile-form__name-section" },
        import_react8.default.createElement(InputLabel, null, stringSet.MODAL__CHANNEL_INFORMATION__CHANNEL_NAME),
        import_react8.default.createElement(Input, { required: title !== "", name: "channel-profile-form__name", ref: inputRef, value: title, placeHolder: stringSet.MODAL__CHANNEL_INFORMATION__INPUT__PLACE_HOLDER })
      )
    )
  );
};

// node_modules/@sendbird/uikit-react/OpenChannelSettings/components/OpenChannelProfile.js
var import_react_dom7 = __toESM(require_react_dom(), 1);
function ChannelProfile() {
  var _a, _b;
  var state = useSendbird().state;
  var disabled = !((_a = state === null || state === void 0 ? void 0 : state.config) === null || _a === void 0 ? void 0 : _a.isOnline);
  var theme = (_b = state === null || state === void 0 ? void 0 : state.config) === null || _b === void 0 ? void 0 : _b.theme;
  var channel = useOpenChannelSettingsContext().channel;
  var title = channel === null || channel === void 0 ? void 0 : channel.name;
  var _c = (0, import_react9.useState)(false), showModal = _c[0], setShowModal = _c[1];
  var stringSet = (0, import_react9.useContext)(LocalizationContext).stringSet;
  return import_react9.default.createElement(
    "div",
    { className: "sendbird-openchannel-profile" },
    import_react9.default.createElement(
      "div",
      { className: "sendbird-openchannel-profile--inner" },
      import_react9.default.createElement(
        "div",
        { className: "sendbird-openchannel-profile__avatar" },
        import_react9.default.createElement(ChannelAvatar, { channel, theme, height: 80, width: 80 })
      ),
      import_react9.default.createElement(Label, { type: LabelTypography.SUBTITLE_2, color: LabelColors.ONBACKGROUND_1, className: "sendbird-openchannel-profile__title" }, title || stringSet.OPEN_CHANNEL_SETTINGS__NO_TITLE),
      import_react9.default.createElement(
        TextButton,
        { disabled, className: "sendbird-openchannel-profile__edit", onClick: function() {
          if (disabled) {
            return;
          }
          setShowModal(true);
        }, disableUnderline: true },
        import_react9.default.createElement(Label, { type: LabelTypography.BUTTON_1, color: disabled ? LabelColors.ONBACKGROUND_2 : LabelColors.PRIMARY }, stringSet.CHANNEL_SETTING__PROFILE__EDIT)
      ),
      showModal && import_react9.default.createElement(EditDetails, { onCancel: function() {
        return setShowModal(false);
      } })
    )
  );
}

// node_modules/@sendbird/uikit-react/chunks/bundle-Bzne98lW.js
var import_react10 = __toESM(require_react(), 1);
var import_react_dom8 = __toESM(require_react_dom(), 1);
function ParticipantsModal(_a) {
  var _b, _c, _d;
  var onCancel = _a.onCancel;
  var state = useSendbird().state;
  var channel = useOpenChannelSettingsContext().channel;
  var stringSet = (0, import_react10.useContext)(LocalizationContext).stringSet;
  var _e = (0, import_react10.useState)([]), participants = _e[0], setParticipants = _e[1];
  var _f = (0, import_react10.useState)(null), participantListQuery = _f[0], setParticipantListQuery = _f[1];
  var userId = (_b = state === null || state === void 0 ? void 0 : state.config) === null || _b === void 0 ? void 0 : _b.userId;
  var sdk = (_d = (_c = state === null || state === void 0 ? void 0 : state.stores) === null || _c === void 0 ? void 0 : _c.sdkStore) === null || _d === void 0 ? void 0 : _d.sdk;
  var isOperatorView = channel === null || channel === void 0 ? void 0 : channel.isOperator(userId);
  (0, import_react10.useEffect)(function() {
    if (!channel || !(channel === null || channel === void 0 ? void 0 : channel.createParticipantListQuery)) {
      return;
    }
    var participantListQuery2 = channel === null || channel === void 0 ? void 0 : channel.createParticipantListQuery({});
    setParticipantListQuery(participantListQuery2);
    participantListQuery2.next().then(function(participantList) {
      setParticipants(participantList);
    });
  }, []);
  return import_react10.default.createElement(
    "div",
    null,
    import_react10.default.createElement(
      Modal,
      { hideFooter: true, isFullScreenOnMobile: true, onCancel: function() {
        return onCancel();
      }, onSubmit: noop, titleText: stringSet.OPEN_CHANNEL_SETTINGS__ALL_PARTICIPANTS_TITLE },
      import_react10.default.createElement("div", { className: "sendbird-more-members__popup-scroll", onScroll: function(e) {
        if (participantListQuery) {
          var hasNext = participantListQuery.hasNext;
          var target = e.target;
          var fetchMore = target.clientHeight + target.scrollTop === target.scrollHeight;
          if (hasNext && fetchMore) {
            participantListQuery.next().then(function(fetchedParticipants) {
              setParticipants(__spreadArray(__spreadArray([], participants !== null && participants !== void 0 ? participants : [], true), fetchedParticipants, true));
            });
          }
        }
      } }, participants === null || participants === void 0 ? void 0 : participants.map(function(p) {
        var _a2;
        var isOperator = channel === null || channel === void 0 ? void 0 : channel.isOperator(p.userId);
        return import_react10.default.createElement(UserListItem, { user: p, key: p.userId, currentUser: (_a2 = sdk === null || sdk === void 0 ? void 0 : sdk.currentUser) === null || _a2 === void 0 ? void 0 : _a2.userId, action: userId !== p.userId && isOperatorView ? function(_a3) {
          var actionRef = _a3.actionRef, parentRef = _a3.parentRef;
          return import_react10.default.createElement(ContextMenu, { menuTrigger: function(toggleDropdown) {
            return import_react10.default.createElement(
              IconButton,
              { className: "sendbird-user-message__more__menu", width: "32px", height: "32px", onClick: toggleDropdown },
              import_react10.default.createElement(Icon, { width: "24px", height: "24px", type: IconTypes.MORE, fillColor: IconColors.CONTENT_INVERSE })
            );
          }, menuItems: function(closeDropdown) {
            return import_react10.default.createElement(
              MenuItems,
              { parentContainRef: parentRef, parentRef: actionRef, closeDropdown, openLeft: true },
              import_react10.default.createElement(OperatorMenuItem, { channel, user: p, onChange: function() {
                return closeDropdown();
              }, onError: function() {
                closeDropdown();
              }, testID: "open_channel_setting_participant_context_menu_".concat(isOperator ? "unregister_operator" : "register_as_operator") }, isOperator ? stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNREGISTER_OPERATOR : stringSet.OPEN_CHANNEL_SETTING__MODERATION__REGISTER_AS_OPERATOR),
              import_react10.default.createElement(MuteMenuItem, { channel, user: p, onChange: function() {
                return closeDropdown();
              }, onError: function() {
                closeDropdown();
              }, testID: "open_channel_setting_participant_context_menu_".concat(p.isMuted ? "unmute" : "mute") }, p.isMuted ? stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNMUTE : stringSet.OPEN_CHANNEL_SETTING__MODERATION__MUTE),
              import_react10.default.createElement(MenuItem, { onClick: function() {
                channel === null || channel === void 0 ? void 0 : channel.banUser(p).then(function() {
                  closeDropdown();
                });
              }, testID: "open_channel_setting_participant_context_menu_ban" }, stringSet.OPEN_CHANNEL_SETTING__MODERATION__BAN)
            );
          } });
        } : function() {
          return import_react10.default.createElement(import_react10.default.Fragment, null);
        } });
      }))
    )
  );
}
var UserListItem2 = function(_a) {
  var user = _a.user, currentUser = _a.currentUser, isOperator = _a.isOperator, action = _a.action;
  var avatarRef = (0, import_react10.useRef)(null);
  var actionRef = (0, import_react10.useRef)(null);
  var _b = useUserProfileContext(), disableUserProfile = _b.disableUserProfile, renderUserProfile = _b.renderUserProfile;
  var stringSet = (0, import_react10.useContext)(LocalizationContext).stringSet;
  return import_react10.default.createElement(
    "div",
    { className: "sendbird-participants-accordion__member" },
    import_react10.default.createElement(
      "div",
      { className: "sendbird-participants-accordion__member-avatar" },
      import_react10.default.createElement(ContextMenu, { menuTrigger: function(toggleDropdown) {
        return import_react10.default.createElement(
          import_react10.default.Fragment,
          null,
          import_react10.default.createElement(Avatar$1, { className: "sendbird-participants-accordion__member-avatar__avatar", onClick: function() {
            if (!disableUserProfile) {
              toggleDropdown();
            }
          }, ref: avatarRef, src: user.profileUrl, width: 24, height: 24 }),
          user instanceof tn && user.isMuted ? import_react10.default.createElement(MutedAvatarOverlay, null) : ""
        );
      }, menuItems: function(closeDropdown) {
        return renderUserProfile ? renderUserProfile({
          user,
          currentUserId: currentUser !== null && currentUser !== void 0 ? currentUser : "",
          close: closeDropdown,
          avatarRef
        }) : import_react10.default.createElement(
          MenuItems,
          {
            openLeft: true,
            parentRef: avatarRef,
            // for catching location(x, y) of MenuItems
            parentContainRef: avatarRef,
            // for toggling more options(menus & reactions)
            closeDropdown,
            style: { paddingTop: "0px", paddingBottom: "0px" }
          },
          import_react10.default.createElement(UserProfile, { disableMessaging: true, user, currentUserId: currentUser, onSuccess: closeDropdown })
        );
      } })
    ),
    import_react10.default.createElement(
      Label,
      { className: "sendbird-participants-accordion__member__title", type: LabelTypography.SUBTITLE_2, color: LabelColors.ONBACKGROUND_1 },
      user.nickname || stringSet.NO_NAME,
      currentUser === user.userId && stringSet.OPEN_CHANNEL_SETTINGS__MEMBERS__YOU
    ),
    // if there is now nickname, display userId
    !user.nickname && import_react10.default.createElement(Label, { className: "sendbird-participants-accordion__member__title user-id", type: LabelTypography.CAPTION_3, color: LabelColors.ONBACKGROUND_2 }, user.userId),
    isOperator && import_react10.default.createElement(Label, { className: "sendbird-participants-accordion__member__title\n                ".concat((user === null || user === void 0 ? void 0 : user.userId) !== currentUser ? "operator" : "", "\n                ").concat((user === null || user === void 0 ? void 0 : user.userId) === currentUser ? "self-operator" : "", "\n              "), type: LabelTypography.SUBTITLE_2, color: LabelColors.ONBACKGROUND_2 }, stringSet.OPEN_CHANNEL_SETTINGS__MEMBERS__OPERATOR),
    action && import_react10.default.createElement("div", { className: "sendbird-participants-accordion__member__action", ref: actionRef }, action({ actionRef }))
  );
};
function ParticipantList(_a) {
  var _b;
  var _c = _a.isOperatorView, isOperatorView = _c === void 0 ? false : _c;
  var state = useSendbird().state;
  var currentUserId = (_b = state === null || state === void 0 ? void 0 : state.config) === null || _b === void 0 ? void 0 : _b.userId;
  var channel = useOpenChannelSettingsContext().channel;
  var stringSet = (0, import_react10.useContext)(LocalizationContext).stringSet;
  var _d = (0, import_react10.useState)(null), participants = _d[0], setParticipants = _d[1];
  var _e = (0, import_react10.useState)(null), participantListQuery = _e[0], setParticipantListQuery = _e[1];
  var _f = (0, import_react10.useState)(false), showParticipantsModal = _f[0], setShowParticipantsModal = _f[1];
  (0, import_react10.useEffect)(function() {
    if (!channel || !(channel === null || channel === void 0 ? void 0 : channel.createParticipantListQuery)) {
      return;
    }
    var participantListQuery2 = channel === null || channel === void 0 ? void 0 : channel.createParticipantListQuery({ limit: 10 });
    setParticipantListQuery(participantListQuery2);
    participantListQuery2.next().then(function(participants2) {
      setParticipants(participants2);
    });
  }, [channel]);
  var refreshList = (0, import_react10.useCallback)(function() {
    if (!channel) {
      setParticipants([]);
      return;
    }
    var participantListQuery2 = channel === null || channel === void 0 ? void 0 : channel.createParticipantListQuery({ limit: 10 });
    participantListQuery2.next().then(function(participants2) {
      setParticipants(participants2);
    });
  }, [channel]);
  return import_react10.default.createElement(
    "div",
    { className: "sendbird-openchannel-settings__participant-list", onScroll: function(e) {
      if (participantListQuery) {
        var hasNext = participantListQuery.hasNext;
        var target = e.target;
        var fetchMore = target.clientHeight + target.scrollTop === target.scrollHeight;
        if (hasNext && fetchMore) {
          participantListQuery.next().then(function(fetchedParticipants) {
            setParticipants(__spreadArray(__spreadArray([], participants !== null && participants !== void 0 ? participants : [], true), fetchedParticipants, true));
          });
        }
      }
    } },
    import_react10.default.createElement(
      "div",
      null,
      participants === null || participants === void 0 ? void 0 : participants.map(function(p) {
        var isOperator = channel === null || channel === void 0 ? void 0 : channel.isOperator(p.userId);
        return import_react10.default.createElement(UserListItem2, { user: p, currentUser: currentUserId, key: p.userId, isOperator, action: function(_a2) {
          var actionRef = _a2.actionRef;
          return isOperatorView && currentUserId !== (p === null || p === void 0 ? void 0 : p.userId) ? import_react10.default.createElement(ContextMenu, { menuTrigger: function(toggleDropdown) {
            return import_react10.default.createElement(
              IconButton,
              { className: "sendbird-openchannel-participant-list__menu", width: "32px", height: "32px", onClick: toggleDropdown },
              import_react10.default.createElement(Icon, { width: "24px", height: "24px", type: IconTypes.MORE, fillColor: IconColors.CONTENT_INVERSE })
            );
          }, menuItems: function(closeDropdown) {
            return import_react10.default.createElement(
              MenuItems,
              { parentRef: actionRef, closeDropdown, openLeft: true },
              import_react10.default.createElement(OperatorMenuItem, { channel, user: p, onChange: function() {
                closeDropdown();
                refreshList();
              }, onError: function() {
                closeDropdown();
              }, testID: "open_channel_setting_partitipant_conext_menu_".concat(isOperator ? "unregister_operator" : "register_as_operator") }, isOperator ? stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNREGISTER_OPERATOR : stringSet.OPEN_CHANNEL_SETTING__MODERATION__REGISTER_AS_OPERATOR),
              import_react10.default.createElement(MuteMenuItem, { channel, user: p, onChange: function() {
                closeDropdown();
                refreshList();
              }, onError: function() {
                closeDropdown();
              }, testID: "open_channel_setting_partitipant_conext_menu_".concat(p.isMuted ? "unmute" : "mute") }, p.isMuted ? stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNMUTE : stringSet.OPEN_CHANNEL_SETTING__MODERATION__MUTE),
              import_react10.default.createElement(MenuItem, { onClick: function() {
                channel === null || channel === void 0 ? void 0 : channel.banUser(p).then(function() {
                  closeDropdown();
                  refreshList();
                });
              }, testID: "open_channel_setting_partitipant_conext_menu_ban" }, stringSet.OPEN_CHANNEL_SETTING__MODERATION__BAN)
            );
          } }) : null;
        } });
      }),
      participants && participants.length === 0 ? import_react10.default.createElement(Label, { className: "sendbird-channel-settings__empty-list", type: LabelTypography.SUBTITLE_2, color: LabelColors.ONBACKGROUND_3 }, stringSet.OPEN_CHANNEL_SETTINGS__EMPTY_LIST) : null,
      import_react10.default.createElement("div", { className: "sendbird-openchannel-participant-list__footer" }, (participantListQuery === null || participantListQuery === void 0 ? void 0 : participantListQuery.hasNext) && import_react10.default.createElement(Button, { type: ButtonTypes.SECONDARY, size: ButtonSizes.SMALL, onClick: function() {
        return setShowParticipantsModal(true);
      } }, stringSet.OPEN_CHANNEL_SETTINGS__ALL_PARTICIPANTS_TITLE)),
      showParticipantsModal && import_react10.default.createElement(ParticipantsModal, { onCancel: function() {
        setShowParticipantsModal(false);
        refreshList();
      } })
    )
  );
}

// node_modules/@sendbird/uikit-react/ui/Accordion.js
var import_react11 = __toESM(require_react(), 1);
var Accordion = function(_a) {
  var className = _a.className, id = _a.id, renderTitle = _a.renderTitle, renderContent = _a.renderContent, renderFooter = _a.renderFooter;
  var _b = useAccordionGroupContext(), openedListKeys = _b.openedListKeys, addOpenedListKey = _b.addOpenedListKey, removeOpenedListKey = _b.removeOpenedListKey;
  var isOpened = (0, import_react11.useMemo)(function() {
    return openedListKeys.includes(id);
  }, [openedListKeys]);
  var handleClick = function() {
    if (isOpened) {
      removeOpenedListKey(id);
    } else {
      addOpenedListKey(id);
    }
  };
  return import_react11.default.createElement(
    "div",
    { className: classnames("sendbird-accordion", className, isOpened ? "sendbird-accordion--opened" : "sendbird-accordion--closed") },
    import_react11.default.createElement(
      "div",
      { className: "sendbird-accordion__panel-header", id, role: "switch", "aria-checked": false, onClick: handleClick, onKeyDown: handleClick, tabIndex: 0 },
      renderTitle(),
      import_react11.default.createElement(Icon, { type: IconTypes.CHEVRON_RIGHT, className: [
        "sendbird-accordion__panel-icon-right",
        "sendbird-accordion__panel-icon--chevron",
        isOpened ? "sendbird-accordion__panel-icon--open" : ""
      ].join(" "), height: "24px", width: "24px" })
    ),
    isOpened && import_react11.default.createElement(
      "div",
      { className: "sendbird-accordion-opened-list" },
      import_react11.default.createElement("div", { className: "sendbird-accordion__list" }, renderContent()),
      renderFooter && import_react11.default.createElement("div", { className: "sendbird-accordion__footer" }, renderFooter())
    )
  );
};
var AccordionGroup = AccordionGroupProvider;

// node_modules/@sendbird/uikit-react/OpenChannelSettings/components/OperatorUI.js
var import_react_dom9 = __toESM(require_react_dom(), 1);
function DeleteChannel() {
  var _a = (0, import_react12.useState)(false), showDeleteChannelModal = _a[0], setShowDeleteChannelModal = _a[1];
  var stringSet = (0, import_react12.useContext)(LocalizationContext).stringSet;
  var _b = useSendbird().state.config, isOnline = _b.isOnline, logger = _b.logger;
  var _c = useOpenChannelSettingsContext(), channel = _c.channel, onDeleteChannel = _c.onDeleteChannel;
  var deleteChannel = function() {
    channel === null || channel === void 0 ? void 0 : channel.delete().then(function(response) {
      logger.info("OpenChannelSettings: Delete channel success", response);
      if (onDeleteChannel) {
        onDeleteChannel(channel);
      }
    }).catch(function(error) {
      logger.warning("OpenChannelSettings: Delete channel failed", error);
    });
  };
  return import_react12.default.createElement(
    import_react12.default.Fragment,
    null,
    import_react12.default.createElement(
      "div",
      { className: "sendbird-openchannel-settings__panel-item\n          sendbird-openchannel-settings__delete-channel\n            ".concat(!isOnline ? "sendbird-openchannel-settings__panel-item__disabled" : ""), role: "button", tabIndex: 0, onKeyDown: function() {
        if (!isOnline) {
          return;
        }
        setShowDeleteChannelModal(true);
      }, onClick: function() {
        if (!isOnline) {
          return;
        }
        setShowDeleteChannelModal(true);
      } },
      import_react12.default.createElement(Icon, { type: IconTypes.DELETE, fillColor: IconColors.ERROR, className: [
        "sendbird-openchannel-settings__panel-icon-left",
        "sendbird-openchannel-settings__panel-icon__delete"
      ].join(" "), height: "24px", width: "24px" }),
      import_react12.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_PANEL)
    ),
    showDeleteChannelModal && import_react12.default.createElement(Modal, { isFullScreenOnMobile: true, onCancel: function() {
      setShowDeleteChannelModal(false);
    }, onSubmit: function() {
      deleteChannel();
    }, titleText: stringSet.OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_TITLE, submitText: stringSet.OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_SUBMIT }, stringSet.OPEN_CHANNEL_SETTINGS__DELETE_CHANNEL_CONTEXT)
  );
}
function OperatorListModal(_a) {
  var _b;
  var onCancel = _a.onCancel;
  var _c = (0, import_react12.useState)([]), users = _c[0], setUsers = _c[1];
  var _d = (0, import_react12.useState)(null), operatorQuery = _d[0], setOperatorQuery = _d[1];
  var channel = useOpenChannelSettingsContext().channel;
  var state = useSendbird().state;
  var currentUserId = (_b = state === null || state === void 0 ? void 0 : state.config) === null || _b === void 0 ? void 0 : _b.userId;
  var stringSet = (0, import_react12.useContext)(LocalizationContext).stringSet;
  (0, import_react12.useEffect)(function() {
    var operatorListQuery = channel === null || channel === void 0 ? void 0 : channel.createOperatorListQuery({
      limit: 20
    });
    if (operatorListQuery) {
      operatorListQuery.next().then(function(participants) {
        setUsers(participants);
      });
      setOperatorQuery(operatorListQuery);
    }
  }, []);
  return import_react12.default.createElement(
    "div",
    null,
    import_react12.default.createElement(
      Modal,
      { hideFooter: true, isFullScreenOnMobile: true, titleText: stringSet.OPEN_CHANNEL_SETTINGS__OPERATORS__TITLE_ALL, onCancel },
      import_react12.default.createElement("div", { className: "sendbird-more-users__popup-scroll", onScroll: function(e) {
        var hasNext = operatorQuery === null || operatorQuery === void 0 ? void 0 : operatorQuery.hasNext;
        var target = e.target;
        var fetchMore = target.clientHeight + target.scrollTop === target.scrollHeight;
        if (hasNext && fetchMore) {
          operatorQuery.next().then(function(o) {
            setUsers(__spreadArray(__spreadArray([], users, true), o, true));
          });
        }
      } }, users.map(function(operator) {
        return import_react12.default.createElement(UserListItem, { currentUser: currentUserId, user: operator, key: operator.userId, action: function(_a2) {
          var parentRef = _a2.parentRef, actionRef = _a2.actionRef;
          return currentUserId !== (operator === null || operator === void 0 ? void 0 : operator.userId) ? import_react12.default.createElement(ContextMenu, { menuTrigger: function(toggleDropdown) {
            return import_react12.default.createElement(
              IconButton,
              { className: "sendbird-user-message__more__menu", width: "32px", height: "32px", onClick: toggleDropdown },
              import_react12.default.createElement(Icon, { width: "24px", height: "24px", type: IconTypes.MORE, fillColor: IconColors.CONTENT_INVERSE })
            );
          }, menuItems: function(closeDropdown) {
            return import_react12.default.createElement(
              MenuItems,
              { parentContainRef: parentRef, parentRef: actionRef, closeDropdown, openLeft: true },
              import_react12.default.createElement(MenuItem, { onClick: function() {
                channel === null || channel === void 0 ? void 0 : channel.removeOperators([operator.userId]).then(function() {
                  setUsers(users.filter(function(_a3) {
                    var userId = _a3.userId;
                    return userId !== operator.userId;
                  }));
                });
                closeDropdown();
              }, testID: "open_channel_setting_operator_context_menu_unregister_operator" }, stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNREGISTER_OPERATOR)
            );
          } }) : import_react12.default.createElement(import_react12.default.Fragment, null);
        } });
      }))
    )
  );
}
function AddOperatorsModal(_a) {
  var onCancel = _a.onCancel, onSubmit = _a.onSubmit;
  var _b = (0, import_react12.useState)([]), participants = _b[0], setParticipants = _b[1];
  var _c = (0, import_react12.useState)({}), selectedUsers = _c[0], setSelectedUsers = _c[1];
  var _d = (0, import_react12.useState)(null), participantQuery = _d[0], setParticipantQuery = _d[1];
  var stringSet = (0, import_react12.useContext)(LocalizationContext).stringSet;
  var channel = useOpenChannelSettingsContext().channel;
  (0, import_react12.useEffect)(function() {
    var participantListQuery = channel === null || channel === void 0 ? void 0 : channel.createParticipantListQuery({
      limit: 20
    });
    if (participantListQuery) {
      participantListQuery.next().then(function(users) {
        setParticipants(users);
      });
      setParticipantQuery(participantListQuery);
    }
  }, []);
  var selectedCount = Object.keys(selectedUsers).filter(function(m) {
    return selectedUsers[m];
  }).length;
  return import_react12.default.createElement(
    import_react12.default.Fragment,
    null,
    import_react12.default.createElement(
      Modal,
      { isFullScreenOnMobile: true, type: ButtonTypes.PRIMARY, submitText: stringSet.CHANNEL_SETTING__OPERATORS__ADD_BUTTON, onCancel, onSubmit: function() {
        var users = Object.keys(selectedUsers).filter(function(m) {
          return selectedUsers[m];
        });
        channel === null || channel === void 0 ? void 0 : channel.addOperators(users).then(function() {
          onSubmit(users);
        });
      }, titleText: stringSet.OPEN_CHANNEL_CONVERSATION__SELECT_PARTICIPANTS },
      import_react12.default.createElement(Label, { color: selectedCount > 0 ? LabelColors.PRIMARY : LabelColors.ONBACKGROUND_3, type: LabelTypography.CAPTION_1 }, "".concat(selectedCount, " ").concat(stringSet.MODAL__INVITE_MEMBER__SELECTED)),
      import_react12.default.createElement("div", { className: "sendbird-more-users__popup-scroll", onScroll: function(e) {
        var hasNext = participantQuery ? participantQuery.hasNext : false;
        var target = e.target;
        var fetchMore = target.clientHeight + target.scrollTop === target.scrollHeight;
        if (hasNext && fetchMore && participantQuery) {
          participantQuery.next().then(function(o) {
            setParticipants(__spreadArray(__spreadArray([], participants, true), o, true));
          });
        }
      } }, participants.map(function(participant) {
        var isOperator = (channel === null || channel === void 0 ? void 0 : channel.operators.find(function(operator) {
          return (operator === null || operator === void 0 ? void 0 : operator.userId) === (participant === null || participant === void 0 ? void 0 : participant.userId);
        })) ? true : false;
        return import_react12.default.createElement(UserListItem, { user: participant, key: participant.userId, checkBox: true, checked: selectedUsers[participant.userId] || isOperator, disabled: isOperator, isOperator, onChange: function(event) {
          var _a2;
          var modifiedSelectedUsers = __assign(__assign({}, selectedUsers), (_a2 = {}, _a2[event.target.id] = event.target.checked, _a2));
          if (!event.target.checked) {
            delete modifiedSelectedUsers[event.target.id];
          }
          setSelectedUsers(modifiedSelectedUsers);
        } });
      }))
    )
  );
}
var OperatorList = function() {
  var _a, _b;
  var _c = (0, import_react12.useState)(false), showAdd = _c[0], setShowAdd = _c[1];
  var _d = (0, import_react12.useState)(false), showMore = _d[0], setShowMore = _d[1];
  var state = useSendbird().state;
  var currentUserId = (_a = state === null || state === void 0 ? void 0 : state.config) === null || _a === void 0 ? void 0 : _a.userId;
  var stringSet = (0, import_react12.useContext)(LocalizationContext).stringSet;
  var channel = useOpenChannelSettingsContext().channel;
  return import_react12.default.createElement(
    "div",
    null,
    (_b = channel === null || channel === void 0 ? void 0 : channel.operators) === null || _b === void 0 ? void 0 : _b.slice(0, 10).map(function(operator) {
      return import_react12.default.createElement(UserListItem2, { key: operator.userId, user: operator, currentUser: currentUserId, action: function(_a2) {
        var actionRef = _a2.actionRef;
        return currentUserId !== (operator === null || operator === void 0 ? void 0 : operator.userId) ? import_react12.default.createElement(ContextMenu, { menuTrigger: function(toggleDropdown) {
          return import_react12.default.createElement(
            IconButton,
            { className: "sendbird-openchannel-operator-list__menu", width: "32px", height: "32px", onClick: toggleDropdown },
            import_react12.default.createElement(Icon, { width: "24px", height: "24px", type: IconTypes.MORE, fillColor: IconColors.CONTENT_INVERSE })
          );
        }, menuItems: function(closeDropdown) {
          return import_react12.default.createElement(
            MenuItems,
            { parentRef: actionRef, closeDropdown, openLeft: true },
            import_react12.default.createElement(MenuItem, { onClick: function() {
              channel === null || channel === void 0 ? void 0 : channel.removeOperators([operator.userId]).then(function() {
                closeDropdown();
              });
            }, testID: "open_channel_setting_operator_context_menu_unregister_operator" }, stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNREGISTER_OPERATOR),
            import_react12.default.createElement(MuteMenuItem, { channel, user: operator, onChange: function() {
              return closeDropdown();
            }, onError: function() {
              closeDropdown();
            }, testID: "open_channel_setting_operator_context_menu_".concat(operator.isMuted ? "unmute" : "mute") }, operator.isMuted ? stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNMUTE : stringSet.OPEN_CHANNEL_SETTING__MODERATION__MUTE),
            import_react12.default.createElement(MenuItem, { onClick: function() {
              channel === null || channel === void 0 ? void 0 : channel.banUser(operator).then(function() {
                closeDropdown();
              });
            }, testID: "open_channel_setting_operator_context_menu_ban" }, stringSet.OPEN_CHANNEL_SETTING__MODERATION__BAN)
          );
        } }) : import_react12.default.createElement(import_react12.default.Fragment, null);
      } });
    }),
    import_react12.default.createElement(
      "div",
      { className: "sendbird-openchannel-operator-list__footer" },
      import_react12.default.createElement(Button, { type: ButtonTypes.SECONDARY, size: ButtonSizes.SMALL, onClick: function() {
        setShowAdd(true);
      } }, stringSet.OPEN_CHANNEL_SETTINGS__OPERATORS__TITLE_ADD),
      (channel === null || channel === void 0 ? void 0 : channel.operators) && channel.operators.length > 10 && import_react12.default.createElement(Button, { type: ButtonTypes.SECONDARY, size: ButtonSizes.SMALL, onClick: function() {
        setShowMore(true);
      } }, stringSet.OPEN_CHANNEL_SETTINGS__OPERATORS__TITLE_ALL)
    ),
    showMore && import_react12.default.createElement(
      import_react12.default.Fragment,
      null,
      import_react12.default.createElement(OperatorListModal, { onCancel: function() {
        setShowMore(false);
      } })
    ),
    showAdd && import_react12.default.createElement(
      import_react12.default.Fragment,
      null,
      import_react12.default.createElement(AddOperatorsModal, { onCancel: function() {
        return setShowAdd(false);
      }, onSubmit: function() {
        setShowAdd(false);
      } })
    )
  );
};
function MutedParticipantsModal(_a) {
  var _b;
  var onCancel = _a.onCancel;
  var _c = (0, import_react12.useState)([]), mutedUsers = _c[0], setMutedUsers = _c[1];
  var _d = (0, import_react12.useState)(null), userListQuery = _d[0], setUserListQuery = _d[1];
  var channel = useOpenChannelSettingsContext().channel;
  var state = useSendbird().state;
  var currentUserId = (_b = state === null || state === void 0 ? void 0 : state.config) === null || _b === void 0 ? void 0 : _b.userId;
  var stringSet = (0, import_react12.useContext)(LocalizationContext).stringSet;
  (0, import_react12.useEffect)(function() {
    var mutedUserListQuery = channel === null || channel === void 0 ? void 0 : channel.createMutedUserListQuery({
      limit: 10
    });
    mutedUserListQuery === null || mutedUserListQuery === void 0 ? void 0 : mutedUserListQuery.next().then(function(users) {
      setMutedUsers(users);
    });
    if (mutedUserListQuery) {
      setUserListQuery(mutedUserListQuery);
    }
  }, []);
  return import_react12.default.createElement(
    "div",
    null,
    import_react12.default.createElement(
      Modal,
      { isFullScreenOnMobile: true, hideFooter: true, onCancel: function() {
        return onCancel();
      }, onSubmit: noop, titleText: stringSet.OPEN_CHANNEL_SETTINGS__MUTED_MEMBERS__TITLE },
      import_react12.default.createElement("div", { className: "sendbird-more-members__popup-scroll", onScroll: function(e) {
        var hasNext = userListQuery === null || userListQuery === void 0 ? void 0 : userListQuery.hasNext;
        var target = e.target;
        var fetchMore = target.clientHeight + target.scrollTop === target.scrollHeight;
        if (hasNext && fetchMore) {
          userListQuery.next().then(function(o) {
            setMutedUsers(__spreadArray(__spreadArray([], mutedUsers, true), o, true));
          });
        }
      } }, mutedUsers.map(function(mutedUser) {
        return import_react12.default.createElement(UserListItem, { currentUser: currentUserId, user: mutedUser, key: mutedUser.userId, action: function(_a2) {
          var actionRef = _a2.actionRef;
          return (mutedUser === null || mutedUser === void 0 ? void 0 : mutedUser.userId) !== currentUserId ? import_react12.default.createElement(ContextMenu, { menuTrigger: function(toggleDropdown) {
            return import_react12.default.createElement(
              IconButton,
              { className: "sendbird-user-message__more__menu", width: "32px", height: "32px", onClick: toggleDropdown },
              import_react12.default.createElement(Icon, { width: "24px", height: "24px", type: IconTypes.MORE, fillColor: IconColors.CONTENT_INVERSE })
            );
          }, menuItems: function(closeDropdown) {
            return import_react12.default.createElement(
              MenuItems,
              { parentRef: actionRef, closeDropdown, openLeft: true },
              import_react12.default.createElement(MenuItem, { onClick: function() {
                channel === null || channel === void 0 ? void 0 : channel.unmuteUser(mutedUser).then(function() {
                  closeDropdown();
                  setMutedUsers(mutedUsers.filter(function(u) {
                    return u.userId !== mutedUser.userId;
                  }));
                });
              }, testID: "open_channel_setting_muted_member_context_menu_unmute" }, stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNMUTE)
            );
          } }) : import_react12.default.createElement(import_react12.default.Fragment, null);
        } });
      }))
    )
  );
}
var MutedParticipantList = function() {
  var _a;
  var _b = (0, import_react12.useState)([]), mutedUsers = _b[0], setMutedUsers = _b[1];
  var _c = (0, import_react12.useState)(false), hasNext = _c[0], setHasNext = _c[1];
  var _d = (0, import_react12.useState)(false), showModal = _d[0], setShowModal = _d[1];
  var channel = useOpenChannelSettingsContext().channel;
  var state = useSendbird().state;
  var currentUserId = (_a = state === null || state === void 0 ? void 0 : state.config) === null || _a === void 0 ? void 0 : _a.userId;
  var stringSet = (0, import_react12.useContext)(LocalizationContext).stringSet;
  (0, import_react12.useEffect)(function() {
    if (!channel) {
      setMutedUsers([]);
      return;
    }
    var mutedUserListQuery = channel === null || channel === void 0 ? void 0 : channel.createMutedUserListQuery({
      limit: 10
    });
    mutedUserListQuery.next().then(function(members) {
      setMutedUsers(members);
      setHasNext(mutedUserListQuery.hasNext);
    });
  }, [channel]);
  var refreshList = (0, import_react12.useCallback)(function() {
    if (!channel) {
      setMutedUsers([]);
      return;
    }
    var mutedUserListQuery = channel === null || channel === void 0 ? void 0 : channel.createMutedUserListQuery({
      limit: 10
    });
    mutedUserListQuery.next().then(function(members) {
      setMutedUsers(members);
      setHasNext(mutedUserListQuery.hasNext);
    });
  }, [channel]);
  return import_react12.default.createElement(
    import_react12.default.Fragment,
    null,
    mutedUsers.map(function(mutedUser) {
      return import_react12.default.createElement(UserListItem2, { key: mutedUser.userId, user: mutedUser, currentUser: currentUserId, isOperator: channel === null || channel === void 0 ? void 0 : channel.isOperator(mutedUser.userId), action: function(_a2) {
        var actionRef = _a2.actionRef;
        return (mutedUser === null || mutedUser === void 0 ? void 0 : mutedUser.userId) !== currentUserId ? import_react12.default.createElement(ContextMenu, { menuTrigger: function(toggleDropdown) {
          return import_react12.default.createElement(
            IconButton,
            { className: "sendbird-user-message__more__menu", width: "32px", height: "32px", onClick: toggleDropdown },
            import_react12.default.createElement(Icon, { width: "24px", height: "24px", type: IconTypes.MORE, fillColor: IconColors.CONTENT_INVERSE })
          );
        }, menuItems: function(closeDropdown) {
          return import_react12.default.createElement(
            MenuItems,
            { closeDropdown, openLeft: true, parentRef: actionRef },
            import_react12.default.createElement(MenuItem, { onClick: function() {
              channel === null || channel === void 0 ? void 0 : channel.unmuteUser(mutedUser).then(function() {
                refreshList();
                closeDropdown();
              });
            }, testID: "open_channel_setting_muted_member_context_menu_unmute" }, stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNMUTE)
          );
        } }) : import_react12.default.createElement(import_react12.default.Fragment, null);
      } });
    }),
    mutedUsers && mutedUsers.length === 0 && import_react12.default.createElement(Label, { className: "sendbird-channel-settings__empty-list", type: LabelTypography.SUBTITLE_2, color: LabelColors.ONBACKGROUND_3 }, stringSet.OPEN_CHANNEL_SETTINGS__MUTED_MEMBERS__NO_ONE),
    hasNext && import_react12.default.createElement(
      "div",
      { className: "sendbird-channel-settings-muted-participant-list__footer" },
      import_react12.default.createElement(Button, { type: ButtonTypes.SECONDARY, size: ButtonSizes.SMALL, onClick: function() {
        setShowModal(true);
      } }, stringSet.OPEN_CHANNEL_SETTINGS__MUTED_MEMBERS__TITLE_ALL)
    ),
    showModal && import_react12.default.createElement(MutedParticipantsModal, { onCancel: function() {
      setShowModal(false);
      refreshList();
    } })
  );
};
function BannedUsersModal(_a) {
  var _b;
  var onCancel = _a.onCancel;
  var _c = (0, import_react12.useState)([]), bannedUsers = _c[0], setBannedUsers = _c[1];
  var _d = (0, import_react12.useState)(null), userListQuery = _d[0], setUserListQuery = _d[1];
  var channel = useOpenChannelSettingsContext().channel;
  var state = useSendbird().state;
  var stringSet = (0, import_react12.useContext)(LocalizationContext).stringSet;
  var currentUserId = (_b = state === null || state === void 0 ? void 0 : state.config) === null || _b === void 0 ? void 0 : _b.userId;
  (0, import_react12.useEffect)(function() {
    var bannedUserListQuery = channel === null || channel === void 0 ? void 0 : channel.createBannedUserListQuery();
    bannedUserListQuery === null || bannedUserListQuery === void 0 ? void 0 : bannedUserListQuery.next().then(function(users) {
      setBannedUsers(users);
    });
    setUserListQuery(bannedUserListQuery !== null && bannedUserListQuery !== void 0 ? bannedUserListQuery : null);
  }, []);
  return import_react12.default.createElement(
    "div",
    null,
    import_react12.default.createElement(
      Modal,
      { hideFooter: true, isFullScreenOnMobile: true, onCancel: function() {
        return onCancel();
      }, onSubmit: noop, titleText: stringSet.OPEN_CHANNEL_SETTINGS__MUTED_MEMBERS__TITLE },
      import_react12.default.createElement("div", { className: "sendbird-more-members__popup-scroll", onScroll: function(e) {
        var hasNext = userListQuery === null || userListQuery === void 0 ? void 0 : userListQuery.hasNext;
        var target = e.target;
        var fetchMore = target.clientHeight + target.scrollTop === target.scrollHeight;
        if (hasNext && fetchMore) {
          userListQuery.next().then(function(o) {
            setBannedUsers(__spreadArray(__spreadArray([], bannedUsers, true), o, true));
          });
        }
      } }, bannedUsers.map(function(bannedUser) {
        return import_react12.default.createElement(UserListItem, { user: bannedUser, key: bannedUser.userId, action: function(_a2) {
          var actionRef = _a2.actionRef;
          return (bannedUser === null || bannedUser === void 0 ? void 0 : bannedUser.userId) !== currentUserId ? import_react12.default.createElement(ContextMenu, { menuTrigger: function(toggleDropdown) {
            return import_react12.default.createElement(
              IconButton,
              { className: "sendbird-user-message__more__menu", width: "32px", height: "32px", onClick: toggleDropdown },
              import_react12.default.createElement(Icon, { width: "24px", height: "24px", type: IconTypes.MORE, fillColor: IconColors.CONTENT_INVERSE })
            );
          }, menuItems: function(closeDropdown) {
            return import_react12.default.createElement(
              MenuItems,
              { parentRef: actionRef, closeDropdown, openLeft: true },
              import_react12.default.createElement(MenuItem, { onClick: function() {
                channel === null || channel === void 0 ? void 0 : channel.unbanUser(bannedUser).then(function() {
                  closeDropdown();
                  setBannedUsers(bannedUsers.filter(function(u) {
                    return u.userId !== bannedUser.userId;
                  }));
                });
              }, testID: "open_channel_setting_banned_user_context_menu_unban" }, stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNBAN)
            );
          } }) : import_react12.default.createElement(import_react12.default.Fragment, null);
        } });
      }))
    )
  );
}
var BannedUserList = function() {
  var _a;
  var _b = (0, import_react12.useState)([]), bannedUsers = _b[0], setBannedUsers = _b[1];
  var _c = (0, import_react12.useState)(false), hasNext = _c[0], setHasNext = _c[1];
  var _d = (0, import_react12.useState)(false), showModal = _d[0], setShowModal = _d[1];
  var channel = useOpenChannelSettingsContext().channel;
  var state = useSendbird().state;
  var stringSet = (0, import_react12.useContext)(LocalizationContext).stringSet;
  var currentUserId = (_a = state === null || state === void 0 ? void 0 : state.config) === null || _a === void 0 ? void 0 : _a.userId;
  (0, import_react12.useEffect)(function() {
    if (!channel) {
      setBannedUsers([]);
      return;
    }
    var bannedUserListQuery = channel === null || channel === void 0 ? void 0 : channel.createBannedUserListQuery();
    bannedUserListQuery.next().then(function(users) {
      setBannedUsers(users);
      setHasNext(bannedUserListQuery.hasNext);
    });
  }, [channel]);
  var refreshList = (0, import_react12.useCallback)(function() {
    if (!channel) {
      setBannedUsers([]);
      return;
    }
    var bannedUserListQuery = channel === null || channel === void 0 ? void 0 : channel.createBannedUserListQuery();
    bannedUserListQuery.next().then(function(users) {
      setBannedUsers(users);
      setHasNext(bannedUserListQuery.hasNext);
    });
  }, [channel]);
  return import_react12.default.createElement(
    import_react12.default.Fragment,
    null,
    bannedUsers.map(function(bannedUser) {
      return import_react12.default.createElement(UserListItem2, { key: bannedUser.userId, user: bannedUser, isOperator: channel === null || channel === void 0 ? void 0 : channel.isOperator(bannedUser.userId), action: function(_a2) {
        var actionRef = _a2.actionRef;
        return (bannedUser === null || bannedUser === void 0 ? void 0 : bannedUser.userId) !== currentUserId ? import_react12.default.createElement(ContextMenu, { menuTrigger: function(toggleDropdown) {
          return import_react12.default.createElement(
            IconButton,
            { className: "sendbird-user-message__more__menu", width: "32px", height: "32px", onClick: toggleDropdown },
            import_react12.default.createElement(Icon, { width: "24px", height: "24px", type: IconTypes.MORE, fillColor: IconColors.CONTENT_INVERSE })
          );
        }, menuItems: function(closeDropdown) {
          return import_react12.default.createElement(
            MenuItems,
            { parentRef: actionRef, closeDropdown, openLeft: true },
            import_react12.default.createElement(MenuItem, { onClick: function() {
              channel === null || channel === void 0 ? void 0 : channel.unbanUser(bannedUser).then(function() {
                closeDropdown();
                refreshList();
              });
            }, testID: "open_channel_setting_banned_user_context_menu_unban" }, stringSet.OPEN_CHANNEL_SETTING__MODERATION__UNBAN)
          );
        } }) : import_react12.default.createElement(import_react12.default.Fragment, null);
      } });
    }),
    bannedUsers && bannedUsers.length === 0 && import_react12.default.createElement(Label, { className: "sendbird-channel-settings__empty-list", type: LabelTypography.SUBTITLE_2, color: LabelColors.ONBACKGROUND_3 }, stringSet.OPEN_CHANNEL_SETTINGS__BANNED_MEMBERS__NO_ONE),
    hasNext && import_react12.default.createElement(
      "div",
      { className: "sendbird-channel-settings-banned-user-list__footer" },
      import_react12.default.createElement(Button, { type: ButtonTypes.SECONDARY, size: ButtonSizes.SMALL, onClick: function() {
        setShowModal(true);
      } }, stringSet.OPEN_CHANNEL_SETTINGS__BANNED_MEMBERS__TITLE_ALL)
    ),
    showModal && import_react12.default.createElement(BannedUsersModal, { onCancel: function() {
      setShowModal(false);
      refreshList();
    } })
  );
};
var copyToClipboard = function(text) {
  if (window.clipboardData && window.clipboardData.setData) {
    return window.clipboardData.setData("Text", text);
  }
  if (document.queryCommandSupported && document.queryCommandSupported("copy")) {
    var textarea = document.createElement("textarea");
    textarea.textContent = text;
    textarea.style.position = "fixed";
    document.body.appendChild(textarea);
    textarea.select();
    try {
      return document.execCommand("copy");
    } catch (ex) {
      return false;
    } finally {
      document.body.removeChild(textarea);
    }
  }
  return false;
};
var OperatorUI = function(_a) {
  var renderChannelProfile = _a.renderChannelProfile;
  var stringSet = (0, import_react12.useContext)(LocalizationContext).stringSet;
  var _b = useOpenChannelSettingsContext(), onCloseClick = _b.onCloseClick, channel = _b.channel;
  return import_react12.default.createElement(
    import_react12.default.Fragment,
    null,
    import_react12.default.createElement(
      "div",
      { className: "sendbird-openchannel-settings__header" },
      import_react12.default.createElement(Label, { type: LabelTypography.H_2, color: LabelColors.ONBACKGROUND_1 }, stringSet.CHANNEL_SETTING__HEADER__TITLE),
      import_react12.default.createElement(Icon, { className: "sendbird-openchannel-settings__close-icon", type: IconTypes.CLOSE, height: "24px", width: "24px", onClick: function() {
        onCloseClick === null || onCloseClick === void 0 ? void 0 : onCloseClick();
      } })
    ),
    import_react12.default.createElement("div", { className: "sendbird-openchannel-settings__profile" }, (renderChannelProfile === null || renderChannelProfile === void 0 ? void 0 : renderChannelProfile()) || import_react12.default.createElement(ChannelProfile, null)),
    import_react12.default.createElement(
      "div",
      { className: "sendbird-openchannel-settings__url" },
      import_react12.default.createElement(Icon, { className: "sendbird-openchannel-settings__copy-icon", type: IconTypes.COPY, height: "22px", width: "22px", onClick: function() {
        var _a2;
        copyToClipboard((_a2 = channel === null || channel === void 0 ? void 0 : channel.url) !== null && _a2 !== void 0 ? _a2 : "");
      } }),
      import_react12.default.createElement(Label, { className: "sendbird-openchannel-settings__url-label", type: LabelTypography.CAPTION_2, color: LabelColors.ONBACKGROUND_2 }, stringSet.OPEN_CHANNEL_SETTINGS__OPERATOR_URL),
      import_react12.default.createElement(Label, { className: "sendbird-openchannel-settings__url-value", type: LabelTypography.SUBTITLE_2 }, channel === null || channel === void 0 ? void 0 : channel.url)
    ),
    import_react12.default.createElement(
      AccordionGroup,
      null,
      import_react12.default.createElement(Accordion, { className: "sendbird-openchannel-settings__operators-list", id: "operators", renderTitle: function() {
        return import_react12.default.createElement(
          import_react12.default.Fragment,
          null,
          import_react12.default.createElement(Icon, { className: "sendbird-openchannel-settings__operator-accordion-icon", type: IconTypes.OPERATOR, fillColor: IconColors.PRIMARY, width: "24px", height: "24px" }),
          import_react12.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.OPEN_CHANNEL_SETTINGS__OPERATORS_TITLE)
        );
      }, renderContent: function() {
        return import_react12.default.createElement(
          import_react12.default.Fragment,
          null,
          import_react12.default.createElement(OperatorList, null)
        );
      } }),
      import_react12.default.createElement(Accordion, { className: "sendbird-channel-settings__operators-list", id: "participants", renderTitle: function() {
        return import_react12.default.createElement(
          import_react12.default.Fragment,
          null,
          import_react12.default.createElement(Icon, { type: IconTypes.MEMBERS, fillColor: IconColors.PRIMARY, width: 24, height: 24, className: "sendbird-openchannel-settings__operator-accordion-icon" }),
          import_react12.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.OPEN_CHANNEL_SETTINGS__PARTICIPANTS_ACCORDION_TITLE)
        );
      }, renderContent: function() {
        return import_react12.default.createElement(
          import_react12.default.Fragment,
          null,
          import_react12.default.createElement(ParticipantList, { isOperatorView: true })
        );
      } }),
      import_react12.default.createElement(Accordion, { className: "sendbird-channel-settings__operators-list", id: "mutedMembers", renderTitle: function() {
        return import_react12.default.createElement(
          import_react12.default.Fragment,
          null,
          import_react12.default.createElement(Icon, { className: "sendbird-openchannel-settings__operator-accordion-icon", type: IconTypes.MUTE, fillColor: IconColors.PRIMARY, width: "24px", height: "24px" }),
          import_react12.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.OPEN_CHANNEL_SETTINGS__MUTED_MEMBERS__TITLE)
        );
      }, renderContent: function() {
        return import_react12.default.createElement(
          import_react12.default.Fragment,
          null,
          import_react12.default.createElement(MutedParticipantList, null)
        );
      } }),
      import_react12.default.createElement(Accordion, { className: "sendbird-channel-settings__operators-list", id: "bannedUsers", renderTitle: function() {
        return import_react12.default.createElement(
          import_react12.default.Fragment,
          null,
          import_react12.default.createElement(Icon, { className: "sendbird-openchannel-settings__operator-accordion-icon", type: IconTypes.BAN, fillColor: IconColors.PRIMARY, width: "24px", height: "24px" }),
          import_react12.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.OPEN_CHANNEL_SETTINGS__BANNED_MEMBERS__TITLE)
        );
      }, renderContent: function() {
        return import_react12.default.createElement(
          import_react12.default.Fragment,
          null,
          import_react12.default.createElement(BannedUserList, null)
        );
      } })
    ),
    import_react12.default.createElement(DeleteChannel, null)
  );
};

// node_modules/@sendbird/uikit-react/OpenChannelSettings/components/OpenChannelSettingsUI.js
var import_react_dom10 = __toESM(require_react_dom(), 1);
function InvalidChannel(_a) {
  var onCloseClick = _a.onCloseClick;
  var stringSet = (0, import_react13.useContext)(LocalizationContext).stringSet;
  return import_react13.default.createElement(
    "div",
    { className: "sendbird-openchannel-settings" },
    import_react13.default.createElement(
      "div",
      { className: "sendbird-openchannel-settings__header" },
      import_react13.default.createElement(Label, { type: LabelTypography.H_2, color: LabelColors.ONBACKGROUND_1 }, stringSet.CHANNEL_SETTING__HEADER__TITLE),
      import_react13.default.createElement(Icon, { type: IconTypes.CLOSE, className: "sendbird-openchannel-settings__close-icon", height: "24px", width: "24px", onClick: function() {
        onCloseClick === null || onCloseClick === void 0 ? void 0 : onCloseClick();
      } })
    ),
    import_react13.default.createElement(
      "div",
      { className: "sendbird-openchannel-settings__placeholder" },
      import_react13.default.createElement(PlaceHolder, { type: PlaceHolderTypes.WRONG })
    )
  );
}
var OpenChannelUI2 = function(_a) {
  var _b, _c, _d;
  var renderOperatorUI = _a.renderOperatorUI, renderParticipantList = _a.renderParticipantList;
  var _e = useOpenChannelSettingsContext(), channel = _e.channel, onCloseClick = _e.onCloseClick, isChannelInitialized = _e.isChannelInitialized;
  var state = useSendbird().state;
  var logger = (_b = state === null || state === void 0 ? void 0 : state.config) === null || _b === void 0 ? void 0 : _b.logger;
  var user = (_d = (_c = state === null || state === void 0 ? void 0 : state.stores) === null || _c === void 0 ? void 0 : _c.userStore) === null || _d === void 0 ? void 0 : _d.user;
  var stringSet = (0, import_react13.useContext)(LocalizationContext).stringSet;
  if (isChannelInitialized && !channel) {
    return import_react13.default.createElement(InvalidChannel, { onCloseClick: function() {
      logger.info("OpenChannelSettings: Click close");
      if (onCloseClick) {
        onCloseClick();
      }
    } });
  }
  return import_react13.default.createElement(
    "div",
    { className: "sendbird-openchannel-settings" },
    (channel === null || channel === void 0 ? void 0 : channel.isOperator(user)) && ((renderOperatorUI === null || renderOperatorUI === void 0 ? void 0 : renderOperatorUI()) || import_react13.default.createElement(OperatorUI, null)),
    !(channel === null || channel === void 0 ? void 0 : channel.isOperator(user)) && import_react13.default.createElement(
      "div",
      { className: "sendbird-openchannel-settings__participant" },
      import_react13.default.createElement(
        "div",
        { className: "sendbird-openchannel-settings__header" },
        import_react13.default.createElement(Label, { type: LabelTypography.H_2, color: LabelColors.ONBACKGROUND_1 }, stringSet.OPEN_CHANNEL_SETTINGS__PARTICIPANTS_TITLE),
        import_react13.default.createElement(Icon, { type: IconTypes.CLOSE, className: "sendbird-openchannel-settings__close-icon", height: "24px", width: "24px", onClick: function() {
          onCloseClick === null || onCloseClick === void 0 ? void 0 : onCloseClick();
        } })
      ),
      (renderParticipantList === null || renderParticipantList === void 0 ? void 0 : renderParticipantList()) || import_react13.default.createElement(ParticipantList, null)
    )
  );
};

// node_modules/@sendbird/uikit-react/OpenChannelSettings.js
var import_react_dom11 = __toESM(require_react_dom(), 1);
var OpenChannelSetting = function(props) {
  return import_react14.default.createElement(
    OpenChannelSettingsProvider,
    { channelUrl: props === null || props === void 0 ? void 0 : props.channelUrl, onCloseClick: props === null || props === void 0 ? void 0 : props.onCloseClick, onBeforeUpdateChannel: props === null || props === void 0 ? void 0 : props.onBeforeUpdateChannel, onChannelModified: props === null || props === void 0 ? void 0 : props.onChannelModified, onDeleteChannel: props === null || props === void 0 ? void 0 : props.onDeleteChannel, disableUserProfile: props === null || props === void 0 ? void 0 : props.disableUserProfile, renderUserProfile: props === null || props === void 0 ? void 0 : props.renderUserProfile },
    import_react14.default.createElement(OpenChannelUI2, { renderOperatorUI: props === null || props === void 0 ? void 0 : props.renderOperatorUI, renderParticipantList: props === null || props === void 0 ? void 0 : props.renderParticipantList })
  );
};

// node_modules/@sendbird/uikit-react/index.js
var import_react15 = __toESM(require_react());
var import_react_dom12 = __toESM(require_react_dom());
export {
  App,
  Channel,
  ChannelList,
  ChannelSettings,
  MessageSearchPannel as MessageSearch,
  OpenChannel,
  OpenChannelSetting as OpenChannelSettings,
  SendbirdProvider as SendBirdProvider,
  TypingIndicatorType,
  getStringSet,
  sendbirdSelectors as sendBirdSelectors,
  sendbirdSelectors,
  useSendbird,
  useSendbirdStateContext,
  withSendBird
};
//# sourceMappingURL=@sendbird_uikit-react.js.map

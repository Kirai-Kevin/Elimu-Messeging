import {
  Avatar$1,
  AvatarDefault,
  BottomSheetMenuItem,
  Button,
  ButtonSizes,
  ButtonTypes,
  ChannelAvatar,
  Colors,
  ContextMenu,
  EMOJI_MENU_ROOT_ID,
  EmojiListItems,
  Header$1,
  Icon,
  IconButton,
  IconColors,
  IconTypes,
  ImageRenderer,
  Input,
  K,
  Label,
  LabelColors,
  LabelStringSet,
  LabelTypography,
  Loader,
  LocalizationContext,
  MENU_OBSERVING_CLASS_NAME,
  MENU_ROOT_ID,
  MODAL_ROOT,
  MenuItem$1,
  MenuItems,
  MessageMenuProvider,
  Modal,
  ModalFooter,
  OutgoingMessageStates,
  PUBSUB_TOPICS,
  PlaceHolder,
  PlaceHolderTypes,
  PublishingModuleType,
  S,
  TextButton,
  UIKitMessageTypes,
  UserListItem,
  UserProfile,
  UserProfileProvider,
  __assign,
  __awaiter,
  __extends,
  __generator,
  __spreadArray,
  _typeof,
  arrayEqual,
  changeColorToClassName,
  changeColorToClassName2,
  classnames,
  compareIds,
  copyToClipboard,
  deleteNullish,
  filterMessageListParams,
  getAllEmojisMapFromEmojiContainer,
  getBorderRadiusForMultipleImageRenderer,
  getClassName,
  getEmojiListAll,
  getEmojiListByCategoryIds,
  getEmojiMapAll,
  getEmojiTooltipString,
  getEmojiUrl,
  getHTMLTextDirection,
  getMimeTypesUIKitAccepts,
  getNicknamesMapFromMembers,
  getObservingId,
  getOutgoingMessageState,
  getSenderName,
  getSuggestedReplies,
  getUIKitFileType,
  getUIKitFileTypes,
  getUIKitMessageType,
  getUIKitMessageTypes,
  isAboutSame,
  isAdminMessage,
  isAudio,
  isAudioMessage,
  isDefaultChannelName,
  isDisabledBecauseFrozen,
  isDisabledBecauseMuted,
  isEditedMessage,
  isFailedMessage,
  isFileMessage,
  isFormMessage,
  isGif,
  isGifMessage,
  isImage,
  isImageFileInfo,
  isImageMessage,
  isMobileIOS,
  isMultipleFilesMessage,
  isOGMessage,
  isPendingMessage,
  isReactedBy,
  isReadMessage,
  isSafari,
  isSendableMessage,
  isSentMessage,
  isSentStatus,
  isSupportedFileView,
  isTemplateMessage,
  isTextMessage,
  isThreadMessage,
  isThumbnailMessage,
  isUserMessage,
  isValidTemplateMessageType,
  isVideo,
  isVideoMessage,
  isVoiceMessage,
  isVoiceMessageMimeType,
  locale,
  mergeAndSortMessages,
  noop,
  openURL,
  passUnsuccessfullMessages,
  pubSubTopics,
  pxToNumber,
  requiredArgs,
  scrollIntoLast,
  scrollToRenderedMessage,
  shouldPubSubPublishToChannel,
  shouldPubSubPublishToThread,
  toDate,
  truncateString,
  uiContainerType,
  useLocalization,
  useMediaQueryContext,
  useMessageMenuContext,
  useOnScrollPositionChangeDetector,
  usePreservedCallback,
  useSendbird,
  useThrottleCallback,
  useUserProfileContext,
  uuidv4
} from "./chunk-G45O5RRC.js";
import {
  BROWSER_SUPPORT_MIME_TYPE_LIST,
  MESSAGE_TEMPLATE_KEY,
  META_ARRAY_MESSAGE_TYPE_KEY,
  META_ARRAY_MESSAGE_TYPE_VALUE__VOICE,
  META_ARRAY_VOICE_DURATION_KEY,
  SCROLL_BOTTOM_DELAY_FOR_FETCH,
  SCROLL_BOTTOM_DELAY_FOR_SEND,
  SCROLL_BUFFER,
  SLIDER_BUTTON_ICON_SIDE_LENGTH,
  VOICE_MESSAGE_FILE_NAME,
  VOICE_MESSAGE_FILE_NAME__XM4A,
  VOICE_MESSAGE_MIME_TYPE,
  VOICE_MESSAGE_MIME_TYPE__XM4A,
  VOICE_PLAYER_AUDIO_ID,
  VOICE_PLAYER_ROOT_ID,
  VOICE_RECORDER_AUDIO_BIT_RATE,
  VOICE_RECORDER_CLICK_BUFFER_TIME,
  VOICE_RECORDER_DEFAULT_MIN
} from "./chunk-5WPCGI6B.js";
import {
  Ct
} from "./chunk-DHPKMF2M.js";
import {
  require_react_dom
} from "./chunk-G52XTN3B.js";
import {
  require_react
} from "./chunk-LXGCQ6UQ.js";
import {
  Ye
} from "./chunk-JVBXJ32W.js";
import {
  Le,
  Qe,
  Ve
} from "./chunk-TTFJWE4I.js";
import {
  Q,
  V,
  Z
} from "./chunk-KXGQOUB2.js";
import {
  __toESM
} from "./chunk-ROME4SDB.js";

// node_modules/@sendbird/uikit-react/Channel.js
var import_react77 = __toESM(require_react());

// node_modules/@sendbird/uikit-react/Channel/context.js
var import_react4 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-mxwNwHvq.js
var MAX_USER_MENTION_COUNT = 10;
var MAX_USER_SUGGESTION_COUNT = 15;
var USER_MENTION_TEMP_CHAR = "@";
var UIKIT_COMPATIBLE_FORM_VERSION = 1;
var ThreadReplySelectType;
(function(ThreadReplySelectType2) {
  ThreadReplySelectType2["PARENT"] = "PARENT";
  ThreadReplySelectType2["THREAD"] = "THREAD";
})(ThreadReplySelectType || (ThreadReplySelectType = {}));

// node_modules/@sendbird/uikit-react/chunks/bundle-B61f7NvF.js
function getIsReactionEnabled(_a2) {
  var channel = _a2.channel, config = _a2.config, moduleLevel = _a2.moduleLevel;
  if (!channel || channel.isBroadcast || channel.isEphemeral) {
    return false;
  }
  if (channel.isSuper)
    return moduleLevel !== null && moduleLevel !== void 0 ? moduleLevel : config.groupChannel.enableReactionsSupergroup;
  return moduleLevel !== null && moduleLevel !== void 0 ? moduleLevel : config.groupChannel.enableReactions;
}

// node_modules/@sendbird/uikit-react/chunks/bundle-CDOQ--pz.js
function isDate(value) {
  requiredArgs(1, arguments);
  return value instanceof Date || _typeof(value) === "object" && Object.prototype.toString.call(value) === "[object Date]";
}
function isValid(dirtyDate) {
  requiredArgs(1, arguments);
  if (!isDate(dirtyDate) && typeof dirtyDate !== "number") {
    return false;
  }
  var date = toDate(dirtyDate);
  return !isNaN(Number(date));
}
function toInteger(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }
  var number = Number(dirtyNumber);
  if (isNaN(number)) {
    return number;
  }
  return number < 0 ? Math.ceil(number) : Math.floor(number);
}
function addMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var timestamp = toDate(dirtyDate).getTime();
  var amount = toInteger(dirtyAmount);
  return new Date(timestamp + amount);
}
function subMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, -amount);
}
var MILLISECONDS_IN_DAY = 864e5;
function getUTCDayOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var timestamp = date.getTime();
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
  var startOfYearTimestamp = date.getTime();
  var difference = timestamp - startOfYearTimestamp;
  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
}
function startOfUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var weekStartsOn = 1;
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}
function getUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var fourthOfJanuaryOfNextYear = /* @__PURE__ */ new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = /* @__PURE__ */ new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}
function startOfUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var year = getUTCISOWeekYear(dirtyDate);
  var fourthOfJanuary = /* @__PURE__ */ new Date(0);
  fourthOfJanuary.setUTCFullYear(year, 0, 4);
  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCISOWeek(fourthOfJanuary);
  return date;
}
var MILLISECONDS_IN_WEEK$1 = 6048e5;
function getUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;
}
var defaultOptions = {};
function getDefaultOptions() {
  return defaultOptions;
}
function startOfUTCWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var weekStartsOn = toInteger((_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date = toDate(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}
function getUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var year = date.getUTCFullYear();
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var firstWeekOfNextYear = /* @__PURE__ */ new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options);
  var firstWeekOfThisYear = /* @__PURE__ */ new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options);
  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}
function startOfUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions();
  var firstWeekContainsDate = toInteger((_ref = (_ref2 = (_ref3 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref !== void 0 ? _ref : 1);
  var year = getUTCWeekYear(dirtyDate, options);
  var firstWeek = /* @__PURE__ */ new Date(0);
  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCWeek(firstWeek, options);
  return date;
}
var MILLISECONDS_IN_WEEK = 6048e5;
function getUTCWeek(dirtyDate, options) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}
function addLeadingZeros(number, targetLength) {
  var sign = number < 0 ? "-" : "";
  var output = Math.abs(number).toString();
  while (output.length < targetLength) {
    output = "0" + output;
  }
  return sign + output;
}
var formatters$1 = {
  // Year
  y: function y(date, token) {
    var signedYear = date.getUTCFullYear();
    var year = signedYear > 0 ? signedYear : 1 - signedYear;
    return addLeadingZeros(token === "yy" ? year % 100 : year, token.length);
  },
  // Month
  M: function M(date, token) {
    var month = date.getUTCMonth();
    return token === "M" ? String(month + 1) : addLeadingZeros(month + 1, 2);
  },
  // Day of the month
  d: function d(date, token) {
    return addLeadingZeros(date.getUTCDate(), token.length);
  },
  // AM or PM
  a: function a(date, token) {
    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return dayPeriodEnumValue.toUpperCase();
      case "aaa":
        return dayPeriodEnumValue;
      case "aaaaa":
        return dayPeriodEnumValue[0];
      case "aaaa":
      default:
        return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";
    }
  },
  // Hour [1-12]
  h: function h(date, token) {
    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
  },
  // Hour [0-23]
  H: function H(date, token) {
    return addLeadingZeros(date.getUTCHours(), token.length);
  },
  // Minute
  m: function m(date, token) {
    return addLeadingZeros(date.getUTCMinutes(), token.length);
  },
  // Second
  s: function s(date, token) {
    return addLeadingZeros(date.getUTCSeconds(), token.length);
  },
  // Fraction of second
  S: function S2(date, token) {
    var numberOfDigits = token.length;
    var milliseconds = date.getUTCMilliseconds();
    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
    return addLeadingZeros(fractionalSeconds, token.length);
  }
};
var dayPeriodEnum = {
  am: "am",
  pm: "pm",
  midnight: "midnight",
  noon: "noon",
  morning: "morning",
  afternoon: "afternoon",
  evening: "evening",
  night: "night"
};
var formatters = {
  // Era
  G: function G(date, token, localize) {
    var era = date.getUTCFullYear() > 0 ? 1 : 0;
    switch (token) {
      case "G":
      case "GG":
      case "GGG":
        return localize.era(era, {
          width: "abbreviated"
        });
      case "GGGGG":
        return localize.era(era, {
          width: "narrow"
        });
      case "GGGG":
      default:
        return localize.era(era, {
          width: "wide"
        });
    }
  },
  // Year
  y: function y2(date, token, localize) {
    if (token === "yo") {
      var signedYear = date.getUTCFullYear();
      var year = signedYear > 0 ? signedYear : 1 - signedYear;
      return localize.ordinalNumber(year, {
        unit: "year"
      });
    }
    return formatters$1.y(date, token);
  },
  // Local week-numbering year
  Y: function Y(date, token, localize, options) {
    var signedWeekYear = getUTCWeekYear(date, options);
    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
    if (token === "YY") {
      var twoDigitYear = weekYear % 100;
      return addLeadingZeros(twoDigitYear, 2);
    }
    if (token === "Yo") {
      return localize.ordinalNumber(weekYear, {
        unit: "year"
      });
    }
    return addLeadingZeros(weekYear, token.length);
  },
  // ISO week-numbering year
  R: function R(date, token) {
    var isoWeekYear = getUTCISOWeekYear(date);
    return addLeadingZeros(isoWeekYear, token.length);
  },
  // Extended year. This is a single number designating the year of this calendar system.
  // The main difference between `y` and `u` localizers are B.C. years:
  // | Year | `y` | `u` |
  // |------|-----|-----|
  // | AC 1 |   1 |   1 |
  // | BC 1 |   1 |   0 |
  // | BC 2 |   2 |  -1 |
  // Also `yy` always returns the last two digits of a year,
  // while `uu` pads single digit years to 2 characters and returns other years unchanged.
  u: function u(date, token) {
    var year = date.getUTCFullYear();
    return addLeadingZeros(year, token.length);
  },
  // Quarter
  Q: function Q2(date, token, localize) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case "Q":
        return String(quarter);
      case "QQ":
        return addLeadingZeros(quarter, 2);
      case "Qo":
        return localize.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "QQQ":
        return localize.quarter(quarter, {
          width: "abbreviated",
          context: "formatting"
        });
      case "QQQQQ":
        return localize.quarter(quarter, {
          width: "narrow",
          context: "formatting"
        });
      case "QQQQ":
      default:
        return localize.quarter(quarter, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone quarter
  q: function q(date, token, localize) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      case "q":
        return String(quarter);
      case "qq":
        return addLeadingZeros(quarter, 2);
      case "qo":
        return localize.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "qqq":
        return localize.quarter(quarter, {
          width: "abbreviated",
          context: "standalone"
        });
      case "qqqqq":
        return localize.quarter(quarter, {
          width: "narrow",
          context: "standalone"
        });
      case "qqqq":
      default:
        return localize.quarter(quarter, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // Month
  M: function M2(date, token, localize) {
    var month = date.getUTCMonth();
    switch (token) {
      case "M":
      case "MM":
        return formatters$1.M(date, token);
      case "Mo":
        return localize.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "MMM":
        return localize.month(month, {
          width: "abbreviated",
          context: "formatting"
        });
      case "MMMMM":
        return localize.month(month, {
          width: "narrow",
          context: "formatting"
        });
      case "MMMM":
      default:
        return localize.month(month, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone month
  L: function L(date, token, localize) {
    var month = date.getUTCMonth();
    switch (token) {
      case "L":
        return String(month + 1);
      case "LL":
        return addLeadingZeros(month + 1, 2);
      case "Lo":
        return localize.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "LLL":
        return localize.month(month, {
          width: "abbreviated",
          context: "standalone"
        });
      case "LLLLL":
        return localize.month(month, {
          width: "narrow",
          context: "standalone"
        });
      case "LLLL":
      default:
        return localize.month(month, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // Local week of year
  w: function w(date, token, localize, options) {
    var week = getUTCWeek(date, options);
    if (token === "wo") {
      return localize.ordinalNumber(week, {
        unit: "week"
      });
    }
    return addLeadingZeros(week, token.length);
  },
  // ISO week of year
  I: function I(date, token, localize) {
    var isoWeek = getUTCISOWeek(date);
    if (token === "Io") {
      return localize.ordinalNumber(isoWeek, {
        unit: "week"
      });
    }
    return addLeadingZeros(isoWeek, token.length);
  },
  // Day of the month
  d: function d2(date, token, localize) {
    if (token === "do") {
      return localize.ordinalNumber(date.getUTCDate(), {
        unit: "date"
      });
    }
    return formatters$1.d(date, token);
  },
  // Day of year
  D: function D(date, token, localize) {
    var dayOfYear = getUTCDayOfYear(date);
    if (token === "Do") {
      return localize.ordinalNumber(dayOfYear, {
        unit: "dayOfYear"
      });
    }
    return addLeadingZeros(dayOfYear, token.length);
  },
  // Day of week
  E: function E(date, token, localize) {
    var dayOfWeek = date.getUTCDay();
    switch (token) {
      case "E":
      case "EE":
      case "EEE":
        return localize.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "EEEEE":
        return localize.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "EEEEEE":
        return localize.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "EEEE":
      default:
        return localize.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Local day of week
  e: function e(date, token, localize, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "e":
        return String(localDayOfWeek);
      case "ee":
        return addLeadingZeros(localDayOfWeek, 2);
      case "eo":
        return localize.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "eee":
        return localize.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "eeeee":
        return localize.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "eeeeee":
        return localize.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "eeee":
      default:
        return localize.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Stand-alone local day of week
  c: function c(date, token, localize, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "c":
        return String(localDayOfWeek);
      case "cc":
        return addLeadingZeros(localDayOfWeek, token.length);
      case "co":
        return localize.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "ccc":
        return localize.day(dayOfWeek, {
          width: "abbreviated",
          context: "standalone"
        });
      case "ccccc":
        return localize.day(dayOfWeek, {
          width: "narrow",
          context: "standalone"
        });
      case "cccccc":
        return localize.day(dayOfWeek, {
          width: "short",
          context: "standalone"
        });
      case "cccc":
      default:
        return localize.day(dayOfWeek, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  // ISO day of week
  i: function i(date, token, localize) {
    var dayOfWeek = date.getUTCDay();
    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
    switch (token) {
      case "i":
        return String(isoDayOfWeek);
      case "ii":
        return addLeadingZeros(isoDayOfWeek, token.length);
      case "io":
        return localize.ordinalNumber(isoDayOfWeek, {
          unit: "day"
        });
      case "iii":
        return localize.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "iiiii":
        return localize.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "iiiiii":
        return localize.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "iiii":
      default:
        return localize.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM or PM
  a: function a2(date, token, localize) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "aaa":
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "aaaaa":
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "aaaa":
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // AM, PM, midnight, noon
  b: function b(date, token, localize) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours === 12) {
      dayPeriodEnumValue = dayPeriodEnum.noon;
    } else if (hours === 0) {
      dayPeriodEnumValue = dayPeriodEnum.midnight;
    } else {
      dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    }
    switch (token) {
      case "b":
      case "bb":
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "bbb":
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        }).toLowerCase();
      case "bbbbb":
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "bbbb":
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // in the morning, in the afternoon, in the evening, at night
  B: function B(date, token, localize) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours >= 17) {
      dayPeriodEnumValue = dayPeriodEnum.evening;
    } else if (hours >= 12) {
      dayPeriodEnumValue = dayPeriodEnum.afternoon;
    } else if (hours >= 4) {
      dayPeriodEnumValue = dayPeriodEnum.morning;
    } else {
      dayPeriodEnumValue = dayPeriodEnum.night;
    }
    switch (token) {
      case "B":
      case "BB":
      case "BBB":
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "BBBBB":
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "BBBB":
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  // Hour [1-12]
  h: function h2(date, token, localize) {
    if (token === "ho") {
      var hours = date.getUTCHours() % 12;
      if (hours === 0)
        hours = 12;
      return localize.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return formatters$1.h(date, token);
  },
  // Hour [0-23]
  H: function H2(date, token, localize) {
    if (token === "Ho") {
      return localize.ordinalNumber(date.getUTCHours(), {
        unit: "hour"
      });
    }
    return formatters$1.H(date, token);
  },
  // Hour [0-11]
  K: function K2(date, token, localize) {
    var hours = date.getUTCHours() % 12;
    if (token === "Ko") {
      return localize.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  // Hour [1-24]
  k: function k(date, token, localize) {
    var hours = date.getUTCHours();
    if (hours === 0)
      hours = 24;
    if (token === "ko") {
      return localize.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  // Minute
  m: function m2(date, token, localize) {
    if (token === "mo") {
      return localize.ordinalNumber(date.getUTCMinutes(), {
        unit: "minute"
      });
    }
    return formatters$1.m(date, token);
  },
  // Second
  s: function s2(date, token, localize) {
    if (token === "so") {
      return localize.ordinalNumber(date.getUTCSeconds(), {
        unit: "second"
      });
    }
    return formatters$1.s(date, token);
  },
  // Fraction of second
  S: function S3(date, token) {
    return formatters$1.S(date, token);
  },
  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
  X: function X(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    if (timezoneOffset === 0) {
      return "Z";
    }
    switch (token) {
      case "X":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "XXXX":
      case "XX":
        return formatTimezone(timezoneOffset);
      case "XXXXX":
      case "XXX":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
  x: function x(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "x":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "xxxx":
      case "xx":
        return formatTimezone(timezoneOffset);
      case "xxxxx":
      case "xxx":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (GMT)
  O: function O(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "O":
      case "OO":
      case "OOO":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "OOOO":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  // Timezone (specific non-location)
  z: function z(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "z":
      case "zz":
      case "zzz":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "zzzz":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  // Seconds timestamp
  t: function t(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = Math.floor(originalDate.getTime() / 1e3);
    return addLeadingZeros(timestamp, token.length);
  },
  // Milliseconds timestamp
  T: function T(date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = originalDate.getTime();
    return addLeadingZeros(timestamp, token.length);
  }
};
function formatTimezoneShort(offset, dirtyDelimiter) {
  var sign = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = Math.floor(absOffset / 60);
  var minutes = absOffset % 60;
  if (minutes === 0) {
    return sign + String(hours);
  }
  var delimiter = dirtyDelimiter;
  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
}
function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
  if (offset % 60 === 0) {
    var sign = offset > 0 ? "-" : "+";
    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
  }
  return formatTimezone(offset, dirtyDelimiter);
}
function formatTimezone(offset, dirtyDelimiter) {
  var delimiter = dirtyDelimiter || "";
  var sign = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
  var minutes = addLeadingZeros(absOffset % 60, 2);
  return sign + hours + delimiter + minutes;
}
var dateLongFormatter = function dateLongFormatter2(pattern, formatLong) {
  switch (pattern) {
    case "P":
      return formatLong.date({
        width: "short"
      });
    case "PP":
      return formatLong.date({
        width: "medium"
      });
    case "PPP":
      return formatLong.date({
        width: "long"
      });
    case "PPPP":
    default:
      return formatLong.date({
        width: "full"
      });
  }
};
var timeLongFormatter = function timeLongFormatter2(pattern, formatLong) {
  switch (pattern) {
    case "p":
      return formatLong.time({
        width: "short"
      });
    case "pp":
      return formatLong.time({
        width: "medium"
      });
    case "ppp":
      return formatLong.time({
        width: "long"
      });
    case "pppp":
    default:
      return formatLong.time({
        width: "full"
      });
  }
};
var dateTimeLongFormatter = function dateTimeLongFormatter2(pattern, formatLong) {
  var matchResult = pattern.match(/(P+)(p+)?/) || [];
  var datePattern = matchResult[1];
  var timePattern = matchResult[2];
  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong);
  }
  var dateTimeFormat;
  switch (datePattern) {
    case "P":
      dateTimeFormat = formatLong.dateTime({
        width: "short"
      });
      break;
    case "PP":
      dateTimeFormat = formatLong.dateTime({
        width: "medium"
      });
      break;
    case "PPP":
      dateTimeFormat = formatLong.dateTime({
        width: "long"
      });
      break;
    case "PPPP":
    default:
      dateTimeFormat = formatLong.dateTime({
        width: "full"
      });
      break;
  }
  return dateTimeFormat.replace("{{date}}", dateLongFormatter(datePattern, formatLong)).replace("{{time}}", timeLongFormatter(timePattern, formatLong));
};
var longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter
};
function getTimezoneOffsetInMilliseconds(date) {
  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
  utcDate.setUTCFullYear(date.getFullYear());
  return date.getTime() - utcDate.getTime();
}
var protectedDayOfYearTokens = ["D", "DD"];
var protectedWeekYearTokens = ["YY", "YYYY"];
function isProtectedDayOfYearToken(token) {
  return protectedDayOfYearTokens.indexOf(token) !== -1;
}
function isProtectedWeekYearToken(token) {
  return protectedWeekYearTokens.indexOf(token) !== -1;
}
function throwProtectedError(token, format2, input) {
  if (token === "YYYY") {
    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "YY") {
    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "D") {
    throw new RangeError("Use `d` instead of `D` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  } else if (token === "DD") {
    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  }
}
var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
function format(dirtyDate, dirtyFormatStr, options) {
  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
  requiredArgs(2, arguments);
  var formatStr = String(dirtyFormatStr);
  var defaultOptions2 = getDefaultOptions();
  var locale$1 = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions2.locale) !== null && _ref !== void 0 ? _ref : locale;
  var firstWeekContainsDate = toInteger((_ref2 = (_ref3 = (_ref4 = (_options$firstWeekCon = options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) !== null && _options$firstWeekCon !== void 0 ? _options$firstWeekCon : options === null || options === void 0 ? void 0 : (_options$locale2 = options.locale) === null || _options$locale2 === void 0 ? void 0 : (_options$locale2$opti = _options$locale2.options) === null || _options$locale2$opti === void 0 ? void 0 : _options$locale2$opti.firstWeekContainsDate) !== null && _ref4 !== void 0 ? _ref4 : defaultOptions2.firstWeekContainsDate) !== null && _ref3 !== void 0 ? _ref3 : (_defaultOptions$local = defaultOptions2.locale) === null || _defaultOptions$local === void 0 ? void 0 : (_defaultOptions$local2 = _defaultOptions$local.options) === null || _defaultOptions$local2 === void 0 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) !== null && _ref2 !== void 0 ? _ref2 : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var weekStartsOn = toInteger((_ref5 = (_ref6 = (_ref7 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 ? void 0 : (_options$locale3 = options.locale) === null || _options$locale3 === void 0 ? void 0 : (_options$locale3$opti = _options$locale3.options) === null || _options$locale3$opti === void 0 ? void 0 : _options$locale3$opti.weekStartsOn) !== null && _ref7 !== void 0 ? _ref7 : defaultOptions2.weekStartsOn) !== null && _ref6 !== void 0 ? _ref6 : (_defaultOptions$local3 = defaultOptions2.locale) === null || _defaultOptions$local3 === void 0 ? void 0 : (_defaultOptions$local4 = _defaultOptions$local3.options) === null || _defaultOptions$local4 === void 0 ? void 0 : _defaultOptions$local4.weekStartsOn) !== null && _ref5 !== void 0 ? _ref5 : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  if (!locale$1.localize) {
    throw new RangeError("locale must contain localize property");
  }
  if (!locale$1.formatLong) {
    throw new RangeError("locale must contain formatLong property");
  }
  var originalDate = toDate(dirtyDate);
  if (!isValid(originalDate)) {
    throw new RangeError("Invalid time value");
  }
  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
  var utcDate = subMilliseconds(originalDate, timezoneOffset);
  var formatterOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale: locale$1,
    _originalDate: originalDate
  };
  var result = formatStr.match(longFormattingTokensRegExp).map(function(substring) {
    var firstCharacter = substring[0];
    if (firstCharacter === "p" || firstCharacter === "P") {
      var longFormatter = longFormatters[firstCharacter];
      return longFormatter(substring, locale$1.formatLong);
    }
    return substring;
  }).join("").match(formattingTokensRegExp).map(function(substring) {
    if (substring === "''") {
      return "'";
    }
    var firstCharacter = substring[0];
    if (firstCharacter === "'") {
      return cleanEscapedString(substring);
    }
    var formatter = formatters[firstCharacter];
    if (formatter) {
      if (!(options !== null && options !== void 0 && options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
      }
      if (!(options !== null && options !== void 0 && options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(substring)) {
        throwProtectedError(substring, dirtyFormatStr, String(dirtyDate));
      }
      return formatter(utcDate, substring, locale$1.localize, formatterOptions);
    }
    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
      throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
    }
    return substring;
  }).join("");
  return result;
}
function cleanEscapedString(input) {
  var matched = input.match(escapedStringRegExp);
  if (!matched) {
    return input;
  }
  return matched[1].replace(doubleQuoteRegExp, "'");
}

// node_modules/@sendbird/uikit-react/chunks/bundle-DMK903AV.js
var import_react = __toESM(require_react(), 1);
var PREV_RESULT_SIZE = 30;
var NEXT_RESULT_SIZE = 15;
var RESET_MESSAGES = "RESET_MESSAGES";
var FETCH_INITIAL_MESSAGES_START = "FETCH_INITIAL_MESSAGES_START";
var FETCH_INITIAL_MESSAGES_SUCCESS = "FETCH_INITIAL_MESSAGES_SUCCESS";
var FETCH_INITIAL_MESSAGES_FAILURE = "FETCH_INITIAL_MESSAGES_FAILURE";
var FETCH_PREV_MESSAGES_SUCCESS = "FETCH_PREV_MESSAGES_SUCCESS";
var FETCH_PREV_MESSAGES_FAILURE = "FETCH_PREV_MESSAGES_FAILURE";
var FETCH_NEXT_MESSAGES_SUCCESS = "FETCH_NEXT_MESSAGES_SUCCESS";
var FETCH_NEXT_MESSAGES_FAILURE = "FETCH_NEXT_MESSAGES_FAILURE";
var SEND_MESSAGE_START = "SEND_MESSAGE_START";
var SEND_MESSAGE_SUCCESS = "SEND_MESSAGE_SUCCESS";
var SEND_MESSAGE_FAILURE = "SEND_MESSAGE_FAILURE";
var RESEND_MESSAGE_START = "RESEND_MESSAGE_START";
var ON_MESSAGE_RECEIVED = "ON_MESSAGE_RECEIVED";
var ON_MESSAGE_UPDATED = "ON_MESSAGE_UPDATED";
var ON_MESSAGE_THREAD_INFO_UPDATED = "ON_MESSAGE_THREAD_INFO_UPDATED";
var ON_MESSAGE_DELETED = "ON_MESSAGE_DELETED";
var ON_MESSAGE_DELETED_BY_REQ_ID = "ON_MESSAGE_DELETED_BY_REQ_ID";
var SET_CURRENT_CHANNEL = "SET_CURRENT_CHANNEL";
var SET_CHANNEL_INVALID = "SET_CHANNEL_INVALID";
var MARK_AS_READ = "MARK_AS_READ";
var ON_REACTION_UPDATED = "ON_REACTION_UPDATED";
var SET_EMOJI_CONTAINER = "SET_EMOJI_CONTAINER";
var MESSAGE_LIST_PARAMS_CHANGED = "MESSAGE_LIST_PARAMS_CHANGED";
var ON_FILE_INFO_UPLOADED = "ON_FILE_INFO_UPLOADED";
var ON_TYPING_STATUS_UPDATED = "ON_TYPING_STATUS_UPDATED";
var channelActions = Object.freeze({
  __proto__: null,
  FETCH_INITIAL_MESSAGES_FAILURE,
  FETCH_INITIAL_MESSAGES_START,
  FETCH_INITIAL_MESSAGES_SUCCESS,
  FETCH_NEXT_MESSAGES_FAILURE,
  FETCH_NEXT_MESSAGES_SUCCESS,
  FETCH_PREV_MESSAGES_FAILURE,
  FETCH_PREV_MESSAGES_SUCCESS,
  MARK_AS_READ,
  MESSAGE_LIST_PARAMS_CHANGED,
  ON_FILE_INFO_UPLOADED,
  ON_MESSAGE_DELETED,
  ON_MESSAGE_DELETED_BY_REQ_ID,
  ON_MESSAGE_RECEIVED,
  ON_MESSAGE_THREAD_INFO_UPDATED,
  ON_MESSAGE_UPDATED,
  ON_REACTION_UPDATED,
  ON_TYPING_STATUS_UPDATED,
  RESEND_MESSAGE_START,
  RESET_MESSAGES,
  SEND_MESSAGE_FAILURE,
  SEND_MESSAGE_START,
  SEND_MESSAGE_SUCCESS,
  SET_CHANNEL_INVALID,
  SET_CURRENT_CHANNEL,
  SET_EMOJI_CONTAINER
});
function useInitialMessagesFetch(_a2, _b2) {
  var currentGroupChannel = _a2.currentGroupChannel, initialTimeStamp = _a2.initialTimeStamp, userFilledMessageListQuery = _a2.userFilledMessageListQuery, replyType = _a2.replyType, setIsScrolled = _a2.setIsScrolled;
  var logger = _b2.logger, scrollRef = _b2.scrollRef, messagesDispatcher = _b2.messagesDispatcher;
  var channelUrl = currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.url;
  var fetchMessages = (0, import_react.useCallback)(function() {
    logger.info("Channel useInitialMessagesFetch: Setup started", currentGroupChannel);
    setIsScrolled(false);
    messagesDispatcher({
      type: RESET_MESSAGES,
      payload: null
    });
    if (currentGroupChannel && (currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.getMessagesByTimestamp)) {
      var messageListParams_1 = {
        prevResultSize: PREV_RESULT_SIZE,
        isInclusive: true,
        includeReactions: true,
        includeMetaArray: true
      };
      if (initialTimeStamp) {
        messageListParams_1.nextResultSize = NEXT_RESULT_SIZE;
      }
      if (replyType === "QUOTE_REPLY" || replyType === "THREAD") {
        messageListParams_1.includeThreadInfo = true;
        messageListParams_1.includeParentMessageInfo = true;
        messageListParams_1.replyType = Q.ONLY_REPLY_TO_CHANNEL;
      }
      if (userFilledMessageListQuery) {
        Object.keys(userFilledMessageListQuery).forEach(function(key) {
          messageListParams_1[key] = userFilledMessageListQuery[key];
        });
      }
      if (replyType && (replyType === "QUOTE_REPLY" || replyType === "THREAD") || userFilledMessageListQuery) {
        logger.info("Channel useInitialMessagesFetch: Setup messageListParams", messageListParams_1);
        messagesDispatcher({
          type: MESSAGE_LIST_PARAMS_CHANGED,
          payload: messageListParams_1
        });
      }
      logger.info("Channel: Fetching messages", { currentGroupChannel, userFilledMessageListQuery });
      messagesDispatcher({
        type: FETCH_INITIAL_MESSAGES_START,
        payload: null
      });
      currentGroupChannel.getMessagesByTimestamp(initialTimeStamp || (/* @__PURE__ */ new Date()).getTime(), messageListParams_1).then(function(messages) {
        messagesDispatcher({
          type: FETCH_INITIAL_MESSAGES_SUCCESS,
          payload: {
            currentGroupChannel,
            messages
          }
        });
      }).catch(function(error) {
        logger.error("Channel: Fetching messages failed", error);
        messagesDispatcher({
          type: FETCH_INITIAL_MESSAGES_FAILURE,
          payload: { currentGroupChannel }
        });
      }).finally(function() {
        if (!initialTimeStamp) {
          setTimeout(function() {
            return scrollIntoLast(0, scrollRef, setIsScrolled);
          }, SCROLL_BOTTOM_DELAY_FOR_FETCH);
        } else {
          setTimeout(function() {
            scrollToRenderedMessage(scrollRef, initialTimeStamp, setIsScrolled);
          }, 500);
        }
      });
    }
  }, [channelUrl, userFilledMessageListQuery, initialTimeStamp]);
  (0, import_react.useEffect)(function() {
    fetchMessages();
  }, [fetchMessages]);
  return fetchMessages;
}

// node_modules/@sendbird/uikit-react/chunks/bundle-DhzCuHhn.js
var import_react2 = __toESM(require_react(), 1);
function useReconnectOnIdle(isOnline, currentGroupChannel, reconnectOnIdle) {
  if (reconnectOnIdle === void 0) {
    reconnectOnIdle = true;
  }
  var _a2 = (0, import_react2.useState)(false), isTabHidden = _a2[0], setIsTabHidden = _a2[1];
  var wasOffline = !isOnline;
  (0, import_react2.useEffect)(function() {
    var handleVisibilityChange = function() {
      if (reconnectOnIdle) {
        setIsTabHidden(document.hidden);
      }
    };
    document.addEventListener("visibilitychange", handleVisibilityChange);
    return function() {
      document.removeEventListener("visibilitychange", handleVisibilityChange);
    };
  }, [reconnectOnIdle, document.hidden]);
  var shouldReconnect = wasOffline && !!currentGroupChannel && !isTabHidden;
  return { shouldReconnect };
}

// node_modules/@sendbird/uikit-react/chunks/bundle-CCDeoxT_.js
function getCaseResolvedReplyType(replyType) {
  return {
    lowerCase: replyType.toLowerCase(),
    upperCase: replyType.toUpperCase()
  };
}
function getCaseResolvedThreadReplySelectType(threadReplySelectType) {
  return {
    lowerCase: threadReplySelectType.toLowerCase(),
    upperCase: threadReplySelectType.toUpperCase()
  };
}

// node_modules/@sendbird/uikit-react/chunks/bundle-BlD_kPlV.js
var import_react3 = __toESM(require_react(), 1);
var getNicknamesMapFromMembers2 = function(members) {
  if (members === void 0) {
    members = [];
  }
  var nicknamesMap = /* @__PURE__ */ new Map();
  for (var memberIndex = 0; memberIndex < members.length; memberIndex += 1) {
    var _a2 = members[memberIndex], userId = _a2.userId, nickname = _a2.nickname;
    nicknamesMap.set(userId, nickname);
  }
  return nicknamesMap;
};
var getParentMessageFrom = function(message) {
  if (!message) {
    return null;
  }
  if (isParentMessage(message)) {
    return message;
  }
  if (isThreadMessage2(message)) {
    return (message === null || message === void 0 ? void 0 : message.parentMessage) || null;
  }
  return null;
};
var isParentMessage = function(message) {
  return (message === null || message === void 0 ? void 0 : message.parentMessage) === null && typeof (message === null || message === void 0 ? void 0 : message.parentMessageId) === "number" && !(message === null || message === void 0 ? void 0 : message.parentMessageId);
};
var isThreadMessage2 = function(message) {
  return (message === null || message === void 0 ? void 0 : message.parentMessage) !== null && typeof (message === null || message === void 0 ? void 0 : message.parentMessageId) === "number" && (message === null || message === void 0 ? void 0 : message.parentMessageId) > 0 && (message === null || message === void 0 ? void 0 : message.threadInfo) === null;
};
var isAboutSame2 = function(a3, b2, px) {
  return Math.abs(a3 - b2) <= px;
};
var isEmpty = function(val) {
  return val === null || val === void 0;
};
function compareIds2(a3, b2) {
  if (isEmpty(a3) || isEmpty(b2)) {
    return false;
  }
  var aString = a3.toString();
  var bString = b2.toString();
  return aString === bString;
}
var scrollIntoLast2 = function(intialTry) {
  if (intialTry === void 0) {
    intialTry = 0;
  }
  var MAX_TRIES = 10;
  var currentTry = intialTry;
  if (currentTry > MAX_TRIES) {
    return;
  }
  try {
    var scrollDOM = document.querySelector(".sendbird-thread-ui--scroll");
    if (scrollDOM) {
      scrollDOM.scrollTop = scrollDOM.scrollHeight;
    }
  } catch (error) {
    setTimeout(function() {
      scrollIntoLast2(currentTry + 1);
    }, 500 * currentTry);
  }
};
var useSendMultipleFilesMessage = function(_a2, _b2) {
  var currentChannel = _a2.currentChannel, onBeforeSendMultipleFilesMessage = _a2.onBeforeSendMultipleFilesMessage, publishingModules = _a2.publishingModules;
  var logger = _b2.logger, pubSub = _b2.pubSub, scrollRef = _b2.scrollRef;
  var sendMessage = (0, import_react3.useCallback)(function(files, quoteMessage) {
    return new Promise(function(resolve, reject) {
      if (!currentChannel) {
        logger.warning("Channel: Sending MFm failed, because currentChannel is null.", { currentChannel });
        reject();
      }
      if (files.length <= 1) {
        logger.warning("Channel: Sending MFM failed, because there are no multiple files.", { files });
        reject();
      }
      var messageParams = {
        fileInfoList: files.map(function(file) {
          return {
            file,
            fileName: file.name,
            fileSize: file.size,
            mimeType: file.type
          };
        })
      };
      if (quoteMessage) {
        messageParams.isReplyToChannel = true;
        messageParams.parentMessageId = quoteMessage.messageId;
      }
      if (typeof onBeforeSendMultipleFilesMessage === "function") {
        messageParams = onBeforeSendMultipleFilesMessage(files, quoteMessage);
      }
      logger.info("Channel: Start sending MFM", { messageParams });
      try {
        currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.sendMultipleFilesMessage(messageParams).onFileUploaded(function(requestId, index, uploadableFileInfo, error) {
          logger.info("Channel: onFileUploaded during sending MFM", {
            requestId,
            index,
            error,
            uploadableFileInfo
          });
          pubSub.publish(pubSubTopics.ON_FILE_INFO_UPLOADED, {
            response: {
              channelUrl: currentChannel.url,
              requestId,
              index,
              uploadableFileInfo,
              error
            },
            publishingModules
          });
        }).onPending(function(pendingMessage) {
          logger.info("Channel: in progress of sending MFM", { pendingMessage, fileInfoList: messageParams.fileInfoList });
          pubSub.publish(pubSubTopics.SEND_MESSAGE_START, {
            message: pendingMessage,
            channel: currentChannel,
            publishingModules
          });
          setTimeout(function() {
            if (scrollRef && shouldPubSubPublishToChannel(publishingModules)) {
              scrollIntoLast(0, scrollRef);
            }
            if (shouldPubSubPublishToThread(publishingModules)) {
              scrollIntoLast2(0);
            }
          }, SCROLL_BOTTOM_DELAY_FOR_SEND);
        }).onFailed(function(error, failedMessage) {
          logger.error("Channel: Sending MFM failed.", { error, failedMessage });
          pubSub.publish(pubSubTopics.SEND_MESSAGE_FAILED, {
            channel: currentChannel,
            message: failedMessage,
            publishingModules
          });
          reject(error);
        }).onSucceeded(function(succeededMessage) {
          logger.info("Channel: Sending voice message success!", { succeededMessage });
          pubSub.publish(pubSubTopics.SEND_FILE_MESSAGE, {
            channel: currentChannel,
            message: succeededMessage,
            publishingModules
          });
          resolve(succeededMessage);
        });
      } catch (error) {
        logger.error("Channel: Sending MFM failed.", { error });
        reject(error);
      }
    });
  }, [
    currentChannel,
    onBeforeSendMultipleFilesMessage,
    publishingModules
  ]);
  return [sendMessage];
};

// node_modules/@sendbird/uikit-react/Channel/context.js
var initialState = {
  initialized: false,
  loading: true,
  allMessages: [],
  /**
   * localMessages: pending & failed messages
   */
  localMessages: [],
  currentGroupChannel: null,
  // for scrollup
  hasMorePrev: false,
  oldestMessageTimeStamp: 0,
  // for scroll down
  // onScrollDownCallback is added for navigation to different timestamps on messageSearch
  // hasMorePrev, onScrollCallback -> scroll up(default behavior)
  // hasMoreNext, onScrollDownCallback -> scroll down
  hasMoreNext: false,
  latestMessageTimeStamp: 0,
  emojiContainer: { emojiCategories: [], emojiHash: "" },
  /** @deprecated Please use `unreadSinceDate` instead. * */
  unreadSince: null,
  /**
   * unreadSinceDate is a date information about message unread.
   * It's used only for the {unreadSinceDate && <UnreadCount unreadSinceDate={unreadSinceDate} />}
   */
  unreadSinceDate: null,
  isInvalid: false,
  readStatus: null,
  messageListParams: null,
  typingMembers: []
};
var getOldestMessageTimeStamp = function(messages) {
  if (messages === void 0) {
    messages = [];
  }
  var oldestMessage = messages[0];
  return oldestMessage && oldestMessage.createdAt || null;
};
var getLatestMessageTimeStamp = function(messages) {
  if (messages === void 0) {
    messages = [];
  }
  var latestMessage = messages[messages.length - 1];
  return latestMessage && latestMessage.createdAt || null;
};
function hasReqId(message) {
  return "reqId" in message;
}
function channelReducer(state, action) {
  var stringSet = useLocalization().stringSet;
  return K(action).with({ type: RESET_MESSAGES }, function() {
    return __assign(__assign({}, state), {
      // when user switches channel, if the previous channel `hasMorePrev`
      // the onScroll gets called twice, setting hasMorePrev false prevents this
      hasMorePrev: false,
      hasMoreNext: false,
      allMessages: [],
      localMessages: []
    });
  }).with({ type: FETCH_INITIAL_MESSAGES_START }, function() {
    return __assign(__assign({}, state), { loading: true, allMessages: state.allMessages.filter(function(m3) {
      return isSendableMessage(m3) ? m3.sendingStatus !== Z.SUCCEEDED : true;
    }), localMessages: [] });
  }).with({ type: FETCH_INITIAL_MESSAGES_SUCCESS }, function(action2) {
    var _a2;
    var _b2 = action2.payload, currentGroupChannel = _b2.currentGroupChannel, messages = _b2.messages;
    if (!((currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.url) === ((_a2 = state.currentGroupChannel) === null || _a2 === void 0 ? void 0 : _a2.url))) {
      return state;
    }
    var oldestMessageTimeStamp = getOldestMessageTimeStamp(messages);
    var latestMessageTimeStamp = getLatestMessageTimeStamp(messages);
    return __assign(__assign({}, state), { loading: false, initialized: true, hasMorePrev: true, hasMoreNext: true, oldestMessageTimeStamp, latestMessageTimeStamp, allMessages: __spreadArray([], messages, true) });
  }).with({ type: FETCH_PREV_MESSAGES_SUCCESS }, function(action2) {
    var _a2, _b2, _c, _d;
    var _e = action2.payload, currentGroupChannel = _e.currentGroupChannel, messages = _e.messages;
    if (!((currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.url) === ((_a2 = state.currentGroupChannel) === null || _a2 === void 0 ? void 0 : _a2.url))) {
      return state;
    }
    var hasMorePrev = ((_b2 = messages === null || messages === void 0 ? void 0 : messages.length) !== null && _b2 !== void 0 ? _b2 : 0) >= ((_d = (_c = state === null || state === void 0 ? void 0 : state.messageListParams) === null || _c === void 0 ? void 0 : _c.prevResultSize) !== null && _d !== void 0 ? _d : PREV_RESULT_SIZE) + 1;
    var oldestMessageTimeStamp = getOldestMessageTimeStamp(messages);
    var duplicatedMessageIds = [];
    var updatedOldMessages = state.allMessages.map(function(msg) {
      var duplicatedMessage = messages.find(function(_a3) {
        var messageId = _a3.messageId;
        return compareIds(messageId, msg.messageId);
      });
      if (!duplicatedMessage) {
        return msg;
      }
      duplicatedMessageIds.push(duplicatedMessage.messageId);
      return duplicatedMessage.updatedAt > msg.updatedAt ? duplicatedMessage : msg;
    });
    var filteredNewMessages = duplicatedMessageIds.length > 0 ? messages.filter(function(msg) {
      return !duplicatedMessageIds.find(function(messageId) {
        return compareIds(messageId, msg.messageId);
      });
    }) : messages;
    return __assign(__assign({}, state), { hasMorePrev, oldestMessageTimeStamp, allMessages: __spreadArray(__spreadArray([], filteredNewMessages, true), updatedOldMessages, true) });
  }).with({ type: FETCH_NEXT_MESSAGES_SUCCESS }, function(action2) {
    var _a2, _b2, _c, _d;
    var _e = action2.payload, currentGroupChannel = _e.currentGroupChannel, messages = _e.messages;
    if (!((currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.url) === ((_a2 = state.currentGroupChannel) === null || _a2 === void 0 ? void 0 : _a2.url))) {
      return state;
    }
    var hasMoreNext = ((_b2 = messages === null || messages === void 0 ? void 0 : messages.length) !== null && _b2 !== void 0 ? _b2 : 0) === ((_d = (_c = state === null || state === void 0 ? void 0 : state.messageListParams) === null || _c === void 0 ? void 0 : _c.nextResultSize) !== null && _d !== void 0 ? _d : NEXT_RESULT_SIZE) + 1;
    var latestMessageTimeStamp = getLatestMessageTimeStamp(messages);
    var sortedMessages = mergeAndSortMessages(state.allMessages, messages);
    return __assign(__assign({}, state), { hasMoreNext, latestMessageTimeStamp, allMessages: sortedMessages });
  }).with({
    type: S.union(FETCH_INITIAL_MESSAGES_FAILURE, FETCH_PREV_MESSAGES_FAILURE, FETCH_NEXT_MESSAGES_FAILURE)
  }, function(action2) {
    var _a2;
    var currentGroupChannel = action2.payload.currentGroupChannel;
    if ((currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.url) !== ((_a2 = state === null || state === void 0 ? void 0 : state.currentGroupChannel) === null || _a2 === void 0 ? void 0 : _a2.url))
      return state;
    var shouldInvalid = [FETCH_INITIAL_MESSAGES_FAILURE].includes(action2.type);
    return __assign(__assign({}, state), { loading: false, isInvalid: shouldInvalid, initialized: false, allMessages: [], hasMorePrev: false, hasMoreNext: false, oldestMessageTimeStamp: null, latestMessageTimeStamp: null });
  }).with({ type: SEND_MESSAGE_START }, function(action2) {
    return __assign(__assign({}, state), { localMessages: __spreadArray(__spreadArray([], state.localMessages, true), [action2.payload], false) });
  }).with({ type: SEND_MESSAGE_SUCCESS }, function(action2) {
    var message = action2.payload;
    var filteredMessages = state.allMessages.filter(function(m3) {
      return !hasReqId(m3) || (m3 === null || m3 === void 0 ? void 0 : m3.reqId) !== (message === null || message === void 0 ? void 0 : message.reqId);
    });
    return __assign(__assign({}, state), { allMessages: __spreadArray(__spreadArray([], filteredMessages, true), [message], false), localMessages: state.localMessages.filter(function(m3) {
      return hasReqId(m3) && (m3 === null || m3 === void 0 ? void 0 : m3.reqId) !== (message === null || message === void 0 ? void 0 : message.reqId);
    }) });
  }).with({ type: SEND_MESSAGE_FAILURE }, function(action2) {
    action2.payload.failed = true;
    return __assign(__assign({}, state), { localMessages: state.localMessages.map(function(m3) {
      return compareIds(hasReqId(m3) && m3.reqId, action2.payload.reqId) ? action2.payload : m3;
    }) });
  }).with({ type: SET_CURRENT_CHANNEL }, function(action2) {
    return __assign(__assign({}, state), { currentGroupChannel: action2.payload, isInvalid: false });
  }).with({ type: SET_CHANNEL_INVALID }, function() {
    return __assign(__assign({}, state), { currentGroupChannel: null, allMessages: [], localMessages: [], isInvalid: true });
  }).with({ type: ON_MESSAGE_RECEIVED }, function(action2) {
    var _a2, _b2;
    var _c = action2.payload, channel = _c.channel, message = _c.message;
    var members = channel.members;
    var sender = message.sender;
    var currentGroupChannel = state.currentGroupChannel;
    var currentGroupChannelUrl = currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.url;
    if (!compareIds(channel === null || channel === void 0 ? void 0 : channel.url, currentGroupChannelUrl)) {
      return state;
    }
    if (state.allMessages.some(function(msg) {
      return msg.messageId === message.messageId;
    })) {
      return state;
    }
    if (state.messageListParams && !filterMessageListParams(state.messageListParams, message)) {
      return state;
    }
    if (message.isAdminMessage && message.isAdminMessage()) {
      return __assign(__assign({}, state), { allMessages: passUnsuccessfullMessages(state.allMessages, message) });
    }
    var senderMember = members === null || members === void 0 ? void 0 : members.find(function(m3) {
      return (m3 === null || m3 === void 0 ? void 0 : m3.userId) === (sender === null || sender === void 0 ? void 0 : sender.userId);
    });
    if ((senderMember === null || senderMember === void 0 ? void 0 : senderMember.profileUrl) !== (sender === null || sender === void 0 ? void 0 : sender.profileUrl) || (senderMember === null || senderMember === void 0 ? void 0 : senderMember.friendName) !== (sender === null || sender === void 0 ? void 0 : sender.friendName) || (senderMember === null || senderMember === void 0 ? void 0 : senderMember.nickname) !== (sender === null || sender === void 0 ? void 0 : sender.nickname)) {
      channel.members = members.map(function(member) {
        if (member.userId === sender.userId) {
          return sender;
        }
        return member;
      });
    }
    return __assign(__assign({}, state), { currentGroupChannel: channel, unreadSince: (_a2 = state.unreadSince) !== null && _a2 !== void 0 ? _a2 : format(/* @__PURE__ */ new Date(), stringSet.DATE_FORMAT__UNREAD_SINCE), unreadSinceDate: (_b2 = state.unreadSinceDate) !== null && _b2 !== void 0 ? _b2 : /* @__PURE__ */ new Date(), allMessages: passUnsuccessfullMessages(state.allMessages, message) });
  }).with({ type: ON_MESSAGE_UPDATED }, function(action2) {
    var _a2;
    var _b2 = action2.payload, channel = _b2.channel, message = _b2.message;
    var currentGroupChannelUrl = ((_a2 = state === null || state === void 0 ? void 0 : state.currentGroupChannel) === null || _a2 === void 0 ? void 0 : _a2.url) || "";
    if (!compareIds(channel === null || channel === void 0 ? void 0 : channel.url, currentGroupChannelUrl)) {
      return state;
    }
    if (state.messageListParams && !filterMessageListParams(state.messageListParams, message)) {
      return __assign(__assign({}, state), { allMessages: state.allMessages.filter(function(m3) {
        return !compareIds(m3.messageId, message === null || message === void 0 ? void 0 : message.messageId);
      }) });
    }
    return __assign(__assign({}, state), { allMessages: state.allMessages.map(function(m3) {
      if (compareIds(m3.messageId, message.messageId)) {
        return message;
      }
      if (compareIds(m3.parentMessageId, message.messageId)) {
        m3.parentMessage = message;
      }
      return m3;
    }) });
  }).with({ type: ON_MESSAGE_THREAD_INFO_UPDATED }, function(action2) {
    var _a2;
    var _b2 = action2.payload, channel = _b2.channel, event = _b2.event;
    var channelUrl = event.channelUrl, threadInfo = event.threadInfo, targetMessageId = event.targetMessageId;
    var currentGroupChannelUrl = ((_a2 = state === null || state === void 0 ? void 0 : state.currentGroupChannel) === null || _a2 === void 0 ? void 0 : _a2.url) || "";
    if (!compareIds(channel === null || channel === void 0 ? void 0 : channel.url, currentGroupChannelUrl) || !compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl)) {
      return state;
    }
    return __assign(__assign({}, state), { allMessages: state.allMessages.map(function(m3) {
      if (compareIds(m3.messageId, targetMessageId)) {
        m3.threadInfo = threadInfo;
      }
      return m3;
    }) });
  }).with({ type: RESEND_MESSAGE_START }, function(action2) {
    return __assign(__assign({}, state), { localMessages: state.localMessages.map(function(m3) {
      return compareIds(hasReqId(m3) && m3.reqId, action2.payload.reqId) ? action2.payload : m3;
    }) });
  }).with({ type: MARK_AS_READ }, function(action2) {
    var _a2, _b2, _c;
    if (((_a2 = state.currentGroupChannel) === null || _a2 === void 0 ? void 0 : _a2.url) !== ((_c = (_b2 = action2.payload) === null || _b2 === void 0 ? void 0 : _b2.channel) === null || _c === void 0 ? void 0 : _c.url)) {
      return state;
    }
    return __assign(__assign({}, state), { unreadSince: null, unreadSinceDate: null });
  }).with({ type: ON_MESSAGE_DELETED }, function(action2) {
    return __assign(__assign({}, state), { allMessages: state.allMessages.filter(function(m3) {
      return !compareIds(m3.messageId, action2.payload);
    }) });
  }).with({ type: ON_MESSAGE_DELETED_BY_REQ_ID }, function(action2) {
    return __assign(__assign({}, state), { localMessages: state.localMessages.filter(function(m3) {
      return !compareIds(hasReqId(m3) && m3.reqId, action2.payload);
    }) });
  }).with({ type: SET_EMOJI_CONTAINER }, function(action2) {
    return __assign(__assign({}, state), { emojiContainer: action2.payload });
  }).with({ type: ON_REACTION_UPDATED }, function(action2) {
    return __assign(__assign({}, state), { allMessages: state.allMessages.map(function(m3) {
      if (compareIds(m3.messageId, action2.payload.messageId)) {
        if (m3.applyReactionEvent && typeof m3.applyReactionEvent === "function") {
          m3.applyReactionEvent(action2.payload);
        }
        return m3;
      }
      return m3;
    }) });
  }).with({ type: MESSAGE_LIST_PARAMS_CHANGED }, function(action2) {
    return __assign(__assign({}, state), { messageListParams: action2.payload });
  }).with({ type: ON_FILE_INFO_UPLOADED }, function(action2) {
    var _a2, _b2;
    var _c = action2.payload, channelUrl = _c.channelUrl, requestId = _c.requestId, index = _c.index, uploadableFileInfo = _c.uploadableFileInfo, error = _c.error;
    if (!compareIds(channelUrl, (_a2 = state === null || state === void 0 ? void 0 : state.currentGroupChannel) === null || _a2 === void 0 ? void 0 : _a2.url)) {
      return state;
    }
    if (error)
      return state;
    var localMessages = state.localMessages;
    var messageToUpdate = localMessages.find(function(message) {
      return compareIds(hasReqId(message) && message.reqId, requestId);
    });
    var fileInfoList = (_b2 = messageToUpdate.messageParams) === null || _b2 === void 0 ? void 0 : _b2.fileInfoList;
    if (Array.isArray(fileInfoList)) {
      fileInfoList[index] = uploadableFileInfo;
    }
    return __assign(__assign({}, state), { localMessages });
  }).with({ type: ON_TYPING_STATUS_UPDATED }, function(action2) {
    var _a2;
    var _b2 = action2.payload, channel = _b2.channel, typingMembers = _b2.typingMembers;
    if (!compareIds(channel.url, (_a2 = state === null || state === void 0 ? void 0 : state.currentGroupChannel) === null || _a2 === void 0 ? void 0 : _a2.url)) {
      return state;
    }
    return __assign(__assign({}, state), { typingMembers });
  }).otherwise(function() {
    return state;
  });
}
var DELIVERY_RECEIPT = "delivery_receipt";
function useHandleChannelEvents(_a2, _b2) {
  var _c, _d, _e;
  var sdkInit = _a2.sdkInit, currentGroupChannel = _a2.currentGroupChannel, disableMarkAsRead = _a2.disableMarkAsRead;
  var sdk = _b2.sdk, logger = _b2.logger, scrollRef = _b2.scrollRef, setQuoteMessage = _b2.setQuoteMessage, messagesDispatcher = _b2.messagesDispatcher;
  var store = useSendbird().state;
  var _f = store.config, markAsReadScheduler = _f.markAsReadScheduler, markAsDeliveredScheduler = _f.markAsDeliveredScheduler, disableMarkAsDelivered = _f.disableMarkAsDelivered;
  var canSetMarkAsDelivered = (_e = (_d = (_c = store.stores.sdkStore.sdk) === null || _c === void 0 ? void 0 : _c.appInfo) === null || _d === void 0 ? void 0 : _d.premiumFeatureList) === null || _e === void 0 ? void 0 : _e.find(function(feature) {
    return feature === DELIVERY_RECEIPT;
  });
  (0, import_react4.useEffect)(function() {
    var _a3;
    var channelUrl = currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.url;
    var channelHandlerId = uuidv4();
    if (channelUrl && sdkInit) {
      var channelHandler = {
        onMessageReceived: function(channel, message) {
          var _a4, _b3;
          if (channel.isGroupChannel() && compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl)) {
            var scrollToEnd = false;
            try {
              var current = scrollRef.current;
              if (current) {
                scrollToEnd = current.offsetHeight + current.scrollTop >= current.scrollHeight - 10;
              }
            } catch (error) {
            }
            logger.info("Channel | useHandleChannelEvents: onMessageReceived", message);
            messagesDispatcher({
              type: ON_MESSAGE_RECEIVED,
              payload: { channel, message }
            });
            if (scrollToEnd && ((_a4 = document.getElementById("sendbird-dropdown-portal")) === null || _a4 === void 0 ? void 0 : _a4.childElementCount) === 0 && ((_b3 = document.getElementById("sendbird-emoji-list-portal")) === null || _b3 === void 0 ? void 0 : _b3.childElementCount) === 0) {
              try {
                setTimeout(function() {
                  return scrollIntoLast(0, scrollRef);
                });
                if (!disableMarkAsRead) {
                  markAsReadScheduler.push(currentGroupChannel);
                }
                if (canSetMarkAsDelivered && !disableMarkAsDelivered) {
                  markAsDeliveredScheduler.push(currentGroupChannel);
                }
              } catch (error) {
                logger.warning("Channel | onMessageReceived | scroll to end failed");
              }
            }
          }
        },
        onUnreadMemberStatusUpdated: function(channel) {
          logger.info("Channel | useHandleChannelEvents: onUnreadMemberStatusUpdated", channel);
          if (compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl)) {
            messagesDispatcher({
              type: SET_CURRENT_CHANNEL,
              payload: channel
            });
          }
        },
        // before(onDeliveryReceiptUpdated)
        onUndeliveredMemberStatusUpdated: function(channel) {
          if (compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl)) {
            logger.info("Channel | useHandleChannelEvents: onDeliveryReceiptUpdated", channel);
            messagesDispatcher({
              type: SET_CURRENT_CHANNEL,
              payload: channel
            });
          }
        },
        onMessageUpdated: function(channel, message) {
          if (channel.isGroupChannel() && compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl)) {
            logger.info("Channel | useHandleChannelEvents: onMessageUpdated", message);
            messagesDispatcher({
              type: ON_MESSAGE_UPDATED,
              payload: { channel, message }
            });
          }
        },
        onThreadInfoUpdated: function(channel, threadInfoUpdateEvent) {
          if (channel.isGroupChannel() && compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl)) {
            logger.info("Channel | useHandleChannelEvents: onThreadInfoUpdated", { channel, threadInfoUpdateEvent });
            messagesDispatcher({
              type: ON_MESSAGE_THREAD_INFO_UPDATED,
              payload: { channel, event: threadInfoUpdateEvent }
            });
          }
        },
        onMessageDeleted: function(channel, messageId) {
          logger.info("Channel | useHandleChannelEvents: onMessageDeleted", { channel, messageId });
          setQuoteMessage(null);
          messagesDispatcher({
            type: ON_MESSAGE_DELETED,
            payload: messageId
          });
        },
        onReactionUpdated: function(channel, reactionEvent) {
          logger.info("Channel | useHandleChannelEvents: onReactionUpdated", { channel, reactionEvent });
          messagesDispatcher({
            type: ON_REACTION_UPDATED,
            payload: reactionEvent
          });
        },
        onChannelChanged: function(channel) {
          if (channel.isGroupChannel() && compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl)) {
            logger.info("Channel | useHandleChannelEvents: onChannelChanged", channel);
            messagesDispatcher({
              type: SET_CURRENT_CHANNEL,
              payload: channel
            });
          }
        },
        onChannelFrozen: function(channel) {
          if (channel.isGroupChannel() && compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl)) {
            logger.info("Channel | useHandleChannelEvents: onChannelFrozen", channel);
            messagesDispatcher({
              type: SET_CURRENT_CHANNEL,
              payload: channel
            });
          }
        },
        onChannelUnfrozen: function(channel) {
          if (channel.isGroupChannel() && compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl)) {
            logger.info("Channel | useHandleChannelEvents: onChannelUnFrozen", channel);
            messagesDispatcher({
              type: SET_CURRENT_CHANNEL,
              payload: channel
            });
          }
        },
        onUserMuted: function(channel, user) {
          if (channel.isGroupChannel() && compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl)) {
            logger.info("Channel | useHandleChannelEvents: onUserMuted", { channel, user });
            messagesDispatcher({
              type: SET_CURRENT_CHANNEL,
              payload: channel
            });
          }
        },
        onUserUnmuted: function(channel, user) {
          if (channel.isGroupChannel() && compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl)) {
            logger.info("Channel | useHandleChannelEvents: onUserUnmuted", { channel, user });
            messagesDispatcher({
              type: SET_CURRENT_CHANNEL,
              payload: channel
            });
          }
        },
        onUserBanned: function(channel, user) {
          var _a4;
          if (compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl) && channel.isGroupChannel()) {
            logger.info("Channel | useHandleChannelEvents: onUserBanned", { channel, user });
            var isByMe = (user === null || user === void 0 ? void 0 : user.userId) === ((_a4 = sdk === null || sdk === void 0 ? void 0 : sdk.currentUser) === null || _a4 === void 0 ? void 0 : _a4.userId);
            messagesDispatcher({
              type: SET_CURRENT_CHANNEL,
              payload: isByMe ? null : channel
            });
          }
        },
        onOperatorUpdated: function(channel, users) {
          if (channel.isGroupChannel() && compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl)) {
            logger.info("Channel | useHandleChannelEvents: onOperatorUpdated", { channel, users });
            messagesDispatcher({
              type: SET_CURRENT_CHANNEL,
              payload: channel
            });
          }
        },
        onUserLeft: function(channel, user) {
          var _a4;
          if (compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl)) {
            logger.info("Channel | useHandleChannelEvents: onUserLeft", { channel, user });
            var isByMe = (user === null || user === void 0 ? void 0 : user.userId) === ((_a4 = sdk === null || sdk === void 0 ? void 0 : sdk.currentUser) === null || _a4 === void 0 ? void 0 : _a4.userId);
            messagesDispatcher({
              type: SET_CURRENT_CHANNEL,
              payload: isByMe ? null : channel
            });
          }
        },
        onTypingStatusUpdated: function(channel) {
          if (compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl)) {
            logger.info("Channel | onTypingStatusUpdated", { channel });
            var typingMembers = channel.getTypingUsers();
            messagesDispatcher({
              type: ON_TYPING_STATUS_UPDATED,
              payload: {
                channel,
                typingMembers
              }
            });
          }
        }
      };
      logger.info("Channel | useHandleChannelEvents: Setup event handler", { channelHandlerId, channelHandler });
      (_a3 = sdk.groupChannel) === null || _a3 === void 0 ? void 0 : _a3.addGroupChannelHandler(channelHandlerId, new Ye(channelHandler));
    }
    return function() {
      var _a4;
      if ((_a4 = sdk === null || sdk === void 0 ? void 0 : sdk.groupChannel) === null || _a4 === void 0 ? void 0 : _a4.removeGroupChannelHandler) {
        logger.info("Channel | useHandleChannelEvents: Removing message reciver handler", channelHandlerId);
        sdk.groupChannel.removeGroupChannelHandler(channelHandlerId);
      } else if (sdk === null || sdk === void 0 ? void 0 : sdk.groupChannel) {
        logger.error("Channel | useHandleChannelEvents: Not found the removeGroupChannelHandler");
      }
    };
  }, [currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.url, sdkInit]);
}
function useGetChannel(_a2, _b2) {
  var channelUrl = _a2.channelUrl, sdkInit = _a2.sdkInit, disableMarkAsRead = _a2.disableMarkAsRead;
  var messagesDispatcher = _b2.messagesDispatcher, sdk = _b2.sdk, logger = _b2.logger, markAsReadScheduler = _b2.markAsReadScheduler;
  (0, import_react4.useEffect)(function() {
    if (channelUrl && sdkInit && sdk && sdk.groupChannel) {
      logger.info("Channel | useSetChannel fetching channel", channelUrl);
      sdk.groupChannel.getChannel(channelUrl).then(function(groupChannel) {
        logger.info("Channel | useSetChannel fetched channel", groupChannel);
        messagesDispatcher({
          type: SET_CURRENT_CHANNEL,
          payload: groupChannel
        });
        logger.info("Channel: Mark as read", groupChannel);
        if (!disableMarkAsRead) {
          markAsReadScheduler.push(groupChannel);
        }
      }).catch(function(e2) {
        logger.warning("Channel | useSetChannel fetch channel failed", { channelUrl, e: e2 });
        messagesDispatcher({
          type: SET_CHANNEL_INVALID
        });
      });
      sdk.getAllEmoji().then(function(emojiContainer_) {
        logger.info("Channel: Getting emojis success", emojiContainer_);
        messagesDispatcher({
          type: SET_EMOJI_CONTAINER,
          payload: emojiContainer_
        });
      }).catch(function(err) {
        logger.error("Channel: Getting emojis failed", err);
      });
    }
  }, [channelUrl, sdkInit]);
}
function useHandleReconnect(_a2, _b2) {
  var isOnline = _a2.isOnline, replyType = _a2.replyType, disableMarkAsRead = _a2.disableMarkAsRead, reconnectOnIdle = _a2.reconnectOnIdle;
  var logger = _b2.logger, sdk = _b2.sdk, scrollRef = _b2.scrollRef, currentGroupChannel = _b2.currentGroupChannel, messagesDispatcher = _b2.messagesDispatcher, markAsReadScheduler = _b2.markAsReadScheduler, userFilledMessageListQuery = _b2.userFilledMessageListQuery;
  var shouldReconnect = useReconnectOnIdle(isOnline, currentGroupChannel, reconnectOnIdle).shouldReconnect;
  (0, import_react4.useEffect)(function() {
    return function() {
      var _a3, _b3, _c;
      if (shouldReconnect) {
        logger.info("Refreshing conversation state");
        var isReactionEnabled = ((_a3 = sdk === null || sdk === void 0 ? void 0 : sdk.appInfo) === null || _a3 === void 0 ? void 0 : _a3.useReaction) || false;
        var messageListParams_1 = {
          prevResultSize: PREV_RESULT_SIZE,
          isInclusive: true,
          includeReactions: isReactionEnabled,
          includeMetaArray: true,
          nextResultSize: NEXT_RESULT_SIZE
        };
        if (replyType && replyType === "QUOTE_REPLY") {
          messageListParams_1.includeThreadInfo = true;
          messageListParams_1.includeParentMessageInfo = true;
          messageListParams_1.replyType = Q.ONLY_REPLY_TO_CHANNEL;
        }
        if (userFilledMessageListQuery) {
          Object.keys(userFilledMessageListQuery).forEach(function(key) {
            messageListParams_1[key] = userFilledMessageListQuery[key];
          });
        }
        logger.info("Channel: Fetching messages", { currentGroupChannel, userFilledMessageListQuery });
        messagesDispatcher({
          type: FETCH_INITIAL_MESSAGES_START,
          payload: null
        });
        (_b3 = sdk === null || sdk === void 0 ? void 0 : sdk.groupChannel) === null || _b3 === void 0 ? void 0 : _b3.getChannel((_c = currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.url) !== null && _c !== void 0 ? _c : "").then(function(groupChannel) {
          var lastMessageTime = (/* @__PURE__ */ new Date()).getTime();
          groupChannel.getMessagesByTimestamp(lastMessageTime, messageListParams_1).then(function(messages) {
            messagesDispatcher({
              type: FETCH_INITIAL_MESSAGES_SUCCESS,
              payload: {
                currentGroupChannel: groupChannel,
                messages
              }
            });
            setTimeout(function() {
              return scrollIntoLast(0, scrollRef);
            }, SCROLL_BOTTOM_DELAY_FOR_FETCH);
          }).catch(function(error) {
            logger.error("Channel: Fetching messages failed", error);
            messagesDispatcher({
              type: FETCH_INITIAL_MESSAGES_FAILURE,
              payload: { currentGroupChannel: groupChannel }
            });
          });
          if (!disableMarkAsRead) {
            markAsReadScheduler.push(groupChannel);
          }
        });
      }
    };
  }, [shouldReconnect, replyType]);
}
function useScrollCallback(_a2, _b2) {
  var currentGroupChannel = _a2.currentGroupChannel, oldestMessageTimeStamp = _a2.oldestMessageTimeStamp, userFilledMessageListQuery = _a2.userFilledMessageListQuery, replyType = _a2.replyType;
  var hasMorePrev = _b2.hasMorePrev, logger = _b2.logger, messagesDispatcher = _b2.messagesDispatcher, sdk = _b2.sdk;
  return (0, import_react4.useCallback)(function(callback) {
    var _a3, _b3;
    if (!hasMorePrev) {
      return;
    }
    var messageListParams = {
      prevResultSize: PREV_RESULT_SIZE,
      isInclusive: true,
      includeMetaArray: true,
      includeReactions: (_b3 = (_a3 = sdk === null || sdk === void 0 ? void 0 : sdk.appInfo) === null || _a3 === void 0 ? void 0 : _a3.useReaction) !== null && _b3 !== void 0 ? _b3 : false
    };
    if (replyType === "QUOTE_REPLY" || replyType === "THREAD") {
      messageListParams.includeThreadInfo = true;
      messageListParams.includeParentMessageInfo = true;
      messageListParams.replyType = Q.ONLY_REPLY_TO_CHANNEL;
    }
    if (userFilledMessageListQuery) {
      Object.keys(userFilledMessageListQuery).forEach(function(key) {
        messageListParams[key] = userFilledMessageListQuery[key];
      });
    }
    logger.info("Channel: Fetching messages", {
      currentGroupChannel,
      userFilledMessageListQuery
    });
    currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.getMessagesByTimestamp(oldestMessageTimeStamp || (/* @__PURE__ */ new Date()).getTime(), messageListParams).then(function(messages) {
      messagesDispatcher({
        type: FETCH_PREV_MESSAGES_SUCCESS,
        payload: { currentGroupChannel, messages }
      });
      if (callback)
        setTimeout(function() {
          return callback();
        });
    }).catch(function() {
      messagesDispatcher({
        type: FETCH_PREV_MESSAGES_FAILURE,
        payload: { currentGroupChannel }
      });
    });
  }, [currentGroupChannel, oldestMessageTimeStamp, replyType]);
}
function useScrollDownCallback(_a2, _b2) {
  var currentGroupChannel = _a2.currentGroupChannel, latestMessageTimeStamp = _a2.latestMessageTimeStamp, userFilledMessageListQuery = _a2.userFilledMessageListQuery, hasMoreNext = _a2.hasMoreNext, replyType = _a2.replyType;
  var logger = _b2.logger, messagesDispatcher = _b2.messagesDispatcher, sdk = _b2.sdk;
  return (0, import_react4.useCallback)(function(cb) {
    var _a3, _b3;
    if (!hasMoreNext) {
      return;
    }
    var isReactionEnabled = (_b3 = (_a3 = sdk === null || sdk === void 0 ? void 0 : sdk.appInfo) === null || _a3 === void 0 ? void 0 : _a3.useReaction) !== null && _b3 !== void 0 ? _b3 : false;
    var messageListParams = {
      nextResultSize: NEXT_RESULT_SIZE,
      isInclusive: true,
      includeReactions: isReactionEnabled,
      includeMetaArray: true
    };
    if (replyType && (replyType === "QUOTE_REPLY" || replyType === "THREAD")) {
      messageListParams.includeThreadInfo = true;
      messageListParams.includeParentMessageInfo = true;
      messageListParams.replyType = Q.ONLY_REPLY_TO_CHANNEL;
    }
    if (userFilledMessageListQuery) {
      Object.keys(userFilledMessageListQuery).forEach(function(key) {
        messageListParams[key] = userFilledMessageListQuery[key];
      });
    }
    logger.info("Channel: Fetching later messages", { currentGroupChannel, userFilledMessageListQuery });
    currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.getMessagesByTimestamp(latestMessageTimeStamp || (/* @__PURE__ */ new Date()).getTime(), messageListParams).then(function(messages) {
      messagesDispatcher({
        type: FETCH_NEXT_MESSAGES_SUCCESS,
        payload: { currentGroupChannel, messages }
      });
      setTimeout(function() {
        return cb([messages, null]);
      });
    }).catch(function(error) {
      logger.error("Channel: Fetching later messages failed", error);
      messagesDispatcher({
        type: FETCH_NEXT_MESSAGES_FAILURE,
        payload: { currentGroupChannel }
      });
      setTimeout(function() {
        return cb([null, error]);
      });
    });
  }, [currentGroupChannel, latestMessageTimeStamp, hasMoreNext, replyType]);
}
function useDeleteMessageCallback(_a2, _b2) {
  var currentGroupChannel = _a2.currentGroupChannel, messagesDispatcher = _a2.messagesDispatcher;
  var logger = _b2.logger;
  return (0, import_react4.useCallback)(function(message) {
    logger.info("Channel | useDeleteMessageCallback: Deleting message", message);
    var sendingStatus = isSendableMessage(message) ? message.sendingStatus : void 0;
    return new Promise(function(resolve, reject) {
      logger.info("Channel | useDeleteMessageCallback: Deleting message requestState:", sendingStatus);
      if ((sendingStatus === Z.FAILED || sendingStatus === Z.PENDING) && "reqId" in message) {
        logger.info("Channel | useDeleteMessageCallback: Deleted message from local:", message);
        messagesDispatcher({
          type: ON_MESSAGE_DELETED_BY_REQ_ID,
          payload: message.reqId
        });
        resolve();
      } else {
        logger.info("Channel | useDeleteMessageCallback: Deleting message from remote:", sendingStatus);
        currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.deleteMessage(message).then(function() {
          logger.info("Channel | useDeleteMessageCallback: Deleting message success!", message);
          messagesDispatcher({
            type: ON_MESSAGE_DELETED,
            payload: message.messageId
          });
          resolve();
        }).catch(function(err) {
          logger.warning("Channel | useDeleteMessageCallback: Deleting message failed!", err);
          reject(err);
        });
      }
    });
  }, [currentGroupChannel, messagesDispatcher]);
}
function useUpdateMessageCallback(_a2, _b2) {
  var currentGroupChannel = _a2.currentGroupChannel, messagesDispatcher = _a2.messagesDispatcher, onBeforeUpdateUserMessage = _a2.onBeforeUpdateUserMessage, isMentionEnabled = _a2.isMentionEnabled;
  var logger = _b2.logger, pubSub = _b2.pubSub;
  return (0, import_react4.useCallback)(function(props, callback) {
    var messageId = props.messageId, message = props.message, mentionedUsers = props.mentionedUsers, mentionTemplate = props.mentionTemplate;
    var createParamsDefault = function(message2) {
      var params2 = {
        message: message2
      };
      if (isMentionEnabled && mentionedUsers && mentionedUsers.length > 0) {
        params2.mentionedUsers = mentionedUsers;
      }
      if (isMentionEnabled && mentionTemplate) {
        params2.mentionedMessageTemplate = mentionTemplate;
      } else {
        params2.mentionedMessageTemplate = message2;
      }
      return params2;
    };
    var shouldCreateCustomParams = onBeforeUpdateUserMessage && typeof onBeforeUpdateUserMessage === "function";
    if (shouldCreateCustomParams) {
      logger.info("Channel: creating params using onBeforeUpdateUserMessage", onBeforeUpdateUserMessage);
    }
    var params = shouldCreateCustomParams ? onBeforeUpdateUserMessage(message) : createParamsDefault(message);
    logger.info("Channel: Updating message!", params);
    currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.updateUserMessage(messageId, params).then(function(msg) {
      if (callback) {
        callback(null, msg);
      }
      logger.info("Channel: Updating message success!", msg);
      messagesDispatcher({
        type: ON_MESSAGE_UPDATED,
        payload: {
          channel: currentGroupChannel,
          message: msg
        }
      });
      pubSub.publish(pubSubTopics.UPDATE_USER_MESSAGE, {
        message: msg,
        channel: currentGroupChannel,
        publishingModules: [PublishingModuleType.CHANNEL]
      });
    }).catch(function(err) {
      if (callback) {
        callback(err, null);
      }
    });
  }, [currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.url, messagesDispatcher, onBeforeUpdateUserMessage]);
}
function useResendMessageCallback(_a2, _b2) {
  var currentGroupChannel = _a2.currentGroupChannel, messagesDispatcher = _a2.messagesDispatcher;
  var logger = _b2.logger, pubSub = _b2.pubSub;
  return (0, import_react4.useCallback)(function(failedMessage) {
    logger.info("Channel: Resending message has started", failedMessage);
    if (failedMessage === null || failedMessage === void 0 ? void 0 : failedMessage.isResendable) {
      if (failedMessage.isUserMessage()) {
        currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.resendMessage(failedMessage).onPending(function(message) {
          logger.info("Channel: Resending message start!", message);
          messagesDispatcher({
            type: RESEND_MESSAGE_START,
            payload: message
          });
        }).onSucceeded(function(message) {
          logger.info("Channel: Resending message success!", message);
          messagesDispatcher({
            type: SEND_MESSAGE_SUCCESS,
            payload: message
          });
        }).onFailed(function(e2, message) {
          logger.warning("Channel: Resending message failed!", e2);
          messagesDispatcher({
            type: SEND_MESSAGE_FAILURE,
            payload: message
          });
        });
      } else if (failedMessage.isFileMessage()) {
        currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.resendMessage(failedMessage).onPending(function(message) {
          logger.info("Channel: Resending file message start!", message);
          messagesDispatcher({
            type: RESEND_MESSAGE_START,
            payload: message
          });
        }).onSucceeded(function(message) {
          logger.info("Channel: Resending file message success!", message);
          messagesDispatcher({
            type: SEND_MESSAGE_SUCCESS,
            payload: message
          });
        }).onFailed(function(e2, message) {
          logger.warning("Channel: Resending file message failed!", e2);
          messagesDispatcher({
            type: SEND_MESSAGE_FAILURE,
            payload: message
          });
        });
      } else if (failedMessage.isMultipleFilesMessage()) {
        currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.resendMessage(failedMessage).onPending(function(message) {
          logger.info("Channel: Resending multiple files message start!", message);
          messagesDispatcher({
            type: RESEND_MESSAGE_START,
            payload: message
          });
        }).onFileUploaded(function(requestId, index, uploadableFileInfo, error) {
          var _a3;
          logger.info("Channel: Resending multiple files message file uploaded!", {
            requestId,
            index,
            error,
            uploadableFileInfo
          });
          pubSub.publish(pubSubTopics.ON_FILE_INFO_UPLOADED, {
            response: {
              channelUrl: (_a3 = currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.url) !== null && _a3 !== void 0 ? _a3 : "",
              requestId,
              index,
              uploadableFileInfo,
              error
            },
            publishingModules: [PublishingModuleType.CHANNEL]
          });
        }).onSucceeded(function(message) {
          logger.info("Channel: Resending multiple files message success!", message);
          messagesDispatcher({
            type: SEND_MESSAGE_SUCCESS,
            payload: message
          });
        }).onFailed(function(e2, message) {
          logger.warning("Channel: Resending multiple files message failed!", e2);
          messagesDispatcher({
            type: SEND_MESSAGE_FAILURE,
            payload: message
          });
        });
      }
    } else {
      logger.error("Message is not resendable", failedMessage);
    }
  }, [currentGroupChannel, messagesDispatcher]);
}
function useSendMessageCallback(_a2, _b2) {
  var isMentionEnabled = _a2.isMentionEnabled, currentGroupChannel = _a2.currentGroupChannel, onBeforeSendUserMessage = _a2.onBeforeSendUserMessage;
  var logger = _b2.logger, pubSub = _b2.pubSub, scrollRef = _b2.scrollRef, messagesDispatcher = _b2.messagesDispatcher;
  var messageInputRef = (0, import_react4.useRef)(null);
  var sendMessage = (0, import_react4.useCallback)(function(_a3) {
    var quoteMessage = _a3.quoteMessage, message = _a3.message, mentionTemplate = _a3.mentionTemplate, mentionedUsers = _a3.mentionedUsers;
    var createParamsDefault = function() {
      var params2 = {
        message
      };
      if (isMentionEnabled && mentionedUsers && mentionedUsers.length > 0) {
        params2.mentionedUsers = mentionedUsers;
      }
      if (isMentionEnabled && mentionTemplate && mentionedUsers && mentionedUsers.length > 0) {
        params2.mentionedMessageTemplate = mentionTemplate;
      }
      if (quoteMessage) {
        params2.isReplyToChannel = true;
        params2.parentMessageId = quoteMessage.messageId;
      }
      return params2;
    };
    var shouldCreateCustomParams = onBeforeSendUserMessage && typeof onBeforeSendUserMessage === "function";
    if (shouldCreateCustomParams) {
      logger.info("Channel: creating params using onBeforeSendUserMessage", onBeforeSendUserMessage);
    }
    var params = shouldCreateCustomParams ? onBeforeSendUserMessage(message, quoteMessage) : createParamsDefault();
    logger.info("Channel: Sending message has started", params);
    currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.sendUserMessage(params).onPending(function(pendingMsg) {
      pubSub.publish(pubSubTopics.SEND_MESSAGE_START, {
        /* pubSub is used instead of messagesDispatcher
          to avoid redundantly calling `messageActionTypes.SEND_MESSAGE_START` */
        message: pendingMsg,
        channel: currentGroupChannel,
        publishingModules: [PublishingModuleType.CHANNEL]
      });
      setTimeout(function() {
        return scrollIntoLast(0, scrollRef);
      }, SCROLL_BOTTOM_DELAY_FOR_SEND);
    }).onFailed(function(err, msg) {
      logger.warning("Channel: Sending message failed!", { message: msg, error: err });
      messagesDispatcher({
        type: SEND_MESSAGE_FAILURE,
        payload: msg
      });
    }).onSucceeded(function(msg) {
      logger.info("Channel: Sending message success!", msg);
      messagesDispatcher({
        type: SEND_MESSAGE_SUCCESS,
        payload: msg
      });
    });
  }, [currentGroupChannel, onBeforeSendUserMessage]);
  return [messageInputRef, sendMessage];
}
function useSendFileMessageCallback(_a2, _b2) {
  var currentGroupChannel = _a2.currentGroupChannel, onBeforeSendFileMessage = _a2.onBeforeSendFileMessage, imageCompression = _a2.imageCompression;
  var logger = _b2.logger, pubSub = _b2.pubSub, scrollRef = _b2.scrollRef, messagesDispatcher = _b2.messagesDispatcher;
  var sendMessage = (0, import_react4.useCallback)(function(compressedFile, quoteMessage) {
    return new Promise(function(resolve, reject) {
      var params = onBeforeSendFileMessage === null || onBeforeSendFileMessage === void 0 ? void 0 : onBeforeSendFileMessage(compressedFile, quoteMessage);
      if (!params) {
        params = { file: compressedFile };
        if (quoteMessage) {
          params.isReplyToChannel = true;
          params.parentMessageId = quoteMessage.messageId;
        }
      }
      logger.info("Channel: Uploading file message start!", params);
      currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.sendFileMessage(params).onPending(function(pendingMessage) {
        pubSub.publish(pubSubTopics.SEND_MESSAGE_START, {
          /* pubSub is used instead of messagesDispatcher
            to avoid redundantly calling `messageActionTypes.SEND_MESSAGE_START` */
          // TODO: remove data pollution
          message: __assign(__assign({}, pendingMessage), {
            url: URL.createObjectURL(compressedFile),
            // pending thumbnail message seems to be failed
            requestState: "pending",
            isUserMessage: pendingMessage.isUserMessage,
            isFileMessage: pendingMessage.isFileMessage,
            isAdminMessage: pendingMessage.isAdminMessage,
            isMultipleFilesMessage: pendingMessage.isMultipleFilesMessage
          }),
          channel: currentGroupChannel,
          publishingModules: [PublishingModuleType.CHANNEL]
        });
        setTimeout(function() {
          return scrollIntoLast(0, scrollRef);
        }, SCROLL_BOTTOM_DELAY_FOR_SEND);
      }).onFailed(function(err, failedMessage) {
        logger.error("Channel: Sending file message failed!", { failedMessage, err });
        failedMessage.localUrl = URL.createObjectURL(compressedFile);
        failedMessage.file = compressedFile;
        messagesDispatcher({
          type: SEND_MESSAGE_FAILURE,
          payload: failedMessage
        });
        reject(err);
      }).onSucceeded(function(succeededMessage) {
        logger.info("Channel: Sending file message success!", succeededMessage);
        messagesDispatcher({
          type: SEND_MESSAGE_SUCCESS,
          payload: succeededMessage
        });
        resolve(succeededMessage);
      });
    });
  }, [currentGroupChannel, onBeforeSendFileMessage, imageCompression]);
  return [sendMessage];
}
var LOG_PRESET = "useToggleReactionCallback:";
function useToggleReactionCallback(currentChannel, logger) {
  return (0, import_react4.useCallback)(function(message, key, isReacted) {
    if (!currentChannel) {
      logger === null || logger === void 0 ? void 0 : logger.warning("".concat(LOG_PRESET, " currentChannel doesn't exist"), currentChannel);
      return;
    }
    if (isReacted) {
      currentChannel.deleteReaction(message, key).then(function(res) {
        logger === null || logger === void 0 ? void 0 : logger.info("".concat(LOG_PRESET, " Delete reaction success"), res);
      }).catch(function(err) {
        logger === null || logger === void 0 ? void 0 : logger.warning("".concat(LOG_PRESET, " Delete reaction failed"), err);
      });
    } else {
      currentChannel.addReaction(message, key).then(function(res) {
        logger === null || logger === void 0 ? void 0 : logger.info("".concat(LOG_PRESET, " Add reaction success"), res);
      }).catch(function(err) {
        logger === null || logger === void 0 ? void 0 : logger.warning("".concat(LOG_PRESET, " Add reaction failed"), err);
      });
    }
  }, [currentChannel]);
}
function deactivateClick(scrollRef) {
  var element = scrollRef.current;
  var parentNode = element === null || element === void 0 ? void 0 : element.parentNode;
  if (element && parentNode) {
    element.style.pointerEvents = "none";
    parentNode.style.cursor = "wait";
  }
}
function activateClick(scrollRef) {
  var element = scrollRef.current;
  var parentNode = element === null || element === void 0 ? void 0 : element.parentNode;
  if (element && parentNode) {
    element.style.pointerEvents = "auto";
    parentNode.style.cursor = "auto";
  }
}
function useScrollToMessage(_a2, _b2) {
  var setInitialTimeStamp = _a2.setInitialTimeStamp, setAnimatedMessageId = _a2.setAnimatedMessageId, allMessages = _a2.allMessages, scrollRef = _a2.scrollRef;
  var logger = _b2.logger;
  return (0, import_react4.useCallback)(function(createdAt, messageId) {
    var isPresent = allMessages.find(function(m3) {
      return m3.messageId === messageId;
    });
    setAnimatedMessageId(null);
    setTimeout(function() {
      try {
        logger.info("Channel: scroll to message - disabling mouse events");
        deactivateClick(scrollRef);
        if (isPresent) {
          logger.info("Channel: scroll to message - message is present");
          setAnimatedMessageId(messageId);
          scrollToRenderedMessage(scrollRef, createdAt);
        } else {
          logger.info("Channel: scroll to message - fetching older messages");
          setInitialTimeStamp(null);
          setInitialTimeStamp(createdAt);
          setAnimatedMessageId(messageId);
        }
      } finally {
        logger.info("Channel: scroll to message - enabled mouse events");
        activateClick(scrollRef);
      }
    });
  }, [
    setInitialTimeStamp,
    setAnimatedMessageId,
    allMessages
  ]);
}
var useSendVoiceMessageCallback = function(_a2, _b2) {
  var currentGroupChannel = _a2.currentGroupChannel, onBeforeSendVoiceMessage = _a2.onBeforeSendVoiceMessage;
  var logger = _b2.logger, pubSub = _b2.pubSub, scrollRef = _b2.scrollRef, messagesDispatcher = _b2.messagesDispatcher;
  var sendMessage = (0, import_react4.useCallback)(function(file, duration, quoteMessage) {
    return new Promise(function(resolve, reject) {
      if (!currentGroupChannel) {
        return;
      }
      var messageParams = onBeforeSendVoiceMessage && typeof onBeforeSendVoiceMessage === "function" ? onBeforeSendVoiceMessage(file, quoteMessage) : {
        file,
        fileName: VOICE_MESSAGE_FILE_NAME,
        mimeType: VOICE_MESSAGE_MIME_TYPE,
        metaArrays: [
          new Ve({
            key: META_ARRAY_VOICE_DURATION_KEY,
            value: ["".concat(duration)]
          }),
          new Ve({
            key: META_ARRAY_MESSAGE_TYPE_KEY,
            value: [META_ARRAY_MESSAGE_TYPE_VALUE__VOICE]
          })
        ]
      };
      if (quoteMessage) {
        messageParams.isReplyToChannel = true;
        messageParams.parentMessageId = quoteMessage.messageId;
      }
      logger.info("Channel: Start sending voice message", messageParams);
      currentGroupChannel.sendFileMessage(messageParams).onPending(function(pendingMessage) {
        pubSub.publish(pubSubTopics.SEND_MESSAGE_START, {
          /* pubSub is used instead of messagesDispatcher
            to avoid redundantly calling `messageActionTypes.SEND_MESSAGE_START` */
          message: pendingMessage,
          channel: currentGroupChannel,
          publishingModules: [PublishingModuleType.CHANNEL]
        });
        setTimeout(function() {
          return scrollIntoLast(0, scrollRef);
        }, SCROLL_BOTTOM_DELAY_FOR_SEND);
      }).onFailed(function(err, failedMessage) {
        logger.error("Channel: Sending voice message failed!", { failedMessage, err });
        messagesDispatcher({
          type: SEND_MESSAGE_FAILURE,
          payload: failedMessage
        });
        reject(err);
      }).onSucceeded(function(succeededMessage) {
        logger.info("Channel: Sending voice message success!", succeededMessage);
        messagesDispatcher({
          type: SEND_MESSAGE_SUCCESS,
          payload: succeededMessage
        });
        resolve(succeededMessage);
      });
    });
  }, [
    currentGroupChannel,
    onBeforeSendVoiceMessage
  ]);
  return [sendMessage];
};
var useHandleChannelPubsubEvents = function(_a2) {
  var channelUrl = _a2.channelUrl, sdkInit = _a2.sdkInit, pubSub = _a2.pubSub, dispatcher = _a2.dispatcher, scrollRef = _a2.scrollRef;
  (0, import_react4.useEffect)(function() {
    var subscriber = /* @__PURE__ */ new Map();
    if (pubSub === null || pubSub === void 0 ? void 0 : pubSub.subscribe) {
      subscriber.set(PUBSUB_TOPICS.SEND_USER_MESSAGE, pubSub.subscribe(PUBSUB_TOPICS.SEND_USER_MESSAGE, function(props) {
        var channel = props.channel, message = props.message;
        if (channelUrl === (channel === null || channel === void 0 ? void 0 : channel.url)) {
          dispatcher({
            type: SEND_MESSAGE_SUCCESS,
            payload: message
          });
          setTimeout(function() {
            return scrollIntoLast(0, scrollRef);
          }, SCROLL_BOTTOM_DELAY_FOR_SEND);
        }
      }));
      subscriber.set(PUBSUB_TOPICS.SEND_MESSAGE_START, pubSub.subscribe(PUBSUB_TOPICS.SEND_MESSAGE_START, function(props) {
        var channel = props.channel, message = props.message, publishingModules = props.publishingModules;
        if (channelUrl === (channel === null || channel === void 0 ? void 0 : channel.url) && shouldPubSubPublishToChannel(publishingModules)) {
          dispatcher({
            type: SEND_MESSAGE_START,
            payload: message
          });
        }
      }));
      subscriber.set(PUBSUB_TOPICS.ON_FILE_INFO_UPLOADED, pubSub.subscribe(PUBSUB_TOPICS.ON_FILE_INFO_UPLOADED, function(props) {
        var response = props.response, publishingModules = props.publishingModules;
        if (channelUrl === response.channelUrl && shouldPubSubPublishToChannel(publishingModules)) {
          dispatcher({
            type: ON_FILE_INFO_UPLOADED,
            payload: response
          });
        }
      }));
      subscriber.set(PUBSUB_TOPICS.SEND_MESSAGE_FAILED, pubSub.subscribe(PUBSUB_TOPICS.SEND_MESSAGE_FAILED, function(props) {
        var channel = props.channel, message = props.message, publishingModules = props.publishingModules;
        if (channelUrl === (channel === null || channel === void 0 ? void 0 : channel.url) && shouldPubSubPublishToChannel(publishingModules)) {
          dispatcher({
            type: SEND_MESSAGE_FAILURE,
            payload: message
          });
        }
      }));
      subscriber.set(PUBSUB_TOPICS.SEND_FILE_MESSAGE, pubSub.subscribe(PUBSUB_TOPICS.SEND_FILE_MESSAGE, function(props) {
        var channel = props.channel, message = props.message;
        if (channelUrl === (channel === null || channel === void 0 ? void 0 : channel.url)) {
          dispatcher({
            type: SEND_MESSAGE_SUCCESS,
            payload: message
          });
          setTimeout(function() {
            return scrollIntoLast(0, scrollRef);
          }, SCROLL_BOTTOM_DELAY_FOR_SEND);
        }
      }));
      subscriber.set(PUBSUB_TOPICS.UPDATE_USER_MESSAGE, pubSub.subscribe(PUBSUB_TOPICS.UPDATE_USER_MESSAGE, function(props) {
        var channel = props.channel, message = props.message, fromSelector = props.fromSelector;
        if (fromSelector && channelUrl === (channel === null || channel === void 0 ? void 0 : channel.url) && channel.isGroupChannel()) {
          dispatcher({
            type: ON_MESSAGE_UPDATED,
            payload: { channel, message }
          });
        }
      }));
      subscriber.set(PUBSUB_TOPICS.DELETE_MESSAGE, pubSub.subscribe(PUBSUB_TOPICS.DELETE_MESSAGE, function(props) {
        var channel = props.channel, messageId = props.messageId;
        if (channelUrl === (channel === null || channel === void 0 ? void 0 : channel.url)) {
          dispatcher({
            type: ON_MESSAGE_DELETED,
            payload: messageId
          });
        }
      }));
    }
    return function() {
      subscriber.forEach(function(s3) {
        try {
          s3.remove();
        } catch (_a3) {
        }
      });
    };
  }, [
    channelUrl,
    sdkInit
  ]);
};
var ChannelContext = import_react4.default.createContext(null);
var ChannelProvider = function(props) {
  var _a2, _b2, _c, _d, _e, _f;
  var channelUrl = props.channelUrl, children = props.children, isReactionEnabled = props.isReactionEnabled, _g = props.isMessageGroupingEnabled, isMessageGroupingEnabled = _g === void 0 ? true : _g, isMultipleFilesMessageEnabled = props.isMultipleFilesMessageEnabled, showSearchIcon = props.showSearchIcon, animatedMessage = props.animatedMessage, highlightedMessage = props.highlightedMessage, startingPoint = props.startingPoint, onBeforeSendUserMessage = props.onBeforeSendUserMessage, onBeforeSendFileMessage = props.onBeforeSendFileMessage, onBeforeUpdateUserMessage = props.onBeforeUpdateUserMessage, onBeforeSendVoiceMessage = props.onBeforeSendVoiceMessage, onBeforeSendMultipleFilesMessage = props.onBeforeSendMultipleFilesMessage, onChatHeaderActionClick = props.onChatHeaderActionClick, onSearchClick = props.onSearchClick, onBackClick = props.onBackClick, threadReplySelectType = props.threadReplySelectType, queries = props.queries, filterMessageList = props.filterMessageList, _h = props.disableMarkAsRead, disableMarkAsRead = _h === void 0 ? false : _h, onReplyInThread = props.onReplyInThread, onQuoteMessageClick = props.onQuoteMessageClick, onMessageAnimated = props.onMessageAnimated, onMessageHighlighted = props.onMessageHighlighted, _j = props.scrollBehavior, scrollBehavior = _j === void 0 ? "auto" : _j, _k = props.reconnectOnIdle, reconnectOnIdle = _k === void 0 ? true : _k;
  var globalStore = useSendbird().state;
  var config = globalStore.config;
  var replyType = (_a2 = props.replyType) !== null && _a2 !== void 0 ? _a2 : getCaseResolvedReplyType(config.groupChannel.replyType).upperCase;
  var pubSub = config.pubSub, logger = config.logger, userId = config.userId, isOnline = config.isOnline, imageCompression = config.imageCompression, markAsReadScheduler = config.markAsReadScheduler, groupChannel = config.groupChannel;
  var sdk = (_c = (_b2 = globalStore === null || globalStore === void 0 ? void 0 : globalStore.stores) === null || _b2 === void 0 ? void 0 : _b2.sdkStore) === null || _c === void 0 ? void 0 : _c.sdk;
  var sdkInit = (_e = (_d = globalStore === null || globalStore === void 0 ? void 0 : globalStore.stores) === null || _d === void 0 ? void 0 : _d.sdkStore) === null || _e === void 0 ? void 0 : _e.initialized;
  var globalConfigs = globalStore === null || globalStore === void 0 ? void 0 : globalStore.config;
  var _l = (0, import_react4.useState)(startingPoint), initialTimeStamp = _l[0], setInitialTimeStamp = _l[1];
  (0, import_react4.useEffect)(function() {
    setInitialTimeStamp(startingPoint);
  }, [startingPoint, channelUrl]);
  var _m = (0, import_react4.useState)(null), animatedMessageId = _m[0], setAnimatedMessageId = _m[1];
  var _o = (0, import_react4.useState)(highlightedMessage), highLightedMessageId = _o[0], setHighLightedMessageId = _o[1];
  (0, import_react4.useEffect)(function() {
    setHighLightedMessageId(highlightedMessage);
  }, [highlightedMessage]);
  var userFilledMessageListQuery = queries === null || queries === void 0 ? void 0 : queries.messageListParams;
  var _p = (0, import_react4.useState)(null), quoteMessage = _p[0], setQuoteMessage = _p[1];
  var _q = (0, import_react4.useState)(false), isScrolled = _q[0], setIsScrolled = _q[1];
  var _r = (0, import_react4.useReducer)(channelReducer, initialState), messagesStore = _r[0], messagesDispatcher = _r[1];
  var scrollRef = (0, import_react4.useRef)(null);
  var isMentionEnabled = groupChannel.enableMention;
  var allMessages = messagesStore.allMessages, localMessages = messagesStore.localMessages, loading = messagesStore.loading, initialized = messagesStore.initialized, unreadSince = messagesStore.unreadSince, unreadSinceDate = messagesStore.unreadSinceDate, isInvalid = messagesStore.isInvalid, currentGroupChannel = messagesStore.currentGroupChannel, hasMorePrev = messagesStore.hasMorePrev, oldestMessageTimeStamp = messagesStore.oldestMessageTimeStamp, hasMoreNext = messagesStore.hasMoreNext, latestMessageTimeStamp = messagesStore.latestMessageTimeStamp, emojiContainer = messagesStore.emojiContainer, readStatus = messagesStore.readStatus, typingMembers = messagesStore.typingMembers;
  var usingReaction = getIsReactionEnabled({
    channel: currentGroupChannel,
    config,
    moduleLevel: isReactionEnabled
  });
  var emojiAllMap = (0, import_react4.useMemo)(function() {
    return usingReaction ? getAllEmojisMapFromEmojiContainer(emojiContainer) : /* @__PURE__ */ new Map();
  }, [emojiContainer]);
  var nicknamesMap = (0, import_react4.useMemo)(function() {
    return usingReaction && currentGroupChannel ? getNicknamesMapFromMembers(currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.members) : /* @__PURE__ */ new Map();
  }, [currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.members]);
  (0, import_react4.useEffect)(function() {
    if (animatedMessage) {
      setAnimatedMessageId(animatedMessage);
    }
  }, [animatedMessage]);
  var onScrollCallback = useScrollCallback({
    currentGroupChannel,
    oldestMessageTimeStamp,
    userFilledMessageListQuery,
    replyType
  }, {
    hasMorePrev,
    logger,
    messagesDispatcher,
    sdk
  });
  var scrollToMessage = useScrollToMessage({
    setInitialTimeStamp,
    setAnimatedMessageId,
    allMessages,
    scrollRef
  }, { logger });
  var onScrollDownCallback = useScrollDownCallback({
    currentGroupChannel,
    latestMessageTimeStamp,
    userFilledMessageListQuery,
    hasMoreNext,
    replyType
  }, {
    logger,
    messagesDispatcher,
    sdk
  });
  var toggleReaction = useToggleReactionCallback(currentGroupChannel, logger);
  useGetChannel({ channelUrl, sdkInit, disableMarkAsRead }, { messagesDispatcher, sdk, logger, markAsReadScheduler });
  (0, import_react4.useEffect)(function() {
    setQuoteMessage(null);
  }, [channelUrl]);
  useHandleChannelEvents({
    currentGroupChannel,
    sdkInit,
    currentUserId: userId,
    disableMarkAsRead
  }, {
    messagesDispatcher,
    sdk,
    logger,
    scrollRef,
    setQuoteMessage
  });
  useInitialMessagesFetch({
    currentGroupChannel,
    userFilledMessageListQuery,
    initialTimeStamp,
    replyType,
    setIsScrolled
  }, {
    logger,
    scrollRef,
    messagesDispatcher
  });
  useHandleChannelPubsubEvents({
    channelUrl,
    sdkInit,
    pubSub,
    dispatcher: messagesDispatcher,
    scrollRef
  });
  useHandleReconnect({ isOnline, replyType, disableMarkAsRead, reconnectOnIdle }, {
    logger,
    sdk,
    scrollRef,
    currentGroupChannel,
    messagesDispatcher,
    userFilledMessageListQuery,
    markAsReadScheduler
  });
  var deleteMessage = useDeleteMessageCallback({ currentGroupChannel, messagesDispatcher }, { logger });
  var updateMessage = useUpdateMessageCallback({ currentGroupChannel, messagesDispatcher, onBeforeUpdateUserMessage, isMentionEnabled }, { logger, pubSub });
  var resendMessage = useResendMessageCallback({ currentGroupChannel, messagesDispatcher }, { logger, pubSub });
  var _s = useSendMessageCallback({
    currentGroupChannel,
    isMentionEnabled,
    onBeforeSendUserMessage
  }, {
    logger,
    pubSub,
    scrollRef,
    messagesDispatcher
  }), messageInputRef = _s[0], sendMessage = _s[1];
  var sendFileMessage = useSendFileMessageCallback({
    currentGroupChannel,
    imageCompression,
    onBeforeSendFileMessage
  }, {
    logger,
    pubSub,
    scrollRef,
    messagesDispatcher
  })[0];
  var sendVoiceMessage = useSendVoiceMessageCallback({
    currentGroupChannel,
    onBeforeSendVoiceMessage
  }, {
    logger,
    pubSub,
    scrollRef,
    messagesDispatcher
  })[0];
  var sendMultipleFilesMessage = useSendMultipleFilesMessage({
    currentChannel: currentGroupChannel,
    onBeforeSendMultipleFilesMessage,
    publishingModules: [PublishingModuleType.CHANNEL]
  }, {
    logger,
    pubSub,
    scrollRef
  })[0];
  return import_react4.default.createElement(
    ChannelContext.Provider,
    { value: {
      // props
      channelUrl,
      isReactionEnabled: usingReaction,
      isMessageGroupingEnabled,
      isMultipleFilesMessageEnabled,
      showSearchIcon: showSearchIcon !== null && showSearchIcon !== void 0 ? showSearchIcon : globalConfigs.groupChannelSettings.enableMessageSearch,
      highlightedMessage,
      startingPoint,
      onBeforeSendUserMessage,
      onBeforeSendFileMessage,
      onBeforeUpdateUserMessage,
      onChatHeaderActionClick,
      onSearchClick,
      onBackClick,
      replyType,
      threadReplySelectType: (_f = threadReplySelectType !== null && threadReplySelectType !== void 0 ? threadReplySelectType : getCaseResolvedThreadReplySelectType(groupChannel.threadReplySelectType).upperCase) !== null && _f !== void 0 ? _f : ThreadReplySelectType.THREAD,
      queries,
      filterMessageList,
      disableMarkAsRead,
      onReplyInThread,
      onQuoteMessageClick,
      onMessageAnimated,
      onMessageHighlighted,
      // messagesStore
      allMessages,
      localMessages,
      loading,
      initialized,
      unreadSince,
      unreadSinceDate,
      isInvalid,
      currentGroupChannel,
      hasMorePrev,
      hasMoreNext,
      oldestMessageTimeStamp,
      latestMessageTimeStamp,
      emojiContainer,
      readStatus,
      typingMembers,
      // utils
      scrollToMessage,
      quoteMessage,
      setQuoteMessage,
      deleteMessage,
      updateMessage,
      resendMessage,
      messageInputRef,
      sendMessage,
      sendFileMessage,
      sendVoiceMessage,
      sendMultipleFilesMessage,
      initialTimeStamp,
      messageActionTypes: channelActions,
      messagesDispatcher,
      setInitialTimeStamp,
      setAnimatedMessageId,
      setHighLightedMessageId,
      animatedMessageId,
      highLightedMessageId,
      nicknamesMap,
      emojiAllMap,
      onScrollCallback,
      onScrollDownCallback,
      scrollRef,
      scrollBehavior,
      toggleReaction,
      isScrolled,
      setIsScrolled
    } },
    import_react4.default.createElement(UserProfileProvider, __assign({}, props), children)
  );
};
var useChannelContext = function() {
  var context = import_react4.default.useContext(ChannelContext);
  if (!context)
    throw new Error("ChannelContext not found. Use within the Channel module.");
  return context;
};

// node_modules/@sendbird/uikit-react/Channel/components/ChannelUI.js
var import_react76 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-DXhV0XQx.js
var import_react7 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/GroupChannel/components/TypingIndicator.js
var import_react5 = __toESM(require_react(), 1);
var TypingIndicatorText = function(_a2) {
  var members = _a2.members;
  function getText() {
    var stringSet = (0, import_react5.useContext)(LocalizationContext).stringSet;
    if (!members || members.length === 0) {
      return "";
    }
    if (members && members.length === 1) {
      return "".concat(members[0].nickname, " ").concat(stringSet.TYPING_INDICATOR__IS_TYPING);
    }
    if (members && members.length === 2) {
      return "".concat(members[0].nickname, " ").concat(stringSet.TYPING_INDICATOR__AND, " ").concat(members[1].nickname, " ").concat(stringSet.TYPING_INDICATOR__ARE_TYPING);
    }
    return stringSet.TYPING_INDICATOR__MULTIPLE_TYPING;
  }
  return import_react5.default.createElement(import_react5.default.Fragment, null, getText());
};
var TypingIndicator = function(_a2) {
  var _b2, _c, _d;
  var channelUrl = _a2.channelUrl;
  var state = useSendbird().state;
  var sb = (_c = (_b2 = state === null || state === void 0 ? void 0 : state.stores) === null || _b2 === void 0 ? void 0 : _b2.sdkStore) === null || _c === void 0 ? void 0 : _c.sdk;
  var logger = (_d = state === null || state === void 0 ? void 0 : state.config) === null || _d === void 0 ? void 0 : _d.logger;
  var _e = (0, import_react5.useState)(uuidv4()), handlerId = _e[0], setHandlerId = _e[1];
  var _f = (0, import_react5.useState)([]), typingMembers = _f[0], setTypingMembers = _f[1];
  (0, import_react5.useEffect)(function() {
    var _a3;
    if ((_a3 = sb === null || sb === void 0 ? void 0 : sb.groupChannel) === null || _a3 === void 0 ? void 0 : _a3.addGroupChannelHandler) {
      sb.groupChannel.removeGroupChannelHandler(handlerId);
      var newHandlerId = uuidv4();
      var handler = new Ye({
        onTypingStatusUpdated: function(groupChannel) {
          logger.info("Channel > Typing Indicator: onTypingStatusUpdated", groupChannel);
          if (groupChannel.url === channelUrl) {
            var members = groupChannel.getTypingUsers();
            setTypingMembers(members);
          }
        }
      });
      sb.groupChannel.addGroupChannelHandler(newHandlerId, handler);
      setHandlerId(newHandlerId);
    }
    return function() {
      var _a4;
      setTypingMembers([]);
      if ((_a4 = sb === null || sb === void 0 ? void 0 : sb.groupChannel) === null || _a4 === void 0 ? void 0 : _a4.removeGroupChannelHandler) {
        sb.groupChannel.removeGroupChannelHandler(handlerId);
      }
    };
  }, [channelUrl]);
  return import_react5.default.createElement(
    Label,
    { className: "sendbird-conversation__footer__typing-indicator__text", type: LabelTypography.CAPTION_2, color: LabelColors.ONBACKGROUND_2 },
    import_react5.default.createElement(TypingIndicatorText, { members: typingMembers })
  );
};

// node_modules/@sendbird/uikit-react/chunks/bundle-BHELL2oy.js
var TypingIndicatorType;
(function(TypingIndicatorType2) {
  TypingIndicatorType2["Text"] = "text";
  TypingIndicatorType2["Bubble"] = "bubble";
})(TypingIndicatorType || (TypingIndicatorType = {}));

// node_modules/@sendbird/uikit-react/ui/ConnectionStatus.js
var import_react6 = __toESM(require_react(), 1);
function ConnectionStatus() {
  var stringSet = (0, import_react6.useContext)(LocalizationContext).stringSet;
  return import_react6.default.createElement(
    "div",
    { className: "sendbird-connection-status" },
    import_react6.default.createElement(Label, { type: LabelTypography.BODY_2, color: LabelColors.ONBACKGROUND_2 }, stringSet.TRYING_TO_CONNECT),
    import_react6.default.createElement(Icon, { type: IconTypes.DISCONNECTED, fillColor: IconColors.SENT, width: "14px", height: "14px" })
  );
}

// node_modules/@sendbird/uikit-react/chunks/bundle-DXhV0XQx.js
var GroupChannelUIView = function(props) {
  var _a2, _b2, _c, _d;
  var isLoading = props.isLoading, isInvalid = props.isInvalid, channelUrl = props.channelUrl;
  var _e = deleteNullish(props), renderChannelHeader = _e.renderChannelHeader, renderMessageList = _e.renderMessageList, renderMessageInput = _e.renderMessageInput, renderTypingIndicator = _e.renderTypingIndicator, renderPlaceholderLoader = _e.renderPlaceholderLoader, renderPlaceholderInvalid = _e.renderPlaceholderInvalid;
  var state = useSendbird().state;
  var stores = state.stores, config = state.config;
  var sdkError = (_a2 = stores === null || stores === void 0 ? void 0 : stores.sdkStore) === null || _a2 === void 0 ? void 0 : _a2.error;
  var logger = config.logger, isOnline = config.isOnline;
  if (isLoading) {
    return import_react7.default.createElement("div", { className: "sendbird-conversation" }, (renderPlaceholderLoader === null || renderPlaceholderLoader === void 0 ? void 0 : renderPlaceholderLoader()) || import_react7.default.createElement(PlaceHolder, { type: PlaceHolderTypes.LOADING }));
  }
  if (!channelUrl) {
    return import_react7.default.createElement("div", { className: "sendbird-conversation" }, (renderPlaceholderInvalid === null || renderPlaceholderInvalid === void 0 ? void 0 : renderPlaceholderInvalid()) || import_react7.default.createElement(PlaceHolder, { type: PlaceHolderTypes.NO_CHANNELS }));
  }
  if (isInvalid) {
    return import_react7.default.createElement("div", { className: "sendbird-conversation" }, (renderPlaceholderInvalid === null || renderPlaceholderInvalid === void 0 ? void 0 : renderPlaceholderInvalid()) || import_react7.default.createElement(PlaceHolder, { type: PlaceHolderTypes.WRONG }));
  }
  if (sdkError) {
    return import_react7.default.createElement("div", { className: "sendbird-conversation" }, (renderPlaceholderInvalid === null || renderPlaceholderInvalid === void 0 ? void 0 : renderPlaceholderInvalid()) || import_react7.default.createElement(PlaceHolder, { type: PlaceHolderTypes.WRONG, retryToConnect: function() {
      logger.info("Channel: reconnecting");
    } }));
  }
  return import_react7.default.createElement(
    "div",
    { className: "sendbird-conversation" },
    renderChannelHeader === null || renderChannelHeader === void 0 ? void 0 : renderChannelHeader({ className: "sendbird-conversation__channel-header" }),
    renderMessageList === null || renderMessageList === void 0 ? void 0 : renderMessageList(props),
    import_react7.default.createElement(
      "div",
      { className: "sendbird-conversation__footer" },
      renderMessageInput === null || renderMessageInput === void 0 ? void 0 : renderMessageInput(),
      import_react7.default.createElement(
        "div",
        { className: "sendbird-conversation__footer__typing-indicator" },
        (renderTypingIndicator === null || renderTypingIndicator === void 0 ? void 0 : renderTypingIndicator()) || ((_b2 = config === null || config === void 0 ? void 0 : config.groupChannel) === null || _b2 === void 0 ? void 0 : _b2.enableTypingIndicator) && ((_d = (_c = config === null || config === void 0 ? void 0 : config.groupChannel) === null || _c === void 0 ? void 0 : _c.typingIndicatorTypes) === null || _d === void 0 ? void 0 : _d.has(TypingIndicatorType.Text)) && import_react7.default.createElement(TypingIndicator, { channelUrl }),
        !isOnline && import_react7.default.createElement(ConnectionStatus, null)
      )
    )
  );
};

// node_modules/@sendbird/uikit-react/Channel/components/ChannelHeader.js
var import_react9 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-BX3jAILv.js
var import_react8 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-C68gpKfa.js
var getChannelTitle = function(channel, currentUserId, stringSet) {
  var _a2;
  var LABEL_STRING_SET = stringSet || LabelStringSet;
  if (!(channel === null || channel === void 0 ? void 0 : channel.name) && !(channel === null || channel === void 0 ? void 0 : channel.members)) {
    return LABEL_STRING_SET.NO_TITLE;
  }
  if (!isDefaultChannelName(channel)) {
    return channel.name;
  }
  if (((_a2 = channel === null || channel === void 0 ? void 0 : channel.members) === null || _a2 === void 0 ? void 0 : _a2.length) === 1) {
    return LABEL_STRING_SET.NO_MEMBERS;
  }
  return channel === null || channel === void 0 ? void 0 : channel.members.filter(function(_a3) {
    var userId = _a3.userId;
    return userId !== currentUserId;
  }).map(function(_a3) {
    var nickname = _a3.nickname;
    return nickname || LABEL_STRING_SET.NO_NAME;
  }).join(", ");
};

// node_modules/@sendbird/uikit-react/chunks/bundle-BX3jAILv.js
var GroupChannelHeaderView = function(_a2) {
  var className = _a2.className, currentChannel = _a2.currentChannel, showSearchIcon = _a2.showSearchIcon, onBackClick = _a2.onBackClick, onSearchClick = _a2.onSearchClick, onChatHeaderActionClick = _a2.onChatHeaderActionClick, renderLeft = _a2.renderLeft, renderMiddle = _a2.renderMiddle, renderRight = _a2.renderRight;
  var state = useSendbird().state;
  var config = state.config;
  var userId = config.userId, theme = config.theme;
  var isMobile = useMediaQueryContext().isMobile;
  var stringSet = useLocalization().stringSet;
  var isMuted = (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.myMutedState) === "muted";
  var channelTitle = getChannelTitle(currentChannel, userId, stringSet);
  return import_react8.default.createElement(Header$1, { className: classnames("sendbird-chat-header", className), renderLeft: renderLeft !== null && renderLeft !== void 0 ? renderLeft : function() {
    return import_react8.default.createElement(
      import_react8.default.Fragment,
      null,
      isMobile && import_react8.default.createElement(Header$1.Icon, { className: "sendbird-chat-header__icon_back", onClick: onBackClick, type: IconTypes.ARROW_LEFT, color: IconColors.PRIMARY, width: "24px", height: "24px" }),
      import_react8.default.createElement(ChannelAvatar, { theme, channel: currentChannel, userId, height: 32, width: 32 })
    );
  }, renderMiddle: renderMiddle !== null && renderMiddle !== void 0 ? renderMiddle : function() {
    return import_react8.default.createElement(Header$1.Title, { title: channelTitle });
  }, renderRight: renderRight !== null && renderRight !== void 0 ? renderRight : function() {
    return import_react8.default.createElement(
      import_react8.default.Fragment,
      null,
      isMuted && import_react8.default.createElement(Header$1.Icon, { className: "sendbird-chat-header__right__mute", type: IconTypes.NOTIFICATIONS_OFF_FILLED, color: IconColors.ON_BACKGROUND_2, width: "24px", height: "24px" }),
      showSearchIcon && !(currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.isEphemeral) && import_react8.default.createElement(Header$1.IconButton, { className: "sendbird-chat-header__right__search", onClick: onSearchClick, type: IconTypes.SEARCH, color: IconColors.PRIMARY, renderIcon: function(props) {
        return import_react8.default.createElement(Header$1.Icon, __assign({}, props, { width: "24px", height: "24px" }));
      } }),
      import_react8.default.createElement(Header$1.IconButton, { className: "sendbird-chat-header__right__info", onClick: onChatHeaderActionClick, type: IconTypes.INFO, color: IconColors.PRIMARY, renderIcon: function(props) {
        return import_react8.default.createElement(Header$1.Icon, __assign({}, props, { width: "24px", height: "24px" }));
      } })
    );
  } });
};

// node_modules/@sendbird/uikit-react/Channel/components/ChannelHeader.js
var ChannelHeader = function(_a2) {
  var className = _a2.className;
  var context = useChannelContext();
  return import_react9.default.createElement(GroupChannelHeaderView, __assign({}, context, { className, currentChannel: context.currentGroupChannel }));
};

// node_modules/@sendbird/uikit-react/Channel/components/MessageList.js
var import_react69 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/Channel/components/Message.js
var import_react65 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-DL8bJVs5.js
var import_react60 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-DgO_xXWo.js
function getComponentKeyFromMessage(message) {
  if ("sendingStatus" in message) {
    if (message.sendingStatus === "succeeded")
      return String(message.messageId);
    return message.reqId;
  }
  return String(message.messageId);
}
function isContextMenuClosed() {
  var _a2, _b2;
  return ((_a2 = document.getElementById("sendbird-dropdown-portal")) === null || _a2 === void 0 ? void 0 : _a2.childElementCount) === 0 && ((_b2 = document.getElementById("sendbird-emoji-list-portal")) === null || _b2 === void 0 ? void 0 : _b2.childElementCount) === 0;
}
function getMessageTopOffset(messageCreatedAt) {
  var _a2;
  var element = (_a2 = document.querySelectorAll('[data-sb-created-at="'.concat(messageCreatedAt, '"]'))) === null || _a2 === void 0 ? void 0 : _a2[0];
  if (element instanceof HTMLElement) {
    return element.offsetTop;
  }
  return null;
}
var isDisabledBecauseFrozen2 = function(groupChannel) {
  if (!groupChannel)
    return false;
  return groupChannel.isFrozen && groupChannel.myRole !== "operator";
};
var isDisabledBecauseMuted2 = function(groupChannel) {
  if (!groupChannel)
    return false;
  return groupChannel.myMutedState === "muted";
};
var isDisabledBecauseSuggestedReplies = function(channel, enableSuggestedReplies) {
  var _a2, _b2, _c, _d;
  return enableSuggestedReplies && Array.isArray((_b2 = (_a2 = channel === null || channel === void 0 ? void 0 : channel.lastMessage) === null || _a2 === void 0 ? void 0 : _a2.extendedMessagePayload) === null || _b2 === void 0 ? void 0 : _b2.suggested_replies) && !!((_d = (_c = channel === null || channel === void 0 ? void 0 : channel.lastMessage) === null || _c === void 0 ? void 0 : _c.extendedMessagePayload) === null || _d === void 0 ? void 0 : _d.disable_chat_input);
};
var isFormVersionCompatible = function(version) {
  return version <= UIKIT_COMPATIBLE_FORM_VERSION;
};
var isDisabledBecauseMessageForm = function(allMessages, enableFormTypeMessage) {
  return enableFormTypeMessage && allMessages.some(function(message) {
    var _a2;
    return !!message.messageForm && !message.messageForm.isSubmitted && !!((_a2 = message.extendedMessagePayload) === null || _a2 === void 0 ? void 0 : _a2.disable_chat_input) && isFormVersionCompatible(message.messageForm.version);
  });
};

// node_modules/@sendbird/uikit-react/Message/hooks/useDirtyGetMentions.js
var import_react10 = __toESM(require_react(), 1);
function getMentionNodes(root) {
  if (root) {
    var mentions = root.querySelectorAll("[data-sb-mention='true']");
    var mentionsArray = Array.from(mentions);
    return mentionsArray;
  }
  return [];
}
function useDirtyGetMentions(_a2, _b2) {
  var ref = _a2.ref;
  var logger = _b2.logger;
  var targetNode = ref.current;
  var _c = (0, import_react10.useState)([]), mentionNodes = _c[0], setMentionNodes = _c[1];
  (0, import_react10.useLayoutEffect)(function() {
    if (targetNode) {
      var mentions = getMentionNodes(targetNode);
      setMentionNodes(mentions);
    }
  }, [targetNode]);
  (0, import_react10.useEffect)(function() {
    var config = { childList: true, subtree: true };
    var callback = function(mutationList) {
      var hasMutation = mutationList.length > 0;
      if (hasMutation) {
        setMentionNodes(getMentionNodes(targetNode));
      }
    };
    var observer = new MutationObserver(callback);
    if (targetNode) {
      observer.observe(targetNode, config);
    }
    return function() {
      try {
        observer.disconnect();
      } catch (error) {
        logger.error("useDirtyGetMentions: observer disconnect failed", { observer });
      }
    };
  }, [targetNode]);
  return mentionNodes;
}

// node_modules/@sendbird/uikit-react/ui/DateSeparator.js
var import_react11 = __toESM(require_react(), 1);
var DateSeparator = function(_a2) {
  var _b2 = _a2.children, children = _b2 === void 0 ? void 0 : _b2, _c = _a2.className, className = _c === void 0 ? "" : _c, _d = _a2.separatorColor, separatorColor = _d === void 0 ? Colors.ONBACKGROUND_4 : _d;
  return import_react11.default.createElement(
    "div",
    { className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), [
      "sendbird-separator"
    ], false).join(" ") },
    import_react11.default.createElement("div", { className: ["sendbird-separator__left", "".concat(changeColorToClassName2(separatorColor), "--background-color")].join(" ") }),
    import_react11.default.createElement("div", { className: "sendbird-separator__text" }, children || import_react11.default.createElement(Label, { type: LabelTypography.CAPTION_2, color: LabelColors.ONBACKGROUND_2 }, "Date Separator")),
    import_react11.default.createElement("div", { className: ["sendbird-separator__right", "".concat(changeColorToClassName2(separatorColor), "--background-color")].join(" ") })
  );
};

// node_modules/@sendbird/uikit-react/ui/MessageInput.js
var import_react13 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-B-wIh5Qv.js
var MessageInputKeys = {
  Enter: "Enter",
  ArrowUp: "ArrowUp",
  ArrowDown: "ArrowDown",
  Backspace: "Backspace"
};
var NodeTypes = {
  ElementNode: 1,
  TextNode: 3
};
var NodeNames = {
  Span: "SPAN",
  Br: "BR",
  Div: "DIV"
};

// node_modules/@sendbird/uikit-react/chunks/bundle-Ob8Qv8ze.js
var import_react12 = __toESM(require_react(), 1);

// node_modules/dompurify/dist/purify.es.mjs
var {
  entries,
  setPrototypeOf,
  isFrozen,
  getPrototypeOf,
  getOwnPropertyDescriptor
} = Object;
var {
  freeze,
  seal,
  create
} = Object;
var {
  apply,
  construct
} = typeof Reflect !== "undefined" && Reflect;
if (!freeze) {
  freeze = function freeze2(x2) {
    return x2;
  };
}
if (!seal) {
  seal = function seal2(x2) {
    return x2;
  };
}
if (!apply) {
  apply = function apply2(fun, thisValue, args) {
    return fun.apply(thisValue, args);
  };
}
if (!construct) {
  construct = function construct2(Func, args) {
    return new Func(...args);
  };
}
var arrayForEach = unapply(Array.prototype.forEach);
var arrayLastIndexOf = unapply(Array.prototype.lastIndexOf);
var arrayPop = unapply(Array.prototype.pop);
var arrayPush = unapply(Array.prototype.push);
var arraySplice = unapply(Array.prototype.splice);
var stringToLowerCase = unapply(String.prototype.toLowerCase);
var stringToString = unapply(String.prototype.toString);
var stringMatch = unapply(String.prototype.match);
var stringReplace = unapply(String.prototype.replace);
var stringIndexOf = unapply(String.prototype.indexOf);
var stringTrim = unapply(String.prototype.trim);
var objectHasOwnProperty = unapply(Object.prototype.hasOwnProperty);
var regExpTest = unapply(RegExp.prototype.test);
var typeErrorCreate = unconstruct(TypeError);
function unapply(func) {
  return function(thisArg) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return apply(func, thisArg, args);
  };
}
function unconstruct(func) {
  return function() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    return construct(func, args);
  };
}
function addToSet(set, array) {
  let transformCaseFunc = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : stringToLowerCase;
  if (setPrototypeOf) {
    setPrototypeOf(set, null);
  }
  let l = array.length;
  while (l--) {
    let element = array[l];
    if (typeof element === "string") {
      const lcElement = transformCaseFunc(element);
      if (lcElement !== element) {
        if (!isFrozen(array)) {
          array[l] = lcElement;
        }
        element = lcElement;
      }
    }
    set[element] = true;
  }
  return set;
}
function cleanArray(array) {
  for (let index = 0; index < array.length; index++) {
    const isPropertyExist = objectHasOwnProperty(array, index);
    if (!isPropertyExist) {
      array[index] = null;
    }
  }
  return array;
}
function clone(object) {
  const newObject = create(null);
  for (const [property, value] of entries(object)) {
    const isPropertyExist = objectHasOwnProperty(object, property);
    if (isPropertyExist) {
      if (Array.isArray(value)) {
        newObject[property] = cleanArray(value);
      } else if (value && typeof value === "object" && value.constructor === Object) {
        newObject[property] = clone(value);
      } else {
        newObject[property] = value;
      }
    }
  }
  return newObject;
}
function lookupGetter(object, prop) {
  while (object !== null) {
    const desc = getOwnPropertyDescriptor(object, prop);
    if (desc) {
      if (desc.get) {
        return unapply(desc.get);
      }
      if (typeof desc.value === "function") {
        return unapply(desc.value);
      }
    }
    object = getPrototypeOf(object);
  }
  function fallbackValue() {
    return null;
  }
  return fallbackValue;
}
var html$1 = freeze(["a", "abbr", "acronym", "address", "area", "article", "aside", "audio", "b", "bdi", "bdo", "big", "blink", "blockquote", "body", "br", "button", "canvas", "caption", "center", "cite", "code", "col", "colgroup", "content", "data", "datalist", "dd", "decorator", "del", "details", "dfn", "dialog", "dir", "div", "dl", "dt", "element", "em", "fieldset", "figcaption", "figure", "font", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "img", "input", "ins", "kbd", "label", "legend", "li", "main", "map", "mark", "marquee", "menu", "menuitem", "meter", "nav", "nobr", "ol", "optgroup", "option", "output", "p", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "section", "select", "shadow", "small", "source", "spacer", "span", "strike", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "time", "tr", "track", "tt", "u", "ul", "var", "video", "wbr"]);
var svg$1 = freeze(["svg", "a", "altglyph", "altglyphdef", "altglyphitem", "animatecolor", "animatemotion", "animatetransform", "circle", "clippath", "defs", "desc", "ellipse", "filter", "font", "g", "glyph", "glyphref", "hkern", "image", "line", "lineargradient", "marker", "mask", "metadata", "mpath", "path", "pattern", "polygon", "polyline", "radialgradient", "rect", "stop", "style", "switch", "symbol", "text", "textpath", "title", "tref", "tspan", "view", "vkern"]);
var svgFilters = freeze(["feBlend", "feColorMatrix", "feComponentTransfer", "feComposite", "feConvolveMatrix", "feDiffuseLighting", "feDisplacementMap", "feDistantLight", "feDropShadow", "feFlood", "feFuncA", "feFuncB", "feFuncG", "feFuncR", "feGaussianBlur", "feImage", "feMerge", "feMergeNode", "feMorphology", "feOffset", "fePointLight", "feSpecularLighting", "feSpotLight", "feTile", "feTurbulence"]);
var svgDisallowed = freeze(["animate", "color-profile", "cursor", "discard", "font-face", "font-face-format", "font-face-name", "font-face-src", "font-face-uri", "foreignobject", "hatch", "hatchpath", "mesh", "meshgradient", "meshpatch", "meshrow", "missing-glyph", "script", "set", "solidcolor", "unknown", "use"]);
var mathMl$1 = freeze(["math", "menclose", "merror", "mfenced", "mfrac", "mglyph", "mi", "mlabeledtr", "mmultiscripts", "mn", "mo", "mover", "mpadded", "mphantom", "mroot", "mrow", "ms", "mspace", "msqrt", "mstyle", "msub", "msup", "msubsup", "mtable", "mtd", "mtext", "mtr", "munder", "munderover", "mprescripts"]);
var mathMlDisallowed = freeze(["maction", "maligngroup", "malignmark", "mlongdiv", "mscarries", "mscarry", "msgroup", "mstack", "msline", "msrow", "semantics", "annotation", "annotation-xml", "mprescripts", "none"]);
var text = freeze(["#text"]);
var html = freeze(["accept", "action", "align", "alt", "autocapitalize", "autocomplete", "autopictureinpicture", "autoplay", "background", "bgcolor", "border", "capture", "cellpadding", "cellspacing", "checked", "cite", "class", "clear", "color", "cols", "colspan", "controls", "controlslist", "coords", "crossorigin", "datetime", "decoding", "default", "dir", "disabled", "disablepictureinpicture", "disableremoteplayback", "download", "draggable", "enctype", "enterkeyhint", "face", "for", "headers", "height", "hidden", "high", "href", "hreflang", "id", "inputmode", "integrity", "ismap", "kind", "label", "lang", "list", "loading", "loop", "low", "max", "maxlength", "media", "method", "min", "minlength", "multiple", "muted", "name", "nonce", "noshade", "novalidate", "nowrap", "open", "optimum", "pattern", "placeholder", "playsinline", "popover", "popovertarget", "popovertargetaction", "poster", "preload", "pubdate", "radiogroup", "readonly", "rel", "required", "rev", "reversed", "role", "rows", "rowspan", "spellcheck", "scope", "selected", "shape", "size", "sizes", "span", "srclang", "start", "src", "srcset", "step", "style", "summary", "tabindex", "title", "translate", "type", "usemap", "valign", "value", "width", "wrap", "xmlns", "slot"]);
var svg = freeze(["accent-height", "accumulate", "additive", "alignment-baseline", "amplitude", "ascent", "attributename", "attributetype", "azimuth", "basefrequency", "baseline-shift", "begin", "bias", "by", "class", "clip", "clippathunits", "clip-path", "clip-rule", "color", "color-interpolation", "color-interpolation-filters", "color-profile", "color-rendering", "cx", "cy", "d", "dx", "dy", "diffuseconstant", "direction", "display", "divisor", "dur", "edgemode", "elevation", "end", "exponent", "fill", "fill-opacity", "fill-rule", "filter", "filterunits", "flood-color", "flood-opacity", "font-family", "font-size", "font-size-adjust", "font-stretch", "font-style", "font-variant", "font-weight", "fx", "fy", "g1", "g2", "glyph-name", "glyphref", "gradientunits", "gradienttransform", "height", "href", "id", "image-rendering", "in", "in2", "intercept", "k", "k1", "k2", "k3", "k4", "kerning", "keypoints", "keysplines", "keytimes", "lang", "lengthadjust", "letter-spacing", "kernelmatrix", "kernelunitlength", "lighting-color", "local", "marker-end", "marker-mid", "marker-start", "markerheight", "markerunits", "markerwidth", "maskcontentunits", "maskunits", "max", "mask", "media", "method", "mode", "min", "name", "numoctaves", "offset", "operator", "opacity", "order", "orient", "orientation", "origin", "overflow", "paint-order", "path", "pathlength", "patterncontentunits", "patterntransform", "patternunits", "points", "preservealpha", "preserveaspectratio", "primitiveunits", "r", "rx", "ry", "radius", "refx", "refy", "repeatcount", "repeatdur", "restart", "result", "rotate", "scale", "seed", "shape-rendering", "slope", "specularconstant", "specularexponent", "spreadmethod", "startoffset", "stddeviation", "stitchtiles", "stop-color", "stop-opacity", "stroke-dasharray", "stroke-dashoffset", "stroke-linecap", "stroke-linejoin", "stroke-miterlimit", "stroke-opacity", "stroke", "stroke-width", "style", "surfacescale", "systemlanguage", "tabindex", "tablevalues", "targetx", "targety", "transform", "transform-origin", "text-anchor", "text-decoration", "text-rendering", "textlength", "type", "u1", "u2", "unicode", "values", "viewbox", "visibility", "version", "vert-adv-y", "vert-origin-x", "vert-origin-y", "width", "word-spacing", "wrap", "writing-mode", "xchannelselector", "ychannelselector", "x", "x1", "x2", "xmlns", "y", "y1", "y2", "z", "zoomandpan"]);
var mathMl = freeze(["accent", "accentunder", "align", "bevelled", "close", "columnsalign", "columnlines", "columnspan", "denomalign", "depth", "dir", "display", "displaystyle", "encoding", "fence", "frame", "height", "href", "id", "largeop", "length", "linethickness", "lspace", "lquote", "mathbackground", "mathcolor", "mathsize", "mathvariant", "maxsize", "minsize", "movablelimits", "notation", "numalign", "open", "rowalign", "rowlines", "rowspacing", "rowspan", "rspace", "rquote", "scriptlevel", "scriptminsize", "scriptsizemultiplier", "selection", "separator", "separators", "stretchy", "subscriptshift", "supscriptshift", "symmetric", "voffset", "width", "xmlns"]);
var xml = freeze(["xlink:href", "xml:id", "xlink:title", "xml:space", "xmlns:xlink"]);
var MUSTACHE_EXPR = seal(/\{\{[\w\W]*|[\w\W]*\}\}/gm);
var ERB_EXPR = seal(/<%[\w\W]*|[\w\W]*%>/gm);
var TMPLIT_EXPR = seal(/\$\{[\w\W]*/gm);
var DATA_ATTR = seal(/^data-[\-\w.\u00B7-\uFFFF]+$/);
var ARIA_ATTR = seal(/^aria-[\-\w]+$/);
var IS_ALLOWED_URI = seal(
  /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i
  // eslint-disable-line no-useless-escape
);
var IS_SCRIPT_OR_DATA = seal(/^(?:\w+script|data):/i);
var ATTR_WHITESPACE = seal(
  /[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g
  // eslint-disable-line no-control-regex
);
var DOCTYPE_NAME = seal(/^html$/i);
var CUSTOM_ELEMENT = seal(/^[a-z][.\w]*(-[.\w]+)+$/i);
var EXPRESSIONS = Object.freeze({
  __proto__: null,
  ARIA_ATTR,
  ATTR_WHITESPACE,
  CUSTOM_ELEMENT,
  DATA_ATTR,
  DOCTYPE_NAME,
  ERB_EXPR,
  IS_ALLOWED_URI,
  IS_SCRIPT_OR_DATA,
  MUSTACHE_EXPR,
  TMPLIT_EXPR
});
var NODE_TYPE = {
  element: 1,
  attribute: 2,
  text: 3,
  cdataSection: 4,
  entityReference: 5,
  // Deprecated
  entityNode: 6,
  // Deprecated
  progressingInstruction: 7,
  comment: 8,
  document: 9,
  documentType: 10,
  documentFragment: 11,
  notation: 12
  // Deprecated
};
var getGlobal = function getGlobal2() {
  return typeof window === "undefined" ? null : window;
};
var _createTrustedTypesPolicy = function _createTrustedTypesPolicy2(trustedTypes, purifyHostElement) {
  if (typeof trustedTypes !== "object" || typeof trustedTypes.createPolicy !== "function") {
    return null;
  }
  let suffix = null;
  const ATTR_NAME = "data-tt-policy-suffix";
  if (purifyHostElement && purifyHostElement.hasAttribute(ATTR_NAME)) {
    suffix = purifyHostElement.getAttribute(ATTR_NAME);
  }
  const policyName = "dompurify" + (suffix ? "#" + suffix : "");
  try {
    return trustedTypes.createPolicy(policyName, {
      createHTML(html2) {
        return html2;
      },
      createScriptURL(scriptUrl) {
        return scriptUrl;
      }
    });
  } catch (_) {
    console.warn("TrustedTypes policy " + policyName + " could not be created.");
    return null;
  }
};
var _createHooksMap = function _createHooksMap2() {
  return {
    afterSanitizeAttributes: [],
    afterSanitizeElements: [],
    afterSanitizeShadowDOM: [],
    beforeSanitizeAttributes: [],
    beforeSanitizeElements: [],
    beforeSanitizeShadowDOM: [],
    uponSanitizeAttribute: [],
    uponSanitizeElement: [],
    uponSanitizeShadowNode: []
  };
};
function createDOMPurify() {
  let window2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : getGlobal();
  const DOMPurify = (root) => createDOMPurify(root);
  DOMPurify.version = "3.2.4";
  DOMPurify.removed = [];
  if (!window2 || !window2.document || window2.document.nodeType !== NODE_TYPE.document || !window2.Element) {
    DOMPurify.isSupported = false;
    return DOMPurify;
  }
  let {
    document: document2
  } = window2;
  const originalDocument = document2;
  const currentScript = originalDocument.currentScript;
  const {
    DocumentFragment,
    HTMLTemplateElement,
    Node: Node2,
    Element,
    NodeFilter,
    NamedNodeMap = window2.NamedNodeMap || window2.MozNamedAttrMap,
    HTMLFormElement,
    DOMParser,
    trustedTypes
  } = window2;
  const ElementPrototype = Element.prototype;
  const cloneNode = lookupGetter(ElementPrototype, "cloneNode");
  const remove = lookupGetter(ElementPrototype, "remove");
  const getNextSibling = lookupGetter(ElementPrototype, "nextSibling");
  const getChildNodes = lookupGetter(ElementPrototype, "childNodes");
  const getParentNode = lookupGetter(ElementPrototype, "parentNode");
  if (typeof HTMLTemplateElement === "function") {
    const template = document2.createElement("template");
    if (template.content && template.content.ownerDocument) {
      document2 = template.content.ownerDocument;
    }
  }
  let trustedTypesPolicy;
  let emptyHTML = "";
  const {
    implementation,
    createNodeIterator,
    createDocumentFragment,
    getElementsByTagName
  } = document2;
  const {
    importNode
  } = originalDocument;
  let hooks = _createHooksMap();
  DOMPurify.isSupported = typeof entries === "function" && typeof getParentNode === "function" && implementation && implementation.createHTMLDocument !== void 0;
  const {
    MUSTACHE_EXPR: MUSTACHE_EXPR2,
    ERB_EXPR: ERB_EXPR2,
    TMPLIT_EXPR: TMPLIT_EXPR2,
    DATA_ATTR: DATA_ATTR2,
    ARIA_ATTR: ARIA_ATTR2,
    IS_SCRIPT_OR_DATA: IS_SCRIPT_OR_DATA2,
    ATTR_WHITESPACE: ATTR_WHITESPACE2,
    CUSTOM_ELEMENT: CUSTOM_ELEMENT2
  } = EXPRESSIONS;
  let {
    IS_ALLOWED_URI: IS_ALLOWED_URI$1
  } = EXPRESSIONS;
  let ALLOWED_TAGS = null;
  const DEFAULT_ALLOWED_TAGS = addToSet({}, [...html$1, ...svg$1, ...svgFilters, ...mathMl$1, ...text]);
  let ALLOWED_ATTR = null;
  const DEFAULT_ALLOWED_ATTR = addToSet({}, [...html, ...svg, ...mathMl, ...xml]);
  let CUSTOM_ELEMENT_HANDLING = Object.seal(create(null, {
    tagNameCheck: {
      writable: true,
      configurable: false,
      enumerable: true,
      value: null
    },
    attributeNameCheck: {
      writable: true,
      configurable: false,
      enumerable: true,
      value: null
    },
    allowCustomizedBuiltInElements: {
      writable: true,
      configurable: false,
      enumerable: true,
      value: false
    }
  }));
  let FORBID_TAGS = null;
  let FORBID_ATTR = null;
  let ALLOW_ARIA_ATTR = true;
  let ALLOW_DATA_ATTR = true;
  let ALLOW_UNKNOWN_PROTOCOLS = false;
  let ALLOW_SELF_CLOSE_IN_ATTR = true;
  let SAFE_FOR_TEMPLATES = false;
  let SAFE_FOR_XML = true;
  let WHOLE_DOCUMENT = false;
  let SET_CONFIG = false;
  let FORCE_BODY = false;
  let RETURN_DOM = false;
  let RETURN_DOM_FRAGMENT = false;
  let RETURN_TRUSTED_TYPE = false;
  let SANITIZE_DOM = true;
  let SANITIZE_NAMED_PROPS = false;
  const SANITIZE_NAMED_PROPS_PREFIX = "user-content-";
  let KEEP_CONTENT = true;
  let IN_PLACE = false;
  let USE_PROFILES = {};
  let FORBID_CONTENTS = null;
  const DEFAULT_FORBID_CONTENTS = addToSet({}, ["annotation-xml", "audio", "colgroup", "desc", "foreignobject", "head", "iframe", "math", "mi", "mn", "mo", "ms", "mtext", "noembed", "noframes", "noscript", "plaintext", "script", "style", "svg", "template", "thead", "title", "video", "xmp"]);
  let DATA_URI_TAGS = null;
  const DEFAULT_DATA_URI_TAGS = addToSet({}, ["audio", "video", "img", "source", "image", "track"]);
  let URI_SAFE_ATTRIBUTES = null;
  const DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ["alt", "class", "for", "id", "label", "name", "pattern", "placeholder", "role", "summary", "title", "value", "style", "xmlns"]);
  const MATHML_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
  const SVG_NAMESPACE = "http://www.w3.org/2000/svg";
  const HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
  let NAMESPACE = HTML_NAMESPACE;
  let IS_EMPTY_INPUT = false;
  let ALLOWED_NAMESPACES = null;
  const DEFAULT_ALLOWED_NAMESPACES = addToSet({}, [MATHML_NAMESPACE, SVG_NAMESPACE, HTML_NAMESPACE], stringToString);
  let MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, ["mi", "mo", "mn", "ms", "mtext"]);
  let HTML_INTEGRATION_POINTS = addToSet({}, ["annotation-xml"]);
  const COMMON_SVG_AND_HTML_ELEMENTS = addToSet({}, ["title", "style", "font", "a", "script"]);
  let PARSER_MEDIA_TYPE = null;
  const SUPPORTED_PARSER_MEDIA_TYPES = ["application/xhtml+xml", "text/html"];
  const DEFAULT_PARSER_MEDIA_TYPE = "text/html";
  let transformCaseFunc = null;
  let CONFIG = null;
  const formElement = document2.createElement("form");
  const isRegexOrFunction = function isRegexOrFunction2(testValue) {
    return testValue instanceof RegExp || testValue instanceof Function;
  };
  const _parseConfig = function _parseConfig2() {
    let cfg = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    if (CONFIG && CONFIG === cfg) {
      return;
    }
    if (!cfg || typeof cfg !== "object") {
      cfg = {};
    }
    cfg = clone(cfg);
    PARSER_MEDIA_TYPE = // eslint-disable-next-line unicorn/prefer-includes
    SUPPORTED_PARSER_MEDIA_TYPES.indexOf(cfg.PARSER_MEDIA_TYPE) === -1 ? DEFAULT_PARSER_MEDIA_TYPE : cfg.PARSER_MEDIA_TYPE;
    transformCaseFunc = PARSER_MEDIA_TYPE === "application/xhtml+xml" ? stringToString : stringToLowerCase;
    ALLOWED_TAGS = objectHasOwnProperty(cfg, "ALLOWED_TAGS") ? addToSet({}, cfg.ALLOWED_TAGS, transformCaseFunc) : DEFAULT_ALLOWED_TAGS;
    ALLOWED_ATTR = objectHasOwnProperty(cfg, "ALLOWED_ATTR") ? addToSet({}, cfg.ALLOWED_ATTR, transformCaseFunc) : DEFAULT_ALLOWED_ATTR;
    ALLOWED_NAMESPACES = objectHasOwnProperty(cfg, "ALLOWED_NAMESPACES") ? addToSet({}, cfg.ALLOWED_NAMESPACES, stringToString) : DEFAULT_ALLOWED_NAMESPACES;
    URI_SAFE_ATTRIBUTES = objectHasOwnProperty(cfg, "ADD_URI_SAFE_ATTR") ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES), cfg.ADD_URI_SAFE_ATTR, transformCaseFunc) : DEFAULT_URI_SAFE_ATTRIBUTES;
    DATA_URI_TAGS = objectHasOwnProperty(cfg, "ADD_DATA_URI_TAGS") ? addToSet(clone(DEFAULT_DATA_URI_TAGS), cfg.ADD_DATA_URI_TAGS, transformCaseFunc) : DEFAULT_DATA_URI_TAGS;
    FORBID_CONTENTS = objectHasOwnProperty(cfg, "FORBID_CONTENTS") ? addToSet({}, cfg.FORBID_CONTENTS, transformCaseFunc) : DEFAULT_FORBID_CONTENTS;
    FORBID_TAGS = objectHasOwnProperty(cfg, "FORBID_TAGS") ? addToSet({}, cfg.FORBID_TAGS, transformCaseFunc) : {};
    FORBID_ATTR = objectHasOwnProperty(cfg, "FORBID_ATTR") ? addToSet({}, cfg.FORBID_ATTR, transformCaseFunc) : {};
    USE_PROFILES = objectHasOwnProperty(cfg, "USE_PROFILES") ? cfg.USE_PROFILES : false;
    ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false;
    ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false;
    ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false;
    ALLOW_SELF_CLOSE_IN_ATTR = cfg.ALLOW_SELF_CLOSE_IN_ATTR !== false;
    SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false;
    SAFE_FOR_XML = cfg.SAFE_FOR_XML !== false;
    WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false;
    RETURN_DOM = cfg.RETURN_DOM || false;
    RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false;
    RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false;
    FORCE_BODY = cfg.FORCE_BODY || false;
    SANITIZE_DOM = cfg.SANITIZE_DOM !== false;
    SANITIZE_NAMED_PROPS = cfg.SANITIZE_NAMED_PROPS || false;
    KEEP_CONTENT = cfg.KEEP_CONTENT !== false;
    IN_PLACE = cfg.IN_PLACE || false;
    IS_ALLOWED_URI$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI;
    NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;
    MATHML_TEXT_INTEGRATION_POINTS = cfg.MATHML_TEXT_INTEGRATION_POINTS || MATHML_TEXT_INTEGRATION_POINTS;
    HTML_INTEGRATION_POINTS = cfg.HTML_INTEGRATION_POINTS || HTML_INTEGRATION_POINTS;
    CUSTOM_ELEMENT_HANDLING = cfg.CUSTOM_ELEMENT_HANDLING || {};
    if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck)) {
      CUSTOM_ELEMENT_HANDLING.tagNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck;
    }
    if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)) {
      CUSTOM_ELEMENT_HANDLING.attributeNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck;
    }
    if (cfg.CUSTOM_ELEMENT_HANDLING && typeof cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements === "boolean") {
      CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements = cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements;
    }
    if (SAFE_FOR_TEMPLATES) {
      ALLOW_DATA_ATTR = false;
    }
    if (RETURN_DOM_FRAGMENT) {
      RETURN_DOM = true;
    }
    if (USE_PROFILES) {
      ALLOWED_TAGS = addToSet({}, text);
      ALLOWED_ATTR = [];
      if (USE_PROFILES.html === true) {
        addToSet(ALLOWED_TAGS, html$1);
        addToSet(ALLOWED_ATTR, html);
      }
      if (USE_PROFILES.svg === true) {
        addToSet(ALLOWED_TAGS, svg$1);
        addToSet(ALLOWED_ATTR, svg);
        addToSet(ALLOWED_ATTR, xml);
      }
      if (USE_PROFILES.svgFilters === true) {
        addToSet(ALLOWED_TAGS, svgFilters);
        addToSet(ALLOWED_ATTR, svg);
        addToSet(ALLOWED_ATTR, xml);
      }
      if (USE_PROFILES.mathMl === true) {
        addToSet(ALLOWED_TAGS, mathMl$1);
        addToSet(ALLOWED_ATTR, mathMl);
        addToSet(ALLOWED_ATTR, xml);
      }
    }
    if (cfg.ADD_TAGS) {
      if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {
        ALLOWED_TAGS = clone(ALLOWED_TAGS);
      }
      addToSet(ALLOWED_TAGS, cfg.ADD_TAGS, transformCaseFunc);
    }
    if (cfg.ADD_ATTR) {
      if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {
        ALLOWED_ATTR = clone(ALLOWED_ATTR);
      }
      addToSet(ALLOWED_ATTR, cfg.ADD_ATTR, transformCaseFunc);
    }
    if (cfg.ADD_URI_SAFE_ATTR) {
      addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR, transformCaseFunc);
    }
    if (cfg.FORBID_CONTENTS) {
      if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) {
        FORBID_CONTENTS = clone(FORBID_CONTENTS);
      }
      addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS, transformCaseFunc);
    }
    if (KEEP_CONTENT) {
      ALLOWED_TAGS["#text"] = true;
    }
    if (WHOLE_DOCUMENT) {
      addToSet(ALLOWED_TAGS, ["html", "head", "body"]);
    }
    if (ALLOWED_TAGS.table) {
      addToSet(ALLOWED_TAGS, ["tbody"]);
      delete FORBID_TAGS.tbody;
    }
    if (cfg.TRUSTED_TYPES_POLICY) {
      if (typeof cfg.TRUSTED_TYPES_POLICY.createHTML !== "function") {
        throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a "createHTML" hook.');
      }
      if (typeof cfg.TRUSTED_TYPES_POLICY.createScriptURL !== "function") {
        throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a "createScriptURL" hook.');
      }
      trustedTypesPolicy = cfg.TRUSTED_TYPES_POLICY;
      emptyHTML = trustedTypesPolicy.createHTML("");
    } else {
      if (trustedTypesPolicy === void 0) {
        trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, currentScript);
      }
      if (trustedTypesPolicy !== null && typeof emptyHTML === "string") {
        emptyHTML = trustedTypesPolicy.createHTML("");
      }
    }
    if (freeze) {
      freeze(cfg);
    }
    CONFIG = cfg;
  };
  const ALL_SVG_TAGS = addToSet({}, [...svg$1, ...svgFilters, ...svgDisallowed]);
  const ALL_MATHML_TAGS = addToSet({}, [...mathMl$1, ...mathMlDisallowed]);
  const _checkValidNamespace = function _checkValidNamespace2(element) {
    let parent = getParentNode(element);
    if (!parent || !parent.tagName) {
      parent = {
        namespaceURI: NAMESPACE,
        tagName: "template"
      };
    }
    const tagName = stringToLowerCase(element.tagName);
    const parentTagName = stringToLowerCase(parent.tagName);
    if (!ALLOWED_NAMESPACES[element.namespaceURI]) {
      return false;
    }
    if (element.namespaceURI === SVG_NAMESPACE) {
      if (parent.namespaceURI === HTML_NAMESPACE) {
        return tagName === "svg";
      }
      if (parent.namespaceURI === MATHML_NAMESPACE) {
        return tagName === "svg" && (parentTagName === "annotation-xml" || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);
      }
      return Boolean(ALL_SVG_TAGS[tagName]);
    }
    if (element.namespaceURI === MATHML_NAMESPACE) {
      if (parent.namespaceURI === HTML_NAMESPACE) {
        return tagName === "math";
      }
      if (parent.namespaceURI === SVG_NAMESPACE) {
        return tagName === "math" && HTML_INTEGRATION_POINTS[parentTagName];
      }
      return Boolean(ALL_MATHML_TAGS[tagName]);
    }
    if (element.namespaceURI === HTML_NAMESPACE) {
      if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) {
        return false;
      }
      if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) {
        return false;
      }
      return !ALL_MATHML_TAGS[tagName] && (COMMON_SVG_AND_HTML_ELEMENTS[tagName] || !ALL_SVG_TAGS[tagName]);
    }
    if (PARSER_MEDIA_TYPE === "application/xhtml+xml" && ALLOWED_NAMESPACES[element.namespaceURI]) {
      return true;
    }
    return false;
  };
  const _forceRemove = function _forceRemove2(node) {
    arrayPush(DOMPurify.removed, {
      element: node
    });
    try {
      getParentNode(node).removeChild(node);
    } catch (_) {
      remove(node);
    }
  };
  const _removeAttribute = function _removeAttribute2(name, element) {
    try {
      arrayPush(DOMPurify.removed, {
        attribute: element.getAttributeNode(name),
        from: element
      });
    } catch (_) {
      arrayPush(DOMPurify.removed, {
        attribute: null,
        from: element
      });
    }
    element.removeAttribute(name);
    if (name === "is") {
      if (RETURN_DOM || RETURN_DOM_FRAGMENT) {
        try {
          _forceRemove(element);
        } catch (_) {
        }
      } else {
        try {
          element.setAttribute(name, "");
        } catch (_) {
        }
      }
    }
  };
  const _initDocument = function _initDocument2(dirty) {
    let doc = null;
    let leadingWhitespace = null;
    if (FORCE_BODY) {
      dirty = "<remove></remove>" + dirty;
    } else {
      const matches = stringMatch(dirty, /^[\r\n\t ]+/);
      leadingWhitespace = matches && matches[0];
    }
    if (PARSER_MEDIA_TYPE === "application/xhtml+xml" && NAMESPACE === HTML_NAMESPACE) {
      dirty = '<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>' + dirty + "</body></html>";
    }
    const dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;
    if (NAMESPACE === HTML_NAMESPACE) {
      try {
        doc = new DOMParser().parseFromString(dirtyPayload, PARSER_MEDIA_TYPE);
      } catch (_) {
      }
    }
    if (!doc || !doc.documentElement) {
      doc = implementation.createDocument(NAMESPACE, "template", null);
      try {
        doc.documentElement.innerHTML = IS_EMPTY_INPUT ? emptyHTML : dirtyPayload;
      } catch (_) {
      }
    }
    const body = doc.body || doc.documentElement;
    if (dirty && leadingWhitespace) {
      body.insertBefore(document2.createTextNode(leadingWhitespace), body.childNodes[0] || null);
    }
    if (NAMESPACE === HTML_NAMESPACE) {
      return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? "html" : "body")[0];
    }
    return WHOLE_DOCUMENT ? doc.documentElement : body;
  };
  const _createNodeIterator = function _createNodeIterator2(root) {
    return createNodeIterator.call(
      root.ownerDocument || root,
      root,
      // eslint-disable-next-line no-bitwise
      NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT | NodeFilter.SHOW_PROCESSING_INSTRUCTION | NodeFilter.SHOW_CDATA_SECTION,
      null
    );
  };
  const _isClobbered = function _isClobbered2(element) {
    return element instanceof HTMLFormElement && (typeof element.nodeName !== "string" || typeof element.textContent !== "string" || typeof element.removeChild !== "function" || !(element.attributes instanceof NamedNodeMap) || typeof element.removeAttribute !== "function" || typeof element.setAttribute !== "function" || typeof element.namespaceURI !== "string" || typeof element.insertBefore !== "function" || typeof element.hasChildNodes !== "function");
  };
  const _isNode = function _isNode2(value) {
    return typeof Node2 === "function" && value instanceof Node2;
  };
  function _executeHooks(hooks2, currentNode, data) {
    arrayForEach(hooks2, (hook) => {
      hook.call(DOMPurify, currentNode, data, CONFIG);
    });
  }
  const _sanitizeElements = function _sanitizeElements2(currentNode) {
    let content = null;
    _executeHooks(hooks.beforeSanitizeElements, currentNode, null);
    if (_isClobbered(currentNode)) {
      _forceRemove(currentNode);
      return true;
    }
    const tagName = transformCaseFunc(currentNode.nodeName);
    _executeHooks(hooks.uponSanitizeElement, currentNode, {
      tagName,
      allowedTags: ALLOWED_TAGS
    });
    if (currentNode.hasChildNodes() && !_isNode(currentNode.firstElementChild) && regExpTest(/<[/\w]/g, currentNode.innerHTML) && regExpTest(/<[/\w]/g, currentNode.textContent)) {
      _forceRemove(currentNode);
      return true;
    }
    if (currentNode.nodeType === NODE_TYPE.progressingInstruction) {
      _forceRemove(currentNode);
      return true;
    }
    if (SAFE_FOR_XML && currentNode.nodeType === NODE_TYPE.comment && regExpTest(/<[/\w]/g, currentNode.data)) {
      _forceRemove(currentNode);
      return true;
    }
    if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
      if (!FORBID_TAGS[tagName] && _isBasicCustomElement(tagName)) {
        if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, tagName)) {
          return false;
        }
        if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(tagName)) {
          return false;
        }
      }
      if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {
        const parentNode = getParentNode(currentNode) || currentNode.parentNode;
        const childNodes = getChildNodes(currentNode) || currentNode.childNodes;
        if (childNodes && parentNode) {
          const childCount = childNodes.length;
          for (let i2 = childCount - 1; i2 >= 0; --i2) {
            const childClone = cloneNode(childNodes[i2], true);
            childClone.__removalCount = (currentNode.__removalCount || 0) + 1;
            parentNode.insertBefore(childClone, getNextSibling(currentNode));
          }
        }
      }
      _forceRemove(currentNode);
      return true;
    }
    if (currentNode instanceof Element && !_checkValidNamespace(currentNode)) {
      _forceRemove(currentNode);
      return true;
    }
    if ((tagName === "noscript" || tagName === "noembed" || tagName === "noframes") && regExpTest(/<\/no(script|embed|frames)/i, currentNode.innerHTML)) {
      _forceRemove(currentNode);
      return true;
    }
    if (SAFE_FOR_TEMPLATES && currentNode.nodeType === NODE_TYPE.text) {
      content = currentNode.textContent;
      arrayForEach([MUSTACHE_EXPR2, ERB_EXPR2, TMPLIT_EXPR2], (expr) => {
        content = stringReplace(content, expr, " ");
      });
      if (currentNode.textContent !== content) {
        arrayPush(DOMPurify.removed, {
          element: currentNode.cloneNode()
        });
        currentNode.textContent = content;
      }
    }
    _executeHooks(hooks.afterSanitizeElements, currentNode, null);
    return false;
  };
  const _isValidAttribute = function _isValidAttribute2(lcTag, lcName, value) {
    if (SANITIZE_DOM && (lcName === "id" || lcName === "name") && (value in document2 || value in formElement)) {
      return false;
    }
    if (ALLOW_DATA_ATTR && !FORBID_ATTR[lcName] && regExpTest(DATA_ATTR2, lcName))
      ;
    else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR2, lcName))
      ;
    else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {
      if (
        // First condition does a very basic check if a) it's basically a valid custom element tagname AND
        // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
        // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck
        _isBasicCustomElement(lcTag) && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, lcTag) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(lcTag)) && (CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.attributeNameCheck, lcName) || CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.attributeNameCheck(lcName)) || // Alternative, second condition checks if it's an `is`-attribute, AND
        // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
        lcName === "is" && CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, value) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(value))
      )
        ;
      else {
        return false;
      }
    } else if (URI_SAFE_ATTRIBUTES[lcName])
      ;
    else if (regExpTest(IS_ALLOWED_URI$1, stringReplace(value, ATTR_WHITESPACE2, "")))
      ;
    else if ((lcName === "src" || lcName === "xlink:href" || lcName === "href") && lcTag !== "script" && stringIndexOf(value, "data:") === 0 && DATA_URI_TAGS[lcTag])
      ;
    else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA2, stringReplace(value, ATTR_WHITESPACE2, "")))
      ;
    else if (value) {
      return false;
    } else
      ;
    return true;
  };
  const _isBasicCustomElement = function _isBasicCustomElement2(tagName) {
    return tagName !== "annotation-xml" && stringMatch(tagName, CUSTOM_ELEMENT2);
  };
  const _sanitizeAttributes = function _sanitizeAttributes2(currentNode) {
    _executeHooks(hooks.beforeSanitizeAttributes, currentNode, null);
    const {
      attributes
    } = currentNode;
    if (!attributes || _isClobbered(currentNode)) {
      return;
    }
    const hookEvent = {
      attrName: "",
      attrValue: "",
      keepAttr: true,
      allowedAttributes: ALLOWED_ATTR,
      forceKeepAttr: void 0
    };
    let l = attributes.length;
    while (l--) {
      const attr = attributes[l];
      const {
        name,
        namespaceURI,
        value: attrValue
      } = attr;
      const lcName = transformCaseFunc(name);
      let value = name === "value" ? attrValue : stringTrim(attrValue);
      hookEvent.attrName = lcName;
      hookEvent.attrValue = value;
      hookEvent.keepAttr = true;
      hookEvent.forceKeepAttr = void 0;
      _executeHooks(hooks.uponSanitizeAttribute, currentNode, hookEvent);
      value = hookEvent.attrValue;
      if (SANITIZE_NAMED_PROPS && (lcName === "id" || lcName === "name")) {
        _removeAttribute(name, currentNode);
        value = SANITIZE_NAMED_PROPS_PREFIX + value;
      }
      if (SAFE_FOR_XML && regExpTest(/((--!?|])>)|<\/(style|title)/i, value)) {
        _removeAttribute(name, currentNode);
        continue;
      }
      if (hookEvent.forceKeepAttr) {
        continue;
      }
      _removeAttribute(name, currentNode);
      if (!hookEvent.keepAttr) {
        continue;
      }
      if (!ALLOW_SELF_CLOSE_IN_ATTR && regExpTest(/\/>/i, value)) {
        _removeAttribute(name, currentNode);
        continue;
      }
      if (SAFE_FOR_TEMPLATES) {
        arrayForEach([MUSTACHE_EXPR2, ERB_EXPR2, TMPLIT_EXPR2], (expr) => {
          value = stringReplace(value, expr, " ");
        });
      }
      const lcTag = transformCaseFunc(currentNode.nodeName);
      if (!_isValidAttribute(lcTag, lcName, value)) {
        continue;
      }
      if (trustedTypesPolicy && typeof trustedTypes === "object" && typeof trustedTypes.getAttributeType === "function") {
        if (namespaceURI)
          ;
        else {
          switch (trustedTypes.getAttributeType(lcTag, lcName)) {
            case "TrustedHTML": {
              value = trustedTypesPolicy.createHTML(value);
              break;
            }
            case "TrustedScriptURL": {
              value = trustedTypesPolicy.createScriptURL(value);
              break;
            }
          }
        }
      }
      try {
        if (namespaceURI) {
          currentNode.setAttributeNS(namespaceURI, name, value);
        } else {
          currentNode.setAttribute(name, value);
        }
        if (_isClobbered(currentNode)) {
          _forceRemove(currentNode);
        } else {
          arrayPop(DOMPurify.removed);
        }
      } catch (_) {
      }
    }
    _executeHooks(hooks.afterSanitizeAttributes, currentNode, null);
  };
  const _sanitizeShadowDOM = function _sanitizeShadowDOM2(fragment) {
    let shadowNode = null;
    const shadowIterator = _createNodeIterator(fragment);
    _executeHooks(hooks.beforeSanitizeShadowDOM, fragment, null);
    while (shadowNode = shadowIterator.nextNode()) {
      _executeHooks(hooks.uponSanitizeShadowNode, shadowNode, null);
      _sanitizeElements(shadowNode);
      _sanitizeAttributes(shadowNode);
      if (shadowNode.content instanceof DocumentFragment) {
        _sanitizeShadowDOM2(shadowNode.content);
      }
    }
    _executeHooks(hooks.afterSanitizeShadowDOM, fragment, null);
  };
  DOMPurify.sanitize = function(dirty) {
    let cfg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    let body = null;
    let importedNode = null;
    let currentNode = null;
    let returnNode = null;
    IS_EMPTY_INPUT = !dirty;
    if (IS_EMPTY_INPUT) {
      dirty = "<!-->";
    }
    if (typeof dirty !== "string" && !_isNode(dirty)) {
      if (typeof dirty.toString === "function") {
        dirty = dirty.toString();
        if (typeof dirty !== "string") {
          throw typeErrorCreate("dirty is not a string, aborting");
        }
      } else {
        throw typeErrorCreate("toString is not a function");
      }
    }
    if (!DOMPurify.isSupported) {
      return dirty;
    }
    if (!SET_CONFIG) {
      _parseConfig(cfg);
    }
    DOMPurify.removed = [];
    if (typeof dirty === "string") {
      IN_PLACE = false;
    }
    if (IN_PLACE) {
      if (dirty.nodeName) {
        const tagName = transformCaseFunc(dirty.nodeName);
        if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
          throw typeErrorCreate("root node is forbidden and cannot be sanitized in-place");
        }
      }
    } else if (dirty instanceof Node2) {
      body = _initDocument("<!---->");
      importedNode = body.ownerDocument.importNode(dirty, true);
      if (importedNode.nodeType === NODE_TYPE.element && importedNode.nodeName === "BODY") {
        body = importedNode;
      } else if (importedNode.nodeName === "HTML") {
        body = importedNode;
      } else {
        body.appendChild(importedNode);
      }
    } else {
      if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT && // eslint-disable-next-line unicorn/prefer-includes
      dirty.indexOf("<") === -1) {
        return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;
      }
      body = _initDocument(dirty);
      if (!body) {
        return RETURN_DOM ? null : RETURN_TRUSTED_TYPE ? emptyHTML : "";
      }
    }
    if (body && FORCE_BODY) {
      _forceRemove(body.firstChild);
    }
    const nodeIterator = _createNodeIterator(IN_PLACE ? dirty : body);
    while (currentNode = nodeIterator.nextNode()) {
      _sanitizeElements(currentNode);
      _sanitizeAttributes(currentNode);
      if (currentNode.content instanceof DocumentFragment) {
        _sanitizeShadowDOM(currentNode.content);
      }
    }
    if (IN_PLACE) {
      return dirty;
    }
    if (RETURN_DOM) {
      if (RETURN_DOM_FRAGMENT) {
        returnNode = createDocumentFragment.call(body.ownerDocument);
        while (body.firstChild) {
          returnNode.appendChild(body.firstChild);
        }
      } else {
        returnNode = body;
      }
      if (ALLOWED_ATTR.shadowroot || ALLOWED_ATTR.shadowrootmode) {
        returnNode = importNode.call(originalDocument, returnNode, true);
      }
      return returnNode;
    }
    let serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;
    if (WHOLE_DOCUMENT && ALLOWED_TAGS["!doctype"] && body.ownerDocument && body.ownerDocument.doctype && body.ownerDocument.doctype.name && regExpTest(DOCTYPE_NAME, body.ownerDocument.doctype.name)) {
      serializedHTML = "<!DOCTYPE " + body.ownerDocument.doctype.name + ">\n" + serializedHTML;
    }
    if (SAFE_FOR_TEMPLATES) {
      arrayForEach([MUSTACHE_EXPR2, ERB_EXPR2, TMPLIT_EXPR2], (expr) => {
        serializedHTML = stringReplace(serializedHTML, expr, " ");
      });
    }
    return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;
  };
  DOMPurify.setConfig = function() {
    let cfg = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    _parseConfig(cfg);
    SET_CONFIG = true;
  };
  DOMPurify.clearConfig = function() {
    CONFIG = null;
    SET_CONFIG = false;
  };
  DOMPurify.isValidAttribute = function(tag, attr, value) {
    if (!CONFIG) {
      _parseConfig({});
    }
    const lcTag = transformCaseFunc(tag);
    const lcName = transformCaseFunc(attr);
    return _isValidAttribute(lcTag, lcName, value);
  };
  DOMPurify.addHook = function(entryPoint, hookFunction) {
    if (typeof hookFunction !== "function") {
      return;
    }
    arrayPush(hooks[entryPoint], hookFunction);
  };
  DOMPurify.removeHook = function(entryPoint, hookFunction) {
    if (hookFunction !== void 0) {
      const index = arrayLastIndexOf(hooks[entryPoint], hookFunction);
      return index === -1 ? void 0 : arraySplice(hooks[entryPoint], index, 1)[0];
    }
    return arrayPop(hooks[entryPoint]);
  };
  DOMPurify.removeHooks = function(entryPoint) {
    hooks[entryPoint] = [];
  };
  DOMPurify.removeAllHooks = function() {
    hooks = _createHooksMap();
  };
  return DOMPurify;
}
var purify = createDOMPurify();

// node_modules/@sendbird/uikit-react/chunks/bundle-CnWjrGUf.js
var MENTION_USER_LABEL_CLASSNAME = "sendbird-mention-user-label";

// node_modules/@sendbird/uikit-react/chunks/bundle-B602cp-8.js
var TEXT_MESSAGE_BODY_CLASSNAME = "sendbird-text-message-item-body";

// node_modules/@sendbird/uikit-react/chunks/bundle-CXh4vzCv.js
var OG_MESSAGE_BODY_CLASSNAME = "sendbird-og-message-item-body__text-bubble";

// node_modules/@sendbird/uikit-react/chunks/bundle-Ob8Qv8ze.js
function renderToString(_a2) {
  var userId = _a2.userId, nickname = _a2.nickname;
  var el = '<span data-userid="'.concat(userId, '" data-sb-mention="true" class="').concat(MENTION_USER_LABEL_CLASSNAME, '">').concat(nickname, "</span>");
  var purifier = purify(window);
  var sanitized_ = purifier.sanitize(el);
  var token = sanitized_.split(" ");
  var spanTag = token[0], rest = token.slice(1);
  var sanitized = __spreadArray([spanTag, 'contenteditable="false"'], rest, true).join(" ");
  return sanitized;
}
var sanitizeString = function(str) {
  if (str === void 0) {
    str = "";
  }
  if (!str)
    return "";
  return str.replace(/[<>]/g, function(char) {
    return char === "<" ? "&#60;" : "&#62;";
  });
};
var nodeListToArray = function(childNodes) {
  return childNodes ? Array.from(childNodes) : [];
};
function isChannelTypeSupportsMultipleFilesMessage(channel) {
  var _a2;
  return channel && ((_a2 = channel.isGroupChannel) === null || _a2 === void 0 ? void 0 : _a2.call(channel)) && !channel.isBroadcast && !channel.isSuper;
}
function isHTMLElement(node) {
  return node.nodeType === NodeTypes.ElementNode;
}
function extractTextAndMentions(childNodes) {
  var messageText = "";
  var mentionTemplate = "";
  childNodes.forEach(function(node) {
    if (isHTMLElement(node) && node.nodeName === NodeNames.Span) {
      var innerText = node.innerText, _a2 = node.dataset, dataset = _a2 === void 0 ? {} : _a2;
      var _b2 = dataset.userid, userid = _b2 === void 0 ? "" : _b2;
      messageText += innerText;
      mentionTemplate += "".concat(USER_MENTION_TEMP_CHAR, "{").concat(userid, "}");
    } else if (isHTMLElement(node) && node.nodeName === NodeNames.Br) {
      messageText += "\n";
      mentionTemplate += "\n";
    } else if (isHTMLElement(node) && node.nodeName === NodeNames.Div) {
      var _c = node.textContent, textContent = _c === void 0 ? "" : _c;
      messageText += "\n".concat(textContent);
      mentionTemplate += "\n".concat(textContent);
    } else {
      var _d = node.textContent, textContent = _d === void 0 ? "" : _d;
      messageText += textContent;
      mentionTemplate += textContent;
    }
  });
  return { messageText, mentionTemplate };
}
function insertTemplateToDOM(templateList) {
  var nodes = templateList.map(function(template) {
    var text2 = template.text, userId = template.userId;
    if (userId) {
      return renderToString({ userId, nickname: text2 });
    }
    return sanitizeString(text2);
  }).join(" ").concat(" ");
  document.execCommand("insertHTML", false, nodes);
}
var MENTION_CLASS = "sendbird-word__mention";
var MENTION_CLASS_IN_INPUT = "sendbird-mention-user-label";
var MENTION_CLASS_COMBINED_QUERY = ".".concat(MENTION_CLASS, ", .").concat(MENTION_CLASS_IN_INPUT);
function querySelectorIncludingSelf(master, selector) {
  var result = __spreadArray([
    master
  ], Array.from(master.querySelectorAll(selector)), true).find(function(el) {
    return el.matches(selector);
  });
  return result;
}
function getLeafNodes(master) {
  var ogMessage = querySelectorIncludingSelf(master, ".".concat(OG_MESSAGE_BODY_CLASSNAME));
  if (ogMessage) {
    return nodeListToArray(ogMessage.childNodes);
  }
  var textMessageBody = querySelectorIncludingSelf(master, ".".concat(TEXT_MESSAGE_BODY_CLASSNAME));
  if (textMessageBody) {
    return nodeListToArray(textMessageBody.childNodes);
  }
  return nodeListToArray(master.childNodes);
}
function hasMention(parent) {
  return (parent === null || parent === void 0 ? void 0 : parent.querySelector(MENTION_CLASS_COMBINED_QUERY)) ? true : false;
}
function domToMessageTemplate(nodeArray) {
  var templates = nodeArray === null || nodeArray === void 0 ? void 0 : nodeArray.reduce(function(accumulator, currentValue) {
    var _a2, _b2;
    var mentionNode;
    var text2 = currentValue === null || currentValue === void 0 ? void 0 : currentValue.innerText;
    if (currentValue instanceof Text) {
      mentionNode = false;
      text2 = (_a2 = currentValue.textContent) !== null && _a2 !== void 0 ? _a2 : "";
    }
    if (currentValue instanceof HTMLElement) {
      mentionNode = currentValue.classList.contains(MENTION_CLASS) || currentValue.classList.contains(MENTION_CLASS_IN_INPUT) ? currentValue : currentValue.querySelector(MENTION_CLASS_COMBINED_QUERY);
    }
    if (mentionNode) {
      var text_1 = currentValue === null || currentValue === void 0 ? void 0 : currentValue.innerText;
      var userId = (_b2 = mentionNode.dataset) === null || _b2 === void 0 ? void 0 : _b2.userid;
      return __spreadArray(__spreadArray([], accumulator, true), [
        {
          text: text_1,
          userId
        }
      ], false);
    }
    return __spreadArray(__spreadArray([], accumulator, true), [
      {
        text: text2
      }
    ], false);
  }, []);
  return templates;
}
function getUsersFromWords(templates, channel) {
  var userMap = {};
  var users = channel.members;
  templates.forEach(function(template) {
    if (template.userId) {
      var mentionedMember = users.find(function(user) {
        return user.userId === template.userId;
      });
      if (mentionedMember) {
        userMap[template.userId] = mentionedMember;
      }
    }
  });
  return Object.values(userMap);
}
function pasteContentAtCaret(content) {
  var selection = window.getSelection();
  if (selection && selection.rangeCount > 0) {
    var range = selection.getRangeAt(selection.rangeCount - 1);
    range.deleteContents();
    var textNode = document.createTextNode(content + "​");
    range.insertNode(textNode);
    range.setStart(textNode, textNode.length);
    range.collapse(true);
    selection.removeAllRanges();
    selection.addRange(range);
  }
}
function createPasteNodeWithContent(html2) {
  var pasteNode = document.createElement("div");
  pasteNode.innerHTML = html2;
  return pasteNode;
}
function usePaste(_a2) {
  var ref = _a2.ref, setIsInput = _a2.setIsInput, channel = _a2.channel, setMentionedUsers = _a2.setMentionedUsers;
  return (0, import_react12.useCallback)(function(e2) {
    e2.preventDefault();
    var html2 = e2.clipboardData.getData("text/html");
    var text2 = e2.clipboardData.getData("text") || getURIListText(e2);
    if (!html2) {
      pasteContentAtCaret(sanitizeString(text2));
      setIsInput(true);
      return;
    }
    var purifier = purify(window);
    var cleanHtml = purifier.sanitize(html2);
    var pasteNode = createPasteNodeWithContent(cleanHtml);
    if (!hasMention(pasteNode)) {
      pasteContentAtCaret(sanitizeString(text2));
      pasteNode.remove();
      setIsInput(true);
      return;
    }
    var leafNodes = getLeafNodes(pasteNode);
    var words = domToMessageTemplate(leafNodes);
    var mentionedUsers = channel.isGroupChannel() ? getUsersFromWords(words, channel) : [];
    setMentionedUsers(mentionedUsers);
    insertTemplateToDOM(words);
    pasteNode.remove();
    setIsInput(true);
  }, [ref, setIsInput, channel, setMentionedUsers]);
}
function getURIListText(e2) {
  var pasteData = e2.clipboardData.getData("text/uri-list");
  if (pasteData.length === 0)
    return "";
  return pasteData.split("\n").reduce(function(accumulator, line) {
    var txt = line.trim();
    if (txt !== "" && !txt.startsWith("#")) {
      accumulator += txt + "\n";
    }
    return accumulator;
  }, "");
}

// node_modules/@sendbird/uikit-react/chunks/bundle-BJl-Stow.js
var USER_MENTION_PREFIX = "@";
var TOKEN_TYPES = {
  string: "string",
  mention: "mention",
  url: "url",
  undetermined: "undetermined",
  markdown: "markdown"
};
var MarkdownRegex = /\[(.*?)\]\((.*?)\)|\*\*(.*?)\*\*/g;
function getUserMentionRegex(mentionedUsers, templatePrefix_) {
  var templatePrefix = templatePrefix_ || USER_MENTION_PREFIX;
  return RegExp("(".concat(mentionedUsers.map(function(u2) {
    var userId = u2.userId.replace(
      // If user.id includes these patterns, need to convert it into an escaped one
      /([.*+?^${}()|[\]\\])/g,
      "\\$1"
    );
    return "".concat(templatePrefix, "\\{").concat(userId, "\\}");
  }).join("|"), ")"), "g");
}
function identifyMentions(_a2) {
  var tokens = _a2.tokens, _b2 = _a2.mentionedUsers, mentionedUsers = _b2 === void 0 ? [] : _b2, _c = _a2.templatePrefix, templatePrefix = _c === void 0 ? USER_MENTION_PREFIX : _c;
  if (!(mentionedUsers === null || mentionedUsers === void 0 ? void 0 : mentionedUsers.length)) {
    return tokens;
  }
  var userMentionRegex = getUserMentionRegex(mentionedUsers, templatePrefix);
  var results = tokens.map(function(token) {
    if (token.type !== TOKEN_TYPES.undetermined) {
      return token;
    }
    var value = token.value;
    var parts = value.split(userMentionRegex);
    var tokens2 = parts.map(function(part) {
      if (part.match(userMentionRegex)) {
        var matchedUser = mentionedUsers.find(function(user) {
          return "@{".concat(user === null || user === void 0 ? void 0 : user.userId, "}") === part;
        });
        var nickname = (matchedUser === null || matchedUser === void 0 ? void 0 : matchedUser.nickname) || "(No name)";
        return { value: nickname, type: TOKEN_TYPES.mention, userId: matchedUser === null || matchedUser === void 0 ? void 0 : matchedUser.userId };
      } else {
        return { value: part, type: TOKEN_TYPES.undetermined };
      }
    });
    return tokens2;
  }).flat();
  return results;
}
function identifyUrlsAndStrings(token) {
  var URL_REG = /(?:https?:\/\/|www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.(xn--)?[a-z]{2,20}\b([-a-zA-Z0-9@:%_+[\],.~#?&/=]*[-a-zA-Z0-9@:%_+~#?&/=])*/g;
  var results = token.map(function(token2) {
    if (token2.type !== TOKEN_TYPES.undetermined) {
      return token2;
    }
    var _a2 = token2.value, value = _a2 === void 0 ? "" : _a2;
    var matches = Array.from(value.matchAll(URL_REG));
    var founds = matches.map(function(value2) {
      var _a3;
      var text2 = value2[0];
      var start = (_a3 = value2.index) !== null && _a3 !== void 0 ? _a3 : 0;
      var end = start + text2.length;
      return { text: text2, start, end };
    });
    var items = [{ value, type: TOKEN_TYPES.string }];
    var cursor = 0;
    founds.forEach(function(_a3) {
      var text2 = _a3.text, start = _a3.start, end = _a3.end;
      var restText = items.pop().value;
      var head = restText.slice(0, start - cursor);
      var mid = text2;
      var tail = restText.slice(end - cursor);
      if (head.length > 0)
        items.push({ value: head, type: TOKEN_TYPES.string });
      items.push({ value: mid, type: TOKEN_TYPES.url });
      if (tail.length > 0)
        items.push({ value: tail, type: TOKEN_TYPES.string });
      cursor = end;
    });
    return items;
  }).flat();
  return results;
}
function splitTokensWithMarkdowns(tokens) {
  var prevTokens = tokens;
  var newTokens = [];
  prevTokens.forEach(function(token) {
    if (token.type === TOKEN_TYPES.mention || token.type === TOKEN_TYPES.markdown) {
      newTokens.push(token);
      return;
    }
    var rawStr = token.value;
    var matches = Array.from(rawStr.matchAll(MarkdownRegex));
    var allMatches = matches.map(function(value) {
      var _a2;
      var text2 = value[0];
      var start = (_a2 = value.index) !== null && _a2 !== void 0 ? _a2 : 0;
      var end = start + text2.length;
      return { text: text2, start, end, groups: value.filter(function(val) {
        return typeof val === "string";
      }) };
    });
    var restText = rawStr;
    var cursor = 0;
    allMatches.forEach(function(_a2) {
      var text2 = _a2.text, start = _a2.start, end = _a2.end, groups = _a2.groups;
      var left = {
        type: TOKEN_TYPES.undetermined,
        value: restText.slice(0, start - cursor)
      };
      newTokens.push(left);
      var markdownType;
      if (text2.startsWith("[")) {
        markdownType = "url";
      } else if (text2.startsWith("**")) {
        markdownType = "bold";
      }
      var mid = {
        type: TOKEN_TYPES.markdown,
        markdownType,
        value: text2,
        groups
      };
      newTokens.push(mid);
      restText = rawStr.slice(end);
      cursor = end;
    });
    if (restText) {
      var right = {
        type: TOKEN_TYPES.undetermined,
        value: restText
      };
      newTokens.push(right);
    }
  });
  return newTokens;
}
function combineNearbyStrings(tokens) {
  var results = tokens.reduce(function(acc, token) {
    var lastToken = acc[acc.length - 1];
    if ((lastToken === null || lastToken === void 0 ? void 0 : lastToken.type) === TOKEN_TYPES.string && token.type === TOKEN_TYPES.string) {
      lastToken.value = "".concat(lastToken.value).concat(token.value);
      return acc;
    }
    return __spreadArray(__spreadArray([], acc, true), [token], false);
  }, []);
  return results;
}
function tokenizeMessage(_a2) {
  var messageText = _a2.messageText, _b2 = _a2.mentionedUsers, mentionedUsers = _b2 === void 0 ? [] : _b2, _c = _a2.templatePrefix, templatePrefix = _c === void 0 ? USER_MENTION_PREFIX : _c, _d = _a2.includeMarkdown, includeMarkdown = _d === void 0 ? false : _d;
  var partialResult = [{
    type: TOKEN_TYPES.undetermined,
    value: messageText
  }];
  var partialWithMentions = identifyMentions({
    tokens: partialResult,
    mentionedUsers,
    templatePrefix
  });
  var partialsWithUrlsAndMentions = identifyUrlsAndStrings(includeMarkdown ? splitTokensWithMarkdowns(partialWithMentions) : partialWithMentions);
  var result = combineNearbyStrings(partialsWithUrlsAndMentions);
  return result;
}
function getChannelPreviewMessage(messageText) {
  var partialResult = [{
    type: TOKEN_TYPES.undetermined,
    value: messageText
  }];
  var tokens = splitTokensWithMarkdowns(partialResult);
  return markDownTokenResolver(tokens);
}
function markDownTokenResolver(tokens) {
  var result = tokens.map(function(token) {
    if (token.type === TOKEN_TYPES.markdown) {
      return markDownTokenResolver(tokenizeMarkdown({ messageText: token.groups[1] }));
    }
    return token.value;
  });
  return result.join("");
}
function tokenizeMarkdown(_a2) {
  var messageText = _a2.messageText;
  var partialResult = [{
    type: TOKEN_TYPES.undetermined,
    value: messageText
  }];
  var result = combineNearbyStrings(splitTokensWithMarkdowns(partialResult));
  return result;
}
function getWhiteSpacePreservedText(text2) {
  var NON_BREAKING_SPACE = " ";
  var lines = text2.split("\n");
  var processedLines = lines.map(function(line) {
    var _a2, _b2;
    var leadingWhitespace = ((_a2 = line.match(/^\s*/)) === null || _a2 === void 0 ? void 0 : _a2[0]) || "";
    var trailingWhitespace = ((_b2 = line.match(/\s*$/)) === null || _b2 === void 0 ? void 0 : _b2[0]) || "";
    var convertedLeadingWhitespace = leadingWhitespace.replace(/ /g, NON_BREAKING_SPACE);
    var convertedTrailingWhitespace = trailingWhitespace.replace(/ /g, NON_BREAKING_SPACE);
    return convertedLeadingWhitespace + line.trim() + convertedTrailingWhitespace;
  });
  var result = processedLines.join("\n");
  return result;
}

// node_modules/@sendbird/uikit-react/ui/MessageInput.js
var ChannelType;
(function(ChannelType2) {
  ChannelType2["BASE"] = "base";
  ChannelType2["GROUP"] = "group";
  ChannelType2["OPEN"] = "open";
})(ChannelType || (ChannelType = {}));
var checkIfFileUploadEnabled = function(_a2) {
  var channel = _a2.channel, config = _a2.config;
  var isEnabled = K(channel === null || channel === void 0 ? void 0 : channel.channelType).with(ChannelType.GROUP, function() {
    var _a3;
    return (_a3 = config === null || config === void 0 ? void 0 : config.groupChannel) === null || _a3 === void 0 ? void 0 : _a3.enableDocument;
  }).with(ChannelType.OPEN, function() {
    var _a3;
    return (_a3 = config === null || config === void 0 ? void 0 : config.openChannel) === null || _a3 === void 0 ? void 0 : _a3.enableDocument;
  }).otherwise(function() {
    return true;
  });
  return isEnabled;
};
var TEXT_FIELD_ID = "sendbird-message-input-text-field";
var noop2 = function() {
  return null;
};
var resetInput = function(ref) {
  if (ref && ref.current) {
    ref.current.innerHTML = "";
  }
};
var initialTargetStringInfo = {
  targetString: "",
  startNodeIndex: null,
  startOffsetIndex: null,
  endNodeIndex: null,
  endOffsetIndex: null
};
var MessageInput = import_react13.default.forwardRef(function(props, externalRef) {
  var _a2, _b2, _c, _d, _e;
  var channel = props.channel, _f = props.className, className = _f === void 0 ? "" : _f, _g = props.messageFieldId, messageFieldId = _g === void 0 ? "" : _g, _h = props.isEdit, isEdit = _h === void 0 ? false : _h, _j = props.isMobile, isMobile = _j === void 0 ? false : _j, _k = props.isMentionEnabled, isMentionEnabled = _k === void 0 ? false : _k, _l = props.isVoiceMessageEnabled, isVoiceMessageEnabled = _l === void 0 ? true : _l, _m = props.isSelectingMultipleFilesEnabled, isSelectingMultipleFilesEnabled = _m === void 0 ? false : _m, _o = props.disabled, disabled = _o === void 0 ? false : _o, _p = props.message, message = _p === void 0 ? null : _p, _q = props.placeholder, placeholder = _q === void 0 ? "" : _q, _r = props.maxLength, maxLength = _r === void 0 ? 5e3 : _r, _s = props.onFileUpload, onFileUpload = _s === void 0 ? noop2 : _s, _t = props.onSendMessage, onSendMessage = _t === void 0 ? noop2 : _t, _u = props.onUpdateMessage, onUpdateMessage = _u === void 0 ? noop2 : _u, _v = props.onCancelEdit, onCancelEdit = _v === void 0 ? noop2 : _v, _w = props.onStartTyping, onStartTyping = _w === void 0 ? noop2 : _w, _x = props.channelUrl, channelUrl = _x === void 0 ? "" : _x, _y = props.mentionSelectedUser, mentionSelectedUser = _y === void 0 ? null : _y, _z = props.onUserMentioned, onUserMentioned = _z === void 0 ? noop2 : _z, _0 = props.onMentionStringChange, onMentionStringChange = _0 === void 0 ? noop2 : _0, _1 = props.onMentionedUserIdsUpdated, onMentionedUserIdsUpdated = _1 === void 0 ? noop2 : _1, _2 = props.onVoiceMessageIconClick, onVoiceMessageIconClick = _2 === void 0 ? noop2 : _2, _3 = props.onKeyUp, onKeyUp = _3 === void 0 ? noop2 : _3, _4 = props.onKeyDown, onKeyDown = _4 === void 0 ? noop2 : _4, _5 = props.renderFileUploadIcon, renderFileUploadIcon = _5 === void 0 ? noop2 : _5, _6 = props.renderVoiceMessageIcon, renderVoiceMessageIcon = _6 === void 0 ? noop2 : _6, _7 = props.renderSendMessageIcon, renderSendMessageIcon = _7 === void 0 ? noop2 : _7, _8 = props.setMentionedUsers, setMentionedUsers = _8 === void 0 ? noop2 : _8, acceptableMimeTypes = props.acceptableMimeTypes;
  var internalRef = externalRef && "current" in externalRef ? externalRef : (0, import_react13.useRef)(null);
  var ghostInputRef = (0, import_react13.useRef)(null);
  var textFieldId = messageFieldId || TEXT_FIELD_ID;
  var stringSet = useLocalization().stringSet;
  var _9 = useSendbird().state, config = _9.config, eventHandlers = _9.eventHandlers;
  var isFileUploadEnabled = checkIfFileUploadEnabled({
    channel,
    config
  });
  var fileInputRef = (0, import_react13.useRef)();
  var _10 = (0, import_react13.useState)(false), isInput = _10[0], setIsInput = _10[1];
  var _11 = (0, import_react13.useState)([]), mentionedUserIds = _11[0], setMentionedUserIds = _11[1];
  var _12 = (0, import_react13.useState)(__assign({}, initialTargetStringInfo)), targetStringInfo = _12[0], setTargetStringInfo = _12[1];
  var initialValue = props === null || props === void 0 ? void 0 : props.value;
  (0, import_react13.useEffect)(function() {
    var textField = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current;
    setMentionedUserIds([]);
    setIsInput((textField === null || textField === void 0 ? void 0 : textField.textContent) ? textField.textContent.trim().length > 0 : false);
  }, [initialValue]);
  (0, import_react13.useEffect)(function() {
    if (!isEdit) {
      setIsInput(false);
      resetInput(internalRef);
    }
  }, [channelUrl]);
  (0, import_react13.useEffect)(function() {
    var _a3, _b3;
    if (isEdit && (message === null || message === void 0 ? void 0 : message.messageId)) {
      var textField = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current;
      if (isMentionEnabled && (message === null || message === void 0 ? void 0 : message.mentionedUsers) && message.mentionedUsers.length > 0 && (message === null || message === void 0 ? void 0 : message.mentionedMessageTemplate) && message.mentionedMessageTemplate.length > 0) {
        var _c2 = message.mentionedUsers, mentionedUsers_1 = _c2 === void 0 ? [] : _c2;
        var tokens = tokenizeMessage({
          messageText: message === null || message === void 0 ? void 0 : message.mentionedMessageTemplate,
          mentionedUsers: mentionedUsers_1,
          includeMarkdown: channel.isGroupChannel() && config.groupChannel.enableMarkdownForUserMessage
        });
        if (textField) {
          textField.innerHTML = tokens.map(function(token) {
            if (token.type === TOKEN_TYPES.mention) {
              var mentionedUser = mentionedUsers_1.find(function(user) {
                return user.userId === token.userId;
              });
              var nickname = "".concat(USER_MENTION_PREFIX).concat((mentionedUser === null || mentionedUser === void 0 ? void 0 : mentionedUser.nickname) || token.value || stringSet.MENTION_NAME__NO_NAME);
              return renderToString({
                userId: token.userId,
                nickname
              });
            }
            return sanitizeString(token.value);
          }).join("");
        }
      } else {
        try {
          if (textField) {
            textField.innerHTML = (_a3 = sanitizeString(message === null || message === void 0 ? void 0 : message.message)) !== null && _a3 !== void 0 ? _a3 : "";
          }
        } catch (_d2) {
        }
        setMentionedUserIds([]);
      }
      setIsInput((textField === null || textField === void 0 ? void 0 : textField.textContent) ? ((_b3 = textField === null || textField === void 0 ? void 0 : textField.textContent) === null || _b3 === void 0 ? void 0 : _b3.trim().length) > 0 : false);
    }
  }, [isEdit, message]);
  var useMentionedLabelDetection = (0, import_react13.useCallback)(function() {
    var _a3;
    var textField = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current;
    if (isMentionEnabled && textField) {
      var newMentionedUserIds = Array.from(textField.getElementsByClassName("sendbird-mention-user-label")).map(
        // @ts-ignore
        function(node) {
          var _a4;
          return (_a4 = node === null || node === void 0 ? void 0 : node.dataset) === null || _a4 === void 0 ? void 0 : _a4.userid;
        }
      );
      if (!arrayEqual(mentionedUserIds, newMentionedUserIds) || newMentionedUserIds.length === 0) {
        onMentionedUserIdsUpdated(newMentionedUserIds);
        setMentionedUserIds(newMentionedUserIds);
      }
    }
    setIsInput((textField === null || textField === void 0 ? void 0 : textField.textContent) ? ((_a3 = textField.textContent) === null || _a3 === void 0 ? void 0 : _a3.trim().length) > 0 : false);
  }, [targetStringInfo, isMentionEnabled]);
  (0, import_react13.useEffect)(function() {
    var _a3, _b3, _c2, _d2;
    if (isMentionEnabled && mentionSelectedUser) {
      var targetString = targetStringInfo.targetString, startNodeIndex = targetStringInfo.startNodeIndex, startOffsetIndex = targetStringInfo.startOffsetIndex, endNodeIndex = targetStringInfo.endNodeIndex, endOffsetIndex = targetStringInfo.endOffsetIndex;
      var textField_1 = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current;
      if (targetString && startNodeIndex !== null && startOffsetIndex !== null && endOffsetIndex !== null && endNodeIndex !== null && textField_1) {
        var childNodes = nodeListToArray(textField_1 === null || textField_1 === void 0 ? void 0 : textField_1.childNodes);
        var startNodeTextContent = (_b3 = (_a3 = childNodes[startNodeIndex]) === null || _a3 === void 0 ? void 0 : _a3.textContent) !== null && _b3 !== void 0 ? _b3 : "";
        var frontTextNode = document.createTextNode(startNodeTextContent.slice(0, startOffsetIndex));
        var endNodeTextContent = (_d2 = (_c2 = childNodes[endNodeIndex]) === null || _c2 === void 0 ? void 0 : _c2.textContent) !== null && _d2 !== void 0 ? _d2 : "";
        var backTextNode = endOffsetIndex && document.createTextNode(" ".concat(endNodeTextContent.slice(endOffsetIndex)));
        var mentionLabel = renderToString({
          userId: mentionSelectedUser === null || mentionSelectedUser === void 0 ? void 0 : mentionSelectedUser.userId,
          nickname: "".concat(USER_MENTION_TEMP_CHAR).concat((mentionSelectedUser === null || mentionSelectedUser === void 0 ? void 0 : mentionSelectedUser.nickname) || stringSet.MENTION_NAME__NO_NAME)
        });
        var div = document.createElement("div");
        div.innerHTML = mentionLabel;
        var newNodes = __spreadArray(__spreadArray(__spreadArray([], childNodes.slice(0, startNodeIndex), true), [
          frontTextNode,
          div.childNodes[0],
          backTextNode
        ], false), childNodes.slice(endNodeIndex + 1), true);
        if (textField_1) {
          textField_1.innerHTML = "";
          newNodes.forEach(function(newNode) {
            if (newNode) {
              textField_1.appendChild(newNode);
            }
          });
        }
        onUserMentioned(mentionSelectedUser);
        if (window.getSelection || document.getSelection) {
          var selection = window.getSelection() || document.getSelection();
          selection === null || selection === void 0 ? void 0 : selection.removeAllRanges();
          var range = new Range();
          range.selectNodeContents(textField_1);
          range.setStart(textField_1.childNodes[startNodeIndex + 2], 1);
          range.setEnd(textField_1.childNodes[startNodeIndex + 2], 1);
          range.collapse(false);
          selection === null || selection === void 0 ? void 0 : selection.addRange(range);
          textField_1.focus();
        }
        setTargetStringInfo(__assign({}, initialTargetStringInfo));
        useMentionedLabelDetection();
      }
    }
  }, [mentionSelectedUser, isMentionEnabled]);
  var useMentionInputDetection = (0, import_react13.useCallback)(function() {
    var _a3, _b3;
    var selection = ((_a3 = window === null || window === void 0 ? void 0 : window.getSelection) === null || _a3 === void 0 ? void 0 : _a3.call(window)) || ((_b3 = document === null || document === void 0 ? void 0 : document.getSelection) === null || _b3 === void 0 ? void 0 : _b3.call(document));
    var textField = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current;
    if ((selection === null || selection === void 0 ? void 0 : selection.anchorNode) === textField) {
      onMentionStringChange("");
    }
    if (isMentionEnabled && textField && selection && selection.anchorNode === selection.focusNode && selection.anchorOffset === selection.focusOffset) {
      var textStack = "";
      var startNodeIndex = null;
      var startOffsetIndex = null;
      var _loop_1 = function(index2) {
        var currentNode = textField.childNodes[index2];
        if (currentNode.nodeType === NodeTypes.TextNode) {
          var textContent = function() {
            var _a4;
            if (currentNode === selection.anchorNode) {
              return (currentNode === null || currentNode === void 0 ? void 0 : currentNode.textContent) ? currentNode === null || currentNode === void 0 ? void 0 : currentNode.textContent.slice(0, selection.anchorOffset) : "";
            }
            return (_a4 = currentNode === null || currentNode === void 0 ? void 0 : currentNode.textContent) !== null && _a4 !== void 0 ? _a4 : "";
          }();
          if (textStack.length > 0) {
            textStack += textContent;
          } else {
            var charLastIndex = textContent.lastIndexOf(USER_MENTION_TEMP_CHAR);
            for (var i2 = charLastIndex - 1; i2 > -1; i2 -= 1) {
              if (textContent[i2] === USER_MENTION_TEMP_CHAR) {
                charLastIndex = i2;
              } else {
                break;
              }
            }
            if (charLastIndex > -1) {
              textStack = textContent;
              startNodeIndex = index2;
              startOffsetIndex = charLastIndex;
            }
          }
        } else {
          textStack = "";
          startNodeIndex = null;
          startOffsetIndex = null;
        }
        if (currentNode === selection.anchorNode) {
          var targetString = textStack && startOffsetIndex !== null ? textStack.slice(startOffsetIndex) : "";
          setTargetStringInfo({
            targetString,
            startNodeIndex,
            startOffsetIndex,
            endNodeIndex: index2,
            endOffsetIndex: selection.anchorOffset
          });
          onMentionStringChange(targetString);
          return { value: void 0 };
        }
      };
      for (var index = 0; index < textField.childNodes.length; index += 1) {
        var state_1 = _loop_1(index);
        if (typeof state_1 === "object")
          return state_1.value;
      }
    }
  }, [isMentionEnabled]);
  var sendMessage = function() {
    var _a3, _b3;
    try {
      var textField_2 = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current;
      if (!isEdit && (textField_2 === null || textField_2 === void 0 ? void 0 : textField_2.textContent)) {
        var _c2 = extractTextAndMentions(textField_2.childNodes), messageText = _c2.messageText, mentionTemplate = _c2.mentionTemplate;
        var params = { message: messageText, mentionTemplate };
        onSendMessage(params);
        resetInput(internalRef);
        if (isMobileIOS(navigator.userAgent)) {
          if (ghostInputRef.current)
            ghostInputRef.current.focus();
          requestAnimationFrame(function() {
            return textField_2.focus();
          });
        } else {
          textField_2.focus();
        }
        setIsInput(false);
      }
    } catch (error) {
      (_b3 = (_a3 = eventHandlers === null || eventHandlers === void 0 ? void 0 : eventHandlers.message) === null || _a3 === void 0 ? void 0 : _a3.onSendMessageFailed) === null || _b3 === void 0 ? void 0 : _b3.call(_a3, message, error);
    }
  };
  var isEditDisabled = !((_b2 = (_a2 = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current) === null || _a2 === void 0 ? void 0 : _a2.textContent) === null || _b2 === void 0 ? void 0 : _b2.trim());
  var editMessage = function() {
    var _a3, _b3;
    try {
      var textField = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current;
      var messageId = message === null || message === void 0 ? void 0 : message.messageId;
      if (isEdit && messageId && textField) {
        var _c2 = extractTextAndMentions(textField.childNodes), messageText = _c2.messageText, mentionTemplate = _c2.mentionTemplate;
        var params = { messageId, message: messageText, mentionTemplate };
        onUpdateMessage(params);
        resetInput(internalRef);
      }
    } catch (error) {
      (_b3 = (_a3 = eventHandlers === null || eventHandlers === void 0 ? void 0 : eventHandlers.message) === null || _a3 === void 0 ? void 0 : _a3.onUpdateMessageFailed) === null || _b3 === void 0 ? void 0 : _b3.call(_a3, message, error);
    }
  };
  var onPaste = usePaste({
    ref: internalRef,
    setMentionedUsers,
    channel,
    setIsInput
  });
  var uploadFile = function(event) {
    var _a3, _b3;
    var files = event.currentTarget.files;
    try {
      if (files) {
        onFileUpload(Array.from(files));
      }
    } catch (error) {
      (_b3 = (_a3 = eventHandlers === null || eventHandlers === void 0 ? void 0 : eventHandlers.message) === null || _a3 === void 0 ? void 0 : _a3.onFileUploadFailed) === null || _b3 === void 0 ? void 0 : _b3.call(_a3, error);
    } finally {
      event.target.value = "";
    }
  };
  var adjustScrollToCaret = function() {
    var _a3;
    var inputRef = internalRef;
    var selection = window.getSelection();
    if (!selection || selection.rangeCount === 0)
      return;
    var range = selection.getRangeAt(selection.rangeCount - 1);
    var rect = range.getBoundingClientRect();
    var container = (_a3 = inputRef.current) === null || _a3 === void 0 ? void 0 : _a3.getBoundingClientRect();
    if (!container || !inputRef.current)
      return;
    if (rect.bottom > container.bottom) {
      var scrollAmount = Math.min(
        rect.bottom - container.bottom,
        // Calculate how much we need to scroll
        inputRef.current.scrollHeight - inputRef.current.clientHeight
      );
      inputRef.current.scrollTop += scrollAmount;
    } else if (rect.top < container.top) {
      var scrollAmount = Math.min(
        container.top - rect.top,
        // Calculate how much we need to scroll
        inputRef.current.scrollTop
      );
      inputRef.current.scrollTop -= scrollAmount;
    }
  };
  return import_react13.default.createElement(
    "form",
    { className: classnames.apply(void 0, __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], false), [
      isEdit && "sendbird-message-input__edit",
      disabled && "sendbird-message-input-form__disabled"
    ], false)) },
    import_react13.default.createElement(
      "div",
      { className: classnames("sendbird-message-input", disabled && "sendbird-message-input__disabled"), "data-testid": "sendbird-message-input" },
      isMobileIOS(navigator.userAgent) && import_react13.default.createElement("input", { id: "ghost-input-reset-ime-cjk", ref: ghostInputRef, style: { opacity: 0, padding: 0, margin: 0, height: 0, border: "none", position: "absolute", top: -9999 }, defaultValue: "_" }),
      import_react13.default.createElement("div", {
        id: "".concat(textFieldId).concat(isEdit ? message === null || message === void 0 ? void 0 : message.messageId : ""),
        className: "sendbird-message-input--textarea ".concat(textFieldId),
        contentEditable: !disabled,
        role: "textbox",
        "aria-label": "Text Input",
        ref: internalRef,
        // @ts-ignore
        disabled,
        maxLength,
        onKeyDown: function(e2) {
          var _a3, _b3, _c2, _d2;
          var preventEvent = onKeyDown(e2);
          if (preventEvent) {
            e2.preventDefault();
          } else {
            if (!e2.shiftKey && e2.key === MessageInputKeys.Enter && !isMobile && ((_a3 = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current) === null || _a3 === void 0 ? void 0 : _a3.textContent) && internalRef.current.textContent.trim().length > 0 && ((_b3 = e2 === null || e2 === void 0 ? void 0 : e2.nativeEvent) === null || _b3 === void 0 ? void 0 : _b3.isComposing) !== true) {
              e2.preventDefault();
              sendMessage();
            }
            if (e2.key === MessageInputKeys.Backspace && ((_d2 = (_c2 = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current) === null || _c2 === void 0 ? void 0 : _c2.childNodes) === null || _d2 === void 0 ? void 0 : _d2.length) === 2 && !internalRef.current.childNodes[0].textContent && internalRef.current.childNodes[1].nodeType === NodeTypes.ElementNode) {
              internalRef.current.removeChild(internalRef.current.childNodes[1]);
            }
          }
        },
        onKeyUp: function(e2) {
          var preventEvent = onKeyUp(e2);
          if (preventEvent) {
            e2.preventDefault();
          } else {
            useMentionInputDetection();
          }
        },
        onClick: function() {
          useMentionInputDetection();
        },
        onInput: function() {
          var _a3;
          onStartTyping();
          setIsInput(((_a3 = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current) === null || _a3 === void 0 ? void 0 : _a3.textContent) ? internalRef.current.textContent.trim().length > 0 : false);
          useMentionedLabelDetection();
        },
        onPaste: function(e2) {
          onPaste(e2);
          setTimeout(adjustScrollToCaret);
        }
      }),
      ((_e = (_d = (_c = internalRef === null || internalRef === void 0 ? void 0 : internalRef.current) === null || _c === void 0 ? void 0 : _c.textContent) === null || _d === void 0 ? void 0 : _d.length) !== null && _e !== void 0 ? _e : 0) === 0 && import_react13.default.createElement(Label, { className: "sendbird-message-input--placeholder", type: LabelTypography.BODY_1, color: disabled ? LabelColors.ONBACKGROUND_4 : LabelColors.ONBACKGROUND_3 }, placeholder || stringSet.MESSAGE_INPUT__PLACE_HOLDER),
      !isEdit && isInput && import_react13.default.createElement(IconButton, { className: "sendbird-message-input--send", height: "32px", width: "32px", onClick: function() {
        return sendMessage();
      }, testID: "sendbird-message-input-send-button" }, (renderSendMessageIcon === null || renderSendMessageIcon === void 0 ? void 0 : renderSendMessageIcon()) || import_react13.default.createElement(Icon, { type: IconTypes.SEND, fillColor: disabled ? IconColors.ON_BACKGROUND_4 : IconColors.PRIMARY, width: "20px", height: "20px" })),
      !isEdit && !isInput && ((renderFileUploadIcon === null || renderFileUploadIcon === void 0 ? void 0 : renderFileUploadIcon()) || isFileUploadEnabled && import_react13.default.createElement(
        IconButton,
        { className: classnames("sendbird-message-input--attach", isVoiceMessageEnabled && "is-voice-message-enabled"), height: "32px", width: "32px", onClick: function() {
          var _a3, _b3;
          (_b3 = (_a3 = fileInputRef === null || fileInputRef === void 0 ? void 0 : fileInputRef.current) === null || _a3 === void 0 ? void 0 : _a3.click) === null || _b3 === void 0 ? void 0 : _b3.call(_a3);
        } },
        import_react13.default.createElement(Icon, { type: IconTypes.ATTACH, fillColor: disabled ? IconColors.ON_BACKGROUND_4 : IconColors.CONTENT_INVERSE, width: "20px", height: "20px" }),
        import_react13.default.createElement("input", {
          className: "sendbird-message-input--attach-input",
          type: "file",
          ref: fileInputRef,
          // It will affect to <Channel /> and <Thread />
          onChange: function(event) {
            return uploadFile(event);
          },
          accept: getMimeTypesUIKitAccepts(acceptableMimeTypes),
          multiple: isSelectingMultipleFilesEnabled && isChannelTypeSupportsMultipleFilesMessage(channel)
        })
      )),
      isVoiceMessageEnabled && !isEdit && !isInput && import_react13.default.createElement(IconButton, { className: "sendbird-message-input--voice-message", width: "32px", height: "32px", onClick: onVoiceMessageIconClick }, (renderVoiceMessageIcon === null || renderVoiceMessageIcon === void 0 ? void 0 : renderVoiceMessageIcon()) || import_react13.default.createElement(Icon, { type: IconTypes.AUDIO_ON_LINED, fillColor: disabled ? IconColors.ON_BACKGROUND_4 : IconColors.CONTENT_INVERSE, width: "20px", height: "20px" }))
    ),
    isEdit && import_react13.default.createElement(
      "div",
      { className: "sendbird-message-input--edit-action", "data-testid": "sendbird-message-input--edit-action" },
      import_react13.default.createElement(Button, { className: "sendbird-message-input--edit-action__cancel", type: ButtonTypes.SECONDARY, size: ButtonSizes.SMALL, onClick: onCancelEdit }, stringSet.BUTTON__CANCEL),
      import_react13.default.createElement(Button, { className: "sendbird-message-input--edit-action__save", type: ButtonTypes.PRIMARY, size: ButtonSizes.SMALL, disabled: isEditDisabled, onClick: function() {
        return editMessage();
      } }, stringSet.BUTTON__SAVE)
    )
  );
});

// node_modules/@sendbird/uikit-react/ui/MessageContent.js
var import_react57 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-SEoRcjBh.js
var import_react14 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-BBGwVlcE.js
function startOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  date.setHours(0, 0, 0, 0);
  return date;
}
function isSameDay(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeftStartOfDay = startOfDay(dirtyDateLeft);
  var dateRightStartOfDay = startOfDay(dirtyDateRight);
  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();
}

// node_modules/@sendbird/uikit-react/chunks/bundle-B_HhSA6x.js
function isToday(dirtyDate) {
  requiredArgs(1, arguments);
  return isSameDay(dirtyDate, Date.now());
}
function isSameYear(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  return dateLeft.getFullYear() === dateRight.getFullYear();
}
function isThisYear(dirtyDate) {
  requiredArgs(1, arguments);
  return isSameYear(dirtyDate, Date.now());
}
function addDays(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate);
  var amount = toInteger(dirtyAmount);
  if (isNaN(amount)) {
    return /* @__PURE__ */ new Date(NaN);
  }
  if (!amount) {
    return date;
  }
  date.setDate(date.getDate() + amount);
  return date;
}
function subDays(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addDays(dirtyDate, -amount);
}
function isYesterday(dirtyDate) {
  requiredArgs(1, arguments);
  return isSameDay(dirtyDate, subDays(Date.now(), 1));
}

// node_modules/@sendbird/uikit-react/chunks/bundle-SEoRcjBh.js
var getChannelTitle2 = function(channel, currentUserId, stringSet) {
  var _a2;
  if (stringSet === void 0) {
    stringSet = LabelStringSet;
  }
  if (!(channel === null || channel === void 0 ? void 0 : channel.name) && !(channel === null || channel === void 0 ? void 0 : channel.members)) {
    return stringSet.NO_TITLE;
  }
  if (!isDefaultChannelName(channel)) {
    return channel.name;
  }
  if (((_a2 = channel === null || channel === void 0 ? void 0 : channel.members) === null || _a2 === void 0 ? void 0 : _a2.length) === 1) {
    return stringSet.NO_MEMBERS;
  }
  return ((channel === null || channel === void 0 ? void 0 : channel.members) || []).filter(function(_a3) {
    var userId = _a3.userId;
    return userId !== currentUserId;
  }).map(function(_a3) {
    var nickname = _a3.nickname;
    return nickname || stringSet.NO_NAME;
  }).join(", ");
};
var getLastMessageCreatedAt = function(_a2) {
  var _b2;
  var channel = _a2.channel, locale2 = _a2.locale, _c = _a2.stringSet, stringSet = _c === void 0 ? LabelStringSet : _c;
  var createdAt = (_b2 = channel === null || channel === void 0 ? void 0 : channel.lastMessage) === null || _b2 === void 0 ? void 0 : _b2.createdAt;
  var optionalParam = locale2 ? { locale: locale2 } : null;
  if (!createdAt) {
    return "";
  }
  if (isToday(createdAt)) {
    return format(createdAt, stringSet.DATE_FORMAT__LAST_MESSAGE_CREATED_AT__TODAY, optionalParam);
  }
  if (isYesterday(createdAt)) {
    return stringSet.MESSAGE_STATUS__YESTERDAY || "Yesterday";
  }
  if (isThisYear(createdAt)) {
    return format(createdAt, stringSet.DATE_FORMAT__LAST_MESSAGE_CREATED_AT__THIS_YEAR, optionalParam);
  }
  return format(createdAt, stringSet.DATE_FORMAT__LAST_MESSAGE_CREATED_AT__PREVIOUS_YEAR, optionalParam);
};
var getTotalMembers = function(channel) {
  return (channel === null || channel === void 0 ? void 0 : channel.memberCount) ? channel.memberCount : 0;
};
var getChannelPreviewFileDisplayString = function(mimeType, stringSet) {
  var _a2, _b2, _c, _d, _e, _f;
  if (stringSet === void 0) {
    stringSet = LabelStringSet;
  }
  if (isGif(mimeType)) {
    return (_a2 = stringSet === null || stringSet === void 0 ? void 0 : stringSet.CHANNEL_PREVIEW_LAST_MESSAGE_FILE_TYPE_GIF) !== null && _a2 !== void 0 ? _a2 : "";
  }
  if (isImage(mimeType)) {
    return (_b2 = stringSet === null || stringSet === void 0 ? void 0 : stringSet.CHANNEL_PREVIEW_LAST_MESSAGE_FILE_TYPE_PHOTO) !== null && _b2 !== void 0 ? _b2 : "";
  }
  if (isVideo(mimeType)) {
    return (_c = stringSet === null || stringSet === void 0 ? void 0 : stringSet.CHANNEL_PREVIEW_LAST_MESSAGE_FILE_TYPE_VIDEO) !== null && _c !== void 0 ? _c : "";
  }
  if (isAudio(mimeType)) {
    return (_d = stringSet === null || stringSet === void 0 ? void 0 : stringSet.CHANNEL_PREVIEW_LAST_MESSAGE_FILE_TYPE_AUDIO) !== null && _d !== void 0 ? _d : "";
  }
  if (isVoiceMessageMimeType(mimeType)) {
    return (_e = stringSet === null || stringSet === void 0 ? void 0 : stringSet.CHANNEL_PREVIEW_LAST_MESSAGE_FILE_TYPE_VOICE_MESSAGE) !== null && _e !== void 0 ? _e : "";
  }
  return (_f = stringSet === null || stringSet === void 0 ? void 0 : stringSet.CHANNEL_PREVIEW_LAST_MESSAGE_FILE_TYPE_GENERAL) !== null && _f !== void 0 ? _f : "";
};
var getPrettyLastMessage = function(message, stringSet) {
  var _a2, _b2, _c, _d;
  if (message === void 0) {
    message = null;
  }
  if (stringSet === void 0) {
    stringSet = LabelStringSet;
  }
  if (!message)
    return "";
  if (isTemplateMessage(message)) {
    return stringSet.CHANNEL_PREVIEW_LAST_MESSAGE_TEMPLATE_MESSAGE;
  }
  if (message.isFileMessage()) {
    return getChannelPreviewFileDisplayString(message.type, stringSet);
  }
  if (message.isMultipleFilesMessage()) {
    var mimeType = (_b2 = (_a2 = message.fileInfoList) === null || _a2 === void 0 ? void 0 : _a2[0]) === null || _b2 === void 0 ? void 0 : _b2.mimeType;
    if (isImage(mimeType) || isGif(mimeType)) {
      return (_c = stringSet === null || stringSet === void 0 ? void 0 : stringSet.CHANNEL_PREVIEW_LAST_MESSAGE_FILE_TYPE_PHOTO) !== null && _c !== void 0 ? _c : "";
    }
    return getChannelPreviewFileDisplayString(mimeType, stringSet);
  }
  return (_d = message.message) !== null && _d !== void 0 ? _d : "";
};
var getLastMessageText = function(channel, stringSet) {
  if (stringSet === void 0) {
    stringSet = LabelStringSet;
  }
  return (channel === null || channel === void 0 ? void 0 : channel.lastMessage) ? getPrettyLastMessage(channel === null || channel === void 0 ? void 0 : channel.lastMessage, stringSet) : "";
};
var getChannelUnreadMessageCount = function(channel) {
  return (channel === null || channel === void 0 ? void 0 : channel.unreadMessageCount) ? channel.unreadMessageCount : 0;
};
var _a;
var _b;
var iconType = (_a = {}, _a[OutgoingMessageStates.SENT] = IconTypes.DONE, _a[OutgoingMessageStates.DELIVERED] = IconTypes.DONE_ALL, _a[OutgoingMessageStates.READ] = IconTypes.DONE_ALL, _a[OutgoingMessageStates.FAILED] = IconTypes.ERROR, _a[OutgoingMessageStates.PENDING] = void 0, _a[OutgoingMessageStates.NONE] = void 0, _a);
var iconColor = (_b = {}, _b[OutgoingMessageStates.SENT] = IconColors.SENT, _b[OutgoingMessageStates.DELIVERED] = IconColors.SENT, _b[OutgoingMessageStates.READ] = IconColors.READ, _b[OutgoingMessageStates.FAILED] = IconColors.ERROR, _b[OutgoingMessageStates.PENDING] = void 0, _b[OutgoingMessageStates.NONE] = void 0, _b);
function MessageStatus(_a2) {
  var _b2;
  var className = _a2.className, message = _a2.message, channel = _a2.channel, _c = _a2.isDateSeparatorConsidered, isDateSeparatorConsidered = _c === void 0 ? true : _c;
  var _d = useLocalization(), stringSet = _d.stringSet, dateLocale = _d.dateLocale;
  var status = getOutgoingMessageState(channel, message);
  var hideMessageStatusIcon = ((_b2 = channel === null || channel === void 0 ? void 0 : channel.isGroupChannel) === null || _b2 === void 0 ? void 0 : _b2.call(channel)) && ((channel.isSuper || channel.isPublic || channel.isBroadcast) && !(status === OutgoingMessageStates.PENDING || status === OutgoingMessageStates.FAILED));
  return import_react14.default.createElement(
    "div",
    { className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), [
      "sendbird-message-status"
    ], false).join(" ") },
    status === OutgoingMessageStates.PENDING ? import_react14.default.createElement(
      Loader,
      { className: "sendbird-message-status__icon", testID: "sendbird-message-status-icon", width: "16px", height: "16px" },
      import_react14.default.createElement(Icon, { type: IconTypes.SPINNER, fillColor: IconColors.PRIMARY, width: "16px", height: "16px" })
    ) : import_react14.default.createElement(Icon, { className: classnames("sendbird-message-status__icon", hideMessageStatusIcon && "hide-icon", status !== OutgoingMessageStates.FAILED && "sendbird-message-status--sent"), testID: "sendbird-message-status-icon", type: iconType[status] || IconTypes.ERROR, fillColor: iconColor[status], width: "16px", height: "16px" }),
    isSentStatus(status) && import_react14.default.createElement(Label, { className: "sendbird-message-status__text", testID: "sendbird-message-status-text", type: LabelTypography.CAPTION_3, color: LabelColors.ONBACKGROUND_2 }, isDateSeparatorConsidered ? format((message === null || message === void 0 ? void 0 : message.createdAt) || 0, stringSet.DATE_FORMAT__MESSAGE_CREATED_AT, { locale: dateLocale }) : getLastMessageCreatedAt({ channel, locale: dateLocale, stringSet }))
  );
}

// node_modules/@sendbird/uikit-react/chunks/bundle-iiHh_YqB.js
var import_react15 = __toESM(require_react(), 1);
var TriggerIcon = function(_a2) {
  var ref = _a2.ref, _b2 = _a2.onClick, onClick = _b2 === void 0 ? noop : _b2, _c = _a2.onBlur, onBlur = _c === void 0 ? noop : _c, _d = _a2.renderIcon, renderIcon = _d === void 0 ? function(props) {
    return import_react15.default.createElement(Icon, __assign({}, props));
  } : _d;
  return import_react15.default.createElement(IconButton, { ref, width: "32px", height: "32px", onClick, onBlur }, renderIcon({
    type: IconTypes.MORE,
    fillColor: IconColors.CONTENT_INVERSE,
    width: "24px",
    height: "24px"
  }));
};
var CopyMenuItem = function(props) {
  var _a2;
  var stringSet = useLocalization().stringSet;
  var _b2 = useMessageMenuContext(), message = _b2.message, hideMenu = _b2.hideMenu;
  return import_react15.default.createElement(MenuItem$1, __assign({}, props, { onClick: function(e2) {
    var _a3;
    if (isUserMessage(message))
      copyToClipboard(message.message);
    hideMenu();
    (_a3 = props.onClick) === null || _a3 === void 0 ? void 0 : _a3.call(props, e2);
  } }), (_a2 = props.children) !== null && _a2 !== void 0 ? _a2 : stringSet.MESSAGE_MENU__COPY);
};
var ReplyMenuItem = function(props) {
  var _a2;
  var stringSet = useLocalization().stringSet;
  var _b2 = useMessageMenuContext(), message = _b2.message, hideMenu = _b2.hideMenu, setQuoteMessage = _b2.setQuoteMessage;
  return import_react15.default.createElement(MenuItem$1, __assign({}, props, { disabled: message.parentMessageId > 0, onClick: function(e2) {
    var _a3;
    setQuoteMessage(message);
    hideMenu();
    (_a3 = props.onClick) === null || _a3 === void 0 ? void 0 : _a3.call(props, e2);
  } }), (_a2 = props.children) !== null && _a2 !== void 0 ? _a2 : stringSet.MESSAGE_MENU__REPLY);
};
var ThreadMenuItem = function(props) {
  var _a2;
  var stringSet = useLocalization().stringSet;
  var _b2 = useMessageMenuContext(), message = _b2.message, hideMenu = _b2.hideMenu, onReplyInThread = _b2.onReplyInThread;
  return import_react15.default.createElement(MenuItem$1, __assign({}, props, { onClick: function(e2) {
    var _a3;
    onReplyInThread({ message });
    hideMenu();
    (_a3 = props.onClick) === null || _a3 === void 0 ? void 0 : _a3.call(props, e2);
  } }), (_a2 = props.children) !== null && _a2 !== void 0 ? _a2 : stringSet.MESSAGE_MENU__THREAD);
};
var OpenInChannelMenuItem = function(props) {
  var _a2;
  var stringSet = useLocalization().stringSet;
  var _b2 = useMessageMenuContext(), hideMenu = _b2.hideMenu, onMoveToParentMessage = _b2.onMoveToParentMessage;
  return import_react15.default.createElement(MenuItem$1, __assign({}, props, { onClick: function(e2) {
    var _a3;
    onMoveToParentMessage();
    hideMenu();
    (_a3 = props.onClick) === null || _a3 === void 0 ? void 0 : _a3.call(props, e2);
  } }), (_a2 = props.children) !== null && _a2 !== void 0 ? _a2 : stringSet.MESSAGE_MENU__OPEN_IN_CHANNEL);
};
var EditMenuItem = function(props) {
  var _a2;
  var stringSet = useLocalization().stringSet;
  var _b2 = useMessageMenuContext(), hideMenu = _b2.hideMenu, showEdit = _b2.showEdit, isOnline = _b2.isOnline;
  return import_react15.default.createElement(MenuItem$1, __assign({}, props, { onClick: function(e2) {
    var _a3;
    if (isOnline) {
      showEdit(true);
      hideMenu();
      (_a3 = props.onClick) === null || _a3 === void 0 ? void 0 : _a3.call(props, e2);
    }
  } }), (_a2 = props.children) !== null && _a2 !== void 0 ? _a2 : stringSet.MESSAGE_MENU__EDIT);
};
var ResendMenuItem = function(props) {
  var _a2;
  var stringSet = useLocalization().stringSet;
  var _b2 = useMessageMenuContext(), message = _b2.message, hideMenu = _b2.hideMenu, resendMessage = _b2.resendMessage, isOnline = _b2.isOnline;
  return import_react15.default.createElement(MenuItem$1, __assign({}, props, { onClick: function(e2) {
    var _a3;
    if (isOnline) {
      resendMessage(message);
      hideMenu();
      (_a3 = props.onClick) === null || _a3 === void 0 ? void 0 : _a3.call(props, e2);
    }
  } }), (_a2 = props.children) !== null && _a2 !== void 0 ? _a2 : stringSet.MESSAGE_MENU__RESEND);
};
var DeleteMenuItem = function(props) {
  var _a2, _b2, _c;
  var stringSet = useLocalization().stringSet;
  var _d = useMessageMenuContext(), message = _d.message, hideMenu = _d.hideMenu, deleteMessage = _d.deleteMessage, showRemove = _d.showRemove, isOnline = _d.isOnline, disableDeleteMessage = _d.disableDeleteMessage;
  return import_react15.default.createElement(MenuItem$1, __assign({}, props, { disabled: typeof disableDeleteMessage === "boolean" ? disableDeleteMessage : ((_b2 = (_a2 = message.threadInfo) === null || _a2 === void 0 ? void 0 : _a2.replyCount) !== null && _b2 !== void 0 ? _b2 : 0) > 0, onClick: function(e2) {
    var _a3;
    if (isFailedMessage(message)) {
      deleteMessage(message);
    } else if (isOnline) {
      showRemove(true);
      hideMenu();
      (_a3 = props.onClick) === null || _a3 === void 0 ? void 0 : _a3.call(props, e2);
    }
  } }), (_c = props.children) !== null && _c !== void 0 ? _c : stringSet.MESSAGE_MENU__DELETE);
};
var isReplyTypeMessageEnabled = function(_a2) {
  var _b2;
  var channel = _a2.channel, message = _a2.message;
  if (isFailedMessage(message) || isPendingMessage(message)) {
    return false;
  }
  if (!((_b2 = channel === null || channel === void 0 ? void 0 : channel.isGroupChannel) === null || _b2 === void 0 ? void 0 : _b2.call(channel)) || (channel === null || channel === void 0 ? void 0 : channel.isEphemeral)) {
    return false;
  }
  var isBroadcast = channel === null || channel === void 0 ? void 0 : channel.isBroadcast;
  var isOperator = (channel === null || channel === void 0 ? void 0 : channel.myRole) === V.OPERATOR;
  if (isBroadcast)
    return isOperator;
  return true;
};
var showMenuItemCopy = function(_a2) {
  var message = _a2.message;
  return isUserMessage(message);
};
var showMenuItemEdit = function(_a2) {
  var message = _a2.message, channel = _a2.channel, isByMe = _a2.isByMe;
  return !(channel === null || channel === void 0 ? void 0 : channel.isEphemeral) && isUserMessage(message) && isSentMessage(message) && isByMe;
};
var showMenuItemResend = function(_a2) {
  var message = _a2.message, isByMe = _a2.isByMe;
  return isFailedMessage(message) && (message === null || message === void 0 ? void 0 : message.isResendable) && isByMe;
};
var showMenuItemDelete = function(_a2) {
  var message = _a2.message, channel = _a2.channel, isByMe = _a2.isByMe;
  return !(channel === null || channel === void 0 ? void 0 : channel.isEphemeral) && !isPendingMessage(message) && isByMe;
};
var showMenuItemOpenInChannel = function(_a2) {
  var _b2 = _a2.onMoveToParentMessage, onMoveToParentMessage = _b2 === void 0 ? void 0 : _b2;
  return !!onMoveToParentMessage;
};
var showMenuItemReply = function(_a2) {
  var channel = _a2.channel, message = _a2.message, replyType = _a2.replyType;
  return isReplyTypeMessageEnabled({ channel, message }) && replyType === "QUOTE_REPLY";
};
var showMenuItemThread = function(_a2) {
  var channel = _a2.channel, message = _a2.message, replyType = _a2.replyType, onReplyInThread = _a2.onReplyInThread;
  return isReplyTypeMessageEnabled({ channel, message }) && replyType === "THREAD" && !(message === null || message === void 0 ? void 0 : message.parentMessageId) && typeof onReplyInThread === "function";
};
var MessageMenu = function(_a2) {
  var _b2;
  var className = _a2.className, message = _a2.message, channel = _a2.channel, isByMe = _a2.isByMe, replyType = _a2.replyType, _c = _a2.renderTrigger, renderTrigger = _c === void 0 ? TriggerIcon : _c, renderMenuItems = _a2.renderMenuItems, _d = _a2.disableDeleteMessage, disableDeleteMessage = _d === void 0 ? null : _d, _e = _a2.showEdit, showEdit = _e === void 0 ? noop : _e, _f = _a2.showRemove, showRemove = _f === void 0 ? noop : _f, deleteMessage = _a2.deleteMessage, resendMessage = _a2.resendMessage, setQuoteMessage = _a2.setQuoteMessage, onReplyInThread = _a2.onReplyInThread, onMoveToParentMessage = _a2.onMoveToParentMessage;
  var isOnline = useSendbird().state.config.isOnline;
  var triggerRef = (0, import_react15.useRef)(null);
  var containerRef = (0, import_react15.useRef)(null);
  var _g = (0, import_react15.useState)(false), isMenuVisible = _g[0], setMenuVisibility = _g[1];
  var hideMenu = function() {
    return setMenuVisibility(false);
  };
  var showMenu = function() {
    return setMenuVisibility(true);
  };
  var toggleMenu = function() {
    return setMenuVisibility(function(visible) {
      return !visible;
    });
  };
  var params = {
    message,
    channel,
    isByMe,
    replyType,
    onReplyInThread,
    onMoveToParentMessage
  };
  return import_react15.default.createElement(
    "div",
    { className: classnames("sendbird-message-menu", className), ref: containerRef },
    import_react15.default.createElement(
      MessageMenuProvider,
      { value: {
        message,
        hideMenu,
        showMenu,
        toggleMenu,
        setQuoteMessage,
        onReplyInThread,
        onMoveToParentMessage,
        showEdit,
        showRemove,
        deleteMessage,
        resendMessage,
        isOnline,
        disableDeleteMessage,
        triggerRef,
        containerRef
      } },
      renderTrigger({ ref: triggerRef, onClick: toggleMenu }),
      isMenuVisible && import_react15.default.createElement(MenuItems, { id: getObservingId(message.messageId), parentRef: triggerRef, parentContainRef: containerRef, closeDropdown: hideMenu, openLeft: isByMe }, (_b2 = renderMenuItems === null || renderMenuItems === void 0 ? void 0 : renderMenuItems({
        items: {
          CopyMenuItem,
          ReplyMenuItem,
          ThreadMenuItem,
          OpenInChannelMenuItem,
          EditMenuItem,
          ResendMenuItem,
          DeleteMenuItem
        }
      })) !== null && _b2 !== void 0 ? _b2 : import_react15.default.createElement(
        import_react15.default.Fragment,
        null,
        showMenuItemCopy(params) && import_react15.default.createElement(CopyMenuItem, null),
        showMenuItemReply(params) && import_react15.default.createElement(ReplyMenuItem, null),
        showMenuItemThread(params) && import_react15.default.createElement(ThreadMenuItem, null),
        showMenuItemOpenInChannel(params) && import_react15.default.createElement(OpenInChannelMenuItem, null),
        showMenuItemEdit(params) && import_react15.default.createElement(EditMenuItem, null),
        showMenuItemResend(params) && import_react15.default.createElement(ResendMenuItem, null),
        showMenuItemDelete(params) && import_react15.default.createElement(DeleteMenuItem, null)
      ))
    )
  );
};

// node_modules/@sendbird/uikit-react/ui/MessageItemReactionMenu.js
var import_react18 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/ui/ReactionButton.js
var import_react17 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-BSieP1ow.js
var import_react16 = __toESM(require_react(), 1);
var DEFAULT_DURATION = 300;
function preventDefault(e2) {
  if (!isTouchEvent(e2)) {
    return;
  }
  if (e2.touches.length < 2 && e2.preventDefault) {
    e2.preventDefault();
  }
}
function isTouchEvent(e2) {
  return e2 && "touches" in e2;
}
function useLongPress(_a2, _b2) {
  var onLongPress = _a2.onLongPress, onClick = _a2.onClick;
  var _c = _b2 === void 0 ? {} : _b2, _d = _c.delay, delay = _d === void 0 ? DEFAULT_DURATION : _d, _e = _c.shouldPreventDefault, shouldPreventDefault = _e === void 0 ? true : _e, _f = _c.shouldStopPropagation, shouldStopPropagation = _f === void 0 ? false : _f;
  var isMobile = useMediaQueryContext().isMobile;
  var _g = (0, import_react16.useState)(false), longPressTriggered = _g[0], setLongPressTriggered = _g[1];
  var _h = (0, import_react16.useState)(false), dragTriggered = _h[0], setDragTriggered = _h[1];
  var timeout = (0, import_react16.useRef)();
  var target = (0, import_react16.useRef)();
  var start = (0, import_react16.useCallback)(function(e2) {
    e2.persist();
    var clonedEvent = __assign({}, e2);
    setDragTriggered(false);
    if (shouldStopPropagation) {
      e2.stopPropagation();
    }
    if (shouldPreventDefault && e2.target) {
      e2.target.addEventListener("touchend", preventDefault, {
        passive: false
      });
      target.current = e2.target;
    }
    timeout.current = setTimeout(function() {
      onLongPress(clonedEvent);
      setLongPressTriggered(true);
    }, delay);
  }, [onLongPress, delay, shouldPreventDefault, shouldStopPropagation, isMobile]);
  var clear = (0, import_react16.useCallback)(function(e2, shouldTriggerClick, onDrag) {
    if (shouldTriggerClick === void 0) {
      shouldTriggerClick = true;
    }
    if (onDrag === void 0) {
      onDrag = false;
    }
    if (onDrag) {
      setDragTriggered(true);
    } else {
      setDragTriggered(false);
    }
    if (timeout === null || timeout === void 0 ? void 0 : timeout.current) {
      clearTimeout(timeout.current);
    }
    if (shouldTriggerClick && !longPressTriggered && !dragTriggered) {
      onClick === null || onClick === void 0 ? void 0 : onClick(e2);
    }
    setLongPressTriggered(false);
    if (shouldPreventDefault && target.current) {
      target.current.removeEventListener("touchend", preventDefault);
    }
  }, [shouldPreventDefault, onClick, longPressTriggered, dragTriggered]);
  return {
    onMouseDown: function(e2) {
      return start(e2);
    },
    onMouseUp: function(e2) {
      return clear(e2);
    },
    onMouseLeave: function(e2) {
      return clear(e2, false);
    },
    onTouchStart: function(e2) {
      return start(e2);
    },
    // setDragTriggered as true on touchmove, so that next onTouchEnd is ignored
    // if we dont do it, onClick?.(e) will be triggred, see inside clear()
    onTouchMove: function(e2) {
      return clear(e2, false, true);
    },
    onTouchEnd: function(e2) {
      return clear(e2);
    }
  };
}

// node_modules/@sendbird/uikit-react/ui/ReactionButton.js
var ReactionButton = import_react17.default.forwardRef(function(props, ref) {
  var className = props.className, width = props.width, height = props.height, selected = props.selected, _a2 = props.dataSbId, dataSbId = _a2 === void 0 ? "" : _a2, testID = props.testID, onClick = props.onClick, children = props.children;
  var onClickHandler = useLongPress({
    onLongPress: noop,
    onClick
  }, {
    shouldPreventDefault: true,
    shouldStopPropagation: true
  });
  return import_react17.default.createElement(
    "div",
    __assign({ className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), [
      "sendbird-reaction-button".concat(selected ? "--selected" : "")
    ], false).join(" "), ref, role: "button", style: { width, height } }, onClickHandler, { tabIndex: 0, "data-sb-id": testID !== null && testID !== void 0 ? testID : dataSbId, "data-testid": testID !== null && testID !== void 0 ? testID : dataSbId }),
    import_react17.default.createElement("div", { className: "sendbird-reaction-button__inner" }, children)
  );
});

// node_modules/@sendbird/uikit-react/ui/MessageItemReactionMenu.js
var import_react_dom = __toESM(require_react_dom(), 1);
function MessageEmojiMenu(_a2) {
  var className = _a2.className, message = _a2.message, userId = _a2.userId, _b2 = _a2.spaceFromTrigger, spaceFromTrigger = _b2 === void 0 ? { x: 0, y: 0 } : _b2, emojiContainer = _a2.emojiContainer, filterEmojiCategoryIds = _a2.filterEmojiCategoryIds, toggleReaction = _a2.toggleReaction;
  var triggerRef = (0, import_react18.useRef)(null);
  var containerRef = (0, import_react18.useRef)(null);
  var filteredEmojis = (0, import_react18.useMemo)(function() {
    return getEmojiListByCategoryIds(emojiContainer, filterEmojiCategoryIds === null || filterEmojiCategoryIds === void 0 ? void 0 : filterEmojiCategoryIds(message));
  }, [emojiContainer, filterEmojiCategoryIds]);
  if (isPendingMessage(message) || isFailedMessage(message)) {
    return null;
  }
  return import_react18.default.createElement(
    "div",
    { className: getClassName([className !== null && className !== void 0 ? className : "", "sendbird-message-item-reaction-menu"]), ref: containerRef },
    import_react18.default.createElement(ContextMenu, { menuTrigger: function(toggleDropdown) {
      return import_react18.default.createElement(
        IconButton,
        { className: "sendbird-message-item-reaction-menu__trigger", ref: triggerRef, width: "32px", height: "32px", onClick: function() {
          toggleDropdown();
        } },
        import_react18.default.createElement(Icon, { className: "sendbird-message-item-reaction-menu__trigger__icon", testID: "sendbird-message-item-reaction-menu__trigger__icon", type: IconTypes.EMOJI_MORE, fillColor: IconColors.CONTENT_INVERSE, width: "24px", height: "24px" })
      );
    }, menuItems: function(closeDropdown) {
      if (filteredEmojis.length === 0)
        return null;
      return import_react18.default.createElement(EmojiListItems, { id: getObservingId(message.messageId), parentRef: triggerRef, parentContainRef: containerRef, closeDropdown, spaceFromTrigger }, filteredEmojis.map(function(emoji) {
        var _a3, _b3, _c;
        var isReacted = ((_c = (_b3 = (_a3 = message === null || message === void 0 ? void 0 : message.reactions) === null || _a3 === void 0 ? void 0 : _a3.find(function(reaction) {
          return reaction.key === emoji.key;
        })) === null || _b3 === void 0 ? void 0 : _b3.userIds) === null || _c === void 0 ? void 0 : _c.some(function(reactorId) {
          return reactorId === userId;
        })) || false;
        return import_react18.default.createElement(
          ReactionButton,
          { key: emoji.key, width: "36px", height: "36px", selected: isReacted, onClick: function() {
            closeDropdown();
            toggleReaction === null || toggleReaction === void 0 ? void 0 : toggleReaction(message, emoji.key, isReacted);
          }, testID: "ui_emoji_reactions_menu_".concat(emoji.key) },
          import_react18.default.createElement(ImageRenderer, { url: emoji.url, width: "28px", height: "28px", placeHolder: function(_a4) {
            var style = _a4.style;
            return import_react18.default.createElement(
              "div",
              { style },
              import_react18.default.createElement(Icon, { type: IconTypes.QUESTION, fillColor: IconColors.ON_BACKGROUND_3, width: "28px", height: "28px" })
            );
          } })
        );
      }));
    } })
  );
}

// node_modules/@sendbird/uikit-react/ui/EmojiReactions.js
var import_react25 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/ui/ReactionBadge.js
var import_react19 = __toESM(require_react(), 1);
var ReactionBadge = import_react19.default.forwardRef(function(props, ref) {
  var _a2 = props.className, className = _a2 === void 0 ? "" : _a2, testID = props.testID, children = props.children, _b2 = props.count, count = _b2 === void 0 ? "" : _b2, _c = props.isAdd, isAdd = _c === void 0 ? false : _c, _d = props.selected, selected = _d === void 0 ? false : _d, _e = props.onClick, onClick = _e === void 0 ? function() {
  } : _e;
  var getClassNameTail = function() {
    if (selected && !isAdd) {
      return "--selected";
    }
    if (isAdd) {
      return "--is-add";
    }
    return "";
  };
  return import_react19.default.createElement(
    "div",
    { className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), [
      "sendbird-reaction-badge".concat(getClassNameTail())
    ], false).join(" "), "data-testid": testID, role: "button", ref, onClick, onKeyDown: onClick, onTouchEnd: onClick, tabIndex: 0 },
    import_react19.default.createElement(
      "div",
      { className: "sendbird-reaction-badge__inner" },
      import_react19.default.createElement("div", { className: "sendbird-reaction-badge__inner__icon" }, children),
      import_react19.default.createElement(Label, { className: children && count ? "sendbird-reaction-badge__inner__count" : "", type: LabelTypography.CAPTION_3, color: LabelColors.ONBACKGROUND_1 }, count)
    )
  );
});

// node_modules/@sendbird/uikit-react/ui/BottomSheet.js
var import_react21 = __toESM(require_react(), 1);
var import_react_dom3 = __toESM(require_react_dom(), 1);

// node_modules/@sendbird/uikit-react/hooks/useModal.js
var import_react20 = __toESM(require_react(), 1);
var import_react_dom2 = __toESM(require_react_dom(), 1);
var GlobalModalContext = (0, import_react20.createContext)({
  openModal: noop
});
var GlobalModalProvider = function(_a2) {
  var children = _a2.children;
  var _b2 = (0, import_react20.useState)([]), globalModalQueue = _b2[0], setGlobalModalQueue = _b2[1];
  var openModal = (0, import_react20.useCallback)(function(props) {
    setGlobalModalQueue(function(currentQue) {
      return __spreadArray(__spreadArray([], currentQue, true), [props], false);
    });
  }, []);
  var closeModal = (0, import_react20.useCallback)(function() {
    setGlobalModalQueue(function(currentQue) {
      return currentQue.slice(1);
    });
  }, []);
  var ModalComponent = (0, import_react20.useMemo)(function() {
    return function() {
      return K(globalModalQueue).when(function(q2) {
        return q2.length === 0;
      }, function() {
        return import_react20.default.createElement(import_react20.default.Fragment, null);
      }).otherwise(function() {
        var _a3 = globalModalQueue[0], modalProps = _a3.modalProps, childElement = _a3.childElement;
        return import_react20.default.createElement(Modal, __assign({}, modalProps, { className: classnames("sendbird-global-modal", modalProps === null || modalProps === void 0 ? void 0 : modalProps.className), onClose: function() {
          var _a4;
          (_a4 = modalProps === null || modalProps === void 0 ? void 0 : modalProps.onClose) === null || _a4 === void 0 ? void 0 : _a4.call(modalProps);
          closeModal();
        } }), childElement({
          closeModal
        }));
      });
    };
  }, [globalModalQueue]);
  return import_react20.default.createElement(
    GlobalModalContext.Provider,
    { value: {
      openModal
    } },
    import_react20.default.createElement(ModalComponent, null),
    children
  );
};
var useGlobalModalContext = function() {
  return (0, import_react20.useContext)(GlobalModalContext);
};

// node_modules/@sendbird/uikit-react/ui/BottomSheet.js
var BottomSheet = function(props) {
  var _a2;
  var _b2 = props.className, className = _b2 === void 0 ? "" : _b2, children = props.children, onBackdropClick = props.onBackdropClick;
  var logger = useSendbird().state.config.logger;
  var portalRoot = (0, import_react21.useRef)();
  portalRoot.current = document.getElementById(MODAL_ROOT);
  if (!portalRoot.current) {
    portalRoot.current = document.createElement("div");
    portalRoot.current.setAttribute("id", MODAL_ROOT);
    document.body.appendChild(portalRoot.current);
    (_a2 = logger === null || logger === void 0 ? void 0 : logger.warning) === null || _a2 === void 0 ? void 0 : _a2.call(logger, "@sendbird/uikit-react/ui/BottomSheet | Should put a ModalRoot to use the BottomSheet.");
  }
  return (0, import_react_dom3.createPortal)(import_react21.default.createElement(
    "div",
    { className: "".concat(className, " sendbird-bottomsheet") },
    import_react21.default.createElement("div", { className: "sendbird-bottomsheet__content", role: "dialog", "aria-modal": "true", "aria-expanded": "true" }, children),
    import_react21.default.createElement("div", { className: "sendbird-bottomsheet__backdrop", onClick: function(e2) {
      e2 === null || e2 === void 0 ? void 0 : e2.stopPropagation();
      onBackdropClick === null || onBackdropClick === void 0 ? void 0 : onBackdropClick();
    } })
  ), portalRoot.current);
};

// node_modules/@sendbird/uikit-react/ui/Tooltip.js
var import_react22 = __toESM(require_react(), 1);
function Tooltip(_a2) {
  var _b2 = _a2.className, className = _b2 === void 0 ? "" : _b2, _c = _a2.children, children = _c === void 0 ? "" : _c;
  return import_react22.default.createElement(
    "div",
    { className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), [
      "sendbird-tooltip"
    ], false).join(" ") },
    import_react22.default.createElement(Label, { className: "sendbird-tooltip__text", type: LabelTypography.CAPTION_2, color: LabelColors.ONCONTENT_1 }, children)
  );
}

// node_modules/@sendbird/uikit-react/ui/TooltipWrapper.js
var import_react23 = __toESM(require_react(), 1);
var SPACE_FROM_TRIGGER = 8;
function TooltipWrapper(_a2) {
  var _b2 = _a2.className, className = _b2 === void 0 ? "" : _b2, children = _a2.children, hoverTooltip = _a2.hoverTooltip;
  var _c = (0, import_react23.useState)(false), showHoverTooltip = _c[0], setShowHoverTooltip = _c[1];
  var childrenRef = (0, import_react23.useRef)();
  return import_react23.default.createElement(
    "div",
    { className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), [
      "sendbird-tooltip-wrapper"
    ], false).join(" "), onMouseOver: function() {
      setShowHoverTooltip(true);
    }, onFocus: function() {
      setShowHoverTooltip(true);
    }, onMouseOut: function() {
      setShowHoverTooltip(false);
    }, onBlur: function() {
      setShowHoverTooltip(false);
    } },
    import_react23.default.createElement("div", { className: "sendbird-tooltip-wrapper__children", ref: childrenRef }, children),
    showHoverTooltip && import_react23.default.createElement(
      "div",
      { className: "sendbird-tooltip-wrapper__hover-tooltip", style: { bottom: "calc(100% + ".concat(SPACE_FROM_TRIGGER, "px)") } },
      import_react23.default.createElement(
        "div",
        { className: "sendbird-tooltip-wrapper__hover-tooltip__inner" },
        import_react23.default.createElement("div", { className: "sendbird-tooltip-wrapper__hover-tooltip__inner__tooltip-container", style: { left: childrenRef.current ? "calc(".concat(childrenRef.current.offsetWidth / 2, "px - 50%)") : void 0 } }, hoverTooltip)
      )
    )
  );
}

// node_modules/@sendbird/uikit-react/Message/context.js
var import_react24 = __toESM(require_react(), 1);
var defaultValue = {
  message: {},
  isByMe: false
};
var MessageContext = import_react24.default.createContext(defaultValue);
var MessageProvider = function(props) {
  var children = props.children, message = props.message, _a2 = props.isByMe, isByMe = _a2 === void 0 ? false : _a2;
  return import_react24.default.createElement(MessageContext.Provider, { value: {
    message,
    isByMe
  } }, children);
};
var useMessageContext = function() {
  var value = import_react24.default.useContext(MessageContext);
  if (value === void 0) {
    throw new Error("useMessageContext must be used within a MessageProvider");
  }
  return value;
};

// node_modules/@sendbird/uikit-react/ui/EmojiReactions.js
var import_react_dom4 = __toESM(require_react_dom(), 1);
var ReactedMembersBottomSheet = function(_a2) {
  var _b2, _c, _d;
  var message = _a2.message, channel = _a2.channel, _e = _a2.emojiKey, emojiKey = _e === void 0 ? "" : _e, hideMenu = _a2.hideMenu, emojiContainer = _a2.emojiContainer, onPressUserProfileHandler = _a2.onPressUserProfileHandler;
  var _f = channel.members, members = _f === void 0 ? [] : _f;
  var _g = (0, import_react25.useState)(emojiKey), selectedEmoji = _g[0], setSelectedEmoji = _g[1];
  function onPressUserProfileCallBack() {
    if (onPressUserProfileHandler && message) {
      var sender = message === null || message === void 0 ? void 0 : message.sender;
      onPressUserProfileHandler(sender);
    }
  }
  return import_react25.default.createElement(
    BottomSheet,
    { onBackdropClick: hideMenu },
    import_react25.default.createElement(
      "div",
      { className: "sendbird-message__bottomsheet" },
      import_react25.default.createElement("div", { className: "sendbird-message__bottomsheet__reacted-members" }, (_b2 = message.reactions) === null || _b2 === void 0 ? void 0 : _b2.map(function(reaction) {
        var emojiUrl = getEmojiUrl(emojiContainer, reaction.key);
        return import_react25.default.createElement(
          "div",
          { key: reaction.key, className: classnames("sendbird-message__bottomsheet__reacted-members__item", selectedEmoji === reaction.key && "sendbird-message__bottomsheet__reacted-members__item__selected"), onClick: function() {
            setSelectedEmoji(reaction.key);
          } },
          import_react25.default.createElement(ImageRenderer, { url: emojiUrl, width: "28px", height: "28px", placeHolder: function(_a3) {
            var style = _a3.style;
            return import_react25.default.createElement(
              "div",
              { style },
              import_react25.default.createElement(Icon, { type: IconTypes.QUESTION, fillColor: IconColors.ON_BACKGROUND_3, width: "28px", height: "28px" })
            );
          } }),
          import_react25.default.createElement(Label, { type: LabelTypography.BUTTON_2, color: selectedEmoji === reaction.key ? LabelColors.PRIMARY : LabelColors.ONBACKGROUND_3 }, reaction.userIds.length)
        );
      })),
      import_react25.default.createElement(
        "div",
        { className: "sendbird-message__bottomsheet__reactor-list" },
        // making a member list who reacted to the message with the `selectedEmoji`
        ((_d = (_c = message.reactions) === null || _c === void 0 ? void 0 : _c.find(function(reaction) {
          return reaction.key === selectedEmoji;
        })) === null || _d === void 0 ? void 0 : _d.userIds.map(function(userId) {
          return members.find(function(member) {
            return member.userId === userId;
          });
        }).filter(function(member) {
          return member !== void 0;
        })).map(function(member) {
          return import_react25.default.createElement(UserListItem, { key: member.userId, className: "sendbird-message__bottomsheet__reactor-list__item", user: member, avatarSize: "36px", onUserAvatarClick: onPressUserProfileCallBack });
        })
      )
    )
  );
};
function ReactionItem(_a2) {
  var _b2;
  var reaction = _a2.reaction, memberNicknamesMap = _a2.memberNicknamesMap, setEmojiKey = _a2.setEmojiKey, toggleReaction = _a2.toggleReaction, emojisMap = _a2.emojisMap, channel = _a2.channel, message = _a2.message, isFiltered = _a2.isFiltered;
  var openModal = useGlobalModalContext().openModal;
  var userId = useSendbird().state.config.userId;
  var isMobile = useMediaQueryContext().isMobile;
  var messageStore = useMessageContext();
  var stringSet = (0, import_react25.useContext)(LocalizationContext).stringSet;
  var reactedByMe = isReactedBy(userId, reaction);
  var showHoverTooltip = reaction.userIds.length > 0 && ((channel === null || channel === void 0 ? void 0 : channel.isGroupChannel()) && !channel.isSuper);
  var handleOnClick = function() {
    if (isFiltered && !reactedByMe) {
      openModal({
        modalProps: {
          titleText: "Add reaction failed",
          hideFooter: true,
          isCloseOnClickOutside: true
        },
        childElement: function(_a3) {
          var closeModal = _a3.closeModal;
          return import_react25.default.createElement(ModalFooter, { type: ButtonTypes.PRIMARY, submitText: stringSet.BUTTON__OK, hideCancelButton: true, onCancel: closeModal, onSubmit: closeModal });
        }
      });
      return;
    }
    setEmojiKey("");
    toggleReaction === null || toggleReaction === void 0 ? void 0 : toggleReaction(message !== null && message !== void 0 ? message : messageStore === null || messageStore === void 0 ? void 0 : messageStore.message, reaction.key, reactedByMe);
  };
  var longPress = useLongPress({
    onLongPress: function() {
      setEmojiKey(reaction.key);
    },
    onClick: handleOnClick
  }, {
    shouldPreventDefault: true,
    shouldStopPropagation: true
  });
  return import_react25.default.createElement(
    TooltipWrapper,
    { className: "sendbird-emoji-reactions__reaction-badge", hoverTooltip: showHoverTooltip ? import_react25.default.createElement(Tooltip, null, getEmojiTooltipString(reaction, userId, memberNicknamesMap, stringSet)) : import_react25.default.createElement(import_react25.default.Fragment, null) },
    import_react25.default.createElement(
      "div",
      __assign({}, isMobile ? longPress : { onClick: handleOnClick }),
      import_react25.default.createElement(
        ReactionBadge,
        { count: reaction.userIds.length, selected: reactedByMe },
        import_react25.default.createElement(ImageRenderer, { circle: true, url: ((_b2 = emojisMap.get(reaction === null || reaction === void 0 ? void 0 : reaction.key)) === null || _b2 === void 0 ? void 0 : _b2.url) || "", width: "20px", height: "20px", defaultComponent: import_react25.default.createElement(Icon, { width: "20px", height: "20px", type: IconTypes.QUESTION }) })
      )
    )
  );
}
var AddReactionBadgeItem = function(_a2) {
  var onClick = _a2.onClick;
  var onlyClick = useLongPress({
    onLongPress: function() {
    },
    onClick
  }, {
    shouldPreventDefault: true,
    shouldStopPropagation: true
  });
  return import_react25.default.createElement(
    "div",
    __assign({ className: "sendbird-emoji-reactions__add-reaction-badge", "data-testid": "sendbird-emoji-reactions__add-reaction-badge" }, onlyClick),
    import_react25.default.createElement(
      ReactionBadge,
      { isAdd: true },
      import_react25.default.createElement(Icon, { type: IconTypes.EMOJI_MORE, fillColor: IconColors.ON_BACKGROUND_3, width: "20px", height: "20px" })
    )
  );
};
var MobileEmojisBottomSheet = function(_a2) {
  var userId = _a2.userId, message = _a2.message, emojiContainer = _a2.emojiContainer, hideMenu = _a2.hideMenu, toggleReaction = _a2.toggleReaction;
  var emojiAllList = (0, import_react25.useMemo)(function() {
    return getEmojiListAll(emojiContainer);
  }, [emojiContainer]);
  return import_react25.default.createElement(
    BottomSheet,
    { onBackdropClick: hideMenu },
    import_react25.default.createElement("div", { className: "sendbird-message__bottomsheet sendbird-message__emojis-bottomsheet" }, emojiAllList.map(function(emoji) {
      var _a3, _b2, _c, _d;
      var isReacted = (_d = (_c = (_b2 = (_a3 = message === null || message === void 0 ? void 0 : message.reactions) === null || _a3 === void 0 ? void 0 : _a3.find(function(reaction) {
        return reaction.key === emoji.key;
      })) === null || _b2 === void 0 ? void 0 : _b2.userIds) === null || _c === void 0 ? void 0 : _c.some(function(reactorId) {
        return reactorId === userId;
      })) !== null && _d !== void 0 ? _d : false;
      return import_react25.default.createElement(
        ReactionButton,
        { key: emoji.key, width: "44px", height: "44px", selected: isReacted, onClick: function(e2) {
          e2 === null || e2 === void 0 ? void 0 : e2.stopPropagation();
          toggleReaction === null || toggleReaction === void 0 ? void 0 : toggleReaction(message, emoji.key, isReacted);
          hideMenu();
        }, testID: "ui_mobile_emoji_reactions_menu_".concat(emoji.key) },
        import_react25.default.createElement(ImageRenderer, { url: emoji.url, width: "38px", height: "38px", placeHolder: function(_a4) {
          var style = _a4.style;
          return import_react25.default.createElement(
            "div",
            { style },
            import_react25.default.createElement(Icon, { type: IconTypes.QUESTION, fillColor: IconColors.ON_BACKGROUND_3, width: "28px", height: "28px" })
          );
        } })
      );
    }))
  );
};
var EmojiReactions = function(_a2) {
  var _b2, _c, _d, _e, _f;
  var _g = _a2.className, className = _g === void 0 ? "" : _g, userId = _a2.userId, message = _a2.message, channel = _a2.channel, emojiContainer = _a2.emojiContainer, memberNicknamesMap = _a2.memberNicknamesMap, _h = _a2.spaceFromTrigger, spaceFromTrigger = _h === void 0 ? { x: 0, y: 0 } : _h, _j = _a2.isByMe, isByMe = _j === void 0 ? false : _j, toggleReaction = _a2.toggleReaction, onPressUserProfile = _a2.onPressUserProfile, filterEmojiCategoryIds = _a2.filterEmojiCategoryIds;
  var showTheReactedMembers = false;
  try {
    var config = useSendbird().state.config;
    showTheReactedMembers = channel ? getIsReactionEnabled({
      channel,
      config
    }) : false;
  } catch (err) {
  }
  var isMobile = useMediaQueryContext().isMobile;
  var addReactionRef = (0, import_react25.useRef)(null);
  var _k = (0, import_react25.useState)(false), showEmojiList = _k[0], setShowEmojiList = _k[1];
  var _l = (0, import_react25.useState)(""), selectedEmojiKey = _l[0], setSelectedEmojiKey = _l[1];
  var emojisMap = getEmojiMapAll(emojiContainer);
  var filteredEmojis = (0, import_react25.useMemo)(function() {
    return getEmojiListByCategoryIds(emojiContainer, filterEmojiCategoryIds === null || filterEmojiCategoryIds === void 0 ? void 0 : filterEmojiCategoryIds(message));
  }, [emojiContainer, filterEmojiCategoryIds]);
  var showAddReactionBadge = ((_c = (_b2 = message.reactions) === null || _b2 === void 0 ? void 0 : _b2.length) !== null && _c !== void 0 ? _c : 0) < emojisMap.size;
  return import_react25.default.createElement(
    "div",
    { className: getClassName([
      className,
      "sendbird-emoji-reactions",
      isByMe ? "outgoing" : "incoming"
    ]) },
    ((_e = (_d = message.reactions) === null || _d === void 0 ? void 0 : _d.length) !== null && _e !== void 0 ? _e : 0) > 0 && ((_f = message.reactions) === null || _f === void 0 ? void 0 : _f.map(function(reaction) {
      return import_react25.default.createElement(ReactionItem, { key: reaction === null || reaction === void 0 ? void 0 : reaction.key, reaction, memberNicknamesMap, setEmojiKey: setSelectedEmojiKey, toggleReaction, emojisMap, channel, message, isFiltered: getEmojiListByCategoryIds(emojiContainer, filterEmojiCategoryIds === null || filterEmojiCategoryIds === void 0 ? void 0 : filterEmojiCategoryIds(message)).every(function(elem) {
        return elem.key !== (reaction === null || reaction === void 0 ? void 0 : reaction.key);
      }) });
    })),
    !isMobile && showAddReactionBadge && import_react25.default.createElement(ContextMenu, { menuTrigger: function(toggleDropdown) {
      return import_react25.default.createElement(
        ReactionBadge,
        { className: "sendbird-emoji-reactions__add-reaction-badge", testID: "sendbird-emoji-reactions__add-reaction-badge", ref: addReactionRef, isAdd: true, onClick: function(e2) {
          var _a3;
          toggleDropdown();
          (_a3 = e2 === null || e2 === void 0 ? void 0 : e2.stopPropagation) === null || _a3 === void 0 ? void 0 : _a3.call(e2);
        } },
        import_react25.default.createElement(Icon, { type: IconTypes.EMOJI_MORE, fillColor: IconColors.ON_BACKGROUND_3, width: "20px", height: "20px" })
      );
    }, menuItems: function(closeDropdown) {
      if (filteredEmojis.length === 0)
        return null;
      return import_react25.default.createElement(EmojiListItems, { parentRef: addReactionRef, parentContainRef: addReactionRef, closeDropdown, spaceFromTrigger }, getEmojiListByCategoryIds(emojiContainer, filterEmojiCategoryIds === null || filterEmojiCategoryIds === void 0 ? void 0 : filterEmojiCategoryIds(message)).map(function(emoji) {
        var _a3, _b3, _c2;
        var isReacted = ((_c2 = (_b3 = (_a3 = message === null || message === void 0 ? void 0 : message.reactions) === null || _a3 === void 0 ? void 0 : _a3.find(function(reaction) {
          return reaction.key === emoji.key;
        })) === null || _b3 === void 0 ? void 0 : _b3.userIds) === null || _c2 === void 0 ? void 0 : _c2.some(function(reactorId) {
          return reactorId === userId;
        })) || false;
        return import_react25.default.createElement(
          ReactionButton,
          { key: emoji.key, width: "36px", height: "36px", selected: isReacted, onClick: function(e2) {
            closeDropdown();
            toggleReaction === null || toggleReaction === void 0 ? void 0 : toggleReaction(message, emoji.key, isReacted);
            e2 === null || e2 === void 0 ? void 0 : e2.stopPropagation();
          }, testID: "ui_emoji_reactions_menu_".concat(emoji.key) },
          import_react25.default.createElement(ImageRenderer, { url: (emoji === null || emoji === void 0 ? void 0 : emoji.url) || "", width: "28px", height: "28px", placeHolder: function(_a4) {
            var style = _a4.style;
            return import_react25.default.createElement(
              "div",
              { style },
              import_react25.default.createElement(Icon, { type: IconTypes.QUESTION, fillColor: IconColors.ON_BACKGROUND_3, width: "28px", height: "28px" })
            );
          } })
        );
      }));
    } }),
    isMobile && showAddReactionBadge && import_react25.default.createElement(AddReactionBadgeItem, { onClick: function() {
      setShowEmojiList(true);
    } }),
    isMobile && showEmojiList && import_react25.default.createElement(MobileEmojisBottomSheet, { userId, message, emojiContainer, hideMenu: function() {
      setShowEmojiList(false);
    }, toggleReaction }),
    isMobile && selectedEmojiKey && channel !== null && showTheReactedMembers && import_react25.default.createElement(ReactedMembersBottomSheet, { message, channel, emojiKey: selectedEmojiKey, hideMenu: function() {
      setSelectedEmojiKey("");
    }, emojiContainer, onPressUserProfileHandler: onPressUserProfile })
  );
};

// node_modules/@sendbird/uikit-react/ui/AdminMessage.js
var import_react26 = __toESM(require_react(), 1);
function AdminMessage(_a2) {
  var _b2;
  var _c = _a2.className, className = _c === void 0 ? "" : _c, message = _a2.message;
  if (!((message === null || message === void 0 ? void 0 : message.isAdminMessage) || (message === null || message === void 0 ? void 0 : message.messageType)) || !((_b2 = message === null || message === void 0 ? void 0 : message.isAdminMessage) === null || _b2 === void 0 ? void 0 : _b2.call(message)) || (message === null || message === void 0 ? void 0 : message.messageType) !== "admin") {
    return null;
  }
  return import_react26.default.createElement(
    "div",
    { className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), [
      "sendbird-admin-message"
    ], false).join(" ") },
    import_react26.default.createElement(Label, { className: "sendbird-admin-message__text", type: LabelTypography.CAPTION_2, color: LabelColors.ONBACKGROUND_2 }, message === null || message === void 0 ? void 0 : message.message)
  );
}

// node_modules/@sendbird/uikit-react/ui/QuoteMessage.js
var import_react27 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-COu2UBrG.js
function getMessageFirstFileType(message) {
  return K(message).when(isFileMessage, function() {
    var _a2;
    return (_a2 = message === null || message === void 0 ? void 0 : message.type) !== null && _a2 !== void 0 ? _a2 : "";
  }).when(isMultipleFilesMessage, function() {
    var _a2, _b2;
    return (_b2 = (_a2 = getFirstFileInfo(message)) === null || _a2 === void 0 ? void 0 : _a2.mimeType) !== null && _b2 !== void 0 ? _b2 : "";
  }).otherwise(function() {
    return "";
  });
}
function getFirstFileInfo(message) {
  var fileInfoList = message.fileInfoList;
  return fileInfoList.length > 0 ? fileInfoList[0] : null;
}
function getMessageFirstFileName(message) {
  return K(message).when(isFileMessage, function() {
    var _a2;
    return (_a2 = message === null || message === void 0 ? void 0 : message.name) !== null && _a2 !== void 0 ? _a2 : "";
  }).when(isMultipleFilesMessage, function() {
    var _a2, _b2;
    return (_b2 = (_a2 = getFirstFileInfo(message)) === null || _a2 === void 0 ? void 0 : _a2.fileName) !== null && _b2 !== void 0 ? _b2 : "";
  }).otherwise(function() {
    return "";
  });
}
function getMessageFirstFileUrl(message) {
  return K(message).when(isFileMessage, function() {
    var _a2;
    return (_a2 = message === null || message === void 0 ? void 0 : message.url) !== null && _a2 !== void 0 ? _a2 : "";
  }).when(isMultipleFilesMessage, function() {
    var _a2, _b2;
    return (_b2 = (_a2 = getFirstFileInfo(message)) === null || _a2 === void 0 ? void 0 : _a2.url) !== null && _b2 !== void 0 ? _b2 : "";
  }).otherwise(function() {
    return "";
  });
}
function getMessageFirstFileThumbnails(message) {
  return K(message).when(isFileMessage, function() {
    return message.thumbnails;
  }).when(isMultipleFilesMessage, function() {
    var _a2, _b2;
    return (_b2 = (_a2 = getFirstFileInfo(message)) === null || _a2 === void 0 ? void 0 : _a2.thumbnails) !== null && _b2 !== void 0 ? _b2 : [];
  }).otherwise(function() {
    return [];
  });
}
function getMessageFirstFileThumbnailUrl(message) {
  var thumbnails = getMessageFirstFileThumbnails(message);
  return thumbnails && thumbnails.length > 0 ? thumbnails[0].url : "";
}

// node_modules/@sendbird/uikit-react/ui/QuoteMessage.js
function QuoteMessage(_a2) {
  var _b2;
  var _c, _d, _e, _f, _g, _h;
  var message = _a2.message, _j = _a2.userId, userId = _j === void 0 ? "" : _j, _k = _a2.isByMe, isByMe = _k === void 0 ? false : _k, _l = _a2.className, className = _l === void 0 ? "" : _l, _m = _a2.isUnavailable, isUnavailable = _m === void 0 ? false : _m, onClick = _a2.onClick;
  var stringSet = (0, import_react27.useContext)(LocalizationContext).stringSet;
  var parentMessage = message.parentMessage;
  var parentMessageSender = parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.sender;
  var parentMessageSenderNickname = userId === (parentMessageSender === null || parentMessageSender === void 0 ? void 0 : parentMessageSender.userId) ? stringSet.QUOTED_MESSAGE__CURRENT_USER : parentMessageSender === null || parentMessageSender === void 0 ? void 0 : parentMessageSender.nickname;
  var parentMessageUrl = getMessageFirstFileUrl(parentMessage);
  var parentMessageType = getMessageFirstFileType(parentMessage);
  var currentMessageSenderNickname = userId === ((_c = message === null || message === void 0 ? void 0 : message.sender) === null || _c === void 0 ? void 0 : _c.userId) ? stringSet.QUOTED_MESSAGE__CURRENT_USER : (_d = message === null || message === void 0 ? void 0 : message.sender) === null || _d === void 0 ? void 0 : _d.nickname;
  var _o = (0, import_react27.useState)(false), isThumbnailLoaded = _o[0], setThumbnailLoaded = _o[1];
  var uikitFileTypes = getUIKitFileTypes();
  var splitFileName = (_f = (_e = getMessageFirstFileName(parentMessage)) === null || _e === void 0 ? void 0 : _e.split("/")) !== null && _f !== void 0 ? _f : parentMessageUrl.split("/");
  return import_react27.default.createElement(
    "div",
    { className: getClassName([className, "sendbird-quote-message", isByMe ? "outgoing" : "incoming", isUnavailable ? "unavailable" : ""]), key: parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.messageId, onClick: function() {
      if (!isUnavailable && onClick) {
        onClick();
      }
    }, onTouchEnd: function() {
      if (!isUnavailable && onClick) {
        onClick();
      }
    } },
    import_react27.default.createElement(
      "div",
      { className: "sendbird-quote-message__replied-to" },
      import_react27.default.createElement(Icon, { className: "sendbird-quote-message__replied-to__icon", type: IconTypes.REPLY, fillColor: IconColors.ON_BACKGROUND_3, width: "12px", height: "12px" }),
      import_react27.default.createElement(
        Label,
        { className: "sendbird-quote-message__replied-to__text", testID: "sendbird-quote-message__replied-to__text", type: LabelTypography.CAPTION_2, color: LabelColors.ONBACKGROUND_3 },
        import_react27.default.createElement("span", { className: "sendbird-quote-message__replied-to__text__nickname" }, currentMessageSenderNickname),
        import_react27.default.createElement("span", { className: "sendbird-quote-message__replied-to__text__text" }, stringSet.QUOTED_MESSAGE__REPLIED_TO),
        import_react27.default.createElement("span", { className: "sendbird-quote-message__replied-to__text__nickname" }, parentMessageSenderNickname)
      )
    ),
    import_react27.default.createElement(
      "div",
      { className: "sendbird-quote-message__replied-message" },
      isUnavailable && import_react27.default.createElement(
        "div",
        { className: "sendbird-quote-message__replied-message__text-message" },
        import_react27.default.createElement(Label, { className: "sendbird-quote-message__replied-message__text-message__word", testID: "sendbird-quote-message__replied-message__text-message__word", type: LabelTypography.BODY_2, color: LabelColors.ONBACKGROUND_1 }, stringSet.QUOTED_MESSAGE__UNAVAILABLE)
      ),
      isUserMessage(parentMessage) && ((_g = parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.message) === null || _g === void 0 ? void 0 : _g.length) > 0 && !isUnavailable && import_react27.default.createElement(
        "div",
        { className: "sendbird-quote-message__replied-message__text-message" },
        import_react27.default.createElement(Label, { className: "sendbird-quote-message__replied-message__text-message__word", testID: "sendbird-quote-message__replied-message__text-message__word", type: LabelTypography.BODY_2, color: LabelColors.ONBACKGROUND_1 }, parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.message)
      ),
      isVoiceMessage(parentMessage) && parentMessageUrl && !isUnavailable && import_react27.default.createElement(
        "div",
        { className: "sendbird-quote-message__replied-message__text-message" },
        import_react27.default.createElement(Label, { className: "sendbird-quote-message__replied-message__text-message__word", testID: "sendbird-quote-message__replied-message__text-message__word", type: LabelTypography.BODY_2, color: LabelColors.ONBACKGROUND_1 }, stringSet.VOICE_MESSAGE)
      ),
      (isThumbnailMessage(parentMessage) || isMultipleFilesMessage(parentMessage)) && parentMessageUrl && !isUnavailable && import_react27.default.createElement(
        "div",
        { className: "sendbird-quote-message__replied-message__thumbnail-message" },
        import_react27.default.createElement(ImageRenderer, { className: "sendbird-quote-message__replied-message__thumbnail-message__image", url: parentMessageUrl, alt: parentMessageType, width: "144px", height: "108px", onLoad: function() {
          return setThumbnailLoaded(true);
        }, defaultComponent: import_react27.default.createElement(
          "div",
          { className: "sendbird-quote-message__replied-message__thumbnail-message__placeholder" },
          import_react27.default.createElement(
            "div",
            { className: "sendbird-quote-message__replied-message__thumbnail-message__placeholder__icon" },
            import_react27.default.createElement(Icon, { type: isVideo(parentMessageType) ? IconTypes.PLAY : IconTypes.PHOTO, fillColor: IconColors.ON_BACKGROUND_2, width: "22px", height: "22px" })
          )
        ) }),
        isVideo(parentMessageType) && !(((_h = parentMessage === null || parentMessage === void 0 ? void 0 : parentMessage.thumbnails) === null || _h === void 0 ? void 0 : _h.length) > 0) && import_react27.default.createElement(
          import_react27.default.Fragment,
          null,
          import_react27.default.createElement(
            "video",
            { className: "sendbird-quote-message__replied-message__thumbnail-message__video" },
            import_react27.default.createElement("source", { src: parentMessageUrl, type: parentMessageType })
          ),
          import_react27.default.createElement(
            "div",
            { className: "sendbird-quote-message__replied-message__thumbnail-message__cover" },
            import_react27.default.createElement(
              "div",
              { className: "sendbird-quote-message__replied-message__thumbnail-message__cover__icon" },
              import_react27.default.createElement(Icon, { type: IconTypes.PLAY, fillColor: IconColors.ON_BACKGROUND_2, width: "14px", height: "14px" })
            )
          )
        ),
        isThumbnailLoaded && isGif(parentMessageType) && import_react27.default.createElement(
          "div",
          { className: "sendbird-quote-message__replied-message__thumbnail-message__cover" },
          import_react27.default.createElement(
            "div",
            { className: "sendbird-quote-message__replied-message__thumbnail-message__cover__icon" },
            import_react27.default.createElement(Icon, { type: IconTypes.GIF, fillColor: IconColors.THUMBNAIL_ICON, width: "14px", height: "14px" })
          )
        )
      ),
      getUIKitMessageType(parentMessage) === UIKitMessageTypes.FILE && parentMessageUrl && !isUnavailable && import_react27.default.createElement(
        "div",
        { className: "sendbird-quote-message__replied-message__file-message" },
        import_react27.default.createElement(Icon, { className: "sendbird-quote-message__replied-message__file-message__type-icon", type: (_b2 = {}, _b2[uikitFileTypes.IMAGE] = IconTypes.PHOTO, _b2[uikitFileTypes.VIDEO] = IconTypes.PLAY, _b2[uikitFileTypes.AUDIO] = IconTypes.FILE_AUDIO, _b2[uikitFileTypes.GIF] = IconTypes.GIF, _b2[uikitFileTypes.OTHERS] = IconTypes.FILE_DOCUMENT, _b2)[getUIKitFileType(parentMessageType)], fillColor: IconColors.ON_BACKGROUND_3, width: "16px", height: "16px" }),
        import_react27.default.createElement(Label, { className: "sendbird-quote-message__replied-message__file-message__file-name", type: LabelTypography.BODY_2, color: LabelColors.ONBACKGROUND_3 }, truncateString(splitFileName[splitFileName.length - 1]))
      )
    )
  );
}

// node_modules/@sendbird/uikit-react/ui/MobileMenu.js
var import_react28 = __toESM(require_react(), 1);
var import_react_dom5 = __toESM(require_react_dom(), 1);
var CopyMenuItem$1 = function(props) {
  var _a2;
  var stringSet = useLocalization().stringSet;
  var _b2 = useMessageMenuContext(), message = _b2.message, hideMenu = _b2.hideMenu;
  return import_react28.default.createElement(MenuItem$1, __assign({}, props, { onClick: function(e2) {
    var _a3;
    if (isUserMessage(message))
      copyToClipboard(message.message);
    hideMenu();
    (_a3 = props.onClick) === null || _a3 === void 0 ? void 0 : _a3.call(props, e2);
  } }), (_a2 = props.children) !== null && _a2 !== void 0 ? _a2 : import_react28.default.createElement(
    import_react28.default.Fragment,
    null,
    import_react28.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__COPY),
    import_react28.default.createElement(Icon, { type: IconTypes.COPY, fillColor: IconColors.PRIMARY, width: "24px", height: "24px" })
  ));
};
var ReplyMenuItem$1 = function(props) {
  var _a2, _b2, _c;
  var stringSet = useLocalization().stringSet;
  var _d = useMessageMenuContext(), message = _d.message, hideMenu = _d.hideMenu, setQuoteMessage = _d.setQuoteMessage;
  return import_react28.default.createElement(MenuItem$1, __assign({}, props, { disabled: message.parentMessageId > 0, onClick: function(e2) {
    var _a3;
    setQuoteMessage(message);
    hideMenu();
    (_a3 = props.onClick) === null || _a3 === void 0 ? void 0 : _a3.call(props, e2);
  } }), (_a2 = props.children) !== null && _a2 !== void 0 ? _a2 : import_react28.default.createElement(
    import_react28.default.Fragment,
    null,
    import_react28.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: ((_b2 = message.parentMessageId) !== null && _b2 !== void 0 ? _b2 : 0) > 0 ? LabelColors.ONBACKGROUND_4 : LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__REPLY),
    import_react28.default.createElement(Icon, { type: IconTypes.REPLY, fillColor: ((_c = message.parentMessageId) !== null && _c !== void 0 ? _c : 0) > 0 ? IconColors.ON_BACKGROUND_4 : IconColors.PRIMARY, width: "24px", height: "24px" })
  ));
};
var ThreadMenuItem$1 = function(props) {
  var _a2;
  var stringSet = useLocalization().stringSet;
  var _b2 = useMessageMenuContext(), message = _b2.message, hideMenu = _b2.hideMenu, onReplyInThread = _b2.onReplyInThread;
  return import_react28.default.createElement(MenuItem$1, __assign({}, props, { onClick: function(e2) {
    var _a3;
    onReplyInThread({ message });
    hideMenu();
    (_a3 = props.onClick) === null || _a3 === void 0 ? void 0 : _a3.call(props, e2);
  } }), (_a2 = props.children) !== null && _a2 !== void 0 ? _a2 : import_react28.default.createElement(
    import_react28.default.Fragment,
    null,
    import_react28.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__THREAD),
    import_react28.default.createElement(Icon, { type: IconTypes.THREAD, fillColor: IconColors.PRIMARY, width: "24px", height: "24px" })
  ));
};
var EditMenuItem$1 = function(props) {
  var _a2;
  var stringSet = useLocalization().stringSet;
  var _b2 = useMessageMenuContext(), hideMenu = _b2.hideMenu, showEdit = _b2.showEdit, isOnline = _b2.isOnline;
  return import_react28.default.createElement(MenuItem$1, __assign({}, props, { onClick: function(e2) {
    var _a3;
    if (isOnline) {
      showEdit(true);
      hideMenu();
      (_a3 = props.onClick) === null || _a3 === void 0 ? void 0 : _a3.call(props, e2);
    }
  } }), (_a2 = props.children) !== null && _a2 !== void 0 ? _a2 : import_react28.default.createElement(
    import_react28.default.Fragment,
    null,
    import_react28.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__EDIT),
    import_react28.default.createElement(Icon, { type: IconTypes.EDIT, fillColor: IconColors.PRIMARY, width: "24px", height: "24px" })
  ));
};
var ResendMenuItem$1 = function(props) {
  var _a2;
  var stringSet = useLocalization().stringSet;
  var _b2 = useMessageMenuContext(), message = _b2.message, hideMenu = _b2.hideMenu, resendMessage = _b2.resendMessage, isOnline = _b2.isOnline;
  return import_react28.default.createElement(MenuItem$1, __assign({}, props, { onClick: function(e2) {
    var _a3;
    if (isOnline) {
      resendMessage(message);
      hideMenu();
      (_a3 = props.onClick) === null || _a3 === void 0 ? void 0 : _a3.call(props, e2);
    }
  } }), (_a2 = props.children) !== null && _a2 !== void 0 ? _a2 : import_react28.default.createElement(
    import_react28.default.Fragment,
    null,
    import_react28.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__RESEND),
    import_react28.default.createElement(Icon, { type: IconTypes.REFRESH, fillColor: IconColors.PRIMARY, width: "24px", height: "24px" })
  ));
};
var DeleteMenuItem$1 = function(props) {
  var _a2, _b2, _c;
  var stringSet = useLocalization().stringSet;
  var _d = useMessageMenuContext(), message = _d.message, hideMenu = _d.hideMenu, deleteMessage = _d.deleteMessage, showRemove = _d.showRemove, isOnline = _d.isOnline, disableDeleteMessage = _d.disableDeleteMessage;
  return import_react28.default.createElement(MenuItem$1, __assign({}, props, { disabled: typeof disableDeleteMessage === "boolean" ? disableDeleteMessage : ((_b2 = (_a2 = message.threadInfo) === null || _a2 === void 0 ? void 0 : _a2.replyCount) !== null && _b2 !== void 0 ? _b2 : 0) > 0, onClick: function(e2) {
    var _a3;
    if (isFailedMessage(message)) {
      deleteMessage(message);
    } else if (isOnline) {
      showRemove(true);
      hideMenu();
      (_a3 = props.onClick) === null || _a3 === void 0 ? void 0 : _a3.call(props, e2);
    }
  } }), (_c = props.children) !== null && _c !== void 0 ? _c : import_react28.default.createElement(
    import_react28.default.Fragment,
    null,
    import_react28.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: disableDeleteMessage ? LabelColors.ONBACKGROUND_4 : LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__DELETE),
    import_react28.default.createElement(Icon, { type: IconTypes.DELETE, fillColor: IconColors.PRIMARY, width: "24px", height: "24px" })
  ));
};
var DownloadMenuItem$1 = function(props) {
  var _a2;
  var stringSet = useLocalization().stringSet;
  var _b2 = useMessageMenuContext(), hideMenu = _b2.hideMenu, message = _b2.message, onDownloadClick = _b2.onDownloadClick;
  var url = message.url;
  return import_react28.default.createElement(MenuItem$1, __assign({}, props, { onClick: function() {
    hideMenu();
  } }), (_a2 = props.children) !== null && _a2 !== void 0 ? _a2 : import_react28.default.createElement(
    "a",
    { className: "sendbird-message__contextmenu--hyperlink", rel: "noopener noreferrer", href: url, target: "_blank", onClick: onDownloadClick },
    import_react28.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__SAVE),
    import_react28.default.createElement(Icon, { type: IconTypes.DOWNLOAD, fillColor: IconColors.PRIMARY, width: "24px", height: "24px" })
  ));
};
var MobileContextMenu = function(props) {
  var _a2, _b2, _c, _d;
  var channel = props.channel, message = props.message, replyType = props.replyType, userId = props.userId, resendMessage = props.resendMessage, showEdit = props.showEdit, showRemove = props.showRemove, deleteMenuState = props.deleteMenuState, deleteMessage = props.deleteMessage, setQuoteMessage = props.setQuoteMessage, parentRef = props.parentRef, onReplyInThread = props.onReplyInThread, _e = props.isOpenedFromThread, isOpenedFromThread = _e === void 0 ? false : _e, _f = props.onDownloadClick, onDownloadClick = _f === void 0 ? null : _f, renderMenuItems = props.renderMenuItems, hideMobileMenu = props.hideMenu;
  var isByMe = ((_a2 = message === null || message === void 0 ? void 0 : message.sender) === null || _a2 === void 0 ? void 0 : _a2.userId) === userId;
  var isOnline = useSendbird().state.config.isOnline;
  var showMenuItemCopy2 = isUserMessage(message);
  var showMenuItemEdit2 = isUserMessage(message) && isSentMessage(message) && isByMe;
  var showMenuItemResend2 = isFailedMessage(message) && (message === null || message === void 0 ? void 0 : message.isResendable) && isByMe;
  var showMenuItemDelete2 = !isPendingMessage(message) && isByMe;
  var showMenuItemDeleteByState = isByMe && (deleteMenuState === void 0 || deleteMenuState !== "HIDE");
  var showMenuItemDeleteFinal = showMenuItemDeleteByState && showMenuItemDelete2;
  var showMenuItemDownload = !isPendingMessage(message) && isFileMessage(message) && !(isVoiceMessage(message) && (channel === null || channel === void 0 ? void 0 : channel.isSuper) || (channel === null || channel === void 0 ? void 0 : channel.isBroadcast));
  var showMenuItemReply2 = replyType === "QUOTE_REPLY" && !isFailedMessage(message) && !isPendingMessage(message) && (channel === null || channel === void 0 ? void 0 : channel.isGroupChannel());
  var showMenuItemThread2 = replyType === "THREAD" && !isOpenedFromThread && !isFailedMessage(message) && !isPendingMessage(message) && !isThreadMessage(message) && (channel === null || channel === void 0 ? void 0 : channel.isGroupChannel());
  var disableDeleteMessage = deleteMenuState !== void 0 && deleteMenuState === "DISABLE" || ((_c = (_b2 = message === null || message === void 0 ? void 0 : message.threadInfo) === null || _b2 === void 0 ? void 0 : _b2.replyCount) !== null && _c !== void 0 ? _c : 0) > 0;
  var contextValue = {
    message,
    hideMenu: hideMobileMenu,
    setQuoteMessage,
    onReplyInThread,
    onMoveToParentMessage: noop,
    showEdit,
    showRemove,
    deleteMessage,
    resendMessage,
    isOnline,
    disableDeleteMessage,
    triggerRef: parentRef,
    containerRef: parentRef,
    onDownloadClick
  };
  return import_react28.default.createElement(
    MessageMenuProvider,
    { value: contextValue },
    import_react28.default.createElement(MenuItems, { className: "sendbird-message__mobile-context-menu", parentRef, parentContainRef: parentRef, closeDropdown: hideMobileMenu }, (_d = renderMenuItems === null || renderMenuItems === void 0 ? void 0 : renderMenuItems({
      items: {
        CopyMenuItem: CopyMenuItem$1,
        ReplyMenuItem: ReplyMenuItem$1,
        ThreadMenuItem: ThreadMenuItem$1,
        EditMenuItem: EditMenuItem$1,
        ResendMenuItem: ResendMenuItem$1,
        DeleteMenuItem: DeleteMenuItem$1
      }
    })) !== null && _d !== void 0 ? _d : import_react28.default.createElement(
      import_react28.default.Fragment,
      null,
      showMenuItemCopy2 && import_react28.default.createElement(CopyMenuItem$1, null),
      showMenuItemReply2 && import_react28.default.createElement(ReplyMenuItem$1, null),
      showMenuItemThread2 && import_react28.default.createElement(ThreadMenuItem$1, null),
      showMenuItemEdit2 && import_react28.default.createElement(EditMenuItem$1, null),
      showMenuItemResend2 && import_react28.default.createElement(ResendMenuItem$1, null),
      showMenuItemDeleteFinal && import_react28.default.createElement(DeleteMenuItem$1, null),
      showMenuItemDownload && import_react28.default.createElement(DownloadMenuItem$1, null)
    ))
  );
};
var CopyMenuItem2 = function(props) {
  var _a2;
  var stringSet = useLocalization().stringSet;
  var _b2 = useMessageMenuContext(), message = _b2.message, hideMenu = _b2.hideMenu;
  return import_react28.default.createElement(BottomSheetMenuItem, __assign({}, props, { onClick: function(e2) {
    var _a3;
    if (isUserMessage(message))
      copyToClipboard(message.message);
    hideMenu();
    (_a3 = props.onClick) === null || _a3 === void 0 ? void 0 : _a3.call(props, e2);
  } }), (_a2 = props.children) !== null && _a2 !== void 0 ? _a2 : import_react28.default.createElement(
    import_react28.default.Fragment,
    null,
    import_react28.default.createElement(Icon, { type: IconTypes.COPY, fillColor: IconColors.PRIMARY, width: "24px", height: "24px" }),
    import_react28.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__COPY)
  ));
};
var EditMenuItem2 = function(props) {
  var _a2;
  var stringSet = useLocalization().stringSet;
  var _b2 = useMessageMenuContext(), hideMenu = _b2.hideMenu, showEdit = _b2.showEdit, isOnline = _b2.isOnline;
  return import_react28.default.createElement(BottomSheetMenuItem, __assign({}, props, { onClick: function(e2) {
    var _a3;
    if (isOnline) {
      showEdit(true);
      hideMenu();
      (_a3 = props.onClick) === null || _a3 === void 0 ? void 0 : _a3.call(props, e2);
    }
  } }), (_a2 = props.children) !== null && _a2 !== void 0 ? _a2 : import_react28.default.createElement(
    import_react28.default.Fragment,
    null,
    import_react28.default.createElement(Icon, { type: IconTypes.EDIT, fillColor: IconColors.PRIMARY, width: "24px", height: "24px" }),
    import_react28.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__EDIT)
  ));
};
var ResendMenuItem2 = function(props) {
  var _a2;
  var stringSet = useLocalization().stringSet;
  var _b2 = useMessageMenuContext(), message = _b2.message, hideMenu = _b2.hideMenu, resendMessage = _b2.resendMessage, isOnline = _b2.isOnline;
  return import_react28.default.createElement(BottomSheetMenuItem, __assign({}, props, { onClick: function(e2) {
    var _a3;
    if (isOnline) {
      resendMessage(message);
      hideMenu();
      (_a3 = props.onClick) === null || _a3 === void 0 ? void 0 : _a3.call(props, e2);
    }
  } }), (_a2 = props.children) !== null && _a2 !== void 0 ? _a2 : import_react28.default.createElement(
    import_react28.default.Fragment,
    null,
    import_react28.default.createElement(Icon, { type: IconTypes.REFRESH, fillColor: IconColors.PRIMARY, width: "24px", height: "24px" }),
    import_react28.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__RESEND)
  ));
};
var ReplyMenuItem2 = function(props) {
  var _a2, _b2, _c;
  var stringSet = useLocalization().stringSet;
  var _d = useMessageMenuContext(), message = _d.message, hideMenu = _d.hideMenu, setQuoteMessage = _d.setQuoteMessage;
  return import_react28.default.createElement(BottomSheetMenuItem, __assign({}, props, { disabled: message.parentMessageId > 0, onClick: function(e2) {
    var _a3;
    setQuoteMessage(message);
    hideMenu();
    (_a3 = props.onClick) === null || _a3 === void 0 ? void 0 : _a3.call(props, e2);
  } }), (_a2 = props.children) !== null && _a2 !== void 0 ? _a2 : import_react28.default.createElement(
    import_react28.default.Fragment,
    null,
    import_react28.default.createElement(Icon, { type: IconTypes.REPLY, fillColor: ((_b2 = message.parentMessageId) !== null && _b2 !== void 0 ? _b2 : 0) > 0 ? IconColors.ON_BACKGROUND_3 : IconColors.PRIMARY, width: "24px", height: "24px" }),
    import_react28.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: ((_c = message.parentMessageId) !== null && _c !== void 0 ? _c : 0) > 0 ? LabelColors.ONBACKGROUND_4 : LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__REPLY)
  ));
};
var ThreadMenuItem2 = function(props) {
  var _a2;
  var stringSet = useLocalization().stringSet;
  var _b2 = useMessageMenuContext(), message = _b2.message, hideMenu = _b2.hideMenu, onReplyInThread = _b2.onReplyInThread;
  return import_react28.default.createElement(BottomSheetMenuItem, __assign({}, props, { onClick: function(e2) {
    var _a3;
    onReplyInThread({ message });
    hideMenu();
    (_a3 = props.onClick) === null || _a3 === void 0 ? void 0 : _a3.call(props, e2);
  } }), (_a2 = props.children) !== null && _a2 !== void 0 ? _a2 : import_react28.default.createElement(
    import_react28.default.Fragment,
    null,
    import_react28.default.createElement(Icon, { type: IconTypes.THREAD, fillColor: IconColors.PRIMARY, width: "24px", height: "24px" }),
    import_react28.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__THREAD)
  ));
};
var DeleteMenuItem2 = function(props) {
  var _a2, _b2, _c;
  var stringSet = useLocalization().stringSet;
  var _d = useMessageMenuContext(), message = _d.message, hideMenu = _d.hideMenu, deleteMessage = _d.deleteMessage, showRemove = _d.showRemove, isOnline = _d.isOnline, disableDeleteMessage = _d.disableDeleteMessage;
  return import_react28.default.createElement(BottomSheetMenuItem, __assign({}, props, { disabled: typeof disableDeleteMessage === "boolean" ? disableDeleteMessage : ((_b2 = (_a2 = message.threadInfo) === null || _a2 === void 0 ? void 0 : _a2.replyCount) !== null && _b2 !== void 0 ? _b2 : 0) > 0, onClick: function(e2) {
    var _a3;
    if (isFailedMessage(message)) {
      deleteMessage(message);
    } else if (isOnline) {
      showRemove(true);
      hideMenu();
      (_a3 = props.onClick) === null || _a3 === void 0 ? void 0 : _a3.call(props, e2);
    }
  } }), (_c = props.children) !== null && _c !== void 0 ? _c : import_react28.default.createElement(
    import_react28.default.Fragment,
    null,
    import_react28.default.createElement(Icon, { type: IconTypes.DELETE, fillColor: IconColors.PRIMARY, width: "24px", height: "24px" }),
    import_react28.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: disableDeleteMessage ? LabelColors.ONBACKGROUND_4 : LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__DELETE)
  ));
};
var DownloadMenuItem = function(props) {
  var _a2;
  var stringSet = useLocalization().stringSet;
  var _b2 = useMessageMenuContext(), hideMenu = _b2.hideMenu, message = _b2.message, onDownloadClick = _b2.onDownloadClick;
  var url = message.url;
  return import_react28.default.createElement(BottomSheetMenuItem, { onClick: function() {
    return hideMenu();
  } }, (_a2 = props.children) !== null && _a2 !== void 0 ? _a2 : import_react28.default.createElement(
    "a",
    { className: "sendbird-message__bottomsheet--hyperlink", rel: "noopener noreferrer", href: url, target: "_blank", onClick: onDownloadClick },
    import_react28.default.createElement(Icon, { type: IconTypes.DOWNLOAD, fillColor: IconColors.PRIMARY, width: "24px", height: "24px" }),
    import_react28.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.MESSAGE_MENU__SAVE)
  ));
};
var EMOJI_SIZE = 38;
var MobileBottomSheet = function(props) {
  var _a2, _b2, _c, _d;
  var hideMenu = props.hideMenu, channel = props.channel, emojiContainer = props.emojiContainer, message = props.message, replyType = props.replyType, userId = props.userId, resendMessage = props.resendMessage, deleteMessage = props.deleteMessage, toggleReaction = props.toggleReaction, _e = props.isReactionEnabled, isReactionEnabled = _e === void 0 ? false : _e, showEdit = props.showEdit, showRemove = props.showRemove, deleteMenuState = props.deleteMenuState, setQuoteMessage = props.setQuoteMessage, onReplyInThread = props.onReplyInThread, _f = props.isOpenedFromThread, isOpenedFromThread = _f === void 0 ? false : _f, onDownloadClick = props.onDownloadClick, renderMenuItems = props.renderMenuItems;
  var isByMe = ((_a2 = message === null || message === void 0 ? void 0 : message.sender) === null || _a2 === void 0 ? void 0 : _a2.userId) === userId;
  var isOnline = useSendbird().state.config.isOnline;
  var showMenuItemCopy2 = isUserMessage(message);
  var showMenuItemEdit2 = isUserMessage(message) && isSentMessage(message) && isByMe;
  var showMenuItemResend2 = isOnline && isFailedMessage(message) && (message === null || message === void 0 ? void 0 : message.isResendable) && isByMe;
  var showMenuItemDelete2 = !isPendingMessage(message) && isByMe;
  var showMenuItemDeleteByState = isByMe && (deleteMenuState === void 0 || deleteMenuState !== "HIDE");
  var showMenuItemDeleteFinal = showMenuItemDeleteByState && showMenuItemDelete2;
  var disableDelete = deleteMenuState !== void 0 && deleteMenuState === "DISABLE" || ((_c = (_b2 = message === null || message === void 0 ? void 0 : message.threadInfo) === null || _b2 === void 0 ? void 0 : _b2.replyCount) !== null && _c !== void 0 ? _c : 0) > 0;
  var showMenuItemDownload = isSentMessage(message) && isFileMessage(message) && !isVoiceMessage(message);
  var showReaction = !isFailedMessage(message) && !isPendingMessage(message) && isReactionEnabled;
  var showMenuItemReply2 = replyType === "QUOTE_REPLY" && !isFailedMessage(message) && !isPendingMessage(message) && ((channel === null || channel === void 0 ? void 0 : channel.isGroupChannel()) && !(channel === null || channel === void 0 ? void 0 : channel.isBroadcast));
  var showMenuItemThread2 = replyType === "THREAD" && !isOpenedFromThread && !isFailedMessage(message) && !isPendingMessage(message) && !isThreadMessage(message) && ((channel === null || channel === void 0 ? void 0 : channel.isGroupChannel()) && !(channel === null || channel === void 0 ? void 0 : channel.isBroadcast));
  var maxEmojisPerRow = Math.floor(window.innerWidth / EMOJI_SIZE) - 1;
  var _g = (0, import_react28.useState)(false), showEmojisOnly = _g[0], setShowEmojisOnly = _g[1];
  var emojis = emojiContainer && getEmojiListAll(emojiContainer);
  var visibleEmojis = showEmojisOnly ? emojis : emojis === null || emojis === void 0 ? void 0 : emojis.slice(0, maxEmojisPerRow);
  var canShowMoreEmojis = emojis && emojis.length > maxEmojisPerRow;
  var contextValue = {
    message,
    hideMenu,
    setQuoteMessage,
    onReplyInThread,
    onMoveToParentMessage: function() {
    },
    showEdit,
    showRemove,
    deleteMessage,
    resendMessage,
    isOnline,
    disableDeleteMessage: disableDelete,
    triggerRef: null,
    containerRef: null,
    onDownloadClick
  };
  return import_react28.default.createElement(
    MessageMenuProvider,
    { value: contextValue },
    import_react28.default.createElement(
      BottomSheet,
      { onBackdropClick: hideMenu },
      import_react28.default.createElement(
        "div",
        { className: "sendbird-message__bottomsheet" },
        showReaction && import_react28.default.createElement(
          "div",
          { className: "sendbird-message__bottomsheet-reactions" },
          import_react28.default.createElement(
            "ul",
            { className: "sendbird-message__bottomsheet-reaction-bar" },
            import_react28.default.createElement(
              "div",
              { className: classnames("sendbird-message__bottomsheet-reaction-bar__row", showEmojisOnly && "sendbird-message__bottomsheet-reaction-bar__all") },
              visibleEmojis.map(function(emoji) {
                var _a3, _b3, _c2;
                var isReacted = (_c2 = (_b3 = (_a3 = message === null || message === void 0 ? void 0 : message.reactions) === null || _a3 === void 0 ? void 0 : _a3.filter(function(reaction) {
                  return reaction.key === emoji.key;
                })[0]) === null || _b3 === void 0 ? void 0 : _b3.userIds) === null || _c2 === void 0 ? void 0 : _c2.some(function(reactorId) {
                  return reactorId === userId;
                });
                return import_react28.default.createElement(
                  ReactionButton,
                  { key: emoji.key, width: "".concat(EMOJI_SIZE, "px"), height: "".concat(EMOJI_SIZE, "px"), selected: isReacted, onClick: function() {
                    hideMenu();
                    toggleReaction === null || toggleReaction === void 0 ? void 0 : toggleReaction(message, emoji.key, isReacted);
                  }, testID: "ui_mobile_emoji_reactions_menu_".concat(emoji.key) },
                  import_react28.default.createElement(ImageRenderer, { url: (emoji === null || emoji === void 0 ? void 0 : emoji.url) || "", width: "28px", height: "28px", placeHolder: function(_a4) {
                    var style = _a4.style;
                    return import_react28.default.createElement(
                      "div",
                      { style },
                      import_react28.default.createElement(Icon, { type: IconTypes.QUESTION, fillColor: IconColors.ON_BACKGROUND_3, width: "28px", height: "28px" })
                    );
                  } })
                );
              }),
              canShowMoreEmojis && !showEmojisOnly && import_react28.default.createElement(
                ReactionButton,
                { key: "emoji_more", width: "38px", height: "38px", onClick: function() {
                  return setShowEmojisOnly(true);
                }, testID: "ui_mobile_emoji_reactions_menu_emojiadd" },
                import_react28.default.createElement(ImageRenderer, { url: "", width: "28px", height: "28px", placeHolder: function(_a3) {
                  var style = _a3.style;
                  return import_react28.default.createElement(
                    "div",
                    { style },
                    import_react28.default.createElement(Icon, { type: IconTypes.EMOJI_MORE, fillColor: IconColors.ON_BACKGROUND_3, width: "28px", height: "28px" })
                  );
                } })
              )
            )
          )
        ),
        !showEmojisOnly && import_react28.default.createElement("div", { className: "sendbird-message__bottomsheet--actions" }, (_d = renderMenuItems === null || renderMenuItems === void 0 ? void 0 : renderMenuItems({
          items: {
            CopyMenuItem: CopyMenuItem2,
            EditMenuItem: EditMenuItem2,
            ResendMenuItem: ResendMenuItem2,
            ReplyMenuItem: ReplyMenuItem2,
            ThreadMenuItem: ThreadMenuItem2,
            DeleteMenuItem: DeleteMenuItem2
          }
        })) !== null && _d !== void 0 ? _d : import_react28.default.createElement(
          import_react28.default.Fragment,
          null,
          showMenuItemCopy2 && import_react28.default.createElement(CopyMenuItem2, null),
          showMenuItemEdit2 && import_react28.default.createElement(EditMenuItem2, null),
          showMenuItemResend2 && import_react28.default.createElement(ResendMenuItem2, null),
          showMenuItemReply2 && import_react28.default.createElement(ReplyMenuItem2, null),
          showMenuItemThread2 && import_react28.default.createElement(ThreadMenuItem2, null),
          showMenuItemDeleteFinal && import_react28.default.createElement(DeleteMenuItem2, null),
          showMenuItemDownload && import_react28.default.createElement(DownloadMenuItem, null)
        ))
      )
    )
  );
};
var MobileMenu = function(props) {
  return import_react28.default.createElement(import_react28.default.Fragment, null, (props === null || props === void 0 ? void 0 : props.isReactionEnabled) ? import_react28.default.createElement(MobileBottomSheet, __assign({}, props)) : import_react28.default.createElement(MobileContextMenu, __assign({}, props)));
};

// node_modules/@sendbird/uikit-react/ui/ThreadReplies.js
var import_react29 = __toESM(require_react(), 1);
function ThreadReplies(_a2, ref) {
  var _b2;
  var className = _a2.className, threadInfo = _a2.threadInfo, onClick = _a2.onClick;
  var _c = threadInfo.mostRepliedUsers, mostRepliedUsers = _c === void 0 ? [] : _c, replyCount = threadInfo.replyCount;
  var stringSet = useLocalization().stringSet;
  return import_react29.default.createElement(
    "div",
    { className: "sendbird-ui-thread-replies ".concat(className), role: "button", onClick: function(e2) {
      onClick === null || onClick === void 0 ? void 0 : onClick(e2);
      e2 === null || e2 === void 0 ? void 0 : e2.stopPropagation();
    }, onKeyDown: function(e2) {
      onClick === null || onClick === void 0 ? void 0 : onClick(e2);
      e2 === null || e2 === void 0 ? void 0 : e2.stopPropagation();
    }, ref },
    import_react29.default.createElement(
      "div",
      { className: "sendbird-ui-thread-replies__user-profiles" },
      mostRepliedUsers.slice(0, 4).map(function(user) {
        return import_react29.default.createElement(Avatar$1, { key: user.userId, className: "sendbird-ui-thread-replies__user-profiles__avatar", src: user === null || user === void 0 ? void 0 : user.profileUrl, alt: "user profile", width: "20px", height: "20px" });
      }),
      (mostRepliedUsers === null || mostRepliedUsers === void 0 ? void 0 : mostRepliedUsers.length) >= 5 && import_react29.default.createElement(
        "div",
        { className: "sendbird-ui-thread-replies__user-profiles__avatar" },
        import_react29.default.createElement(Avatar$1, { className: "sendbird-ui-thread-replies__user-profiles__avatar__image", src: (_b2 = mostRepliedUsers === null || mostRepliedUsers === void 0 ? void 0 : mostRepliedUsers[4]) === null || _b2 === void 0 ? void 0 : _b2.profileUrl, alt: "user profile", width: "20px", height: "20px" }),
        import_react29.default.createElement("div", { className: "sendbird-ui-thread-replies__user-profiles__avatar__cover" }),
        import_react29.default.createElement(
          "div",
          { className: "sendbird-ui-thread-replies__user-profiles__avatar__plus" },
          import_react29.default.createElement(Icon, { type: IconTypes.PLUS, fillColor: IconColors.WHITE, width: "16px", height: "16px" })
        )
      )
    ),
    import_react29.default.createElement(Label, { className: "sendbird-ui-thread-replies__reply-counts", type: LabelTypography.CAPTION_2, color: LabelColors.PRIMARY }, replyCount === 1 ? "".concat(replyCount, " ").concat(stringSet.CHANNEL__THREAD_REPLY) : "".concat(replyCount > 99 ? stringSet.CHANNEL__THREAD_OVER_MAX : replyCount, " ").concat(stringSet.CHANNEL__THREAD_REPLIES)),
    import_react29.default.createElement(Icon, { className: "sendbird-ui-thread-replies__icon", type: IconTypes.CHEVRON_RIGHT, fillColor: IconColors.PRIMARY, width: "16px", height: "16px" })
  );
}
var ThreadReplies$1 = import_react29.default.forwardRef(ThreadReplies);

// node_modules/@sendbird/uikit-react/chunks/bundle-DEVtRtKL.js
var import_react52 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/ui/OGMessageItemBody.js
var import_react33 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-bLHW4VuD.js
var import_react32 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/ui/MentionLabel.js
var import_react30 = __toESM(require_react(), 1);
var import_react_dom6 = __toESM(require_react_dom(), 1);
function MentionLabel(props) {
  var _a2, _b2, _c;
  var mentionTemplate = props.mentionTemplate, mentionedUserId = props.mentionedUserId, mentionedUserNickname = props.mentionedUserNickname, isByMe = props.isByMe;
  var mentionRef = (0, import_react30.useRef)();
  var state = useSendbird().state;
  var userId = (_a2 = state === null || state === void 0 ? void 0 : state.config) === null || _a2 === void 0 ? void 0 : _a2.userId;
  var sdk = (_c = (_b2 = state === null || state === void 0 ? void 0 : state.stores) === null || _b2 === void 0 ? void 0 : _b2.sdkStore) === null || _c === void 0 ? void 0 : _c.sdk;
  var amIBeingMentioned = userId === mentionedUserId;
  var _d = (0, import_react30.useState)(), user = _d[0], setUser = _d[1];
  var fetchUser = (0, import_react30.useCallback)(function(toggleDropdown) {
    if (user || !(sdk === null || sdk === void 0 ? void 0 : sdk.createApplicationUserListQuery)) {
      toggleDropdown();
      return;
    }
    var query = sdk === null || sdk === void 0 ? void 0 : sdk.createApplicationUserListQuery({
      userIdsFilter: [mentionedUserId]
    });
    query.next().then(function(members) {
      if ((members === null || members === void 0 ? void 0 : members.length) > 0) {
        setUser(members[0]);
      }
      toggleDropdown();
    });
  }, [sdk, mentionedUserId]);
  return import_react30.default.createElement(ContextMenu, { menuTrigger: function(toggleDropdown) {
    return import_react30.default.createElement(
      "a",
      { className: classnames("sendbird-word__mention", amIBeingMentioned && "sendbird-word__mention--me"), onClick: function() {
        return fetchUser(toggleDropdown);
      }, ref: mentionRef, "data-userid": mentionedUserId, "data-nickname": mentionedUserNickname, "data-sb-mention": true },
      import_react30.default.createElement(Label, { type: LabelTypography.CAPTION_1, color: isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1 }, "".concat(mentionTemplate).concat(mentionedUserNickname))
    );
  }, menuItems: function(closeDropdown) {
    return import_react30.default.createElement(
      MenuItems,
      {
        /**
        * parentRef: For catching location(x, y) of MenuItems
        * parentContainRef: For toggling more options(menus & reactions)
        */
        parentRef: mentionRef,
        parentContainRef: mentionRef,
        closeDropdown,
        style: { paddingTop: "0px", paddingBottom: "0px" }
      },
      import_react30.default.createElement(UserProfile, { user, onSuccess: closeDropdown, currentUserId: userId })
    );
  } });
}

// node_modules/@sendbird/uikit-react/ui/LinkLabel.js
var import_react31 = __toESM(require_react(), 1);
var http = /https?:\/\//;
function LinkLabel(_a2) {
  var _b2 = _a2.className, className = _b2 === void 0 ? "" : _b2, src = _a2.src, type = _a2.type, color = _a2.color, children = _a2.children;
  var url = http.test(src) ? src : "http://".concat(src);
  return import_react31.default.createElement(
    "a",
    {
      className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), [
        "sendbird-link-label",
        changeColorToClassName(color)
      ], false).join(" "),
      href: url,
      target: "_blank",
      rel: "noopener noreferrer",
      // for mobile
      onTouchEnd: function(e2) {
        e2.preventDefault();
        e2.nativeEvent.stopImmediatePropagation();
        openURL(url);
      }
    },
    import_react31.default.createElement(Label, { className: "sendbird-link-label__label", testID: "sendbird-link-label__label", type, color }, children)
  );
}

// node_modules/@sendbird/uikit-react/chunks/bundle-bLHW4VuD.js
function keyGenerator(createdAt, messageUpdatedAt, index) {
  return "sb-msg_".concat(createdAt, "_").concat(messageUpdatedAt, "_").concat(index);
}
function asSafeURL(url) {
  var safeURL = decodeURIComponent(url);
  try {
    var protocol_1 = new URL(safeURL).protocol;
    if (["https:", "http:"].some(function(it) {
      return it === protocol_1.toLowerCase();
    })) {
      return safeURL;
    } else {
      return "#";
    }
  } catch (error) {
    if (!safeURL.startsWith("http://") && !safeURL.startsWith("https://")) {
      safeURL = "https://" + safeURL;
    }
  }
  return safeURL;
}
function TextFragment(_a2) {
  var tokens = _a2.tokens;
  var messageStore = useMessageContext();
  var message = messageStore === null || messageStore === void 0 ? void 0 : messageStore.message;
  var isByMe = messageStore === null || messageStore === void 0 ? void 0 : messageStore.isByMe;
  var updatedAt = message.updatedAt, createdAt = message.createdAt;
  return import_react32.default.createElement(import_react32.default.Fragment, null, tokens === null || tokens === void 0 ? void 0 : tokens.map(function(token, idx) {
    var key = keyGenerator(createdAt, updatedAt, idx);
    return K(token.type).with(TOKEN_TYPES.markdown, function() {
      var markdownToken = token;
      var groups = markdownToken.groups;
      return import_react32.default.createElement("span", { className: "sendbird-word", key, "data-testid": "sendbird-ui-word" }, K(markdownToken.markdownType).with("bold", function() {
        return import_react32.default.createElement(
          "span",
          { style: { fontWeight: "bold" } },
          import_react32.default.createElement(TextFragment, { tokens: tokenizeMarkdown({ messageText: groups[1] }) })
        );
      }).with("url", function() {
        return import_react32.default.createElement(
          "a",
          { className: isByMe ? "sendbird-label--color-oncontent-1" : "sendbird-label--color-onbackground-1", href: asSafeURL(groups[2]) },
          import_react32.default.createElement(TextFragment, { tokens: tokenizeMarkdown({ messageText: groups[1] }) })
        );
      }).otherwise(function() {
        return import_react32.default.createElement(import_react32.default.Fragment, null);
      }));
    }).with(TOKEN_TYPES.mention, function() {
      return import_react32.default.createElement(
        "span",
        { className: "sendbird-word", key, "data-testid": "sendbird-ui-word" },
        import_react32.default.createElement(MentionLabel, {
          mentionTemplate: USER_MENTION_PREFIX,
          // @ts-ignore
          mentionedUserId: token.userId,
          mentionedUserNickname: token.value,
          isByMe
        })
      );
    }).with(TOKEN_TYPES.url, function() {
      return import_react32.default.createElement(
        "span",
        { className: "sendbird-word", key, "data-testid": "sendbird-ui-word" },
        import_react32.default.createElement(LinkLabel, { src: token.value, type: LabelTypography.BODY_1, color: isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1 }, token.value)
      );
    }).otherwise(function() {
      return import_react32.default.createElement(import_react32.default.Fragment, { key }, getWhiteSpacePreservedText(token.value));
    });
  }));
}

// node_modules/@sendbird/uikit-react/ui/OGMessageItemBody.js
var import_react_dom7 = __toESM(require_react_dom(), 1);
function OGMessageItemBody(_a2) {
  var _b2, _c, _d, _e;
  var className = _a2.className, message = _a2.message, _f = _a2.isByMe, isByMe = _f === void 0 ? false : _f, _g = _a2.mouseHover, mouseHover = _g === void 0 ? false : _g, _h = _a2.isMentionEnabled, isMentionEnabled = _h === void 0 ? false : _h, _j = _a2.isReactionEnabled, isReactionEnabled = _j === void 0 ? false : _j, _k = _a2.isMarkdownEnabled, isMarkdownEnabled = _k === void 0 ? false : _k, _l = _a2.onMessageHeightChange, onMessageHeightChange = _l === void 0 ? function() {
  } : _l;
  var stringSet = (0, import_react33.useContext)(LocalizationContext).stringSet;
  var isMessageMentioned = isMentionEnabled && ((_b2 = message === null || message === void 0 ? void 0 : message.mentionedMessageTemplate) === null || _b2 === void 0 ? void 0 : _b2.length) > 0 && (message === null || message === void 0 ? void 0 : message.mentionedUsers) && ((_c = message === null || message === void 0 ? void 0 : message.mentionedUsers) === null || _c === void 0 ? void 0 : _c.length) > 0;
  var tokens = (0, import_react33.useMemo)(function() {
    var _a3;
    if (isMessageMentioned) {
      return tokenizeMessage({
        mentionedUsers: (_a3 = message === null || message === void 0 ? void 0 : message.mentionedUsers) !== null && _a3 !== void 0 ? _a3 : void 0,
        messageText: message === null || message === void 0 ? void 0 : message.mentionedMessageTemplate,
        includeMarkdown: isMarkdownEnabled
      });
    }
    return tokenizeMessage({
      messageText: message === null || message === void 0 ? void 0 : message.message,
      includeMarkdown: isMarkdownEnabled
    });
  }, [message === null || message === void 0 ? void 0 : message.updatedAt, message === null || message === void 0 ? void 0 : message.message]);
  var openOpenGraphURL = function() {
    var _a3;
    return openURL((_a3 = message === null || message === void 0 ? void 0 : message.ogMetaData) === null || _a3 === void 0 ? void 0 : _a3.url);
  };
  return import_react33.default.createElement(
    "div",
    { className: getClassName([
      className !== null && className !== void 0 ? className : "",
      "sendbird-og-message-item-body",
      isByMe ? "outgoing" : "incoming",
      mouseHover ? "mouse-hover" : "",
      isReactionEnabled && ((_d = message === null || message === void 0 ? void 0 : message.reactions) === null || _d === void 0 ? void 0 : _d.length) > 0 ? "reactions" : ""
    ]) },
    import_react33.default.createElement(
      Label,
      { type: LabelTypography.BODY_1, color: isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1 },
      import_react33.default.createElement(
        "div",
        { className: OG_MESSAGE_BODY_CLASSNAME },
        import_react33.default.createElement(TextFragment, { tokens }),
        isEditedMessage(message) && import_react33.default.createElement(Label, { className: "sendbird-og-message-item-body__text-bubble__message", type: LabelTypography.BODY_1, color: isByMe ? LabelColors.ONCONTENT_2 : LabelColors.ONBACKGROUND_2 }, " ".concat(stringSet.MESSAGE_EDITED, " "))
      )
    ),
    ((_e = message.ogMetaData) === null || _e === void 0 ? void 0 : _e.defaultImage) && import_react33.default.createElement(OGImageSection, { onClick: openOpenGraphURL, ogImage: message.ogMetaData.defaultImage, onMessageHeightChange }),
    message.ogMetaData && import_react33.default.createElement(OGDescriptionSection, { onClick: openOpenGraphURL, ogMetaData: message.ogMetaData, onMessageHeightChange }),
    import_react33.default.createElement("div", { className: "sendbird-og-message-item-body__cover" })
  );
}
var OGImageSection = function(props) {
  var onClick = props.onClick, ogImage = props.ogImage, onMessageHeightChange = props.onMessageHeightChange;
  var imageRef = (0, import_react33.useRef)(null);
  var isMobile = useMediaQueryContext().isMobile;
  return import_react33.default.createElement(
    "div",
    { ref: imageRef, className: classnames("sendbird-og-message-item-body__og-thumbnail", !ogImage.url && "sendbird-og-message-item-body__og-thumbnail__empty"), onClick: function() {
      return onClick();
    } },
    import_react33.default.createElement(ImageRenderer, { className: "sendbird-og-message-item-body__og-thumbnail__image", url: ogImage.url || "", alt: ogImage.alt || "", width: "100%", height: isMobile ? "136px" : "240px", onLoad: onMessageHeightChange, onError: function() {
      var _a2, _b2;
      try {
        (_b2 = (_a2 = imageRef === null || imageRef === void 0 ? void 0 : imageRef.current) === null || _a2 === void 0 ? void 0 : _a2.classList) === null || _b2 === void 0 ? void 0 : _b2.add("sendbird-og-message-item-body__og-thumbnail__empty");
      } catch (error) {
      }
    }, defaultComponent: import_react33.default.createElement(
      "div",
      { className: "sendbird-og-message-item-body__og-thumbnail__place-holder" },
      import_react33.default.createElement(Icon, { className: "sendbird-og-message-item-body__og-thumbnail__place-holder__icon", type: IconTypes.THUMBNAIL_NONE, width: "56px", height: "56px" })
    ) })
  );
};
var OGDescriptionSection = function(props) {
  var onClick = props.onClick, ogMetaData = props.ogMetaData, onMessageHeightChange = props.onMessageHeightChange;
  (0, import_react33.useEffect)(function() {
    onMessageHeightChange();
  }, [ogMetaData.title, ogMetaData.description, ogMetaData.url]);
  return import_react33.default.createElement(
    "div",
    { className: "sendbird-og-message-item-body__description", onClick: function() {
      return onClick();
    } },
    ogMetaData.title && import_react33.default.createElement(Label, { className: "sendbird-og-message-item-body__description__title", type: LabelTypography.SUBTITLE_2, color: LabelColors.ONBACKGROUND_1 }, ogMetaData.title),
    ogMetaData.description && import_react33.default.createElement(Label, { className: "sendbird-og-message-item-body__description__description", type: LabelTypography.BODY_2, color: LabelColors.ONBACKGROUND_1 }, ogMetaData.description),
    ogMetaData.url && import_react33.default.createElement(Label, { className: "sendbird-og-message-item-body__description__url", type: LabelTypography.CAPTION_3, color: LabelColors.ONBACKGROUND_2 }, ogMetaData.url)
  );
};

// node_modules/@sendbird/uikit-react/ui/TextMessageItemBody.js
var import_react34 = __toESM(require_react(), 1);
var import_react_dom8 = __toESM(require_react_dom(), 1);
function TextMessageItemBody(_a2) {
  var _b2;
  var _c = _a2.className, className = _c === void 0 ? "" : _c, message = _a2.message, _d = _a2.isByMe, isByMe = _d === void 0 ? false : _d, _e = _a2.mouseHover, mouseHover = _e === void 0 ? false : _e, _f = _a2.isMentionEnabled, isMentionEnabled = _f === void 0 ? false : _f, _g = _a2.isReactionEnabled, isReactionEnabled = _g === void 0 ? false : _g, _h = _a2.isMarkdownEnabled, isMarkdownEnabled = _h === void 0 ? false : _h;
  var stringSet = (0, import_react34.useContext)(LocalizationContext).stringSet;
  var isMessageMentioned = isMentionEnabled && (message === null || message === void 0 ? void 0 : message.mentionedMessageTemplate) && message.mentionedMessageTemplate.length > 0 && (message === null || message === void 0 ? void 0 : message.mentionedUsers) && message.mentionedUsers.length > 0;
  var tokens = (0, import_react34.useMemo)(function() {
    var _a3;
    if (isMessageMentioned) {
      return tokenizeMessage({
        mentionedUsers: (_a3 = message === null || message === void 0 ? void 0 : message.mentionedUsers) !== null && _a3 !== void 0 ? _a3 : void 0,
        messageText: message === null || message === void 0 ? void 0 : message.mentionedMessageTemplate,
        includeMarkdown: isMarkdownEnabled
      });
    }
    return tokenizeMessage({
      messageText: message === null || message === void 0 ? void 0 : message.message,
      includeMarkdown: isMarkdownEnabled
    });
  }, [message === null || message === void 0 ? void 0 : message.updatedAt, message === null || message === void 0 ? void 0 : message.message]);
  return import_react34.default.createElement(
    Label,
    { type: LabelTypography.BODY_1, color: isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1 },
    import_react34.default.createElement(
      "div",
      { className: getClassName([
        className,
        TEXT_MESSAGE_BODY_CLASSNAME,
        isByMe ? "outgoing" : "incoming",
        mouseHover ? "mouse-hover" : "",
        isReactionEnabled && ((_b2 = message === null || message === void 0 ? void 0 : message.reactions) === null || _b2 === void 0 ? void 0 : _b2.length) > 0 ? "reactions" : ""
      ]) },
      import_react34.default.createElement(TextFragment, { tokens }),
      isEditedMessage(message) && import_react34.default.createElement(Label, { className: "sendbird-text-message-item-body__message edited", type: LabelTypography.BODY_1, color: isByMe ? LabelColors.ONCONTENT_2 : LabelColors.ONBACKGROUND_2 }, " ".concat(stringSet.MESSAGE_EDITED, " "))
    )
  );
}

// node_modules/@sendbird/uikit-react/ui/FileMessageItemBody.js
var import_react35 = __toESM(require_react(), 1);
function FileMessageItemBody(_a2) {
  var _this = this;
  var _b2;
  var _c = _a2.className, className = _c === void 0 ? "" : _c, message = _a2.message, _d = _a2.isByMe, isByMe = _d === void 0 ? false : _d, _e = _a2.mouseHover, mouseHover = _e === void 0 ? false : _e, _f = _a2.isReactionEnabled, isReactionEnabled = _f === void 0 ? false : _f, truncateLimit = _a2.truncateLimit, onBeforeDownloadFileMessage = _a2.onBeforeDownloadFileMessage;
  var logger = null;
  try {
    var globalLogger = useSendbird().state.config.logger;
    logger = globalLogger;
  } catch (err) {
  }
  var isMobile = useMediaQueryContext().isMobile;
  var truncateMaxNum = truncateLimit !== null && truncateLimit !== void 0 ? truncateLimit : isMobile ? 20 : void 0;
  var downloadFileWithUrl = function() {
    return openURL(message === null || message === void 0 ? void 0 : message.url);
  };
  var handleOnClickTextButton = onBeforeDownloadFileMessage ? function() {
    return __awaiter(_this, void 0, void 0, function() {
      var allowDownload, err_1;
      var _a3, _b3;
      return __generator(this, function(_c2) {
        switch (_c2.label) {
          case 0:
            _c2.trys.push([0, 2, , 3]);
            return [4, onBeforeDownloadFileMessage({ message })];
          case 1:
            allowDownload = _c2.sent();
            if (allowDownload) {
              downloadFileWithUrl();
            } else {
              (_a3 = logger === null || logger === void 0 ? void 0 : logger.info) === null || _a3 === void 0 ? void 0 : _a3.call(logger, "FileMessageItemBody: Not allowed to download.");
            }
            return [3, 3];
          case 2:
            err_1 = _c2.sent();
            (_b3 = logger === null || logger === void 0 ? void 0 : logger.error) === null || _b3 === void 0 ? void 0 : _b3.call(logger, "FileMessageItemBody: Error occurred while determining download continuation:", err_1);
            return [3, 3];
          case 3:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  } : downloadFileWithUrl;
  return import_react35.default.createElement(
    "div",
    { className: getClassName([
      className,
      "sendbird-file-message-item-body",
      isByMe ? "outgoing" : "incoming",
      mouseHover ? "mouse-hover" : "",
      isReactionEnabled && ((_b2 = message === null || message === void 0 ? void 0 : message.reactions) === null || _b2 === void 0 ? void 0 : _b2.length) > 0 ? "reactions" : ""
    ]) },
    import_react35.default.createElement(
      "div",
      { className: "sendbird-file-message-item-body__file-icon" },
      import_react35.default.createElement(Icon, { className: "sendbird-file-message-item-body__file-icon__icon", type: {
        IMAGE: IconTypes.PHOTO,
        VIDEO: IconTypes.PLAY,
        AUDIO: IconTypes.FILE_AUDIO,
        GIF: IconTypes.GIF,
        OTHERS: IconTypes.FILE_DOCUMENT
      }[getUIKitFileType(message === null || message === void 0 ? void 0 : message.type)], fillColor: IconColors.PRIMARY, width: "24px", height: "24px" })
    ),
    import_react35.default.createElement(
      TextButton,
      { className: "sendbird-file-message-item-body__file-name", onClick: handleOnClickTextButton, color: isByMe ? Colors.ONCONTENT_1 : Colors.ONBACKGROUND_1 },
      import_react35.default.createElement(Label, { className: "sendbird-file-message-item-body__file-name__text", testID: "sendbird-file-message-item-body__file-name__text", type: LabelTypography.BODY_1, color: isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1 }, truncateString((message === null || message === void 0 ? void 0 : message.name) || (message === null || message === void 0 ? void 0 : message.url), truncateMaxNum))
    )
  );
}

// node_modules/@sendbird/uikit-react/chunks/bundle-CxdqLaUY.js
var import_react38 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/ui/FileViewer.js
var import_react37 = __toESM(require_react(), 1);
var import_react_dom9 = __toESM(require_react_dom(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-CsZOw9J5.js
var import_react36 = __toESM(require_react(), 1);
function useKeyDown(ref, keyDownCallbackMap) {
  (0, import_react36.useLayoutEffect)(function() {
    var _a2;
    (_a2 = ref.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
  }, [ref.current]);
  var onKeyDown = usePreservedCallback(function(event) {
    var callback = keyDownCallbackMap[event.key];
    callback === null || callback === void 0 ? void 0 : callback(event);
    event.stopPropagation();
  });
  return onKeyDown;
}

// node_modules/@sendbird/uikit-react/ui/FileViewer.js
var ViewerTypes = {
  SINGLE: "SINGLE",
  MULTI: "MULTI"
};
function mapFileViewerComponentProps(_a2) {
  var props = _a2.props;
  if (props.viewerType === ViewerTypes.MULTI) {
    var _b2 = props, fileInfoList = _b2.fileInfoList, currentIndex = _b2.currentIndex;
    return fileInfoList[currentIndex];
  }
  var fileInfo = props;
  return {
    name: fileInfo.name,
    type: fileInfo.type,
    url: fileInfo.url
  };
}
function DeleteButton(props) {
  if (props.viewerType !== ViewerTypes.MULTI) {
    var onDelete_1 = props.onDelete, isByMe = props.isByMe, disableDelete_1 = props.disableDelete, className = props.className;
    return isByMe ? import_react37.default.createElement(
      "div",
      { className: "sendbird-fileviewer__header__right__actions__delete ".concat(className) },
      import_react37.default.createElement(Icon, { className: disableDelete_1 ? "disabled" : "", type: IconTypes.DELETE, fillColor: disableDelete_1 ? IconColors.GRAY : IconColors.ON_BACKGROUND_1, height: "24px", width: "24px", onClick: function(e2) {
        if (!disableDelete_1) {
          onDelete_1 === null || onDelete_1 === void 0 ? void 0 : onDelete_1(e2);
        }
      } })
    ) : import_react37.default.createElement(import_react37.default.Fragment, null);
  }
  return import_react37.default.createElement(import_react37.default.Fragment, null);
}
function Slider(props) {
  if (props.viewerType === ViewerTypes.MULTI) {
    var onClickLeft_1 = props.onClickLeft, onClickRight_1 = props.onClickRight;
    return import_react37.default.createElement(
      "div",
      { className: "sendbird-file-viewer-slider" },
      import_react37.default.createElement(
        "div",
        { className: "sendbird-file-viewer-arrow--left" },
        import_react37.default.createElement(Icon, { type: IconTypes.SLIDE_LEFT, fillColor: IconColors.ON_BACKGROUND_1, height: SLIDER_BUTTON_ICON_SIDE_LENGTH, width: SLIDER_BUTTON_ICON_SIDE_LENGTH, onClick: function(e2) {
          onClickLeft_1 === null || onClickLeft_1 === void 0 ? void 0 : onClickLeft_1();
          e2.stopPropagation();
        } })
      ),
      import_react37.default.createElement(
        "div",
        { className: "sendbird-file-viewer-arrow--right" },
        import_react37.default.createElement(Icon, { type: IconTypes.SLIDE_LEFT, fillColor: IconColors.ON_BACKGROUND_1, height: SLIDER_BUTTON_ICON_SIDE_LENGTH, width: SLIDER_BUTTON_ICON_SIDE_LENGTH, onClick: function(e2) {
          e2.stopPropagation();
          onClickRight_1 === null || onClickRight_1 === void 0 ? void 0 : onClickRight_1();
        } })
      )
    );
  }
  return import_react37.default.createElement(import_react37.default.Fragment, null);
}
var FileViewerComponent = function(props) {
  var profileUrl = props.profileUrl, nickname = props.nickname, onClose = props.onClose, onDownloadClick = props.onDownloadClick;
  var _a2 = props, onClickLeft = _a2.onClickLeft, onClickRight = _a2.onClickRight;
  var ref = (0, import_react37.useRef)(null);
  var onKeyDown = useKeyDown(ref, {
    Escape: function(e2) {
      return onClose === null || onClose === void 0 ? void 0 : onClose(e2);
    },
    ArrowLeft: function() {
      return onClickLeft === null || onClickLeft === void 0 ? void 0 : onClickLeft();
    },
    ArrowRight: function() {
      return onClickRight === null || onClickRight === void 0 ? void 0 : onClickRight();
    }
  });
  var _b2 = mapFileViewerComponentProps({ props }), name = _b2.name, type = _b2.type, url = _b2.url;
  var stringSet = (0, import_react37.useContext)(LocalizationContext).stringSet;
  return import_react37.default.createElement(
    Modal,
    { onClose },
    import_react37.default.createElement(
      "div",
      {
        className: "sendbird-fileviewer",
        "data-testid": "sendbird-fileviewer",
        onKeyDown,
        // to focus
        tabIndex: 1,
        ref
      },
      import_react37.default.createElement(
        "div",
        { className: "sendbird-fileviewer__header" },
        import_react37.default.createElement(
          "div",
          { className: "sendbird-fileviewer__header__left" },
          import_react37.default.createElement(
            "div",
            { className: "sendbird-fileviewer__header__left__avatar" },
            import_react37.default.createElement(Avatar$1, { height: "32px", width: "32px", src: profileUrl })
          ),
          import_react37.default.createElement(
            "div",
            { className: "sendbird-fileviewer__header__left__text-container" },
            import_react37.default.createElement(Label, { className: "sendbird-fileviewer__header__left__filename", type: LabelTypography.H_2, color: LabelColors.ONBACKGROUND_1 }, name),
            import_react37.default.createElement(Label, { className: "sendbird-fileviewer__header__left__sender-name", type: LabelTypography.BODY_1, color: LabelColors.ONBACKGROUND_2 }, nickname)
          )
        ),
        import_react37.default.createElement(
          "div",
          { className: "sendbird-fileviewer__header__right" },
          isSupportedFileView(type) && import_react37.default.createElement(
            "div",
            { className: "sendbird-fileviewer__header__right__actions" },
            import_react37.default.createElement(
              "a",
              { className: "sendbird-fileviewer__header__right__actions__download", rel: "noopener noreferrer", href: url, target: "_blank", onClick: onDownloadClick },
              import_react37.default.createElement(Icon, { type: IconTypes.DOWNLOAD, fillColor: IconColors.ON_BACKGROUND_1, height: "24px", width: "24px" })
            ),
            import_react37.default.createElement(DeleteButton, __assign({ className: "sendbird-fileviewer__header__right__actions__delete" }, props))
          ),
          import_react37.default.createElement(
            "div",
            { className: "sendbird-fileviewer__header__right__actions__close" },
            import_react37.default.createElement(Icon, { type: IconTypes.CLOSE, fillColor: IconColors.ON_BACKGROUND_1, height: "24px", width: "24px", onClick: function(e2) {
              return onClose === null || onClose === void 0 ? void 0 : onClose(e2);
            } })
          )
        )
      ),
      import_react37.default.createElement(
        "div",
        { className: "sendbird-fileviewer__content" },
        isVideo(type) && import_react37.default.createElement(
          "video",
          { controls: true, className: "sendbird-fileviewer__content__video" },
          import_react37.default.createElement("source", { src: url, type })
        ),
        isImage(type) && import_react37.default.createElement("img", { src: url, alt: name, className: props.viewerType === ViewerTypes.MULTI ? "sendbird-fileviewer__content__img__multi" : "sendbird-fileviewer__content__img" }),
        !isSupportedFileView(type) && import_react37.default.createElement(
          "div",
          { className: "sendbird-fileviewer__content__unsupported" },
          import_react37.default.createElement(Label, { type: LabelTypography.H_1, color: LabelColors.ONBACKGROUND_1 }, (stringSet === null || stringSet === void 0 ? void 0 : stringSet.UI__FILE_VIEWER__UNSUPPORT) || "Unsupported message")
        ),
        import_react37.default.createElement(Slider, __assign({}, props))
      )
    )
  );
};
function FileViewer(_a2) {
  var _b2, _c, _d;
  var message = _a2.message, _e = _a2.statefulFileInfoList, statefulFileInfoList = _e === void 0 ? [] : _e, onClose = _a2.onClose, _f = _a2.isByMe, isByMe = _f === void 0 ? false : _f, onDelete = _a2.onDelete, currentIndex = _a2.currentIndex, onClickLeft = _a2.onClickLeft, onClickRight = _a2.onClickRight, onDownloadClick = _a2.onDownloadClick;
  if (isMultipleFilesMessage(message)) {
    var castedMessage = message;
    return import_react37.default.createElement(FileViewerComponent, { profileUrl: castedMessage.sender.profileUrl, nickname: castedMessage.sender.nickname, viewerType: ViewerTypes.MULTI, fileInfoList: statefulFileInfoList.filter(function(fileInfo) {
      return fileInfo.url;
    }).map(function(fileInfo) {
      return {
        name: fileInfo.fileName || "",
        type: fileInfo.mimeType || "",
        url: fileInfo.url || ""
      };
    }), currentIndex: currentIndex || 0, onClickLeft: onClickLeft || noop, onClickRight: onClickRight || noop, onClose, onDownloadClick });
  } else if (isFileMessage(message)) {
    var castedMessage = message;
    return (0, import_react_dom9.createPortal)(import_react37.default.createElement(FileViewerComponent, { profileUrl: (_b2 = castedMessage.sender) === null || _b2 === void 0 ? void 0 : _b2.profileUrl, nickname: (_c = castedMessage.sender) === null || _c === void 0 ? void 0 : _c.nickname, name: castedMessage.name, type: castedMessage.type, url: castedMessage === null || castedMessage === void 0 ? void 0 : castedMessage.url, isByMe, disableDelete: (((_d = castedMessage.threadInfo) === null || _d === void 0 ? void 0 : _d.replyCount) || 0) > 0, onClose, onDelete: onDelete || noop, onDownloadClick }), document.getElementById(MODAL_ROOT));
  }
  return import_react37.default.createElement(import_react37.default.Fragment, null);
}

// node_modules/@sendbird/uikit-react/chunks/bundle-CxdqLaUY.js
function ImageGrid(_a2) {
  var _b2;
  var children = _a2.children, className = _a2.className, message = _a2.message, isReactionEnabled = _a2.isReactionEnabled;
  return import_react38.default.createElement(
    "div",
    { className: "sendbird-image-grid-wrap" },
    import_react38.default.createElement("div", { className: getClassName([
      className !== null && className !== void 0 ? className : "",
      "sendbird-image-grid",
      isReactionEnabled && ((_b2 = message === null || message === void 0 ? void 0 : message.reactions) === null || _b2 === void 0 ? void 0 : _b2.length) > 0 ? "reactions" : ""
    ]) }, children)
  );
}
var GRID_WIDTH_CHAT_WEB = 400;
var GRID_SIDE_PADDING = 8;
var GRID_GAP = 4;
var TIMESTAMP_WIDTH_AND_ITS_SIDE_MARGIN = 54;
var PROFILE_IMAGE_WIDTH = 40;
var CHAT_MOBILE_SIDE_PADDING = 48;
var THREAD_PARENT_WIDTH = 320;
var THREAD_PARENT_SIDE_PADDING = 28;
var THREAD_PARENT_GRID_MARGIN_LEFT = 12;
var THREAD_CHILD_WIDTH = 200;
var THREAD_CHILD_SIDE_PADDING = 8;
var THREAD_CHILD_MOBILE_SIDE_PADDING = 32;
var THREAD_CHILD_MOBILE_TIMESTAMP_WIDTH_AND_ITS_SIDE_MARGIN = 60;
var MULTIPLE_FILES_IMAGE_SIDE_LENGTH = {
  CHAT_WEB: "calc(".concat(GRID_WIDTH_CHAT_WEB / 2, "px - ").concat((GRID_SIDE_PADDING + GRID_GAP) / 2, "px)"),
  CHAT_MOBILE: "calc(50vw - ".concat((CHAT_MOBILE_SIDE_PADDING + PROFILE_IMAGE_WIDTH + TIMESTAMP_WIDTH_AND_ITS_SIDE_MARGIN + GRID_SIDE_PADDING + GRID_GAP) / 2, "px)"),
  THREAD_PARENT_WEB: "calc(".concat((THREAD_PARENT_WIDTH - (THREAD_PARENT_SIDE_PADDING + PROFILE_IMAGE_WIDTH + THREAD_PARENT_GRID_MARGIN_LEFT + GRID_GAP)) / 2, "px)"),
  THREAD_PARENT_MOBILE: "calc(50vw - ".concat((THREAD_PARENT_SIDE_PADDING + PROFILE_IMAGE_WIDTH + THREAD_PARENT_GRID_MARGIN_LEFT + GRID_GAP) / 2, "px)"),
  THREAD_CHILD_WEB: "calc(".concat((THREAD_CHILD_WIDTH - THREAD_CHILD_SIDE_PADDING - GRID_GAP) / 2, "px)"),
  THREAD_CHILD_MOBILE: "calc(50vw - ".concat((THREAD_CHILD_MOBILE_SIDE_PADDING + PROFILE_IMAGE_WIDTH + THREAD_CHILD_MOBILE_TIMESTAMP_WIDTH_AND_ITS_SIDE_MARGIN + GRID_SIDE_PADDING + GRID_GAP) / 2, "px)")
};
var MULTIPLE_FILES_IMAGE_BORDER_RADIUS = {
  CHAT_WEB: "6px",
  CHAT_MOBILE: "6px",
  THREAD_PARENT_WEB: "6px",
  THREAD_PARENT_MOBILE: "6px",
  THREAD_CHILD_WEB: "6px",
  THREAD_CHILD_MOBILE: "6px"
};
var MULTIPLE_FILES_IMAGE_THUMBNAIL_SIDE_LENGTH = "34px";
var ThreadMessageKind = {
  PARENT: "parent",
  CHILD: "child"
};
function MultipleFilesMessageItemBody(_a2) {
  var _this = this;
  var className = _a2.className, message = _a2.message, _b2 = _a2.isReactionEnabled, isReactionEnabled = _b2 === void 0 ? false : _b2, threadMessageKindKey = _a2.threadMessageKindKey, _c = _a2.statefulFileInfoList, statefulFileInfoList = _c === void 0 ? [] : _c, _d = _a2.onBeforeDownloadFileMessage, onBeforeDownloadFileMessage = _d === void 0 ? null : _d;
  var logger = useSendbird().state.config.logger;
  var _e = (0, import_react38.useState)(-1), currentFileViewerIndex = _e[0], setCurrentFileViewerIndex = _e[1];
  function onClose() {
    setCurrentFileViewerIndex(-1);
  }
  function onClickLeft() {
    setCurrentFileViewerIndex(currentFileViewerIndex === 0 ? statefulFileInfoList.length - 1 : currentFileViewerIndex - 1);
  }
  function onClickRight() {
    setCurrentFileViewerIndex(currentFileViewerIndex === statefulFileInfoList.length - 1 ? 0 : currentFileViewerIndex + 1);
  }
  return threadMessageKindKey ? import_react38.default.createElement(
    import_react38.default.Fragment,
    null,
    currentFileViewerIndex > -1 && import_react38.default.createElement(FileViewer, { message, statefulFileInfoList, currentIndex: currentFileViewerIndex, onClickLeft, onClickRight, onClose, onDownloadClick: function(e2) {
      return __awaiter(_this, void 0, void 0, function() {
        var allowDownload, err_1;
        var _a3, _b3;
        return __generator(this, function(_c2) {
          switch (_c2.label) {
            case 0:
              if (!onBeforeDownloadFileMessage)
                return [
                  2
                  /*return*/
                ];
              _c2.label = 1;
            case 1:
              _c2.trys.push([1, 3, , 4]);
              return [4, onBeforeDownloadFileMessage({ message, index: currentFileViewerIndex })];
            case 2:
              allowDownload = _c2.sent();
              if (!allowDownload) {
                e2.preventDefault();
                (_a3 = logger === null || logger === void 0 ? void 0 : logger.info) === null || _a3 === void 0 ? void 0 : _a3.call(logger, "MultipleFilesMessageItemBody: Not allowed to download.");
              }
              return [3, 4];
            case 3:
              err_1 = _c2.sent();
              (_b3 = logger === null || logger === void 0 ? void 0 : logger.error) === null || _b3 === void 0 ? void 0 : _b3.call(logger, "MultipleFilesMessageItemBody: Error occurred while determining download continuation:", err_1);
              return [3, 4];
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    } }),
    import_react38.default.createElement(ImageGrid, { className, message, isReactionEnabled }, statefulFileInfoList.map(function(fileInfo, index) {
      var _a3, _b3, _c2, _d2;
      return import_react38.default.createElement(
        "div",
        { className: "sendbird-multiple-files-image-renderer-wrapper", onClick: message.sendingStatus === Z.SUCCEEDED ? function() {
          return setCurrentFileViewerIndex(index);
        } : void 0, key: "sendbird-multiple-files-image-renderer-".concat(index, "-").concat(fileInfo.url) },
        import_react38.default.createElement(ImageRenderer, { url: (_d2 = (_c2 = (_b3 = (_a3 = fileInfo.thumbnails) === null || _a3 === void 0 ? void 0 : _a3[0]) === null || _b3 === void 0 ? void 0 : _b3.url) !== null && _c2 !== void 0 ? _c2 : fileInfo.url) !== null && _d2 !== void 0 ? _d2 : "", fixedSize: false, width: MULTIPLE_FILES_IMAGE_SIDE_LENGTH[threadMessageKindKey], maxSideLength: MULTIPLE_FILES_IMAGE_SIDE_LENGTH.CHAT_WEB, height: MULTIPLE_FILES_IMAGE_SIDE_LENGTH[threadMessageKindKey], borderRadius: getBorderRadiusForMultipleImageRenderer(MULTIPLE_FILES_IMAGE_BORDER_RADIUS[threadMessageKindKey], index, statefulFileInfoList.length), shadeOnHover: true, isUploaded: !!fileInfo.isUploaded, placeHolder: function(_a4) {
          var style = _a4.style;
          if (fileInfo.mimeType && isGif(fileInfo.mimeType))
            return import_react38.default.createElement(ImagePlaceholder.GIF, { style });
          return import_react38.default.createElement(ImagePlaceholder.Default, { style });
        }, defaultComponent: import_react38.default.createElement(ImagePlaceholder.LoadError, null) })
      );
    }))
  ) : import_react38.default.createElement(import_react38.default.Fragment, null);
}
var ImagePlaceholder = {
  Default: function(_a2) {
    var style = _a2.style;
    return import_react38.default.createElement(
      "div",
      { className: "sendbird-multiple-files-image-renderer__thumbnail__placeholder", style },
      import_react38.default.createElement(Icon, { type: IconTypes.PHOTO, fillColor: IconColors.ON_BACKGROUND_2, width: MULTIPLE_FILES_IMAGE_THUMBNAIL_SIDE_LENGTH, height: MULTIPLE_FILES_IMAGE_THUMBNAIL_SIDE_LENGTH })
    );
  },
  GIF: function(_a2) {
    var style = _a2.style;
    return import_react38.default.createElement(
      "div",
      { className: "sendbird-multiple-files-image-renderer__thumbnail__placeholder", style },
      import_react38.default.createElement(
        "div",
        { className: "sendbird-multiple-files-image-renderer__thumbnail__placeholder__icon" },
        import_react38.default.createElement(Icon, { type: IconTypes.GIF, fillColor: IconColors.THUMBNAIL_ICON, width: MULTIPLE_FILES_IMAGE_THUMBNAIL_SIDE_LENGTH, height: MULTIPLE_FILES_IMAGE_THUMBNAIL_SIDE_LENGTH })
      )
    );
  },
  LoadError: function() {
    return import_react38.default.createElement(
      "div",
      { className: "sendbird-multiple-files-image-renderer__thumbnail__placeholder" },
      import_react38.default.createElement(Icon, { type: IconTypes.THUMBNAIL_NONE, fillColor: IconColors.ON_BACKGROUND_2, width: MULTIPLE_FILES_IMAGE_THUMBNAIL_SIDE_LENGTH, height: MULTIPLE_FILES_IMAGE_THUMBNAIL_SIDE_LENGTH })
    );
  }
};
function useThreadMessageKindKeySelector(_a2) {
  var threadMessageKind = _a2.threadMessageKind, isMobile = _a2.isMobile;
  var threadMessageKindKey = (0, import_react38.useMemo)(function() {
    return K(threadMessageKind).with(ThreadMessageKind.PARENT, function() {
      return isMobile ? "THREAD_PARENT_MOBILE" : "THREAD_PARENT_WEB";
    }).with(ThreadMessageKind.CHILD, function() {
      return isMobile ? "THREAD_CHILD_MOBILE" : "THREAD_CHILD_WEB";
    }).otherwise(function() {
      return isMobile ? "CHAT_MOBILE" : "CHAT_WEB";
    });
  }, [isMobile, threadMessageKind]);
  return threadMessageKindKey;
}
var useFileInfoListWithUploaded = function(message) {
  var _a2, _b2;
  var blobHandler = (0, import_react38.useRef)(/* @__PURE__ */ new Map());
  var getObjectURL = function(index, blob) {
    if (!blobHandler.current.has(index) && blob)
      blobHandler.current.set(index, URL.createObjectURL(blob));
    return blobHandler.current.get(index);
  };
  var revokeURLs = function() {
    if (blobHandler.current.size > 0) {
      blobHandler.current.forEach(function(url) {
        return URL.revokeObjectURL(url);
      });
      blobHandler.current.clear();
    }
  };
  (0, import_react38.useEffect)(function() {
    return function() {
      return revokeURLs();
    };
  }, []);
  if (!message || !message.isMultipleFilesMessage || !message.isMultipleFilesMessage()) {
    return [];
  } else if (message.sendingStatus === Z.SUCCEEDED) {
    revokeURLs();
    return message.fileInfoList.map(function(it) {
      var _a3, _b3;
      return __assign(__assign({}, it), { url: it.url, isUploaded: true, mimeType: (_a3 = it.mimeType) !== null && _a3 !== void 0 ? _a3 : void 0, fileName: (_b3 = it.fileName) !== null && _b3 !== void 0 ? _b3 : void 0 });
    });
  } else {
    return (_b2 = (_a2 = message === null || message === void 0 ? void 0 : message.messageParams) === null || _a2 === void 0 ? void 0 : _a2.fileInfoList.map(function(it, index) {
      var _a3, _b3;
      return __assign(__assign({}, it), { url: (_b3 = (_a3 = getObjectURL(index)) !== null && _a3 !== void 0 ? _a3 : it.fileUrl) !== null && _b3 !== void 0 ? _b3 : it.file instanceof Blob ? getObjectURL(index, it.file) : void 0, isUploaded: !it.file && typeof it.fileUrl === "string" && it.fileUrl.length > 0 });
    })) !== null && _b2 !== void 0 ? _b2 : [];
  }
};

// node_modules/@sendbird/uikit-react/ui/VoiceMessageItemBody.js
var import_react44 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/ui/ProgressBar.js
var import_react39 = __toESM(require_react(), 1);
var ProgressBarColorTypes = {
  PRIMARY: "progress-bar-color--primary",
  GRAY: "progress-bar-color--gray"
};
var ProgressBar = function(_a2) {
  var _b2 = _a2.className, className = _b2 === void 0 ? "" : _b2, _c = _a2.disabled, disabled = _c === void 0 ? false : _c, maxSize = _a2.maxSize, _d = _a2.currentSize, currentSize = _d === void 0 ? 0 : _d, _e = _a2.colorType, colorType = _e === void 0 ? ProgressBarColorTypes.PRIMARY : _e;
  var width = (0, import_react39.useMemo)(function() {
    return "".concat(currentSize / maxSize * 100, "%");
  }, [currentSize, maxSize]);
  return import_react39.default.createElement(
    "div",
    { className: classnames("sendbird-progress-bar", className, colorType, disabled && "progress-bar--disabled") },
    import_react39.default.createElement("div", { className: "sendbird-progress-bar__fill", style: { width } })
  );
};

// node_modules/@sendbird/uikit-react/VoicePlayer/useVoicePlayer.js
var import_react42 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-B6tSyuRm.js
var import_react40 = __toESM(require_react(), 1);
var INITIALIZE_AUDIO_UNIT = "INITIALIZE_AUDIO_UNIT";
var RESET_AUDIO_UNIT = "RESET_AUDIO_UNIT";
var SET_CURRENT_PLAYER = "SET_CURRENT_PLAYER";
var ON_VOICE_PLAYER_PLAY = "ON_VOICE_PLAYER_PLAY";
var ON_VOICE_PLAYER_PAUSE = "ON_VOICE_PLAYER_PAUSE";
var ON_CURRENT_TIME_UPDATE = "ON_CURRENT_TIME_UPDATE";
var VOICE_PLAYER_STATUS = {
  IDLE: "IDLE",
  PREPARING: "PREPARING",
  PLAYING: "PLAYING",
  PAUSED: "PAUSED",
  COMPLETED: "COMPLETED"
};
var AudioUnitDefaultValue = function() {
  return {
    audioFile: null,
    playbackTime: 0,
    duration: 1e3,
    playingStatus: VOICE_PLAYER_STATUS.IDLE
  };
};
var voicePlayerInitialState = {
  currentPlayer: null,
  currentGroupKey: "",
  audioStorage: {}
};
function voicePlayerReducer(state, action) {
  var _a2, _b2, _c, _d, _e;
  var _f, _g, _h, _j;
  switch (action.type) {
    case INITIALIZE_AUDIO_UNIT: {
      var groupKey = action.payload.groupKey;
      var audioUnit = ((_f = state.audioStorage) === null || _f === void 0 ? void 0 : _f[groupKey]) ? state.audioStorage[groupKey] : AudioUnitDefaultValue();
      audioUnit.playingStatus = VOICE_PLAYER_STATUS.PREPARING;
      return __assign(__assign({}, state), { audioStorage: __assign(__assign({}, state.audioStorage), (_a2 = {}, _a2[groupKey] = audioUnit, _a2)) });
    }
    case RESET_AUDIO_UNIT: {
      var groupKey = action.payload.groupKey;
      return __assign(__assign({}, state), { audioStorage: __assign(__assign({}, state.audioStorage), (_b2 = {}, _b2[groupKey] = AudioUnitDefaultValue(), _b2)) });
    }
    case SET_CURRENT_PLAYER: {
      var _k = action.payload, audioPlayer = _k.audioPlayer, groupKey = _k.groupKey;
      return __assign(__assign({}, state), { currentPlayer: audioPlayer, currentGroupKey: groupKey });
    }
    case ON_VOICE_PLAYER_PLAY: {
      var _l = action.payload, groupKey = _l.groupKey, audioFile = _l.audioFile;
      var audioUnit = ((_g = state.audioStorage) === null || _g === void 0 ? void 0 : _g[groupKey]) ? state.audioStorage[groupKey] : AudioUnitDefaultValue();
      audioUnit.audioFile = audioFile;
      audioUnit.playingStatus = VOICE_PLAYER_STATUS.PLAYING;
      return __assign(__assign({}, state), { audioStorage: __assign(__assign({}, state.audioStorage), (_c = {}, _c[groupKey] = audioUnit, _c)) });
    }
    case ON_VOICE_PLAYER_PAUSE: {
      var _m = action.payload, groupKey = _m.groupKey, duration = _m.duration, currentTime = _m.currentTime;
      var audioUnit = ((_h = state.audioStorage) === null || _h === void 0 ? void 0 : _h[groupKey]) ? state.audioStorage[groupKey] : AudioUnitDefaultValue();
      audioUnit.playingStatus = VOICE_PLAYER_STATUS.PAUSED;
      if (duration === currentTime) {
        audioUnit.playbackTime = 0;
      }
      return __assign(__assign({}, state), { audioStorage: __assign(__assign({}, state.audioStorage), (_d = {}, _d[groupKey] = audioUnit, _d)) });
    }
    case ON_CURRENT_TIME_UPDATE: {
      var groupKey = action.payload.groupKey;
      var _o = state.currentPlayer, currentTime = _o.currentTime, duration = _o.duration;
      var audioUnit = ((_j = state.audioStorage) === null || _j === void 0 ? void 0 : _j[groupKey]) ? state.audioStorage[groupKey] : AudioUnitDefaultValue();
      if (audioUnit.playbackTime === audioUnit.duration && audioUnit.playingStatus === VOICE_PLAYER_STATUS.PAUSED) {
        audioUnit.playbackTime = 0;
      } else if (currentTime > 0 && duration > 0) {
        audioUnit.playbackTime = currentTime;
        audioUnit.duration = duration;
      }
      return __assign(__assign({}, state), { audioStorage: __assign(__assign({}, state.audioStorage), (_e = {}, _e[groupKey] = audioUnit, _e)) });
    }
    default:
      return state;
  }
}
var generateGroupKey = function(channelUrl, key) {
  if (channelUrl === void 0) {
    channelUrl = "";
  }
  if (key === void 0) {
    key = "";
  }
  return "".concat(channelUrl, "-").concat(key);
};
var getParsedVoiceAudioFileInfo = function(mimeType) {
  if (isSafari(navigator.userAgent) && mimeType.includes("m4a")) {
    return {
      name: VOICE_MESSAGE_FILE_NAME__XM4A,
      mimeType: VOICE_MESSAGE_MIME_TYPE__XM4A
    };
  }
  return {
    name: VOICE_MESSAGE_FILE_NAME,
    mimeType: VOICE_MESSAGE_MIME_TYPE
  };
};
var ALL = "ALL";
var noop3 = function() {
};
var VoicePlayerStoreDefaultValue = {
  currentGroupKey: "",
  currentPlayer: null,
  audioStorage: {}
};
var Context = (0, import_react40.createContext)({
  play: noop3,
  pause: noop3,
  stop: noop3,
  voicePlayerStore: VoicePlayerStoreDefaultValue
});
var VoicePlayerProvider = function(_a2) {
  var children = _a2.children;
  var _b2 = (0, import_react40.useReducer)(voicePlayerReducer, voicePlayerInitialState), voicePlayerStore = _b2[0], voicePlayerDispatcher = _b2[1];
  var currentGroupKey = voicePlayerStore.currentGroupKey, currentPlayer = voicePlayerStore.currentPlayer, audioStorage = voicePlayerStore.audioStorage;
  var state = useSendbird().state;
  var config = state.config;
  var logger = config.logger;
  var stop = function(text2) {
    if (text2 === void 0) {
      text2 = "";
    }
    if (currentGroupKey.includes(text2)) {
      logger.info("VoicePlayer: Pause playing(by text).");
      pause(currentGroupKey);
    }
  };
  var pause = function(groupKey) {
    if (currentPlayer) {
      if (groupKey === currentGroupKey) {
        logger.info("VoicePlayer: Pause playing(by group key).");
        currentPlayer.pause();
      } else if (groupKey === ALL) {
        logger.info("VoicePlayer: Pause playing(all).");
        currentPlayer.pause();
      }
    } else {
      logger.warning("VoicePlayer: No currentPlayer to pause.");
    }
  };
  var play = function(_a3) {
    var groupKey = _a3.groupKey, audioFile = _a3.audioFile, _b3 = _a3.audioFileUrl, audioFileUrl = _b3 === void 0 ? "" : _b3, _c = _a3.audioFileMimeType, audioFileMimeType = _c === void 0 ? VOICE_MESSAGE_MIME_TYPE : _c;
    if (groupKey !== currentGroupKey) {
      pause(currentGroupKey);
    }
    var voicePlayerRoot = document.getElementById(VOICE_PLAYER_ROOT_ID);
    var voicePlayerAudioElement = document.getElementById(VOICE_PLAYER_AUDIO_ID);
    if (voicePlayerRoot && voicePlayerAudioElement) {
      voicePlayerRoot.removeChild(voicePlayerAudioElement);
    }
    logger.info("VoicePlayer: Start getting audio file.");
    new Promise(function(resolve, reject) {
      var _a4;
      voicePlayerDispatcher({
        type: INITIALIZE_AUDIO_UNIT,
        payload: { groupKey }
      });
      if (audioFile) {
        logger.info("VoicePlayer: Use the audioFile instance.");
        resolve(audioFile);
        return;
      }
      var cachedAudioFile = (_a4 = audioStorage === null || audioStorage === void 0 ? void 0 : audioStorage[groupKey]) === null || _a4 === void 0 ? void 0 : _a4.audioFile;
      if (cachedAudioFile) {
        logger.info("VoicePlayer: Get from the audioStorage.");
        resolve(cachedAudioFile);
        return;
      }
      fetch(audioFileUrl).then(function(res) {
        return res.blob();
      }).then(function(blob) {
        var audioFile2 = new File([blob], getParsedVoiceAudioFileInfo(audioFileMimeType).name, {
          lastModified: (/* @__PURE__ */ new Date()).getTime(),
          type: getParsedVoiceAudioFileInfo(audioFileMimeType).mimeType
        });
        resolve(audioFile2);
        logger.info("VoicePlayer: Get the audioFile from URL.");
      }).catch(reject);
    }).then(function(audioFile2) {
      var _a4;
      var voicePlayerRoot2 = document.getElementById(VOICE_PLAYER_ROOT_ID);
      logger.info("VoicePlayer: Succeeded getting audio file.", { audioFile: audioFile2 });
      var currentAudioUnit = audioStorage[groupKey] || AudioUnitDefaultValue();
      var audioPlayer = new Audio((_a4 = URL === null || URL === void 0 ? void 0 : URL.createObjectURL) === null || _a4 === void 0 ? void 0 : _a4.call(URL, audioFile2));
      audioPlayer.id = VOICE_PLAYER_AUDIO_ID;
      audioPlayer.currentTime = currentAudioUnit.playbackTime;
      audioPlayer.volume = 1;
      audioPlayer.loop = false;
      audioPlayer.onplaying = function() {
        logger.info("VoicePlayer: OnPlaying event is called from audioPlayer", { groupKey, audioPlayer });
        voicePlayerDispatcher({
          type: ON_VOICE_PLAYER_PLAY,
          payload: { groupKey, audioFile: audioFile2 }
        });
      };
      audioPlayer.onpause = function() {
        logger.info("VoicePlayer: OnPause event is called from audioPlayer", { groupKey, audioPlayer });
        voicePlayerDispatcher({
          type: ON_VOICE_PLAYER_PAUSE,
          payload: { groupKey, duration: audioPlayer.duration, currentTime: audioPlayer.currentTime }
        });
      };
      audioPlayer.ontimeupdate = function() {
        voicePlayerDispatcher({
          type: ON_CURRENT_TIME_UPDATE,
          payload: { groupKey }
        });
      };
      audioPlayer.onerror = function(error) {
        logger.error("VoicePlayer: Failed to load the audioFile on the audio player.", error);
        voicePlayerDispatcher({
          type: RESET_AUDIO_UNIT,
          payload: { groupKey }
        });
      };
      audioPlayer.dataset.sbGroupId = groupKey;
      try {
        voicePlayerRoot2 === null || voicePlayerRoot2 === void 0 ? void 0 : voicePlayerRoot2.childNodes.forEach(function(node) {
          var _a5, _b4;
          var element = node;
          var thisGroupKey = (_a5 = element.dataset) === null || _a5 === void 0 ? void 0 : _a5.sbGroupKey;
          if (thisGroupKey !== groupKey) {
            (_b4 = element === null || element === void 0 ? void 0 : element.pause) === null || _b4 === void 0 ? void 0 : _b4.call(element);
            voicePlayerRoot2.removeChild(element);
            logger.info("VoicePlayer: Removed other player.", { element });
          }
        });
      } finally {
        audioPlayer === null || audioPlayer === void 0 ? void 0 : audioPlayer.play();
        voicePlayerRoot2 === null || voicePlayerRoot2 === void 0 ? void 0 : voicePlayerRoot2.appendChild(audioPlayer);
        voicePlayerDispatcher({
          type: SET_CURRENT_PLAYER,
          payload: { groupKey, audioPlayer }
        });
        logger.info("VoicePlayer: Succeeded playing audio player.", { groupKey, audioPlayer });
      }
    }).catch(function(error) {
      logger.warning("VoicePlayer: Failed loading audio file with URL.", error);
      voicePlayerDispatcher({
        type: RESET_AUDIO_UNIT,
        payload: { groupKey }
      });
    });
  };
  return import_react40.default.createElement(
    Context.Provider,
    { value: {
      play,
      pause,
      stop,
      voicePlayerStore
    } },
    import_react40.default.createElement("div", { id: VOICE_PLAYER_ROOT_ID, style: { display: "none" } }),
    children
  );
};
var useVoicePlayerContext = function() {
  return (0, import_react40.useContext)(Context);
};

// node_modules/@sendbird/uikit-react/VoiceRecorder/context.js
var import_react41 = __toESM(require_react(), 1);
var import_react_dom10 = __toESM(require_react_dom(), 1);
var Context2 = (0, import_react41.createContext)({
  start: noop,
  stop: noop,
  isRecordable: false
});
var VoiceRecorderProvider = function(props) {
  var _a2;
  var children = props.children;
  var state = useSendbird().state;
  var config = state.config;
  var logger = config.logger, groupChannel = config.groupChannel;
  var _b2 = (0, import_react41.useState)(null), mediaRecorder = _b2[0], setMediaRecorder = _b2[1];
  var _c = (0, import_react41.useState)(false), isRecordable = _c[0], setIsRecordable = _c[1];
  var _d = (0, import_react41.useState)(false), permissionWarning = _d[0], setPermissionWarning = _d[1];
  var stringSet = useLocalization().stringSet;
  var isVoiceMessageEnabled = groupChannel.enableVoiceMessage;
  var _e = (0, import_react41.useState)(null), webAudioUtils = _e[0], setWebAudioUtils = _e[1];
  var browserSupportMimeType = (_a2 = BROWSER_SUPPORT_MIME_TYPE_LIST.find(function(mimeType) {
    return MediaRecorder.isTypeSupported(mimeType);
  })) !== null && _a2 !== void 0 ? _a2 : "";
  if (isVoiceMessageEnabled && !browserSupportMimeType) {
    logger.error("VoiceRecorder: Browser does not support mimeType", { mimmeTypes: BROWSER_SUPPORT_MIME_TYPE_LIST });
  }
  (0, import_react41.useEffect)(function() {
    if (isVoiceMessageEnabled && !webAudioUtils) {
      import("./bundle-BA6Ou_1M-HWQO45XM.js").then(function(module) {
        return setWebAudioUtils(module);
      });
    }
  }, [isVoiceMessageEnabled, webAudioUtils]);
  var start = (0, import_react41.useCallback)(function(eventHandler) {
    var _a3, _b3;
    if (isVoiceMessageEnabled && !webAudioUtils) {
      logger.error("VoiceRecorder: Recording audio processor is being loaded.");
      return;
    }
    var checkPermission = function() {
      try {
        navigator.permissions.query({ name: "microphone" }).then(function(result) {
          if (result.state === "denied") {
            logger.warning("VoiceRecorder: Permission denied.");
            setPermissionWarning(true);
          }
        });
      } catch (error) {
        logger.warning("VoiceRecorder: Failed to check permission.", error);
      }
    };
    logger.info("VoiceRecorder: Start recording.");
    if (mediaRecorder) {
      stop();
      logger.info("VoiceRecorder: Previous mediaRecorder is stopped.");
    }
    checkPermission();
    (_b3 = (_a3 = navigator === null || navigator === void 0 ? void 0 : navigator.mediaDevices) === null || _a3 === void 0 ? void 0 : _a3.getUserMedia) === null || _b3 === void 0 ? void 0 : _b3.call(_a3, { audio: true }).then(function(stream) {
      var _a4;
      logger.info("VoiceRecorder: Succeeded getting media stream.", stream);
      setIsRecordable(true);
      var mediaRecorder2 = new MediaRecorder(stream, {
        mimeType: browserSupportMimeType,
        audioBitsPerSecond: VOICE_RECORDER_AUDIO_BIT_RATE
      });
      mediaRecorder2.ondataavailable = function(e2) {
        logger.info("VoiceRecorder: Succeeded getting an available data.", e2.data);
        var audioFile = new File([e2.data], VOICE_MESSAGE_FILE_NAME, {
          lastModified: (/* @__PURE__ */ new Date()).getTime(),
          type: VOICE_MESSAGE_MIME_TYPE
        });
        webAudioUtils === null || webAudioUtils === void 0 ? void 0 : webAudioUtils.downsampleToWav(audioFile, function(buffer) {
          var _a5;
          var mp3Buffer = webAudioUtils === null || webAudioUtils === void 0 ? void 0 : webAudioUtils.encodeMp3(buffer);
          var mp3blob = new Blob(mp3Buffer, { type: VOICE_MESSAGE_MIME_TYPE });
          var convertedAudioFile = new File([mp3blob], VOICE_MESSAGE_FILE_NAME, {
            lastModified: (/* @__PURE__ */ new Date()).getTime(),
            type: VOICE_MESSAGE_MIME_TYPE
          });
          (_a5 = eventHandler === null || eventHandler === void 0 ? void 0 : eventHandler.onRecordingEnded) === null || _a5 === void 0 ? void 0 : _a5.call(eventHandler, convertedAudioFile);
          logger.info("VoiceRecorder: Succeeded converting audio file.", convertedAudioFile);
        });
        var tracks = stream.getAudioTracks();
        tracks.forEach(function(track) {
          return track.stop();
        });
        setIsRecordable(false);
      };
      mediaRecorder2.onstart = (_a4 = eventHandler === null || eventHandler === void 0 ? void 0 : eventHandler.onRecordingStarted) !== null && _a4 !== void 0 ? _a4 : noop;
      mediaRecorder2 === null || mediaRecorder2 === void 0 ? void 0 : mediaRecorder2.start();
      setMediaRecorder(mediaRecorder2);
    }).catch(function(err) {
      logger.error("VoiceRecorder: Failed getting media stream.", err);
      setMediaRecorder(null);
    });
  }, [mediaRecorder, webAudioUtils]);
  var stop = (0, import_react41.useCallback)(function() {
    mediaRecorder === null || mediaRecorder === void 0 ? void 0 : mediaRecorder.stop();
    setMediaRecorder(null);
    setIsRecordable(false);
    logger.info("VoiceRecorder: Stop recording.");
  }, [mediaRecorder]);
  return import_react41.default.createElement(
    Context2.Provider,
    { value: { start, stop, isRecordable } },
    children,
    permissionWarning && import_react41.default.createElement(
      Modal,
      { hideFooter: true, onClose: function() {
        return setPermissionWarning(false);
      } },
      import_react41.default.createElement(import_react41.default.Fragment, null, stringSet.VOICE_RECORDING_PERMISSION_DENIED)
    )
  );
};
var useVoiceRecorderContext = function() {
  return (0, import_react41.useContext)(Context2);
};

// node_modules/@sendbird/uikit-react/VoicePlayer/useVoicePlayer.js
var import_react_dom11 = __toESM(require_react_dom(), 1);
var useVoicePlayer = function(_a2) {
  var _b2;
  var _c = _a2.key, key = _c === void 0 ? "" : _c, _d = _a2.channelUrl, channelUrl = _d === void 0 ? "" : _d, audioFile = _a2.audioFile, _e = _a2.audioFileUrl, audioFileUrl = _e === void 0 ? "" : _e, _f = _a2.audioFileMimeType, audioFileMimeType = _f === void 0 ? VOICE_MESSAGE_MIME_TYPE : _f;
  var groupKey = generateGroupKey(channelUrl, key);
  var _g = useVoicePlayerContext(), play = _g.play, pause = _g.pause, stop = _g.stop, voicePlayerStore = _g.voicePlayerStore;
  var isRecordable = useVoiceRecorderContext().isRecordable;
  var currentAudioUnit = ((_b2 = voicePlayerStore === null || voicePlayerStore === void 0 ? void 0 : voicePlayerStore.audioStorage) === null || _b2 === void 0 ? void 0 : _b2[groupKey]) || AudioUnitDefaultValue();
  var playVoicePlayer = function() {
    if (!isRecordable) {
      play === null || play === void 0 ? void 0 : play({
        groupKey,
        audioFile,
        audioFileUrl,
        audioFileMimeType
      });
    }
  };
  var pauseVoicePlayer = function() {
    pause === null || pause === void 0 ? void 0 : pause(groupKey);
  };
  var stopVoicePlayer = function(text2) {
    if (text2 === void 0) {
      text2 = "";
    }
    stop === null || stop === void 0 ? void 0 : stop(text2);
  };
  (0, import_react42.useEffect)(function() {
    return function() {
      var _a3;
      if (audioFile || audioFileUrl) {
        var voiceAudioPlayerElement = document.getElementById(VOICE_PLAYER_AUDIO_ID);
        (_a3 = voiceAudioPlayerElement === null || voiceAudioPlayerElement === void 0 ? void 0 : voiceAudioPlayerElement.pause) === null || _a3 === void 0 ? void 0 : _a3.call(voiceAudioPlayerElement);
      }
    };
  }, []);
  return {
    play: playVoicePlayer,
    pause: pauseVoicePlayer,
    stop: stopVoicePlayer,
    /**
     * The reason why we multiply this by *1000 is,
     * The unit of playbackTime and duration should be millisecond
     */
    playbackTime: ((currentAudioUnit === null || currentAudioUnit === void 0 ? void 0 : currentAudioUnit.playbackTime) || 0) * 1e3,
    duration: ((currentAudioUnit === null || currentAudioUnit === void 0 ? void 0 : currentAudioUnit.duration) || 0) * 1e3,
    playingStatus: currentAudioUnit.playingStatus
  };
};

// node_modules/@sendbird/uikit-react/ui/PlaybackTime.js
var import_react43 = __toESM(require_react(), 1);
var PlaybackTime = function(_a2) {
  var className = _a2.className, _b2 = _a2.time, time = _b2 === void 0 ? 0 : _b2, _c = _a2.labelType, labelType = _c === void 0 ? LabelTypography.CAPTION_2 : _c, _d = _a2.labelColor, labelColor = _d === void 0 ? LabelColors.ONCONTENT_1 : _d;
  var naturalTime = time < 0 ? 0 : time;
  var hour = Math.floor(naturalTime / 36e5);
  var min = Math.floor(naturalTime % 36e5 / 6e4);
  var sec = Math.floor(naturalTime % 36e5 % 6e4 / 1e3);
  return import_react43.default.createElement(
    "div",
    { className: "sendbird-ui-play-time ".concat(className) },
    import_react43.default.createElement(Label, { type: labelType, color: labelColor }, "".concat(hour ? hour + ":" : "").concat(min < 10 ? "0" : "").concat(min ? min : "0", ":").concat(sec < 10 ? "0" : "").concat(sec))
  );
};

// node_modules/@sendbird/uikit-react/ui/VoiceMessageItemBody.js
var import_react_dom12 = __toESM(require_react_dom(), 1);
var VoiceMessageItemBody = function(_a2) {
  var _b2;
  var className = _a2.className, message = _a2.message, channelUrl = _a2.channelUrl, _c = _a2.isByMe, isByMe = _c === void 0 ? false : _c, _d = _a2.isReactionEnabled, isReactionEnabled = _d === void 0 ? false : _d;
  var _e = (0, import_react44.useState)(false), usingReaction = _e[0], setUsingReaction = _e[1];
  var _f = useVoicePlayer({
    channelUrl,
    key: "".concat(message === null || message === void 0 ? void 0 : message.messageId),
    audioFileUrl: message === null || message === void 0 ? void 0 : message.url,
    audioFileMimeType: message === null || message === void 0 ? void 0 : message.type
  }), play = _f.play, pause = _f.pause, _g = _f.playbackTime, playbackTime = _g === void 0 ? 0 : _g, duration = _f.duration, _h = _f.playingStatus, playingStatus = _h === void 0 ? VOICE_PLAYER_STATUS.IDLE : _h;
  (0, import_react44.useEffect)(function() {
    var _a3;
    if (isReactionEnabled && ((_a3 = message === null || message === void 0 ? void 0 : message.reactions) === null || _a3 === void 0 ? void 0 : _a3.length) > 0) {
      setUsingReaction(true);
    } else {
      setUsingReaction(false);
    }
  }, [isReactionEnabled, (_b2 = message === null || message === void 0 ? void 0 : message.reactions) === null || _b2 === void 0 ? void 0 : _b2.length]);
  var progressBarMaxSize = (0, import_react44.useMemo)(function() {
    var _a3;
    var DEFAULT_MAX_SIZE = 1;
    if (message === null || message === void 0 ? void 0 : message.metaArrays) {
      var duration_1 = (_a3 = message === null || message === void 0 ? void 0 : message.metaArrays.find(function(metaArray) {
        return metaArray.key === "KEY_VOICE_MESSAGE_DURATION";
      })) === null || _a3 === void 0 ? void 0 : _a3.value[0];
      return duration_1 ? parseInt(duration_1) : DEFAULT_MAX_SIZE;
    }
    return DEFAULT_MAX_SIZE;
  }, [message === null || message === void 0 ? void 0 : message.metaArrays]);
  return import_react44.default.createElement(
    "div",
    { className: classnames("sendbird-voice-message-item-body", className, usingReaction && "is-reactions-contained") },
    import_react44.default.createElement(ProgressBar, { className: "sendbird-voice-message-item-body__progress-bar", maxSize: duration || progressBarMaxSize, currentSize: playbackTime, colorType: isByMe ? ProgressBarColorTypes.PRIMARY : ProgressBarColorTypes.GRAY }),
    import_react44.default.createElement(
      "div",
      { className: "sendbird-voice-message-item-body__status-button" },
      (playingStatus === VOICE_PLAYER_STATUS.IDLE || playingStatus === VOICE_PLAYER_STATUS.PAUSED) && import_react44.default.createElement(
        "div",
        { className: "sendbird-voice-message-item-body__status-button__button", onClick: play },
        import_react44.default.createElement(Icon, { width: "18px", height: "18px", type: IconTypes.PLAY, fillColor: IconColors.PRIMARY })
      ),
      playingStatus === VOICE_PLAYER_STATUS.PREPARING && import_react44.default.createElement(
        Loader,
        { width: "22.2px", height: "22.2px" },
        import_react44.default.createElement(Icon, { width: "22.2px", height: "22.2px", type: IconTypes.SPINNER, fillColor: IconColors.PRIMARY_2 })
      ),
      playingStatus === VOICE_PLAYER_STATUS.PLAYING && import_react44.default.createElement(
        "div",
        { className: "sendbird-voice-message-item-body__status-button__button", onClick: function() {
          pause();
        } },
        import_react44.default.createElement(
          "div",
          { className: "sendbird-voice-message-item-body__status-button__button__pause" },
          import_react44.default.createElement("div", { className: "sendbird-voice-message-item-body__status-button__button__pause__inner" }),
          import_react44.default.createElement("div", { className: "sendbird-voice-message-item-body__status-button__button__pause__inner" })
        )
      )
    ),
    import_react44.default.createElement(PlaybackTime, { className: "sendbird-voice-message-item-body__playback-time", time: progressBarMaxSize - playbackTime, labelType: LabelTypography.BODY_1, labelColor: isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1 })
  );
};

// node_modules/@sendbird/uikit-react/ui/ThumbnailMessageItemBody.js
var import_react45 = __toESM(require_react(), 1);
function ThumbnailMessageItemBody(_a2) {
  var _b2, _c;
  var _d = _a2.className, className = _d === void 0 ? "" : _d, message = _a2.message, _e = _a2.isByMe, isByMe = _e === void 0 ? false : _e, _f = _a2.mouseHover, mouseHover = _f === void 0 ? false : _f, _g = _a2.isReactionEnabled, isReactionEnabled = _g === void 0 ? false : _g, _h = _a2.showFileViewer, showFileViewer = _h === void 0 ? noop : _h, _j = _a2.style, style = _j === void 0 ? {} : _j;
  var thumbnailUrl = getMessageFirstFileThumbnailUrl(message);
  var _k = (0, import_react45.useState)(false), imageRendered = _k[0], setImageRendered = _k[1];
  var onClickHandler = useLongPress({
    onLongPress: noop,
    onClick: function() {
      if (isSentMessage(message)) {
        showFileViewer === null || showFileViewer === void 0 ? void 0 : showFileViewer(true);
      }
    }
  });
  return import_react45.default.createElement(
    "div",
    __assign({ className: getClassName([
      className,
      "sendbird-thumbnail-message-item-body",
      isByMe ? "outgoing" : "incoming",
      mouseHover ? "mouse-hover" : "",
      isReactionEnabled && ((_c = (_b2 = message.reactions) === null || _b2 === void 0 ? void 0 : _b2.length) !== null && _c !== void 0 ? _c : 0) > 0 ? "reactions" : ""
    ]) }, onClickHandler),
    import_react45.default.createElement(ImageRenderer, { className: "sendbird-thumbnail-message-item-body__thumbnail", url: thumbnailUrl || getMessageFirstFileUrl(message), alt: getMessageFirstFileType(message), width: (style === null || style === void 0 ? void 0 : style.width) || "360px", height: (style === null || style === void 0 ? void 0 : style.height) || "270px", onLoad: function() {
      setImageRendered(true);
    }, placeHolder: function(_a3) {
      var style2 = _a3.style;
      return import_react45.default.createElement("div", { className: "sendbird-thumbnail-message-item-body__placeholder", style: style2 });
    } }),
    isVideoMessage(message) && !thumbnailUrl && !imageRendered && import_react45.default.createElement(
      "video",
      { className: "sendbird-thumbnail-message-item-body__video" },
      import_react45.default.createElement("source", { src: getMessageFirstFileUrl(message), type: getMessageFirstFileType(message) })
    ),
    import_react45.default.createElement("div", { className: "sendbird-thumbnail-message-item-body__image-cover" }),
    (isVideoMessage(message) || isGifMessage(message)) && import_react45.default.createElement(
      "div",
      { className: "sendbird-thumbnail-message-item-body__icon-wrapper" },
      import_react45.default.createElement(
        "div",
        { className: "sendbird-thumbnail-message-item-body__icon-wrapper__icon" },
        import_react45.default.createElement(Icon, { type: isVideoMessage(message) ? IconTypes.PLAY : IconTypes.GIF, fillColor: IconColors.THUMBNAIL_ICON, width: "34px", height: "34px" })
      )
    )
  );
}

// node_modules/@sendbird/uikit-react/ui/UnknownMessageItemBody.js
var import_react46 = __toESM(require_react(), 1);
function UnknownMessageItemBody(_a2) {
  var _b2;
  var className = _a2.className, message = _a2.message, _c = _a2.isByMe, isByMe = _c === void 0 ? false : _c, _d = _a2.mouseHover, mouseHover = _d === void 0 ? false : _d, _e = _a2.isReactionEnabled, isReactionEnabled = _e === void 0 ? false : _e;
  var stringSet = (0, import_react46.useContext)(LocalizationContext).stringSet;
  return import_react46.default.createElement(
    "div",
    { className: getClassName([
      className !== null && className !== void 0 ? className : "",
      "sendbird-unknown-message-item-body",
      isByMe ? "outgoing" : "incoming",
      mouseHover ? "mouse-hover" : "",
      isReactionEnabled && ((_b2 = message === null || message === void 0 ? void 0 : message.reactions) === null || _b2 === void 0 ? void 0 : _b2.length) > 0 ? "reactions" : ""
    ]) },
    import_react46.default.createElement(Label, { className: "sendbird-unknown-message-item-body__header", type: LabelTypography.BODY_1, color: isByMe ? LabelColors.ONCONTENT_1 : LabelColors.ONBACKGROUND_1 }, stringSet.UNKNOWN__UNKNOWN_MESSAGE_TYPE),
    import_react46.default.createElement(Label, { className: "sendbird-unknown-message-item-body__description", type: LabelTypography.BODY_1, color: isByMe ? LabelColors.ONCONTENT_2 : LabelColors.ONBACKGROUND_2 }, stringSet.UNKNOWN__CANNOT_READ_MESSAGE)
  );
}

// node_modules/@sendbird/uikit-react/ui/TemplateMessageItemBody.js
var import_react50 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-D9VCJ_xd.js
var import_react47 = __toESM(require_react(), 1);
var ComponentType;
(function(ComponentType2) {
  ComponentType2["Box"] = "box";
  ComponentType2["Text"] = "text";
  ComponentType2["Image"] = "image";
  ComponentType2["TextButton"] = "textButton";
  ComponentType2["ImageButton"] = "imageButton";
  ComponentType2["Carousel"] = "carouselView";
})(ComponentType || (ComponentType = {}));
var outSingle$1 = (key, obj) => {
  if (typeof obj[key] !== "string")
    return {};
  return { [key]: argbToRgba(obj[key]) };
};
function argbToRgba(string) {
  if (!string.startsWith("#")) {
    return string;
  }
  if (string.length === 9) {
    return `#${string.slice(3)}${string[1]}${string[2]}`;
  }
  if (string.length === 5) {
    return `#${string.slice(2)}${string[1]}`;
  }
  return string;
}
var outViewStyle$1 = (viewStyle) => {
  if (!viewStyle)
    return {};
  return {
    viewStyle: Object.assign(Object.assign(Object.assign({}, viewStyle), outSingle$1("backgroundColor", viewStyle)), outSingle$1("borderColor", viewStyle))
  };
};
var outTextStyle$1 = (textStyle) => {
  if (!textStyle)
    return {};
  return {
    textStyle: Object.assign(Object.assign({}, textStyle), outSingle$1("color", textStyle))
  };
};
var outImageStyle = (imageStyle) => {
  if (!imageStyle)
    return {};
  return {
    imageStyle: Object.assign(Object.assign({}, imageStyle), outSingle$1("tintColor", imageStyle))
  };
};
var colorTransform = {
  run(prop) {
    if (prop.type === ComponentType.Text || prop.type === ComponentType.TextButton) {
      return Object.assign(Object.assign(Object.assign({}, prop), outViewStyle$1(prop.viewStyle)), outTextStyle$1(prop.textStyle));
    }
    if (prop.type === ComponentType.ImageButton || prop.type === ComponentType.Image) {
      return Object.assign(Object.assign(Object.assign({}, prop), outViewStyle$1(prop.viewStyle)), outImageStyle(prop.imageStyle));
    }
    return Object.assign(Object.assign({}, prop), outViewStyle$1(prop.viewStyle));
  }
};
var isNumber = (val) => {
  if (typeof val === "string") {
    return !Number.isNaN(Number(val));
  }
  return typeof val === "number" && !Number.isNaN(val);
};
var outSingle = (key, obj) => {
  if (obj[key] === void 0 || obj[key] === null)
    return {};
  return isNumber(obj[key]) ? { [key]: Number(obj[key]) } : {};
};
var outSpacing = (key, spacing) => {
  if (!spacing)
    return {};
  return {
    [key]: {
      left: isNumber(spacing.left) ? Number(spacing.left) : spacing.left,
      right: isNumber(spacing.right) ? Number(spacing.right) : spacing.right,
      top: isNumber(spacing.top) ? Number(spacing.top) : spacing.top,
      bottom: isNumber(spacing.bottom) ? Number(spacing.bottom) : spacing.bottom
    }
  };
};
var outSize = (key, size) => {
  if (!size)
    return {};
  return {
    [key]: {
      type: size.type,
      value: isNumber(size.value) ? Number(size.value) : size.value
    }
  };
};
var outMetadata = (metaData) => {
  if (!metaData)
    return {};
  return {
    metaData: {
      pixelWidth: isNumber(metaData.pixelWidth) ? Number(metaData.pixelWidth) : metaData.pixelWidth,
      pixelHeight: isNumber(metaData.pixelHeight) ? Number(metaData.pixelHeight) : metaData.pixelHeight
    }
  };
};
var outViewStyle = (viewStyle) => {
  if (!viewStyle)
    return {};
  return {
    viewStyle: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, viewStyle), outSingle("borderWidth", viewStyle)), outSingle("radius", viewStyle)), outSpacing("margin", viewStyle.margin)), outSpacing("padding", viewStyle.padding))
  };
};
var outTextStyle = (textStyle) => {
  if (!textStyle)
    return {};
  return {
    textStyle: Object.assign(Object.assign(Object.assign({}, textStyle), outSingle("size", textStyle)), outSingle("weight", textStyle))
  };
};
var outCarouselStyle = (carouselstyle) => {
  if (!carouselstyle)
    return {};
  return {
    carouselStyle: Object.assign(Object.assign({}, carouselstyle), outSingle("spacing", carouselstyle))
  };
};
var outViewProps = (view) => {
  return Object.assign(Object.assign(Object.assign({}, outSize("width", view.width)), outSize("height", view.height)), outViewStyle(view.viewStyle));
};
var outTextProps = (text2) => {
  return Object.assign(Object.assign(Object.assign({}, outViewProps(text2)), outTextStyle(text2.textStyle)), outSingle("maxTextLines", text2));
};
var outImageProps = (image) => {
  return Object.assign(Object.assign({}, outViewProps(image)), outMetadata(image.metaData));
};
var outCarouselProps = (carousel) => {
  return Object.assign(Object.assign(Object.assign({}, outViewProps(carousel)), outCarouselStyle(carousel.carouselStyle)), {
    // Convert only top-level items to find has fill width values.
    items: carousel.items.map((item) => Object.assign(Object.assign({}, item), { body: Object.assign(Object.assign({}, item.body), { items: item.body.items.map((it) => numberTransform.run(it)) }) }))
  });
};
var numberTransform = {
  run(prop) {
    if (prop.type === ComponentType.Text || prop.type === ComponentType.TextButton) {
      return Object.assign(Object.assign({}, prop), outTextProps(prop));
    }
    if (prop.type === ComponentType.ImageButton || prop.type === ComponentType.Image) {
      return Object.assign(Object.assign({}, prop), outImageProps(prop));
    }
    if (prop.type === ComponentType.Carousel) {
      return Object.assign(Object.assign({}, prop), outCarouselProps(prop));
    }
    return Object.assign(Object.assign({}, prop), outViewProps(prop));
  }
};
var MAPPER = () => void 0;
var createParser = (params) => {
  var _a2;
  const defaultMapper = (params === null || params === void 0 ? void 0 : params.defaultMapper) || MAPPER;
  const mapper = {
    defaultMapper,
    mapBoxProps: (params === null || params === void 0 ? void 0 : params.mapBoxProps) || defaultMapper,
    mapTextProps: (params === null || params === void 0 ? void 0 : params.mapTextProps) || defaultMapper,
    mapImageProps: (params === null || params === void 0 ? void 0 : params.mapImageProps) || defaultMapper,
    mapTextButtonProps: (params === null || params === void 0 ? void 0 : params.mapTextButtonProps) || defaultMapper,
    mapImageButtonProps: (params === null || params === void 0 ? void 0 : params.mapImageButtonProps) || defaultMapper,
    mapCarouselProps: (params === null || params === void 0 ? void 0 : params.mapCarouselProps) || defaultMapper
  };
  const transforms = [colorTransform, numberTransform, ...(_a2 = params === null || params === void 0 ? void 0 : params.transforms) !== null && _a2 !== void 0 ? _a2 : []];
  const transformDirty = /* @__PURE__ */ new Set();
  return {
    setTransforms(newTransforms) {
      transforms.length = 0;
      transforms.push(...newTransforms);
      transformDirty.clear();
    },
    addTransforms(newTransforms) {
      transforms.push(...newTransforms);
    },
    parse(rawItem, options) {
      const item = transforms.reduce((it, transform) => transform.run(it), rawItem);
      switch (item.type) {
        case ComponentType.Box: {
          return { transformed: item, properties: mapper.mapBoxProps(item, options) };
        }
        case ComponentType.Text: {
          return { transformed: item, properties: mapper.mapTextProps(item, options) };
        }
        case ComponentType.Image: {
          return { transformed: item, properties: mapper.mapImageProps(item, options) };
        }
        case ComponentType.TextButton: {
          return { transformed: item, properties: mapper.mapTextButtonProps(item, options) };
        }
        case ComponentType.ImageButton: {
          return { transformed: item, properties: mapper.mapImageButtonProps(item, options) };
        }
        case ComponentType.Carousel: {
          return { transformed: item, properties: mapper.mapCarouselProps(item, options) };
        }
        default:
          return { transformed: item, properties: void 0 };
      }
    }
  };
};
var FRAGMENT = ({ children }) => import_react47.default.createElement(import_react47.default.Fragment, null, children);
function createRenderer(params) {
  var _a2, _b2, _c, _d, _e, _f;
  return {
    box: ((_a2 = params === null || params === void 0 ? void 0 : params.views) === null || _a2 === void 0 ? void 0 : _a2.box) || FRAGMENT,
    text: ((_b2 = params === null || params === void 0 ? void 0 : params.views) === null || _b2 === void 0 ? void 0 : _b2.text) || FRAGMENT,
    image: ((_c = params === null || params === void 0 ? void 0 : params.views) === null || _c === void 0 ? void 0 : _c.image) || FRAGMENT,
    imageButton: ((_d = params === null || params === void 0 ? void 0 : params.views) === null || _d === void 0 ? void 0 : _d.imageButton) || FRAGMENT,
    textButton: ((_e = params === null || params === void 0 ? void 0 : params.views) === null || _e === void 0 ? void 0 : _e.textButton) || FRAGMENT,
    carouselView: ((_f = params === null || params === void 0 ? void 0 : params.views) === null || _f === void 0 ? void 0 : _f.carouselView) || FRAGMENT
  };
}
var __rest$5 = function(s3, e2) {
  var t2 = {};
  for (var p in s3)
    if (Object.prototype.hasOwnProperty.call(s3, p) && e2.indexOf(p) < 0)
      t2[p] = s3[p];
  if (s3 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p = Object.getOwnPropertySymbols(s3); i2 < p.length; i2++) {
      if (e2.indexOf(p[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s3, p[i2]))
        t2[p[i2]] = s3[p[i2]];
    }
  return t2;
};
var SizeContext = (0, import_react47.createContext)({
  sizes: {},
  updateSize: () => {
  }
});
var SizeContextProvider = ({ children }) => {
  const [sizes, setSizes] = (0, import_react47.useState)({});
  const updateSize = (0, import_react47.useCallback)((_a2) => {
    var { id } = _a2, rest = __rest$5(_a2, ["id"]);
    if (id) {
      setSizes((prevSizes) => Object.assign(Object.assign({}, prevSizes), { [id]: rest }));
    }
  }, []);
  return import_react47.default.createElement(SizeContext.Provider, { value: { sizes, updateSize } }, children);
};
var useSizeContext = () => (0, import_react47.useContext)(SizeContext);
var Layout;
(function(Layout2) {
  Layout2["Row"] = "row";
  Layout2["Column"] = "column";
})(Layout || (Layout = {}));
var AlignValue;
(function(AlignValue2) {
  AlignValue2["Center"] = "center";
  AlignValue2["Left"] = "left";
  AlignValue2["Right"] = "right";
  AlignValue2["Top"] = "top";
  AlignValue2["Bottom"] = "bottom";
})(AlignValue || (AlignValue = {}));
var FlexSizeSpecValue;
(function(FlexSizeSpecValue2) {
  FlexSizeSpecValue2[FlexSizeSpecValue2["FillParent"] = 0] = "FillParent";
  FlexSizeSpecValue2[FlexSizeSpecValue2["WrapContent"] = 1] = "WrapContent";
})(FlexSizeSpecValue || (FlexSizeSpecValue = {}));
var FontWeight;
(function(FontWeight2) {
  FontWeight2["Normal"] = "normal";
  FontWeight2["Bold"] = "bold";
})(FontWeight || (FontWeight = {}));
var MediaContentMode;
(function(MediaContentMode2) {
  MediaContentMode2["AspectFit"] = "aspectFit";
  MediaContentMode2["AspectFill"] = "aspectFill";
  MediaContentMode2["ScalesToFill"] = "scalesToFill";
})(MediaContentMode || (MediaContentMode = {}));
var SUPPORTED_TEMPLATE_VERSIONS = [
  1,
  2
  // Composite templates: Carousel
];
var alignInFlex = (align) => {
  switch (align) {
    case AlignValue.Right:
    case AlignValue.Bottom:
      return "flex-end";
    case AlignValue.Center:
      return "center";
    case AlignValue.Left:
    case AlignValue.Top:
    default:
      return "flex-start";
  }
};
var isTemplateVersionSupported = (templateVersion) => {
  if (!templateVersion)
    return true;
  return SUPPORTED_TEMPLATE_VERSIONS.includes(Number(templateVersion));
};
var memoize = (fn) => {
  const cache = /* @__PURE__ */ new Map();
  const cached = function(val) {
    return cache.has(val) ? cache.get(val) : cache.set(val, fn.call(this, val)) && cache.get(val);
  };
  cached.cache = cache;
  return cached;
};
var setTemplateItemId = memoize((data) => {
  const addIdRecursively = (item, id) => {
    if ("items" in item && (item === null || item === void 0 ? void 0 : item.items) != null) {
      item.items.forEach((subItem, subIdx) => {
        const subId = `${id}-${subIdx}`;
        subItem.id = subId;
        addIdRecursively(subItem, subId);
      });
    }
  };
  data.forEach((item, idx) => {
    const id = `${idx}`;
    item.id = id;
    addIdRecursively(item, id);
  });
  return data;
});
var defaultProperties = {
  rootLayout: Layout.Column,
  view: {
    size: {
      width: { type: "flex", value: FlexSizeSpecValue.FillParent },
      height: { type: "flex", value: FlexSizeSpecValue.WrapContent }
    }
  },
  box: {
    layout: Layout.Row,
    align: { vertical: AlignValue.Top, horizontal: AlignValue.Left }
  },
  textButton: {
    maxTextLines: 1
  },
  carousel: {
    style: {
      spacing: 10,
      maxChildWidth: 240
    }
  }
};
var createMessageTemplate = (opts) => {
  const Container = opts.Container || import_react47.default.Fragment;
  const UnknownMessage = opts.UnknownMessage || (() => null);
  const parser2 = opts.parser || createParser();
  const renderer2 = opts.renderer || createRenderer();
  const MessageTemplateBase = ({ templateItems, templateVersion, parentLayout = defaultProperties.box.layout, depth = 0 }) => {
    if (!isTemplateVersionSupported(templateVersion)) {
      throw new Error(`Cannot parse template item due to unsupported template version: ${templateVersion}, ${SUPPORTED_TEMPLATE_VERSIONS}`);
    }
    return import_react47.default.createElement(import_react47.default.Fragment, null, templateItems.map((rawItem, index, siblings) => {
      const result = parser2.parse(rawItem, { parentLayout, depth, elemIdx: index, siblings });
      const item = result.transformed;
      const rendererProps = {
        key: index,
        siblings,
        parentLayout,
        parsedProperties: result.properties
      };
      switch (item.type) {
        case ComponentType.Carousel: {
          if (!Array.isArray(item.items) || item.items.length === 0) {
            throw new Error("Cannot parse template item as Carousel if carousel has no items.");
          }
          return import_react47.default.createElement(renderer2.carouselView, Object.assign({}, item, rendererProps), item.items.map((template, index2) => import_react47.default.createElement(MessageTemplateBase, { key: index2, templateItems: template.body.items || [], depth: depth + 1, templateVersion: template.version })));
        }
        case ComponentType.Box: {
          return import_react47.default.createElement(
            renderer2.box,
            Object.assign({}, item, rendererProps),
            import_react47.default.createElement(MessageTemplateBase, { templateItems: item.items || [], parentLayout: item.layout, depth: depth + 1, templateVersion })
          );
        }
        case ComponentType.Text: {
          return import_react47.default.createElement(renderer2.text, Object.assign({}, item, rendererProps));
        }
        case ComponentType.Image: {
          return import_react47.default.createElement(renderer2.image, Object.assign({}, item, rendererProps));
        }
        case ComponentType.TextButton: {
          return import_react47.default.createElement(renderer2.textButton, Object.assign({}, item, rendererProps));
        }
        case ComponentType.ImageButton: {
          return import_react47.default.createElement(renderer2.imageButton, Object.assign({}, item, rendererProps));
        }
        default: {
          return import_react47.default.createElement(UnknownMessage, { item });
        }
      }
    }));
  };
  return {
    MessageTemplate: ({ templateVersion, templateItems, parentLayout = defaultProperties.rootLayout }) => {
      const items = setTemplateItemId(templateItems);
      return import_react47.default.createElement(
        SizeContextProvider,
        null,
        import_react47.default.createElement(
          Container,
          null,
          import_react47.default.createElement(MessageTemplateBase, { isRoot: true, parentLayout, templateItems: items, templateVersion })
        )
      );
    },
    MessageTemplateBase
  };
};
var ActionType;
(function(ActionType2) {
  ActionType2["Web"] = "web";
  ActionType2["Custom"] = "custom";
  ActionType2["UIKit"] = "uikit";
})(ActionType || (ActionType = {}));
({
  version: 1,
  body: {
    items: [
      {
        type: ComponentType.Image,
        action: { type: ActionType.Web, data: "https://docs.sendbird.com" },
        height: { type: "fixed", value: 236 },
        viewStyle: {
          padding: {
            left: 4,
            right: 4,
            top: 4,
            bottom: 4
          }
        },
        imageUrl: "https://cdn.pixabay.com/photo/2022/10/12/10/45/bird-7516219_1280.jpg",
        imageStyle: { contentMode: MediaContentMode.AspectFill }
      },
      {
        type: ComponentType.Box,
        layout: Layout.Column,
        width: { type: "flex", value: FlexSizeSpecValue.FillParent },
        height: { type: "fixed", value: 200 },
        items: [
          {
            type: ComponentType.Box,
            width: { type: "flex", value: FlexSizeSpecValue.FillParent },
            height: { type: "flex", value: FlexSizeSpecValue.FillParent },
            viewStyle: { backgroundColor: "#fa6464" }
          },
          {
            type: ComponentType.Box,
            layout: Layout.Column,
            width: { type: "flex", value: FlexSizeSpecValue.FillParent },
            height: { type: "flex", value: FlexSizeSpecValue.WrapContent },
            viewStyle: { backgroundColor: "#ffaf5c" },
            items: [
              {
                type: ComponentType.Text,
                text: "Message",
                align: { horizontal: AlignValue.Center, vertical: AlignValue.Center },
                width: { type: "flex", value: FlexSizeSpecValue.FillParent },
                height: { type: "fixed", value: 50 }
              },
              {
                type: ComponentType.Image,
                action: { type: ActionType.Web, data: "https://docs.sendbird.com" },
                width: { type: "flex", value: FlexSizeSpecValue.FillParent },
                height: { type: "fixed", value: 50 },
                imageUrl: "https://cdn.pixabay.com/photo/2022/10/12/10/45/bird-7516219_1280.jpg",
                imageStyle: { contentMode: MediaContentMode.AspectFill }
              }
            ]
          },
          {
            type: ComponentType.Box,
            width: { type: "flex", value: FlexSizeSpecValue.FillParent },
            height: { type: "fixed", value: 20 },
            viewStyle: { backgroundColor: "#ffe450" }
          },
          {
            type: ComponentType.Box,
            width: { type: "flex", value: FlexSizeSpecValue.FillParent },
            height: { type: "flex", value: FlexSizeSpecValue.FillParent },
            viewStyle: { backgroundColor: "#329a1b" }
          }
        ]
      },
      {
        type: ComponentType.Box,
        viewStyle: { padding: { top: 12, bottom: 12, left: 12, right: 12 } },
        layout: Layout.Column,
        items: [
          {
            type: ComponentType.Box,
            align: { horizontal: AlignValue.Left, vertical: AlignValue.Center },
            layout: Layout.Row,
            viewStyle: {
              borderWidth: 1,
              borderColor: "#72723f"
            },
            width: { type: "flex", value: FlexSizeSpecValue.FillParent },
            height: { type: "fixed", value: 150 },
            items: [
              {
                type: ComponentType.Text,
                width: { type: "flex", value: FlexSizeSpecValue.FillParent },
                height: { type: "fixed", value: 50 },
                text: "Sample1 text",
                maxTextLines: 1,
                align: { vertical: AlignValue.Center, horizontal: AlignValue.Left },
                viewStyle: {
                  backgroundColor: "#cc4400"
                },
                textStyle: {
                  size: 16,
                  color: "#f8f8f8",
                  weight: FontWeight.Bold
                }
              },
              {
                type: ComponentType.ImageButton,
                action: { type: ActionType.UIKit, data: "uikit://delete" },
                width: { type: "fixed", value: 20 },
                height: { type: "fixed", value: 20 },
                imageUrl: "https://file-ap-1.sendbird.com/5b5379aa73fd460da22ffaf9a61d0d7f.png",
                imageStyle: { contentMode: MediaContentMode.AspectFit }
              }
            ]
          },
          {
            type: ComponentType.Text,
            viewStyle: { padding: { top: 6, bottom: 12, left: 0, right: 0 } },
            text: "Esse eu esse duis ipsum et dolor eu ut sit amet consectetur cillum velit officia. Ex adipisicing elit quis ea sit. Occaecat in eu aliqua nulla magna id ut excepteur minim.",
            maxTextLines: 2,
            textStyle: { size: 14, color: "#e10000" },
            width: { type: "fixed", value: 200 },
            height: { type: "fixed", value: 50 }
          },
          {
            type: ComponentType.TextButton,
            action: { type: ActionType.Web, data: "https://www.daum.net" },
            text: "Button 3",
            textStyle: { size: 14, color: "#742ddd", weight: FontWeight.Bold }
          }
        ]
      }
    ]
  }
});
({
  "version": 1,
  "body": {
    "items": [
      {
        "type": ComponentType.Image,
        "action": { "type": ActionType.Web, "data": "https://www.naver.com/" },
        "height": { "type": "fixed", "value": 136 },
        "imageUrl": "https://cdn.pixabay.com/photo/2022/10/12/10/45/bird-7516219_1280.jpg",
        "imageStyle": { "contentMode": MediaContentMode.AspectFill }
      },
      {
        "type": ComponentType.Box,
        "viewStyle": { "padding": { "top": 12, "bottom": 12, "left": 12, "right": 12 }, backgroundColor: "#cccccc" },
        "layout": Layout.Column,
        width: { type: "flex", value: FlexSizeSpecValue.FillParent },
        "items": [
          {
            "type": ComponentType.Box,
            width: { type: "flex", value: FlexSizeSpecValue.FillParent },
            "layout": Layout.Row,
            "items": [
              {
                "type": ComponentType.TextButton,
                "action": { "type": ActionType.Web, "data": "https://www.daum.net" },
                width: { type: "fixed", value: 150 },
                "viewStyle": { "margin": { "top": 0, "bottom": 0, "left": 0, "right": 4 } },
                "text": "Button 2",
                "textStyle": { "size": 14, "weight": FontWeight.Bold }
              },
              {
                "type": ComponentType.TextButton,
                "action": { "type": ActionType.Web, "data": "https://www.daum.net" },
                width: { type: "flex", value: FlexSizeSpecValue.FillParent },
                "viewStyle": { "margin": { "top": 0, "bottom": 0, "left": 4, "right": 0 } },
                "text": "Button 3",
                "textStyle": { "size": 14, "weight": FontWeight.Bold }
              }
            ]
          },
          {
            "type": ComponentType.Box,
            width: { type: "flex", value: FlexSizeSpecValue.FillParent },
            "layout": Layout.Row,
            "items": [
              {
                "type": ComponentType.Text,
                "text": "Sample2 text",
                "width": { "type": "flex", "value": FlexSizeSpecValue.FillParent },
                "maxTextLines": 1,
                "textStyle": { "size": 16, "weight": FontWeight.Bold }
              },
              {
                "type": ComponentType.ImageButton,
                "action": { "type": ActionType.UIKit, "data": "uikit://delete" },
                "width": { "type": "fixed", "value": 20 },
                "height": { "type": "fixed", "value": 20 },
                "imageUrl": "https://file-ap-1.sendbird.com/5b5379aa73fd460da22ffaf9a61d0d7f.png",
                "imageStyle": { "contentMode": MediaContentMode.AspectFit }
              }
            ]
          },
          {
            "type": ComponentType.Text,
            "viewStyle": { "padding": { "top": 6, "bottom": 12, "left": 0, "right": 0 } },
            "text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aui",
            "textStyle": { "size": 14 }
          }
        ]
      }
    ]
  }
});
({
  "version": 1,
  "body": {
    "items": [
      {
        "type": ComponentType.Box,
        "viewStyle": { "backgroundColor": "#ffffff", "borderWidth": 1, "borderColor": "#eeeeee", "radius": 16 },
        "layout": Layout.Column,
        "items": [
          {
            "type": ComponentType.Image,
            "height": { "type": "fixed", "value": 200 },
            "imageUrl": "https://img.freepik.com/free-vector/cartoon-happy-hours-background_52683-81243.jpg?w=2000&t=st=1666689198~exp=1666689798~hmac=23109d44ba03deee7aee069cbeebfcb48fa27f85e53c1cafc5d5d7345f1a2041",
            "imageStyle": { "contentMode": MediaContentMode.AspectFill }
          },
          {
            "type": ComponentType.Box,
            "viewStyle": { "padding": { "top": 15, "bottom": 15, "left": 15, "right": 15 } },
            "layout": Layout.Column,
            "items": [
              {
                "type": ComponentType.Text,
                "text": "Don't miss these deals today",
                "maxTextLines": 1,
                "textStyle": { "size": 20, "color": "#e10000", "weight": FontWeight.Bold }
              },
              {
                "type": ComponentType.Text,
                "viewStyle": { "margin": { "top": 5, "bottom": 0, "left": 0, "right": 0 } },
                "text": "Pay with Maya and get cashback!",
                "maxTextLines": 1,
                "textStyle": { "size": 14, "color": "#e10000" }
              },
              {
                "type": ComponentType.Box,
                "align": { "horizontal": AlignValue.Left, "vertical": AlignValue.Center },
                "viewStyle": { "margin": { "top": 10, "bottom": 0, "left": 0, "right": 0 } },
                "layout": Layout.Row,
                "items": [
                  {
                    "type": ComponentType.Image,
                    "width": { "type": "fixed", "value": 50 },
                    "height": { "type": "fixed", "value": 50 },
                    "viewStyle": {
                      "backgroundColor": "#ffffff",
                      "borderWidth": 1,
                      "borderColor": "#eeeeee",
                      "radius": 25
                    },
                    "imageUrl": "https://yt3.ggpht.com/ytc/AMLnZu8Kg89ymE7qt5bsS9vMqi9h2aHiN6m9ID-IgxR6-Q=s900-c-k-c0x00ffffff-no-rj",
                    "imageStyle": { "contentMode": MediaContentMode.AspectFill }
                  },
                  {
                    "type": ComponentType.Box,
                    "align": { "horizontal": AlignValue.Left, "vertical": AlignValue.Center },
                    "viewStyle": { "margin": { "top": 0, "bottom": 0, "left": 15, "right": 0 } },
                    "layout": Layout.Column,
                    "items": [
                      {
                        "type": ComponentType.Text,
                        "text": "Meralco",
                        "maxTextLines": 1,
                        "textStyle": { "size": 16, "color": "#e10000", "weight": FontWeight.Bold }
                      },
                      {
                        "type": ComponentType.Text,
                        "viewStyle": { "margin": { "top": 3, "bottom": 0, "left": 0, "right": 0 } },
                        "text": "30% cashback, P300 min spend",
                        "maxTextLines": 1,
                        "textStyle": { "size": 12, "color": "#610000", "weight": FontWeight.Bold }
                      }
                    ]
                  }
                ]
              },
              {
                "type": ComponentType.Box,
                "align": { "horizontal": AlignValue.Left, "vertical": AlignValue.Center },
                "viewStyle": { "margin": { "top": 10, "bottom": 0, "left": 0, "right": 0 } },
                "layout": Layout.Row,
                "items": [
                  {
                    "type": ComponentType.Image,
                    "width": { "type": "fixed", "value": 50 },
                    "height": { "type": "fixed", "value": 50 },
                    "viewStyle": {
                      "backgroundColor": "#ffffff",
                      "borderWidth": 1,
                      "borderColor": "#eeeeee",
                      "radius": 25
                    },
                    "imageUrl": "https://1000logos.net/wp-content/uploads/2021/12/Globe-Telecom-logo.png",
                    "imageStyle": { "contentMode": MediaContentMode.AspectFill, tintColor: "#a49a9a" }
                  },
                  {
                    "type": ComponentType.Box,
                    "align": { "horizontal": AlignValue.Left, "vertical": AlignValue.Center },
                    "viewStyle": { "margin": { "top": 0, "bottom": 0, "left": 15, "right": 0 } },
                    "layout": Layout.Column,
                    "items": [
                      {
                        "type": ComponentType.Text,
                        "text": "Globe",
                        "maxTextLines": 1,
                        "textStyle": { "size": 16, "color": "#e10000", "weight": FontWeight.Bold }
                      },
                      {
                        "type": ComponentType.Text,
                        "viewStyle": { "margin": { "top": 3, "bottom": 0, "left": 0, "right": 0 } },
                        "text": "30% cashback, P300 min spend",
                        "maxTextLines": 1,
                        "textStyle": { "size": 12, "color": "#610000", "weight": FontWeight.Bold }
                      }
                    ]
                  }
                ]
              },
              {
                "type": ComponentType.Box,
                "align": { "horizontal": AlignValue.Left, "vertical": AlignValue.Center },
                "viewStyle": { "margin": { "top": 10, "bottom": 0, "left": 0, "right": 0 } },
                "layout": Layout.Row,
                "items": [
                  {
                    "type": ComponentType.Image,
                    "width": { "type": "fixed", "value": 50 },
                    "height": { "type": "fixed", "value": 50 },
                    "viewStyle": {
                      "backgroundColor": "#ffffff",
                      "borderWidth": 1,
                      "borderColor": "#eeeeee",
                      "radius": 25
                    },
                    "imageUrl": "https://upload.wikimedia.org/wikipedia/commons/thumb/4/41/Cignal.svg/640px-Cignal.svg.png",
                    "imageStyle": { "contentMode": MediaContentMode.AspectFill }
                  },
                  {
                    "type": ComponentType.Box,
                    "align": { "horizontal": AlignValue.Left, "vertical": AlignValue.Center },
                    "viewStyle": { "margin": { "top": 0, "bottom": 0, "left": 15, "right": 0 } },
                    "layout": Layout.Column,
                    "items": [
                      {
                        "type": ComponentType.Text,
                        "text": "Cignal",
                        "maxTextLines": 1,
                        "textStyle": { "size": 16, "color": "#e10000", "weight": FontWeight.Bold }
                      },
                      {
                        "type": ComponentType.Text,
                        "viewStyle": { "margin": { "top": 3, "bottom": 0, "left": 0, "right": 0 } },
                        "text": "30% cashback, P300 min spend",
                        "maxTextLines": 1,
                        "textStyle": { "size": 12, "color": "#610000", "weight": FontWeight.Bold }
                      }
                    ]
                  }
                ]
              },
              {
                "type": ComponentType.Box,
                "align": { "horizontal": AlignValue.Left, "vertical": AlignValue.Center },
                "viewStyle": { "margin": { "top": 10, "bottom": 0, "left": 0, "right": 0 } },
                "layout": Layout.Row,
                "items": [
                  {
                    "type": ComponentType.TextButton,
                    "action": { "type": ActionType.Web, "data": "https://www.daum.net" },
                    "viewStyle": {
                      "backgroundColor": "#e0e0e0",
                      "radius": 16,
                      "margin": { "top": 0, "bottom": 0, "left": 0, "right": 4 },
                      "padding": { "top": 12, "bottom": 12, "left": 12, "right": 12 }
                    },
                    "text": "Learn more",
                    "textStyle": { "size": 15, "color": "#e10000", "weight": FontWeight.Bold }
                  },
                  {
                    "type": ComponentType.TextButton,
                    "action": { "type": ActionType.Web, "data": "https://www.daum.net" },
                    "viewStyle": {
                      "backgroundColor": "#e10000",
                      "radius": 16,
                      "margin": { "top": 0, "bottom": 0, "left": 4, "right": 0 },
                      "padding": { "top": 12, "bottom": 12, "left": 12, "right": 12 }
                    },
                    "text": "Pay now",
                    "textStyle": { "size": 15, "color": "#ffffff", "weight": FontWeight.Bold }
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  }
});
({
  "version": 1,
  "body": {
    "items": [
      {
        "type": ComponentType.Box,
        "layout": Layout.Column,
        "items": [
          {
            "type": ComponentType.Image,
            "imageUrl": "https://static.sendbird.com/sample/profiles/profile_40_512px.png",
            "metaData": {
              "pixelWidth": 512,
              "pixelHeight": 512
            },
            "imageStyle": {
              "tintColor": "#44ff1188"
            },
            viewStyle: {
              "padding": {
                "top": 12,
                "right": 12,
                "bottom": 12,
                "left": 12
              }
            }
          },
          {
            "type": ComponentType.Box,
            "viewStyle": {
              "padding": {
                "top": 12,
                "right": 12,
                "bottom": 12,
                "left": 12
              }
            },
            "layout": Layout.Column,
            "items": [
              {
                "type": ComponentType.Box,
                "layout": Layout.Row,
                "items": [
                  {
                    "type": ComponentType.Box,
                    "layout": Layout.Column,
                    "items": [
                      {
                        "type": ComponentType.Text,
                        "text": "hi",
                        "maxTextLines": 3,
                        "viewStyle": {
                          "padding": {
                            "top": 0,
                            "bottom": 6,
                            "left": 0,
                            "right": 0
                          }
                        },
                        "textStyle": {
                          "size": 16,
                          "weight": FontWeight.Bold
                        }
                      },
                      {
                        "type": ComponentType.Text,
                        "text": "bye",
                        "maxTextLines": 10,
                        "textStyle": {
                          "size": 14
                        }
                      }
                    ]
                  },
                  {
                    "type": ComponentType.ImageButton,
                    "action": {
                      "type": ActionType.UIKit,
                      "data": "sendbirduikit://delete"
                    },
                    "width": {
                      "type": "fixed",
                      "value": 20
                    },
                    "height": {
                      "type": "fixed",
                      "value": 20
                    },
                    "metaData": {
                      "pixelWidth": 60,
                      "pixelHeight": 60
                    },
                    "imageUrl": "https://dxstmhyqfqr1o.cloudfront.net/sendbird-message-builder/icon-more.png",
                    "imageStyle": {
                      "tintColor": "#ff8d5a"
                    }
                  }
                ]
              },
              {
                "type": ComponentType.Box,
                "layout": Layout.Column,
                "items": [
                  {
                    "type": ComponentType.Box,
                    "viewStyle": {
                      "margin": {
                        "top": 16,
                        "bottom": 0,
                        "left": 0,
                        "right": 0
                      }
                    },
                    "align": {
                      "horizontal": AlignValue.Left,
                      "vertical": AlignValue.Center
                    },
                    "layout": Layout.Row,
                    "items": [
                      {
                        "type": ComponentType.Image,
                        "imageUrl": "https://ca.slack-edge.com/T0ADCTNEL-ULE240VNV-83fd5776e78e-512",
                        "width": {
                          "type": "fixed",
                          "value": 40
                        },
                        "height": {
                          "type": "fixed",
                          "value": 40
                        },
                        "metaData": {
                          "pixelWidth": 512,
                          "pixelHeight": 512
                        },
                        "viewStyle": {
                          "backgroundColor": "#BDBDBD",
                          "radius": 20
                        },
                        "imageStyle": {
                          "contentMode": MediaContentMode.AspectFill
                        }
                      },
                      {
                        "type": ComponentType.Box,
                        "viewStyle": {
                          "margin": {
                            "top": 0,
                            "bottom": 0,
                            "left": 12,
                            "right": 0
                          }
                        },
                        "layout": Layout.Column,
                        "items": [
                          {
                            "type": ComponentType.Text,
                            "text": "Chongbu",
                            "maxTextLines": 1,
                            "textStyle": {
                              "size": 16,
                              "weight": FontWeight.Bold
                            }
                          },
                          {
                            "type": ComponentType.Text,
                            "viewStyle": {
                              "margin": {
                                "top": 4,
                                "bottom": 0,
                                "left": 0,
                                "right": 0
                              }
                            },
                            "text": " ",
                            "maxTextLines": 1,
                            "textStyle": {
                              "size": 14
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": ComponentType.Box,
                    "viewStyle": {
                      "margin": {
                        "top": 16,
                        "bottom": 0,
                        "left": 0,
                        "right": 0
                      }
                    },
                    "align": {
                      "horizontal": AlignValue.Left,
                      "vertical": AlignValue.Center
                    },
                    "layout": Layout.Row,
                    "items": [
                      {
                        "type": ComponentType.Image,
                        "imageUrl": "https://ca.slack-edge.com/T0ADCTNEL-U02LA25KY8J-d41a3e8c7554-512",
                        "width": {
                          "type": "fixed",
                          "value": 40
                        },
                        "height": {
                          "type": "fixed",
                          "value": 40
                        },
                        "metaData": {
                          "pixelWidth": 512,
                          "pixelHeight": 512
                        },
                        "viewStyle": {
                          "backgroundColor": "#BDBDBD",
                          "radius": 20
                        },
                        "imageStyle": {
                          "contentMode": MediaContentMode.AspectFill
                        }
                      },
                      {
                        "type": ComponentType.Box,
                        "viewStyle": {
                          "margin": {
                            "top": 0,
                            "bottom": 0,
                            "left": 12,
                            "right": 0
                          }
                        },
                        "layout": Layout.Column,
                        "items": [
                          {
                            "type": ComponentType.Text,
                            "text": "Amanda",
                            "maxTextLines": 1,
                            "textStyle": {
                              "size": 16,
                              "weight": FontWeight.Bold
                            }
                          },
                          {
                            "type": ComponentType.Text,
                            "viewStyle": {
                              "margin": {
                                "top": 4,
                                "bottom": 0,
                                "left": 0,
                                "right": 0
                              }
                            },
                            "text": "This is title message",
                            "maxTextLines": 1,
                            "textStyle": {
                              "size": 14
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  }
});
({
  "version": "1",
  "body": {
    "items": [
      {
        "type": "box",
        "layout": "column",
        height: { type: "fixed", value: 600 },
        "items": [
          {
            "type": "box",
            "layout": "column",
            "viewStyle": { "radius": "8", "padding": { "top": "12", "bottom": "12", "left": "12", "right": "12" } },
            "items": [
              {
                "type": "text",
                "text": "Title text",
                "textStyle": { "color": "#E0000000", "size": "16", "weight": "bold" },
                "maxTextLines": "5",
                "viewStyle": {},
                "action": { "data": "www.naver.com" }
              },
              {
                "type": "text",
                "viewStyle": { "margin": { "top": "8", "right": "0", "bottom": "0", "left": "0" } },
                "text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aui",
                "textStyle": { "color": "#E0000000", "size": "14", "weight": "normal" },
                "maxTextLines": "5",
                "action": { "data": "https://www.naver.com" }
              },
              {
                "type": "box",
                "layout": "row",
                "viewStyle": { "margin": { "top": "12", "right": "0", "bottom": "0", "left": "0" } },
                "items": [
                  {
                    "type": "textButton",
                    "viewStyle": {
                      "backgroundColor": "#E0E0E0",
                      "padding": { "top": "10", "bottom": "10", "left": "20", "right": "20" }
                    },
                    "text": "Button 1",
                    "textStyle": { "color": "#742DDD", "size": "14", "weight": "bold" },
                    "maxTextLines": "5",
                    "action": { "data": "www.naver.com" }
                  },
                  {
                    "type": "textButton",
                    "viewStyle": {
                      "backgroundColor": "#E0E0E0",
                      "padding": { "top": "10", "bottom": "10", "left": "20", "right": "20" },
                      "margin": { "left": "8", "right": "0", "top": "0", "bottom": "0" }
                    },
                    "text": "Button 2",
                    "textStyle": { "color": "#742DDD", "size": "14", "weight": "bold" },
                    "maxTextLines": "5",
                    "action": { "data": "https://www.naver.com" }
                  }
                ]
              }
            ],
            "action": { "data": "https://www.naver.com" }
          },
          {
            "type": "image",
            "viewStyle": {},
            "width": { "type": "flex", "value": FlexSizeSpecValue.FillParent },
            "height": { "type": "flex", "value": FlexSizeSpecValue.FillParent },
            "imageStyle": { "contentMode": "aspectFill" },
            "imageUrl": "https://file-preprod.sendbird.com/d03c08bb3f9041a88c1207b6bbf15ab8.png",
            "metaData": { "pixelWidth": "1062", "pixelHeight": "1070" }
          },
          {
            "type": "textButton",
            "viewStyle": {
              "backgroundColor": "#E0E0E0",
              "padding": { "top": "10", "bottom": "10", "left": "20", "right": "20" }
            },
            "width": { "type": "flex", "value": FlexSizeSpecValue.FillParent },
            "height": { "type": "flex", "value": FlexSizeSpecValue.FillParent },
            "text": "Button",
            "textStyle": { "color": "#742DDD", "size": "16", "weight": "normal" },
            "maxTextLines": "5",
            "action": { "data": "www.naver.com" }
          },
          {
            "type": "imageButton",
            "viewStyle": {},
            "width": { "type": "flex", "value": FlexSizeSpecValue.FillParent },
            "height": { "type": "flex", "value": FlexSizeSpecValue.FillParent },
            "imageUrl": "https://file-preprod.sendbird.com/38fdf5c1056f42b89a44b38155cc4b49.jpg",
            "imageStyle": { "contentMode": "aspectFill" },
            "metaData": { "pixelWidth": "1080", "pixelHeight": "2640" },
            "action": { "data": "www.naver.com" }
          }
        ],
        "viewStyle": {}
      }
    ]
  }
});
({
  "version": 1,
  "body": {
    "items": [
      {
        "elementId": "root",
        "type": "box",
        "layout": "column",
        "width": {
          "type": "flex",
          "value": FlexSizeSpecValue.FillParent
        },
        "height": {
          "type": "flex",
          "value": FlexSizeSpecValue.WrapContent
        },
        "items": [
          {
            "type": "text",
            "viewStyle": {
              "backgroundColor": "#a0c0ffff",
              "margin": {
                "top": 16,
                "bottom": 16,
                "left": 16,
                "right": 16
              },
              "padding": {
                "top": 16,
                "bottom": 16,
                "left": 16,
                "right": 16
              }
            },
            "text": "Wrap Wrap Wrap Wrap Wrap Wrap Wrap Wrap Wrap Wrap ",
            "textStyle": {
              "size": 14,
              "color": "#222121e0",
              "weight": "normal"
            },
            "maxTextLines": 5,
            "width": {
              "type": "flex",
              "value": FlexSizeSpecValue.FillParent
            },
            "height": {
              "type": "flex",
              "value": 1
            },
            "align": {
              "horizontal": "left",
              "vertical": "top"
            },
            "elementId": "c0e15878-4984-408d-abaa-4b495c2e3872"
          },
          {
            "type": "imageButton",
            "viewStyle": {
              margin: {
                left: 24,
                right: 12
              }
            },
            "width": { "type": "flex", "value": FlexSizeSpecValue.FillParent },
            "height": { "type": "fixed", "value": 250 },
            "imageUrl": "https://cdn.pixabay.com/photo/2022/10/12/10/45/bird-7516219_1280.jpg",
            "imageStyle": { "contentMode": "aspectFill" },
            "metaData": { "pixelWidth": "1080", "pixelHeight": "2640" },
            "action": { "data": "www.naver.com" }
          }
        ]
      }
    ]
  }
});
var SWIPE_THRESHOLD = 24;
function useCarousel({ spacing, childrenLength, paddingInlineStart, paddingInlineEnd }) {
  const paddingStart = paddingInlineStart;
  const paddingEnd = paddingInlineEnd;
  const carouselRef = (0, import_react47.useRef)(null);
  const childrenRefs = (0, import_react47.useRef)(Array.from({ length: childrenLength }, () => import_react47.default.createRef()));
  const isDragging = (0, import_react47.useRef)(false);
  const isScrolling = (0, import_react47.useRef)(false);
  const animationFrame = (0, import_react47.useRef)(null);
  const drag = (0, import_react47.useRef)({
    sx: null,
    sy: null,
    offset: 0,
    translateX: 0,
    currentIndex: 0
  });
  const [childWidths, setChildWidths] = (0, import_react47.useState)(() => childrenRefs.current.map(() => 0));
  const itemPositions = (0, import_react47.useMemo)(() => {
    let currentPosition = paddingStart;
    return childWidths.map((width, i2) => {
      const start = currentPosition - (i2 > 0 ? spacing : 0);
      const end = start - width;
      currentPosition = end;
      return { start, end };
    });
  }, [childWidths, spacing, paddingStart]);
  const totalContentWidth = (0, import_react47.useMemo)(() => {
    const totalItemWidth = childWidths.reduce((acc, width) => acc + width, 0);
    const totalSpacing = spacing * (childrenLength - 1);
    return totalItemWidth + totalSpacing;
  }, [childWidths, spacing, childrenLength]);
  (0, import_react47.useLayoutEffect)(() => {
    setChildWidths(childrenRefs.current.map((ref) => {
      var _a2, _b2;
      return (_b2 = (_a2 = ref.current) === null || _a2 === void 0 ? void 0 : _a2.clientWidth) !== null && _b2 !== void 0 ? _b2 : 0;
    }));
  }, [childrenLength]);
  (0, import_react47.useLayoutEffect)(() => {
    if (itemPositions.length > 0) {
      drag.current.translateX = itemPositions[0].start;
      animate();
    }
  }, [itemPositions]);
  const dragStart = () => {
    if (!carouselRef.current)
      return;
    isDragging.current = true;
    carouselRef.current.style.cursor = "grabbing";
    carouselRef.current.style.transition = "none";
    animationFrame.current = requestAnimationFrame(animate);
  };
  const dragStop = () => {
    if (!carouselRef.current)
      return;
    isDragging.current = false;
    carouselRef.current.style.cursor = "grab";
    carouselRef.current.style.transition = "transform 0.5s ease";
    if (animationFrame.current) {
      cancelAnimationFrame(animationFrame.current);
      animationFrame.current = null;
    }
  };
  const dragRelease = () => {
    const { offset, currentIndex } = drag.current;
    const thresholdExceeded = Math.abs(offset) >= SWIPE_THRESHOLD;
    const swipeToNext = offset < 0 && currentIndex < childrenLength - 1;
    const swipeToPrev = offset > 0 && currentIndex > 0;
    let newIndex = currentIndex;
    if (thresholdExceeded && swipeToNext) {
      newIndex = currentIndex + 1;
    } else if (thresholdExceeded && swipeToPrev) {
      newIndex = currentIndex - 1;
    }
    function clampTranslateX(translateX) {
      var _a2, _b2;
      const containerWidth = (_b2 = (_a2 = carouselRef.current) === null || _a2 === void 0 ? void 0 : _a2.clientWidth) !== null && _b2 !== void 0 ? _b2 : 0;
      const start = paddingStart;
      const end = Math.min(0, containerWidth - totalContentWidth) - paddingEnd;
      return Math.min(start, Math.max(end, translateX));
    }
    drag.current.currentIndex = newIndex;
    drag.current.translateX = clampTranslateX(itemPositions[newIndex].start);
    drag.current.offset = 0;
  };
  const scrollStart = () => {
    isScrolling.current = true;
  };
  const scrollStop = () => {
    isScrolling.current = false;
  };
  const animate = () => {
    if (carouselRef.current) {
      carouselRef.current.style.transform = `translateX(${drag.current.translateX + drag.current.offset}px)`;
    }
    if (animationFrame.current) {
      animationFrame.current = requestAnimationFrame(animate);
    }
  };
  const blockScroll = () => {
    if (carouselRef.current) {
      carouselRef.current.style.touchAction = "pan-x";
    }
  };
  const unblockScroll = () => {
    if (carouselRef.current) {
      carouselRef.current.style.touchAction = "pan-y";
    }
  };
  const onMouseDown = (event) => {
    dragStart();
    scrollStop();
    drag.current.sx = event.clientX;
    drag.current.sy = event.clientY;
    drag.current.offset = 0;
    animationFrame.current = requestAnimationFrame(animate);
  };
  const onMouseMove = (event) => {
    if (!isDragging.current || drag.current.sx === null)
      return;
    drag.current.offset = event.clientX - drag.current.sx;
  };
  const onMouseUp = () => {
    if (!isDragging.current)
      return;
    scrollStop();
    dragRelease();
    dragStop();
  };
  const onMouseLeave = () => {
    if (!isDragging.current)
      return;
    scrollStop();
    dragRelease();
    dragStop();
  };
  const onTouchStart = (event) => {
    scrollStop();
    dragStop();
    const touch = event.touches[0];
    drag.current.sx = touch.clientX;
    drag.current.sy = touch.clientY;
    drag.current.offset = 0;
    animationFrame.current = requestAnimationFrame(animate);
  };
  const onTouchMove = (event) => {
    if (drag.current.sx === null || drag.current.sy === null || isScrolling.current)
      return;
    const { clientX, clientY } = event.touches[0];
    const { sx, sy } = drag.current;
    if (isDragging.current) {
      drag.current.offset = clientX - sx;
      return;
    }
    const isVerticalScroll = Math.abs(clientY - sy) > Math.abs(clientX - sx);
    if (isVerticalScroll) {
      scrollStart();
    } else {
      drag.current.offset = clientX - sx;
      blockScroll();
      dragStart();
    }
  };
  const onTouchEnd = () => {
    unblockScroll();
    scrollStop();
    dragRelease();
    dragStop();
  };
  return {
    carouselRef,
    childrenRefs,
    handlers: {
      onMouseDown,
      onMouseMove,
      onMouseUp,
      onMouseLeave,
      onTouchStart,
      onTouchMove,
      onTouchEnd
    }
  };
}
var __rest$4 = function(s3, e2) {
  var t2 = {};
  for (var p in s3)
    if (Object.prototype.hasOwnProperty.call(s3, p) && e2.indexOf(p) < 0)
      t2[p] = s3[p];
  if (s3 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p = Object.getOwnPropertySymbols(s3); i2 < p.length; i2++) {
      if (e2.indexOf(p[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s3, p[i2]))
        t2[p[i2]] = s3[p[i2]];
    }
  return t2;
};
var Carousel = ({ children, style, spacing = defaultProperties.carousel.style.spacing, maxChildWidth = defaultProperties.carousel.style.maxChildWidth }) => {
  const _a2 = style !== null && style !== void 0 ? style : {}, { paddingInlineStart = 0, paddingInlineEnd = 0 } = _a2, restStyle = __rest$4(_a2, ["paddingInlineStart", "paddingInlineEnd"]);
  const { carouselRef, childrenRefs, handlers } = useCarousel({
    spacing,
    childrenLength: children.length,
    paddingInlineStart: Number(paddingInlineStart),
    paddingInlineEnd: Number(paddingInlineEnd)
  });
  return import_react47.default.createElement("div", Object.assign({}, handlers, { ref: carouselRef, className: "sb-message-template__carousel", style: Object.assign(Object.assign({}, restStyle), { gap: spacing, width: "100%", overflow: "visible" }) }), children.map((item, index) => import_react47.default.createElement(CarouselChild, { ref: childrenRefs.current[index], key: index, maxChildWidth }, item)));
};
var CarouselChild = import_react47.default.forwardRef(function CarouselChild2({ maxChildWidth, children }, ref) {
  const maxWidth = shouldSetMaxChildWidth(children.props, maxChildWidth) ? maxChildWidth : "fit-content";
  return import_react47.default.createElement("div", { ref, style: { maxWidth, width: "100%", flexShrink: 0, overflow: "hidden", userSelect: "none" } }, children);
});
function shouldSetMaxChildWidth(props, maxChildWidth) {
  return !!props.templateItems.find((it) => {
    var _a2, _b2, _c, _d;
    const hasFillWidth = ((_a2 = it.width) === null || _a2 === void 0 ? void 0 : _a2.type) === "flex" && ((_b2 = it.width) === null || _b2 === void 0 ? void 0 : _b2.value) === FlexSizeSpecValue.FillParent;
    const overMaxChildWidth = ((_c = it.width) === null || _c === void 0 ? void 0 : _c.type) === "fixed" && ((_d = it.width) === null || _d === void 0 ? void 0 : _d.value) >= maxChildWidth;
    return hasFillWidth || overMaxChildWidth;
  });
}
function isWrappedText(view) {
  var _a2;
  return view.type === ComponentType.Text && ((_a2 = view.width) === null || _a2 === void 0 ? void 0 : _a2.value) == FlexSizeSpecValue.WrapContent;
}
var isSizeCompatibleWithOption = ({ size, option }) => {
  if (option === "wrap") {
    return size.type === "flex" && size.value == FlexSizeSpecValue.WrapContent;
  }
  if (option === "fill") {
    return size.type === "flex" && size.value == FlexSizeSpecValue.FillParent;
  }
  return size.type === "fixed";
};
var isGif2 = (url) => {
  var _a2;
  if (typeof url !== "string")
    return false;
  const extension = (_a2 = url.split(".").pop()) === null || _a2 === void 0 ? void 0 : _a2.toLowerCase();
  return extension === "gif";
};
var __rest$3 = function(s3, e2) {
  var t2 = {};
  for (var p in s3)
    if (Object.prototype.hasOwnProperty.call(s3, p) && e2.indexOf(p) < 0)
      t2[p] = s3[p];
  if (s3 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p = Object.getOwnPropertySymbols(s3); i2 < p.length; i2++) {
      if (e2.indexOf(p[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s3, p[i2]))
        t2[p[i2]] = s3[p[i2]];
    }
  return t2;
};
var CanvasReactMessageTemplateImage = (props) => {
  const { imageSize, canvasRef, canvasProps } = useCanvasMessageTemplateImage(props);
  return import_react47.default.createElement("canvas", Object.assign({}, canvasProps, { ref: canvasRef, width: imageSize === null || imageSize === void 0 ? void 0 : imageSize.width, height: imageSize === null || imageSize === void 0 ? void 0 : imageSize.height, onError: props.onError }));
};
var useCanvasMessageTemplateImage = (_a2) => {
  var { metaData, tintColor } = _a2, props = __rest$3(_a2, ["metaData", "tintColor"]);
  const canvasRef = (0, import_react47.useRef)(null);
  const [fallbackImageSize, setFallbackImageSize] = (0, import_react47.useState)();
  const imageSize = (0, import_react47.useMemo)(() => {
    if ((metaData === null || metaData === void 0 ? void 0 : metaData.pixelHeight) && (metaData === null || metaData === void 0 ? void 0 : metaData.pixelWidth)) {
      return { width: metaData.pixelWidth, height: metaData.pixelHeight };
    }
    return fallbackImageSize;
  }, [fallbackImageSize, metaData === null || metaData === void 0 ? void 0 : metaData.pixelHeight, metaData === null || metaData === void 0 ? void 0 : metaData.pixelWidth]);
  (0, import_react47.useEffect)(() => {
    if (imageSize == null) {
      console.log("Canvas_ReactMessageTemplateImage: no metaData, render fit to container");
      if (canvasRef.current) {
        canvasRef.current.style.width = "100%";
        canvasRef.current.style.height = "100%";
        const containerSize = canvasRef.current.getBoundingClientRect();
        setFallbackImageSize(containerSize);
      }
    }
  }, [imageSize]);
  (0, import_react47.useEffect)(() => {
    if (props.src) {
      const img = new Image();
      const onImageLoad = () => {
        if (canvasRef.current && tintColor && imageSize) {
          const ctx = canvasRef.current.getContext("2d");
          if (ctx) {
            const { width: imageWidth, height: imageHeight } = imageSize;
            ctx.clearRect(0, 0, imageWidth, imageHeight);
            ctx.beginPath();
            ctx.globalCompositeOperation = "source-over";
            ctx.fillStyle = "#000";
            ctx.drawImage(img, 0, 0, imageWidth, imageHeight);
            ctx.globalCompositeOperation = "source-atop";
            ctx.fillStyle = tintColor;
            ctx.fillRect(0, 0, imageWidth, imageHeight);
          }
        }
      };
      const onImageError = (event) => {
        var _a3;
        (_a3 = props.onError) === null || _a3 === void 0 ? void 0 : _a3.call(props, event);
      };
      img.addEventListener("load", onImageLoad);
      img.addEventListener("error", onImageError);
      img.src = props.src;
      return () => {
        img.removeEventListener("load", onImageLoad);
        img.removeEventListener("error", onImageError);
      };
    }
    return;
  }, [props.src, imageSize, tintColor]);
  return {
    canvasRef,
    canvasProps: props,
    imageSize
  };
};
var ImgReactMessageTemplateImage = (props) => {
  return import_react47.default.createElement("img", Object.assign({}, props, { onError: props.onError, referrerPolicy: "no-referrer" }));
};
var PlaceholderReactMessageTemplateImage = (props) => {
  return import_react47.default.createElement("div", { style: Object.assign(Object.assign({}, props.style), { backgroundColor: "transparent" }) });
};
var __rest$2 = function(s3, e2) {
  var t2 = {};
  for (var p in s3)
    if (Object.prototype.hasOwnProperty.call(s3, p) && e2.indexOf(p) < 0)
      t2[p] = s3[p];
  if (s3 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p = Object.getOwnPropertySymbols(s3); i2 < p.length; i2++) {
      if (e2.indexOf(p[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s3, p[i2]))
        t2[p[i2]] = s3[p[i2]];
    }
  return t2;
};
var ReactMessageTemplateImage = (_a2) => {
  var { tintColor, metaData } = _a2, props = __rest$2(_a2, ["tintColor", "metaData"]);
  const { hasError, onError } = useImageLoadError(props.src);
  if (props.onError)
    console.warn("`onError` is intercepted and not executed in the ReactMessageTemplateImage.");
  if (hasError) {
    return import_react47.default.createElement(PlaceholderReactMessageTemplateImage, Object.assign({}, props));
  } else if (tintColor && !isGif2(props.src)) {
    return import_react47.default.createElement(CanvasReactMessageTemplateImage, Object.assign({}, props, { onError, tintColor, metaData }));
  } else {
    return import_react47.default.createElement(ImgReactMessageTemplateImage, Object.assign({}, props, { onError }));
  }
};
var useImageLoadError = (source) => {
  const [hasError, setHasError] = (0, import_react47.useState)(false);
  (0, import_react47.useEffect)(() => setHasError(false), [source]);
  return {
    hasError,
    onError: (0, import_react47.useCallback)(() => setHasError(true), [])
  };
};
function getDefaultStyles(overrides) {
  return Object.assign({ display: "flex", overflow: "hidden", boxSizing: "border-box" }, overrides);
}
function setViewProps(styles, props, options) {
  setViewSize(styles, props, options);
  setViewStyle(styles, props);
}
function setBorderStyle(styles, borderWidth, borderColor, radius) {
  if (borderWidth) {
    styles["--border-width"] = `${borderWidth}px`;
    styles["--border-color"] = borderColor || "transparent";
  }
  if (radius) {
    styles["borderRadius"] = radius;
    styles["--border-radius"] = `${radius}px`;
  }
}
function setViewStyle(styles, props) {
  var _a2, _b2, _c, _d, _e, _f, _g, _h;
  const { viewStyle } = props;
  styles["marginBlockStart"] = (_a2 = viewStyle === null || viewStyle === void 0 ? void 0 : viewStyle.margin) === null || _a2 === void 0 ? void 0 : _a2.top;
  styles["marginBlockEnd"] = (_b2 = viewStyle === null || viewStyle === void 0 ? void 0 : viewStyle.margin) === null || _b2 === void 0 ? void 0 : _b2.bottom;
  styles["marginInlineStart"] = (_c = viewStyle === null || viewStyle === void 0 ? void 0 : viewStyle.margin) === null || _c === void 0 ? void 0 : _c.left;
  styles["marginInlineEnd"] = (_d = viewStyle === null || viewStyle === void 0 ? void 0 : viewStyle.margin) === null || _d === void 0 ? void 0 : _d.right;
  const marginHorizontal = ((_f = (_e = viewStyle === null || viewStyle === void 0 ? void 0 : viewStyle.margin) === null || _e === void 0 ? void 0 : _e.left) !== null && _f !== void 0 ? _f : 0) + ((_h = (_g = viewStyle === null || viewStyle === void 0 ? void 0 : viewStyle.margin) === null || _g === void 0 ? void 0 : _g.right) !== null && _h !== void 0 ? _h : 0);
  if (marginHorizontal > 0 && styles.width === "100%")
    styles.width = `calc(100% - ${marginHorizontal}px)`;
  if (viewStyle === null || viewStyle === void 0 ? void 0 : viewStyle.backgroundColor)
    styles["backgroundColor"] = viewStyle.backgroundColor;
  if (viewStyle === null || viewStyle === void 0 ? void 0 : viewStyle.backgroundImageUrl) {
    styles["backgroundImage"] = `url(${JSON.stringify(viewStyle.backgroundImageUrl)})`;
    styles["backgroundSize"] = "100% 100%";
    styles["backgroundPosition"] = "center";
  }
  setBorderStyle(styles, viewStyle === null || viewStyle === void 0 ? void 0 : viewStyle.borderWidth, viewStyle === null || viewStyle === void 0 ? void 0 : viewStyle.borderColor, viewStyle === null || viewStyle === void 0 ? void 0 : viewStyle.radius);
}
function getViewSizeStyle(width, height, parentLayout) {
  const style = {};
  if (width.type === "flex" && width.value == FlexSizeSpecValue.FillParent) {
    style["width"] = "100%";
    if (parentLayout === Layout.Row) {
      style["flex"] = 1;
    }
  } else if (width.type === "fixed" && width.value >= 0) {
    style["width"] = width.value;
  }
  if (height.type === "flex" && height.value == FlexSizeSpecValue.FillParent) {
    style["height"] = "100%";
    if (parentLayout === Layout.Column) {
      style["flex"] = 1;
    }
  } else if (height.type === "fixed" && height.value >= 0) {
    style["height"] = height.value;
  }
  return style;
}
function setViewSize(styles, props, options) {
  var _a2, _b2;
  const { width: defaultWidth, height: defaultHeight } = defaultProperties.view.size;
  const { parentLayout } = options;
  const sizeStyle = getViewSizeStyle((_a2 = props.width) !== null && _a2 !== void 0 ? _a2 : defaultWidth, (_b2 = props.height) !== null && _b2 !== void 0 ? _b2 : defaultHeight, parentLayout);
  Object.assign(styles, sizeStyle);
}
function setAlign(styles, layout = defaultProperties.box.layout, align = defaultProperties.box.align) {
  if (layout === Layout.Row) {
    styles["flexDirection"] = "row";
    styles["alignItems"] = alignInFlex(align.vertical);
    styles["justifyContent"] = alignInFlex(align.horizontal);
  }
  if (layout === Layout.Column) {
    styles["flexDirection"] = "column";
    styles["alignItems"] = alignInFlex(align.horizontal);
    styles["justifyContent"] = alignInFlex(align.vertical);
  }
}
function setTextAlign(styles, align = defaultProperties.box.align.horizontal) {
  styles.textAlign = align;
}
function setImageStyle(styles, imageStyle) {
  const { contentMode = MediaContentMode.AspectFit } = imageStyle || {};
  if (contentMode) {
    switch (contentMode) {
      case MediaContentMode.AspectFill:
        styles["objectFit"] = "cover";
        break;
      case MediaContentMode.AspectFit:
        styles["objectFit"] = "contain";
        break;
      case MediaContentMode.ScalesToFill:
        styles["objectFit"] = "fill";
        break;
    }
  }
}
function setImageAspectRatio(styles, props) {
  var _a2, _b2, _c, _d;
  const imageMetaData = props === null || props === void 0 ? void 0 : props.metaData;
  if (!(imageMetaData === null || imageMetaData === void 0 ? void 0 : imageMetaData.pixelHeight) || !(imageMetaData === null || imageMetaData === void 0 ? void 0 : imageMetaData.pixelWidth)) {
    return;
  }
  if (((_a2 = props === null || props === void 0 ? void 0 : props.width) === null || _a2 === void 0 ? void 0 : _a2.type) === "fixed" || ((_b2 = props === null || props === void 0 ? void 0 : props.height) === null || _b2 === void 0 ? void 0 : _b2.type) === "fixed") {
    return;
  }
  styles["aspectRatio"] = `${(_c = props === null || props === void 0 ? void 0 : props.metaData) === null || _c === void 0 ? void 0 : _c.pixelWidth} / ${(_d = props === null || props === void 0 ? void 0 : props.metaData) === null || _d === void 0 ? void 0 : _d.pixelHeight}`;
}
function webkitLineClampStyles(numberOfLines) {
  return {
    WebkitLineClamp: numberOfLines,
    WebkitBoxOrient: "vertical",
    display: "-webkit-box",
    overflow: "hidden",
    overflowWrap: "anywhere",
    flex: 1
  };
}
function setTextStyle(styles, props, options) {
  const { textStyle, width } = props;
  const { size, color, weight } = textStyle || {};
  if (size)
    styles["fontSize"] = size;
  if (color)
    styles["color"] = color;
  if (weight)
    styles["fontWeight"] = weight;
  if ((width === null || width === void 0 ? void 0 : width.type) === "flex" && (width === null || width === void 0 ? void 0 : width.value) == FlexSizeSpecValue.WrapContent) {
    styles["width"] = "fit-content";
    styles["maxWidth"] = "100%";
  }
  if (props.type === ComponentType.Text) {
    const { siblings, elemIdx } = options;
    if (siblings != null && siblings.length >= 2 && siblings.every(isWrappedText)) {
      styles.flexShrink = siblings.length - 1 === elemIdx ? 1 : 0;
    }
  }
}
var MessageContext2 = import_react47.default.createContext(null);
var MessageProvider2 = (props) => {
  const { message, handleWebAction, handleCustomAction, handlePredefinedAction, children } = props;
  const value = import_react47.default.useMemo(() => ({
    message,
    handleWebAction,
    handleCustomAction,
    handlePredefinedAction
  }), [message === null || message === void 0 ? void 0 : message.updatedAt]);
  return import_react47.default.createElement(MessageContext2.Provider, { value }, children);
};
var useMessageContext2 = () => {
  const context = import_react47.default.useContext(MessageContext2);
  if (!context) {
    throw new Error("useMessageContext must be used within a MessageProvider");
  }
  return context;
};
function usePreservedCallback2(callback) {
  const callbackRef = (0, import_react47.useRef)(callback);
  (0, import_react47.useEffect)(() => {
    callbackRef.current = callback;
  }, [callback]);
  return (0, import_react47.useCallback)((...args) => {
    return callbackRef.current(...args);
  }, [callbackRef]);
}
function useRefEffect(callback, deps) {
  const preservedCallback = usePreservedCallback2(callback);
  const disposeRef = (0, import_react47.useRef)(noop4);
  const effect = (0, import_react47.useCallback)((element) => {
    disposeRef.current();
    disposeRef.current = noop4;
    if (element != null) {
      const cleanup = callback(element);
      if (typeof cleanup === "function") {
        disposeRef.current = cleanup;
      }
    }
  }, [preservedCallback, ...deps]);
  return effect;
}
function noop4() {
}
function useResizeObserver(onResize) {
  const resizeCallback = usePreservedCallback2(onResize);
  const ref = useRefEffect((elem) => {
    const observer = new ResizeObserver((entries2) => {
      if (entries2[0] != null) {
        resizeCallback(entries2[0]);
      }
    });
    observer.observe(elem);
    return () => {
      observer.unobserve(elem);
    };
  }, [resizeCallback]);
  return ref;
}
function useElementSize() {
  const [width, setWidth] = (0, import_react47.useState)(-1);
  const [height, setHeight] = (0, import_react47.useState)(-1);
  const [contentWidth, setContentWidth] = (0, import_react47.useState)(-1);
  const [contentHeight, setContentHeight] = (0, import_react47.useState)(-1);
  const [paddingWidth, setPaddingWidth] = (0, import_react47.useState)(-1);
  const [paddingHeight, setPaddingHeight] = (0, import_react47.useState)(-1);
  const ref = useResizeObserver((entry) => {
    const { width: contentWidth2, height: contentHeight2 } = entry.contentRect;
    const target = entry.target;
    const { width: width2, height: height2 } = target.getBoundingClientRect();
    setWidth(width2);
    setHeight(height2);
    setContentWidth(contentWidth2);
    setContentHeight(contentHeight2);
    setPaddingWidth(width2 - contentWidth2);
    setPaddingHeight(height2 - contentHeight2);
  });
  return { ref, width, height, contentWidth, contentHeight, paddingWidth, paddingHeight };
}
var __rest$1 = function(s3, e2) {
  var t2 = {};
  for (var p in s3)
    if (Object.prototype.hasOwnProperty.call(s3, p) && e2.indexOf(p) < 0)
      t2[p] = s3[p];
  if (s3 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p = Object.getOwnPropertySymbols(s3); i2 < p.length; i2++) {
      if (e2.indexOf(p[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s3, p[i2]))
        t2[p[i2]] = s3[p[i2]];
    }
  return t2;
};
function isViewCompatibleWithSizeOption({ width = defaultProperties.view.size.width, height = defaultProperties.view.size.height, parentLayout = defaultProperties.box.layout, option }) {
  if (parentLayout === Layout.Row) {
    return isSizeCompatibleWithOption({
      size: width,
      option
    });
  }
  return isSizeCompatibleWithOption({
    size: height,
    option
  });
}
function useRecalculateWidth(params) {
  const { style, props } = params;
  const _a2 = useElementSize(), { ref: elemRef } = _a2, size = __rest$1(_a2, ["ref"]);
  const { updateSize, sizes } = useSizeContext();
  const { id, siblings, parentLayout } = props;
  const { width, height, paddingWidth, paddingHeight, contentWidth, contentHeight } = size;
  (0, import_react47.useEffect)(() => {
    updateSize({
      id: props.id,
      width,
      height,
      paddingWidth,
      paddingHeight,
      contentWidth,
      contentHeight
    });
  }, [props.id, width, height, paddingWidth, paddingHeight, contentWidth, contentHeight, updateSize]);
  const currentStyle = (0, import_react47.useMemo)(() => {
    const sumViewSize = (acc = 0, view) => {
      var _a3, _b2, _c, _d;
      if (parentLayout === Layout.Row) {
        return acc + ((_b2 = (_a3 = sizes[view.id]) === null || _a3 === void 0 ? void 0 : _a3.contentWidth) !== null && _b2 !== void 0 ? _b2 : 0);
      }
      return acc + ((_d = (_c = sizes[view.id]) === null || _c === void 0 ? void 0 : _c.contentHeight) !== null && _d !== void 0 ? _d : 0);
    };
    const hasFillOption = isViewCompatibleWithSizeOption({
      width: props.width,
      height: props.height,
      parentLayout,
      option: "fill"
    });
    if (hasFillOption) {
      const wrapSiblingsSize = siblings.filter(({ width: width2, height: height2 }) => !isViewCompatibleWithSizeOption({
        width: width2,
        height: height2,
        parentLayout,
        option: "fill"
      })).reduce(sumViewSize, 0);
      const fillSiblingCount = siblings.filter(({ width: width2, height: height2 }) => isViewCompatibleWithSizeOption({
        width: width2,
        height: height2,
        parentLayout,
        option: "fill"
      })).length;
      const maxSizeOption = (() => {
        if (parentLayout === Layout.Row) {
          return {
            maxWidth: `calc((100% - ${wrapSiblingsSize}px) / ${fillSiblingCount})`
          };
        }
        return {
          maxHeight: `calc((100% - ${wrapSiblingsSize}px) / ${fillSiblingCount})`
        };
      })();
      return Object.assign(Object.assign(Object.assign({}, style), maxSizeOption), width == 0 && { height: 0 });
    } else {
      const currentElemIdx = siblings.findIndex((sibling) => sibling.id === id);
      const forwardSiblingsSize = siblings.slice(0, currentElemIdx).filter(({ width: width2, height: height2 }) => isViewCompatibleWithSizeOption({
        width: width2,
        height: height2,
        parentLayout,
        option: "wrap"
      })).reduce(sumViewSize, 0);
      return Object.assign(Object.assign(Object.assign({}, style), width === 0 && { height: 0 }), parentLayout === Layout.Row ? {
        maxWidth: `calc(100% - ${forwardSiblingsSize}px)`
      } : {
        maxHeight: `calc(100% - ${forwardSiblingsSize}px)`
      });
    }
  }, [props.width, props.height, parentLayout, sizes, siblings, style, width, id]);
  return { recalculatedStyle: currentStyle, elemRef };
}
var __rest = function(s3, e2) {
  var t2 = {};
  for (var p in s3)
    if (Object.prototype.hasOwnProperty.call(s3, p) && e2.indexOf(p) < 0)
      t2[p] = s3[p];
  if (s3 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p = Object.getOwnPropertySymbols(s3); i2 < p.length; i2++) {
      if (e2.indexOf(p[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s3, p[i2]))
        t2[p[i2]] = s3[p[i2]];
    }
  return t2;
};
var hasValidUrlProtocol = (url = "") => ["http://", "https://", "ftp://"].some((protocol) => url.startsWith(protocol));
var returnUrl = (url = "") => {
  if (hasValidUrlProtocol(url)) {
    return url;
  }
  return `https://${url}`;
};
var ActionHandler = ({ children, props, className, style }) => {
  var _a2, _b2, _c, _d, _e, _f, _g, _h, _j;
  const { recalculatedStyle, elemRef } = useRecalculateWidth({ style, props });
  const { message, handleWebAction, handleCustomAction, handlePredefinedAction } = useMessageContext2();
  const borderClass = ((_a2 = props.viewStyle) === null || _a2 === void 0 ? void 0 : _a2.borderWidth) ? "sb-message-template__border" : "";
  const paddingStyles = {
    paddingBlockStart: (_c = (_b2 = props.viewStyle) === null || _b2 === void 0 ? void 0 : _b2.padding) === null || _c === void 0 ? void 0 : _c.top,
    paddingBlockEnd: (_e = (_d = props.viewStyle) === null || _d === void 0 ? void 0 : _d.padding) === null || _e === void 0 ? void 0 : _e.bottom,
    paddingInlineStart: (_g = (_f = props.viewStyle) === null || _f === void 0 ? void 0 : _f.padding) === null || _g === void 0 ? void 0 : _g.left,
    paddingInlineEnd: (_j = (_h = props.viewStyle) === null || _h === void 0 ? void 0 : _h.padding) === null || _j === void 0 ? void 0 : _j.right
  };
  const onClick = (e2) => {
    var _a3, _b3, _c2, _d2, _e2, _f2, _g2;
    if (((_a3 = props.action) === null || _a3 === void 0 ? void 0 : _a3.type) === "web") {
      if (handleWebAction) {
        handleWebAction(e2, props.action, message);
      } else {
        (_c2 = window === null || window === void 0 ? void 0 : window.open(returnUrl((_b3 = props === null || props === void 0 ? void 0 : props.action) === null || _b3 === void 0 ? void 0 : _b3.data), "_blank", "noopener noreferrer")) === null || _c2 === void 0 ? void 0 : _c2.focus();
      }
    } else if (((_d2 = props.action) === null || _d2 === void 0 ? void 0 : _d2.type) === "custom") {
      if (handleCustomAction) {
        handleCustomAction(e2, props.action, message);
      } else {
        (_f2 = window === null || window === void 0 ? void 0 : window.open(returnUrl((_e2 = props === null || props === void 0 ? void 0 : props.action) === null || _e2 === void 0 ? void 0 : _e2.data), "_blank", "noopener noreferrer")) === null || _f2 === void 0 ? void 0 : _f2.focus();
      }
    } else if (((_g2 = props.action) === null || _g2 === void 0 ? void 0 : _g2.type) === "uikit") {
      handlePredefinedAction === null || handlePredefinedAction === void 0 ? void 0 : handlePredefinedAction(e2, props.action, message);
    }
  };
  if (props.type === ComponentType.TextButton) {
    return import_react47.default.createElement("button", { className: clx(className, borderClass), "data-sb-template-id": props.elementId, style: Object.assign(Object.assign({}, style), paddingStyles), onClick }, children);
  }
  const { display, flexDirection, justifyContent, alignItems, objectFit } = recalculatedStyle, wrapperStyles = __rest(recalculatedStyle, ["display", "flexDirection", "justifyContent", "alignItems", "objectFit"]);
  return import_react47.default.createElement(
    "div",
    { ref: elemRef, className: clx(className, borderClass, props.action && "sb-message-template__action"), "data-sb-template-id": props.elementId, style: wrapperStyles, onClick },
    import_react47.default.createElement("div", { style: Object.assign({
      display,
      flexDirection,
      justifyContent,
      alignItems,
      objectFit,
      width: "100%",
      height: "100%"
    }, paddingStyles) }, children)
  );
};
function clx(...names) {
  return names.filter((it) => !!it).join(" ");
}
function isFixedOrFill(view) {
  var _a2, _b2, _c, _d;
  const heightType = (_a2 = view === null || view === void 0 ? void 0 : view.height) === null || _a2 === void 0 ? void 0 : _a2.type;
  const widthType = (_b2 = view === null || view === void 0 ? void 0 : view.width) === null || _b2 === void 0 ? void 0 : _b2.type;
  const isFixedDiamension = heightType === "fixed" || widthType === "fixed";
  const isFill = heightType === "flex" && ((_c = view === null || view === void 0 ? void 0 : view.height) === null || _c === void 0 ? void 0 : _c.value) === FlexSizeSpecValue.FillParent || widthType === "flex" && ((_d = view === null || view === void 0 ? void 0 : view.width) === null || _d === void 0 ? void 0 : _d.value) === FlexSizeSpecValue.FillParent;
  return isFixedDiamension || isFill;
}
function convertNewlinesToBr(text2) {
  return text2.split("\n").map((line, index) => import_react47.default.createElement(
    import_react47.default.Fragment,
    { key: index },
    line,
    import_react47.default.createElement("br", null)
  ));
}
function renderText(view) {
  const { text: text2, maxTextLines } = view;
  const isToBeWrapped = isFixedOrFill(view);
  const hasMaxLines = typeof maxTextLines === "number" && maxTextLines > 0;
  const convertedText = convertNewlinesToBr(text2);
  if (hasMaxLines || isToBeWrapped) {
    const wrapperStyling = Object.assign(Object.assign({}, (hasMaxLines || isToBeWrapped) && { maxWidth: "100%" }), isToBeWrapped && { maxHeight: "100%", overflow: "hidden" });
    return import_react47.default.createElement("div", { style: wrapperStyling }, hasMaxLines ? import_react47.default.createElement("div", { style: webkitLineClampStyles(maxTextLines) }, convertedText) : convertedText);
  }
  return hasMaxLines ? import_react47.default.createElement("div", { style: webkitLineClampStyles(maxTextLines) }, convertedText) : convertedText;
}
var renderer = createRenderer({
  views: {
    box(props) {
      return import_react47.default.createElement(ActionHandler, { className: "sb-message-template__box", elementId: props.elementId, style: props.parsedProperties, props }, props.children);
    },
    text(props) {
      return import_react47.default.createElement(ActionHandler, { className: "sb-message-template__text", elementId: props.elementId, style: props.parsedProperties, props }, renderText(props));
    },
    image(props) {
      var _a2;
      return import_react47.default.createElement(
        ActionHandler,
        { className: "sb-message-template__image-container", elementId: props.elementId, style: props.parsedProperties, props },
        import_react47.default.createElement(ReactMessageTemplateImage, { className: "sb-message-template__image", alt: "image", src: props.imageUrl, style: { width: "100%", height: "100%", aspectRatio: "inherit", objectFit: "inherit" }, tintColor: (_a2 = props.imageStyle) === null || _a2 === void 0 ? void 0 : _a2.tintColor, metaData: props.metaData })
      );
    },
    textButton(props) {
      return import_react47.default.createElement(ActionHandler, { className: "sb-message-template__text-button", elementId: props.elementId, style: props.parsedProperties, props }, renderText(Object.assign({ maxTextLines: defaultProperties.textButton.maxTextLines }, props)));
    },
    imageButton(props) {
      var _a2;
      return import_react47.default.createElement(
        ActionHandler,
        { className: "sb-message-template__image-container sb-message-template__image-button", elementId: props.elementId, style: props.parsedProperties, props },
        import_react47.default.createElement(ReactMessageTemplateImage, { className: "sb-message-template__image", alt: "image-button", src: props.imageUrl, style: { width: "100%", height: "100%", aspectRatio: "inherit", objectFit: "inherit" }, tintColor: (_a2 = props.imageStyle) === null || _a2 === void 0 ? void 0 : _a2.tintColor, metaData: props.metaData })
      );
    },
    carouselView(props) {
      var _a2, _b2;
      return import_react47.default.createElement(Carousel, { maxChildWidth: (_a2 = props.carouselStyle) === null || _a2 === void 0 ? void 0 : _a2.maxChildWidth, spacing: (_b2 = props.carouselStyle) === null || _b2 === void 0 ? void 0 : _b2.spacing, style: props.parsedProperties }, props.children);
    }
  }
});
var parser = createParser({
  mapBoxProps(props, options) {
    const styles = getDefaultStyles();
    setViewProps(styles, props, options);
    setAlign(styles, props.layout, props.align);
    return styles;
  },
  mapTextProps(props, options) {
    var _a2;
    const styles = getDefaultStyles({ whiteSpace: "pre-line", wordBreak: "break-word" });
    setViewProps(styles, props, options);
    setTextStyle(styles, props, options);
    setAlign(styles, Layout.Row, props.align);
    setTextAlign(styles, (_a2 = props.align) === null || _a2 === void 0 ? void 0 : _a2.horizontal);
    return styles;
  },
  mapImageProps(props, options) {
    const styles = getDefaultStyles();
    setViewProps(styles, props, options);
    setImageStyle(styles, props.imageStyle);
    setImageAspectRatio(styles, props);
    return styles;
  },
  mapTextButtonProps(props, options) {
    const styles = getDefaultStyles({ whiteSpace: "pre-line", alignItems: "center", justifyContent: "center" });
    setViewProps(styles, props, options);
    setTextStyle(styles, props, options);
    return styles;
  },
  mapImageButtonProps(props, options) {
    const styles = getDefaultStyles();
    setViewProps(styles, props, options);
    setImageStyle(styles, props.imageStyle);
    setImageAspectRatio(styles, props);
    return styles;
  },
  mapCarouselProps(props, options) {
    var _a2, _b2, _c, _d, _e, _f, _g, _h;
    const styles = getDefaultStyles();
    setViewProps(styles, props, options);
    styles["paddingBlockStart"] = (_b2 = (_a2 = props.viewStyle) === null || _a2 === void 0 ? void 0 : _a2.padding) === null || _b2 === void 0 ? void 0 : _b2.top;
    styles["paddingBlockEnd"] = (_d = (_c = props.viewStyle) === null || _c === void 0 ? void 0 : _c.padding) === null || _d === void 0 ? void 0 : _d.bottom;
    styles["paddingInlineStart"] = (_f = (_e = props.viewStyle) === null || _e === void 0 ? void 0 : _e.padding) === null || _f === void 0 ? void 0 : _f.left;
    styles["paddingInlineEnd"] = (_h = (_g = props.viewStyle) === null || _g === void 0 ? void 0 : _g.padding) === null || _h === void 0 ? void 0 : _h.right;
    return styles;
  }
});
createMessageTemplate({
  renderer,
  parser,
  Container: ({ children, className }) => {
    return import_react47.default.createElement("div", { className: `sb-message-template__parent ${className}`, style: {
      display: "flex",
      flexDirection: "column",
      maxWidth: 400,
      marginBlockEnd: 24
    } }, children);
  }
});
var CustomTemplate = createMessageTemplate({
  parser,
  renderer,
  Container: function(_a2) {
    var children = _a2.children, className = _a2.className;
    return import_react47.default.createElement("div", { className: [
      "sb-message-template__parent ".concat(className),
      "sendbird-message-template__root"
    ].join(" ") }, children);
  }
}).MessageTemplate;
function MessageTemplate(_a2) {
  var templateItems = _a2.templateItems, templateVersion = _a2.templateVersion;
  return import_react47.default.createElement(CustomTemplate, { templateItems, templateVersion });
}

// node_modules/@sendbird/uikit-react/ui/FallbackTemplateMessageItemBody.tsx.js
var import_react48 = __toESM(require_react(), 1);
function FallbackTemplateMessageItemBody(_a2) {
  var className = _a2.className, message = _a2.message, isByMe = _a2.isByMe;
  var stringSet = (0, import_react48.useContext)(LocalizationContext).stringSet;
  var text2 = message["message"];
  return import_react48.default.createElement("div", { className: getClassName([
    className !== null && className !== void 0 ? className : "",
    isByMe ? "outgoing" : "incoming",
    "sendbird-template-message-item-body__fallback_message"
  ]) }, text2 ? import_react48.default.createElement(
    import_react48.default.Fragment,
    null,
    import_react48.default.createElement(Label, { type: LabelTypography.BODY_1, color: LabelColors.ONCONTENT_INVERSE_1 }, text2)
  ) : import_react48.default.createElement(
    import_react48.default.Fragment,
    null,
    import_react48.default.createElement(Label, { className: "sendbird-template-message-item-body__fallback_message__header", type: LabelTypography.BODY_1, color: LabelColors.ONCONTENT_INVERSE_1 }, stringSet.UNKNOWN__TEMPLATE_ERROR),
    import_react48.default.createElement(Label, { className: "sendbird-template-message-item-body__fallback_message__description", type: LabelTypography.BODY_1, color: LabelColors.ONCONTENT_INVERSE_3 }, stringSet.UNKNOWN__CANNOT_READ_TEMPLATE)
  ));
}

// node_modules/@sendbird/uikit-react/ui/LoadingTemplateMessageItemBody.tsx.js
var import_react49 = __toESM(require_react(), 1);
var TEMPLATE_LOADING_SPINNER_SIZE = "40px";
function LoadingTemplateMessageItemBody(_a2) {
  var className = _a2.className, isByMe = _a2.isByMe;
  return import_react49.default.createElement(
    "div",
    { className: classnames(className, isByMe ? "outgoing" : "incoming", "sendbird-template-loading-message-item-body") },
    import_react49.default.createElement(
      Loader,
      { className: "sendbird-message-status__icon", testID: "sendbird-message-status-icon", width: TEMPLATE_LOADING_SPINNER_SIZE, height: TEMPLATE_LOADING_SPINNER_SIZE },
      import_react49.default.createElement(Icon, { type: IconTypes.SPINNER, fillColor: IconColors.CONTENT_INVERSE_3, width: TEMPLATE_LOADING_SPINNER_SIZE, height: TEMPLATE_LOADING_SPINNER_SIZE })
    )
  );
}

// node_modules/@sendbird/uikit-react/ui/TemplateMessageItemBody.js
var MessageTemplateWrapper = function(_a2) {
  var message = _a2.message, templateVersion = _a2.templateVersion, templateItems = _a2.templateItems;
  return import_react50.default.createElement(
    MessageProvider2,
    { message },
    import_react50.default.createElement(MessageTemplate, { templateVersion, templateItems })
  );
};
var splitColorVariables = function(colorVariables) {
  var light = {};
  var dark = {};
  for (var key in colorVariables) {
    if (Object.prototype.hasOwnProperty.call(colorVariables, key)) {
      var value = colorVariables[key];
      if (typeof value === "object" && value !== null) {
        var _a2 = splitColorVariables(value), nestedLight = _a2[0], nestedDark = _a2[1];
        light[key] = nestedLight;
        dark[key] = nestedDark;
      } else if (typeof value === "string") {
        var _b2 = value.split(","), lightColor = _b2[0], darkColor = _b2[1];
        light[key] = lightColor;
        dark[key] = darkColor || lightColor;
      } else {
        light[key] = value;
        dark[key] = value;
      }
    }
  }
  return [light, dark];
};
function selectColorVariablesByTheme(_a2) {
  var colorVariables = _a2.colorVariables, theme = _a2.theme;
  var _b2 = splitColorVariables(colorVariables), light = _b2[0], dark = _b2[1];
  return theme === "light" ? light : dark;
}
var MessageTemplateErrorBoundary = (
  /** @class */
  function(_super) {
    __extends(MessageTemplateErrorBoundary2, _super);
    function MessageTemplateErrorBoundary2(props) {
      var _this = _super.call(this, props) || this;
      _this.state = { hasError: false };
      return _this;
    }
    MessageTemplateErrorBoundary2.getDerivedStateFromError = function() {
      return { hasError: true };
    };
    MessageTemplateErrorBoundary2.prototype.componentDidCatch = function(error, errorInfo) {
      var _a2;
      (_a2 = this.props.logger) === null || _a2 === void 0 ? void 0 : _a2.error("Error caught by ErrorBoundary: ", error, errorInfo);
    };
    MessageTemplateErrorBoundary2.prototype.render = function() {
      if (this.state.hasError) {
        return this.props.fallbackMessage;
      }
      return this.props.children;
    };
    return MessageTemplateErrorBoundary2;
  }(import_react50.Component)
);
var flattenObjectHelper = function(currentObject, flattenObject2, parentKeyPath) {
  if (parentKeyPath === void 0) {
    parentKeyPath = "";
  }
  for (var _i = 0, _a2 = Object.entries(currentObject); _i < _a2.length; _i++) {
    var _b2 = _a2[_i], key = _b2[0], value = _b2[1];
    var currentKeyPath = parentKeyPath ? "".concat(parentKeyPath, ".").concat(key) : key;
    if (value && typeof value === "object") {
      flattenObjectHelper(value, flattenObject2, currentKeyPath);
    } else {
      flattenObject2[currentKeyPath] = value;
    }
  }
};
function flattenObject(object) {
  var result = {};
  flattenObjectHelper(object, result);
  return result;
}
var TEMPLATE_FETCH_RETRY_BUFFER_TIME_IN_MILLIES = 500;
var replaceVariablesInTemplateString = function(_a2) {
  var template = _a2.template, _b2 = _a2.templateData, templateData = _b2 === void 0 ? {} : _b2, colorVariables = _a2.colorVariables, theme = _a2.theme;
  var selectedThemeColorVariables = {};
  if (colorVariables && theme) {
    selectedThemeColorVariables = selectColorVariablesByTheme({
      colorVariables,
      theme
    });
  }
  var source = __assign(__assign({}, templateData), selectedThemeColorVariables);
  var flattenedSource = flattenObject(source);
  var replaced = template;
  Object.entries(flattenedSource).forEach(function(_a3) {
    var key = _a3[0], val = _a3[1];
    var pattern = "\\{".concat(key, "\\}");
    var regex = new RegExp(pattern, "g");
    replaced = replaced.replace(regex, val);
  });
  return replaced;
};
function TemplateMessageItemBody(_a2) {
  var _b2;
  var _c = _a2.className, className = _c === void 0 ? "" : _c, message = _a2.message, _d = _a2.isByMe, isByMe = _d === void 0 ? false : _d, _e = _a2.theme, theme = _e === void 0 ? "light" : _e;
  var templateData = (_b2 = message.extendedMessagePayload) === null || _b2 === void 0 ? void 0 : _b2[MESSAGE_TEMPLATE_KEY];
  var getFailedBody = function() {
    return import_react50.default.createElement(FallbackTemplateMessageItemBody, { className, message, isByMe });
  };
  if (!(templateData === null || templateData === void 0 ? void 0 : templateData.key)) {
    return getFailedBody();
  }
  var templateKey = templateData.key;
  var state = useSendbird().state;
  if (!state) {
    return getFailedBody();
  }
  var logger = state.config.logger;
  var _f = state.utils, getCachedTemplate = _f.getCachedTemplate, updateMessageTemplatesInfo = _f.updateMessageTemplatesInfo;
  var waitingTemplateKeysMap = state.stores.appInfoStore.waitingTemplateKeysMap;
  var waitingTemplateKeysMapString = Object.entries(waitingTemplateKeysMap).map(function(_a3) {
    var key = _a3[0], value = _a3[1];
    return [key, value.requestedAt, value.erroredMessageIds.join(",")].join("-");
  }).join("_");
  var _g = (0, import_react50.useState)(getFilledMessageTemplateItems()), renderData = _g[0], setRenderData = _g[1];
  function findSubstrings(input, matchString) {
    var indices = [];
    var startIndex = 0;
    while ((startIndex = input.indexOf(matchString, startIndex)) !== -1) {
      indices.push({ start: startIndex, end: startIndex + matchString.length });
      startIndex += matchString.length;
    }
    return indices;
  }
  function replaceAtIndices(input, indices, replacement) {
    var result = "";
    var lastIndex = 0;
    indices.forEach(function(_a3) {
      var start = _a3.start, end = _a3.end;
      result += input.slice(lastIndex, start) + replacement;
      lastIndex = end;
    });
    result += input.slice(lastIndex);
    return result;
  }
  function replaceReservationKeys(templateString, reservationKey, replacement) {
    var indices = findSubstrings(templateString, reservationKey);
    return replaceAtIndices(templateString, indices, replacement);
  }
  function getFilledRootTemplate(rootTemplate) {
    var rootTemplateString = replaceVariablesInTemplateString({
      template: rootTemplate.uiTemplate,
      templateData: templateData.variables,
      colorVariables: rootTemplate.colorVariables,
      theme
    });
    if (templateData.view_variables) {
      var reservationKeyToItems_1 = {};
      Object.entries(templateData.view_variables).forEach(function(_a3) {
        var reservationKey = _a3[0], simpleTemplateDataList = _a3[1];
        var filledSimpleTemplates = [];
        simpleTemplateDataList.forEach(function(simpleTemplateData) {
          var simpleTemplateKey = simpleTemplateData === null || simpleTemplateData === void 0 ? void 0 : simpleTemplateData.key;
          if (simpleTemplateKey) {
            var cachedTemplate = getCachedTemplate(simpleTemplateKey);
            if (!cachedTemplate) {
              logger.error("TemplateMessageItemBody | simple template is expected to be cached: ", simpleTemplateKey);
            }
            var items = replaceVariablesInTemplateString({
              template: cachedTemplate.uiTemplate,
              templateData: simpleTemplateData.variables,
              colorVariables: cachedTemplate.colorVariables,
              theme
            });
            filledSimpleTemplates.push({
              version: cachedTemplate.version,
              body: {
                items: JSON.parse(items)
              }
            });
            reservationKeyToItems_1[reservationKey] = JSON.stringify(filledSimpleTemplates);
          }
        });
      });
      Object.entries(reservationKeyToItems_1).forEach(function(_a3) {
        var reservationKey = _a3[0], filledSimpleTemplates = _a3[1];
        rootTemplateString = replaceReservationKeys(rootTemplateString, '"@{'.concat(reservationKey, '}"'), filledSimpleTemplates);
      });
    }
    return JSON.parse(rootTemplateString);
  }
  function getFilledMessageTemplateItems() {
    var result = {
      filledMessageTemplateItemsList: [],
      isErrored: false
    };
    var nonCachedTemplateKeys = [];
    var cachedTemplate = getCachedTemplate(templateKey);
    if (!cachedTemplate) {
      nonCachedTemplateKeys.push(templateKey);
    }
    if (templateData === null || templateData === void 0 ? void 0 : templateData.view_variables) {
      try {
        Object.entries(templateData.view_variables).forEach(function(_a3) {
          var _ = _a3[0], simpleTemplateDataList = _a3[1];
          simpleTemplateDataList.forEach(function(simpleTemplateData) {
            var simpleTemplateKey = simpleTemplateData === null || simpleTemplateData === void 0 ? void 0 : simpleTemplateData.key;
            if (simpleTemplateKey && !getCachedTemplate(simpleTemplateKey) && !nonCachedTemplateKeys.includes(simpleTemplateKey)) {
              nonCachedTemplateKeys.push(simpleTemplateKey);
            }
          });
        });
      } catch (e2) {
        logger.error("TemplateMessageItemBody | received view_variables is malformed: ", templateData);
        result.isErrored = true;
        return result;
      }
    }
    try {
      if (nonCachedTemplateKeys.length > 0) {
        tryFetchTemplateByKey(nonCachedTemplateKeys);
      } else if (cachedTemplate) {
        var items = getFilledRootTemplate(cachedTemplate);
        result.filledMessageTemplateItemsList.push({
          version: cachedTemplate.version,
          items
        });
      }
    } catch (e2) {
      logger.error("TemplateMessageItemBody | fetching non-cached templates by given template keys failed: ", e2);
      result.isErrored = true;
    }
    return result;
  }
  (0, import_react50.useEffect)(function() {
    if (!renderData.isErrored && renderData.filledMessageTemplateItemsList.length === 0) {
      var newRenderData = getFilledMessageTemplateItems();
      setRenderData(newRenderData);
    }
  }, [templateData.key, waitingTemplateKeysMapString]);
  function tryFetchTemplateByKey(templateKeys) {
    if (templateKeys.length > 0) {
      var waitingTemplateKeyDataList_1 = [];
      templateKeys.forEach(function(templateKey2) {
        var waitingTemplateKeyData = waitingTemplateKeysMap[templateKey2];
        waitingTemplateKeyDataList_1.push([templateKey2, waitingTemplateKeyData]);
      });
      var requestedAt_1 = Date.now();
      var keysToUpdate_1 = [];
      waitingTemplateKeyDataList_1.forEach(function(_a3) {
        var templateKey2 = _a3[0], waitingTemplateKeyData = _a3[1];
        if (!waitingTemplateKeyData || waitingTemplateKeyData.erroredMessageIds.indexOf(message.messageId) === -1 && requestedAt_1 > waitingTemplateKeyData.requestedAt + TEMPLATE_FETCH_RETRY_BUFFER_TIME_IN_MILLIES) {
          keysToUpdate_1.push(templateKey2);
        } else if (waitingTemplateKeyData.erroredMessageIds.indexOf(message.messageId) > -1) {
          throw new Error("TemplateMessageItemBody | fetching template key ".concat(templateKey2, " for messageId: ").concat(message.messageId, " has failed."));
        }
      });
      if (keysToUpdate_1.length > 0) {
        updateMessageTemplatesInfo(keysToUpdate_1, message.messageId, requestedAt_1);
      }
    }
  }
  if (renderData.isErrored) {
    return getFailedBody();
  }
  if (renderData.filledMessageTemplateItemsList.length === 0) {
    return import_react50.default.createElement(LoadingTemplateMessageItemBody, { className, isByMe });
  }
  return import_react50.default.createElement(
    "div",
    { className: getClassName([
      className,
      isByMe ? "outgoing" : "incoming",
      "sendbird-template-message-item-body"
    ]) },
    import_react50.default.createElement(MessageTemplateErrorBoundary, { fallbackMessage: import_react50.default.createElement(FallbackTemplateMessageItemBody, { className, message, isByMe }), logger }, renderData.filledMessageTemplateItemsList.map(function(filledMessageTemplateItem, i2) {
      var _a3;
      return import_react50.default.createElement(MessageTemplateWrapper, { key: i2, message, templateVersion: (_a3 = filledMessageTemplateItem.version) !== null && _a3 !== void 0 ? _a3 : 0, templateItems: filledMessageTemplateItem.items });
    }))
  );
}

// node_modules/@sendbird/uikit-react/ui/MessageFeedbackFailedModal.js
var import_react51 = __toESM(require_react(), 1);
var import_react_dom13 = __toESM(require_react_dom(), 1);
function MessageFeedbackFailedModal(props) {
  var text2 = props.text, onCancel = props.onCancel;
  var stringSet = (0, import_react51.useContext)(LocalizationContext).stringSet;
  var modalRef = (0, import_react51.useRef)(null);
  var onKeyDown = useKeyDown(modalRef, {
    Enter: function() {
      return onCancel === null || onCancel === void 0 ? void 0 : onCancel();
    },
    Escape: function() {
      return onCancel === null || onCancel === void 0 ? void 0 : onCancel();
    }
  });
  return import_react51.default.createElement(
    "div",
    { onKeyDown },
    import_react51.default.createElement(Modal, { contentClassName: "sendbird-message-feedback-modal-content__mobile", type: ButtonTypes.PRIMARY, onSubmit: onCancel, onClose: onCancel, submitText: stringSet.BUTTON__OK, renderHeader: function() {
      return import_react51.default.createElement(
        "div",
        { className: "sendbird-modal__header" },
        import_react51.default.createElement(Label, { type: LabelTypography.H_1, color: LabelColors.ONBACKGROUND_1, className: "sendbird-message-feedback-modal-header" }, text2)
      );
    }, customFooter: import_react51.default.createElement(
      "div",
      { className: "sendbird-message-feedback-modal-footer__root_failed" },
      import_react51.default.createElement(
        Button,
        { onClick: onCancel },
        import_react51.default.createElement(Label, { type: LabelTypography.BUTTON_3, color: LabelColors.ONCONTENT_1 }, stringSet.BUTTON__OK)
      )
    ) })
  );
}

// node_modules/@sendbird/uikit-react/chunks/bundle-DEVtRtKL.js
function MessageProfile(_a2) {
  var _b2 = _a2.className, className = _b2 === void 0 ? "" : _b2, isByMe = _a2.isByMe, displayThreadReplies = _a2.displayThreadReplies, bottom = _a2.bottom, message = _a2.message, channel = _a2.channel, userId = _a2.userId, _c = _a2.chainBottom, chainBottom = _c === void 0 ? false : _c;
  var avatarRef = (0, import_react52.useRef)(null);
  var _d = useUserProfileContext(), disableUserProfile = _d.disableUserProfile, renderUserProfile = _d.renderUserProfile;
  if (isByMe || chainBottom || !isSendableMessage(message)) {
    return null;
  }
  return import_react52.default.createElement(ContextMenu, { menuTrigger: function(toggleDropdown) {
    var _a3, _b3;
    return import_react52.default.createElement(Avatar$1, {
      className: classnames(className, displayThreadReplies && "use-thread-replies"),
      src: ((_b3 = (_a3 = channel === null || channel === void 0 ? void 0 : channel.members) === null || _a3 === void 0 ? void 0 : _a3.find(function(member) {
        return (member === null || member === void 0 ? void 0 : member.userId) === message.sender.userId;
      })) === null || _b3 === void 0 ? void 0 : _b3.profileUrl) || message.sender.profileUrl || "",
      // TODO: Divide getting profileUrl logic to utils
      ref: avatarRef,
      width: "28px",
      height: "28px",
      bottom,
      onClick: function() {
        if (!disableUserProfile)
          toggleDropdown();
      }
    });
  }, menuItems: function(closeDropdown) {
    return renderUserProfile ? renderUserProfile({
      user: message.sender,
      close: closeDropdown,
      currentUserId: userId,
      avatarRef
    }) : import_react52.default.createElement(
      MenuItems,
      {
        /**
         * parentRef: For catching location(x, y) of MenuItems
         * parentContainRef: For toggling more options(menus & reactions)
        */
        parentRef: avatarRef,
        parentContainRef: avatarRef,
        closeDropdown,
        style: { paddingTop: "0px", paddingBottom: "0px" }
      },
      import_react52.default.createElement(UserProfile, { user: message.sender, onSuccess: closeDropdown })
    );
  } });
}
var InputLabel = function(_a2) {
  var children = _a2.children;
  return import_react52.default.createElement(Label, { className: "sendbird-form-message__input__label", type: LabelTypography.CAPTION_2, color: LabelColors.ONBACKGROUND_2 }, children);
};
var FormInput = function(props) {
  var name = props.name, required = props.required, errorMessage = props.errorMessage, isValid2 = props.isValid, values = props.values, isInvalidated = props.isInvalidated, isSubmitTried = props.isSubmitTried, style = props.style, onFocused = props.onFocused, onChange = props.onChange, placeHolder = props.placeHolder, isSubmitted = props.isSubmitted;
  var layout = style.layout, _a2 = style.options, options = _a2 === void 0 ? [] : _a2, resultCount = style.resultCount;
  var _b2 = resultCount !== null && resultCount !== void 0 ? resultCount : {}, _c = _b2.min, min = _c === void 0 ? 1 : _c, _d = _b2.max, max = _d === void 0 ? 1 : _d;
  var chipDataList = getInitialChipDataList();
  var stringSet = (0, import_react52.useContext)(LocalizationContext).stringSet;
  var handleFocus = function() {
    onFocused === null || onFocused === void 0 ? void 0 : onFocused(true);
  };
  var handleBlur = function() {
    onFocused === null || onFocused === void 0 ? void 0 : onFocused(false);
  };
  function getInitialChipDataList() {
    if (isSubmitted) {
      return options.map(function(option) {
        return {
          state: values.includes(option) ? "submittedSelected" : "submittedDefault",
          option
        };
      });
    } else {
      return options.map(function(option) {
        return {
          state: values.includes(option) ? "selected" : "default",
          option
        };
      });
    }
  }
  var onChipClick = function(index) {
    if (isSubmitted)
      return;
    var newDraftedValues;
    if (min === 1 && max === 1) {
      newDraftedValues = chipDataList[index].state === "selected" ? [] : [chipDataList[index].option];
    } else {
      newDraftedValues = chipDataList.reduce(function(acc, chipData, i2) {
        if (i2 === index) {
          if (chipData.state === "default" && values.length < max) {
            acc.push(chipData.option);
          }
        } else if (chipData.state === "selected") {
          acc.push(chipData.option);
        }
        return acc;
      }, []);
    }
    onChange(newDraftedValues);
  };
  return import_react52.default.createElement(
    "div",
    { className: "sendbird-form-message__input__root" },
    import_react52.default.createElement(
      InputLabel,
      null,
      import_react52.default.createElement(
        "div",
        { className: "sendbird-form-message__input__title-container" },
        name,
        " ",
        !required && import_react52.default.createElement("span", { className: "sendbird-form-message__input__title-optional" }, "(optional)")
      )
    ),
    import_react52.default.createElement(
      "div",
      { className: "sendbird-input_for_form" },
      function() {
        switch (layout) {
          case "chip": {
            return import_react52.default.createElement("div", { className: "sendbird-form-message__input__chip-container" }, chipDataList.map(function(chipData, index) {
              return import_react52.default.createElement(
                "div",
                { className: "sendbird-form-message__input__chip ".concat(chipData.state), key: index, onClick: function() {
                  return onChipClick(index);
                } },
                import_react52.default.createElement("div", { className: "sendbird-form-message__input__chip-text" }, chipData.option),
                isSubmitted && chipData.state === "submittedSelected" && import_react52.default.createElement(Icon, { className: "sendbird-form-message__submitted-check-icon-chip", type: IconTypes.DONE, fillColor: IconColors.SECONDARY_2, width: "20px", height: "20px" })
              );
            }));
          }
          case "textarea": {
            var currentValue = values.length > 0 ? values[0] : "";
            return import_react52.default.createElement("div", { className: "sendbird-form-message__input__container" }, isSubmitted ? import_react52.default.createElement(
              "div",
              { className: "sendbird-form-message__submitted-input-box textarea" },
              import_react52.default.createElement("div", { className: "sendbird-form-message__submitted-input-box-text" }, currentValue),
              isValid2 && import_react52.default.createElement(
                "div",
                { className: "sendbird-form-message__submitted-check-icon-container" },
                import_react52.default.createElement(Icon, { type: IconTypes.DONE, fillColor: IconColors.SECONDARY_2, width: "20px", height: "20px" })
              ),
              !currentValue && import_react52.default.createElement(Label, { className: "sendbird-input__placeholder", type: LabelTypography.BODY_1, color: LabelColors.ONBACKGROUND_3 }, stringSet.FORM_ITEM_OPTIONAL_EMPTY)
            ) : import_react52.default.createElement(
              import_react52.default.Fragment,
              null,
              import_react52.default.createElement("textarea", { className: classnames("sendbird-input__input", !!errorMessage && "error", "sendbird-form-message__input__textarea"), required, disabled: isSubmitted, value: currentValue, onFocus: handleFocus, onBlur: handleBlur, onChange: function(event) {
                var value = event.target.value;
                onChange(value ? [value] : []);
              } }),
              placeHolder && !currentValue && import_react52.default.createElement(Label, { className: "sendbird-input__placeholder textarea", type: LabelTypography.BODY_1, color: LabelColors.ONBACKGROUND_3 }, placeHolder)
            ));
          }
          case "text":
          case "number":
          case "phone":
          case "email": {
            var currentValue = values.length > 0 ? values[0] : "";
            return import_react52.default.createElement("div", { className: "sendbird-form-message__input__container" }, isSubmitted ? import_react52.default.createElement(
              "div",
              { className: "sendbird-form-message__submitted-input-box" },
              import_react52.default.createElement("div", { className: "sendbird-form-message__submitted-input-box-text" }, currentValue),
              isValid2 && import_react52.default.createElement(
                "div",
                { className: "sendbird-form-message__submitted-check-icon-container" },
                import_react52.default.createElement(Icon, { type: IconTypes.DONE, fillColor: IconColors.SECONDARY_2, width: "20px", height: "20px" })
              ),
              !currentValue && import_react52.default.createElement(Label, { className: "sendbird-input__placeholder", type: LabelTypography.BODY_1, color: LabelColors.ONBACKGROUND_3 }, stringSet.FORM_ITEM_OPTIONAL_EMPTY)
            ) : import_react52.default.createElement(
              import_react52.default.Fragment,
              null,
              import_react52.default.createElement("input", { type: layout === "number" ? "text" : layout, inputMode: layout === "number" ? "numeric" : "text", className: "sendbird-input__input ".concat(errorMessage ? "error" : ""), name, required, disabled: isSubmitted, value: currentValue, onFocus: handleFocus, onBlur: handleBlur, onChange: function(event) {
                var value = event.target.value;
                onChange(value ? [value] : []);
              } }),
              placeHolder && !currentValue && import_react52.default.createElement(Label, { className: "sendbird-input__placeholder", type: LabelTypography.BODY_1, color: LabelColors.ONBACKGROUND_3 }, placeHolder)
            ));
          }
          default: {
            return import_react52.default.createElement(import_react52.default.Fragment, null);
          }
        }
      }(),
      errorMessage && (isSubmitTried || isInvalidated) && import_react52.default.createElement(Label, { className: "sendbird-form-message__error-label", type: LabelTypography.CAPTION_3 }, errorMessage)
    )
  );
};
var FallbackUserMessage = function(_a2) {
  var isByMe = _a2.isByMe, text2 = _a2.text;
  return import_react52.default.createElement(
    "div",
    { className: getClassName([
      "sendbird-unknown-message-item-body",
      isByMe ? "outgoing" : "incoming"
    ]) },
    import_react52.default.createElement(Label, { className: "sendbird-unknown-message-item-body__description", type: LabelTypography.BODY_1, color: isByMe ? LabelColors.ONCONTENT_3 : LabelColors.ONBACKGROUND_3 }, text2)
  );
};
function FormMessageItemBody(props) {
  var _this = this;
  var message = props.message, form = props.form, isByMe = props.isByMe, logger = props.logger;
  var items = form.items, formId = form.id;
  var stringSet = (0, import_react52.useContext)(LocalizationContext).stringSet;
  var _a2 = (0, import_react52.useState)(false), submitFailed = _a2[0], setSubmitFailed = _a2[1];
  var _b2 = (0, import_react52.useState)(false), isSubmitTried = _b2[0], setIsSubmitTried = _b2[1];
  var _c = (0, import_react52.useState)(function() {
    var initialFormValues = [];
    items.forEach(function(_a3) {
      var required = _a3.required, _b3 = _a3.style, style = _b3 === void 0 ? {} : _b3;
      var layout = style.layout, _c2 = style.defaultOptions, defaultOptions2 = _c2 === void 0 ? [] : _c2;
      initialFormValues.push({
        draftValues: layout === "chip" ? defaultOptions2 : [],
        required,
        errorMessage: null,
        isInvalidated: false
      });
    });
    return initialFormValues;
  }), formValues = _c[0], setFormValues = _c[1];
  var isSubmitted = form.isSubmitted;
  var hasError = formValues.some(function(_a3) {
    var errorMessage = _a3.errorMessage;
    return !!errorMessage;
  });
  var hasInvalidated = formValues.some(function(_a3) {
    var isInvalidated = _a3.isInvalidated;
    return isInvalidated;
  });
  var isButtonDisabled = hasError && (isSubmitTried || hasInvalidated) || isSubmitted;
  var handleSubmit = (0, import_react52.useCallback)(function() {
    return __awaiter(_this, void 0, void 0, function() {
      var hasError_1, isMissingRequired, error_1;
      return __generator(this, function(_a3) {
        switch (_a3.label) {
          case 0:
            setIsSubmitTried(true);
            _a3.label = 1;
          case 1:
            _a3.trys.push([1, 3, , 4]);
            hasError_1 = formValues.some(function(_a4) {
              var errorMessage = _a4.errorMessage;
              return errorMessage;
            });
            if (hasError_1) {
              return [
                2
                /*return*/
              ];
            }
            isMissingRequired = formValues.some(function(formValue) {
              return formValue.required && (!formValue.draftValues || formValue.draftValues.length === 0);
            });
            if (isMissingRequired) {
              setFormValues(function(oldFormValues) {
                return oldFormValues.map(function(formValue) {
                  if (formValue.required && formValue.draftValues.length === 0) {
                    return __assign(__assign({}, formValue), { errorMessage: stringSet.FORM_ITEM_REQUIRED });
                  }
                  return formValue;
                });
              });
              return [
                2
                /*return*/
              ];
            }
            formValues.forEach(function(formValue, index) {
              items[index].draftValues = formValue.draftValues;
            });
            return [4, message.submitMessageForm()];
          case 2:
            _a3.sent();
            return [3, 4];
          case 3:
            error_1 = _a3.sent();
            setSubmitFailed(true);
            logger === null || logger === void 0 ? void 0 : logger.error(error_1);
            return [3, 4];
          case 4:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  }, [formValues, message.messageId, message.submitMessageForm, formId]);
  if (!isFormVersionCompatible(form.version)) {
    return import_react52.default.createElement(FallbackUserMessage, { isByMe, text: stringSet.FORM_VERSION_ERROR });
  }
  return import_react52.default.createElement(
    "div",
    { className: getClassName([
      "".concat(TEXT_MESSAGE_BODY_CLASSNAME, " disable-hover"),
      "sendbird-form-message__root",
      "incoming"
    ]) },
    items.map(function(item, index) {
      var _a3;
      var name = item.name, placeholder = item.placeholder, id = item.id, required = item.required, style = item.style;
      var _b3 = formValues[index], _c2 = _b3.draftValues, draftValues = _c2 === void 0 ? [] : _c2, errorMessage = _b3.errorMessage;
      return import_react52.default.createElement(FormInput, { key: id, style, placeHolder: placeholder, values: (_a3 = item.submittedValues) !== null && _a3 !== void 0 ? _a3 : draftValues, isInvalidated: formValues[index].isInvalidated, isSubmitTried, errorMessage, isValid: isSubmitted, isSubmitted, name, required, onFocused: function(isFocus) {
        if (errorMessage && !isFocus && !formValues[index].isInvalidated) {
          setFormValues(function(_a4) {
            var newInputs = _a4.slice(0);
            newInputs[index] = __assign(__assign({}, newInputs[index]), { isInvalidated: true });
            return newInputs;
          });
        } else if (!errorMessage) {
          setFormValues(function(_a4) {
            var newInputs = _a4.slice(0);
            newInputs[index] = __assign(__assign({}, newInputs[index]), { isInvalidated: false });
            return newInputs;
          });
        }
      }, onChange: function(values) {
        setFormValues(function(_a4) {
          var newInputs = _a4.slice(0);
          newInputs[index] = __assign(__assign({}, newInputs[index]), { draftValues: values, errorMessage: function() {
            if (!item.isValid(values)) {
              return stringSet.FORM_ITEM_INVALID;
            }
            if (required && values.length === 0) {
              return stringSet.FORM_ITEM_REQUIRED;
            }
            return null;
          }() });
          return newInputs;
        });
      } });
    }),
    import_react52.default.createElement(Button, { className: "sendbird-form-message__submit-button", onClick: handleSubmit, disabled: isButtonDisabled, labelType: LabelTypography.BUTTON_2, labelColor: LabelColors.ONCONTENT_1 }, isSubmitted ? "Submitted successfully" : "Submit"),
    submitFailed && import_react52.default.createElement(MessageFeedbackFailedModal, { text: "Submit failed.", onCancel: function() {
      setSubmitFailed(false);
    } })
  );
}
var MESSAGE_ITEM_BODY_CLASSNAME = "sendbird-message-content__middle__message-item-body";
var MessageBody = function(props) {
  var _a2;
  var _b2 = props.className, className = _b2 === void 0 ? MESSAGE_ITEM_BODY_CLASSNAME : _b2, message = props.message, channel = props.channel, showFileViewer = props.showFileViewer, onMessageHeightChange = props.onMessageHeightChange, onBeforeDownloadFileMessage = props.onBeforeDownloadFileMessage, mouseHover = props.mouseHover, isMobile = props.isMobile, config = props.config, isReactionEnabledInChannel = props.isReactionEnabledInChannel, isByMe = props.isByMe;
  var customSubcomponentsProps = (_a2 = props["customSubcomponentsProps"]) !== null && _a2 !== void 0 ? _a2 : {};
  var threadMessageKindKey = useThreadMessageKindKeySelector({
    isMobile
  });
  var statefulFileInfoList = useFileInfoListWithUploaded(message);
  var messageTypes = getUIKitMessageTypes();
  var isOgMessageEnabledInGroupChannel = (channel === null || channel === void 0 ? void 0 : channel.isGroupChannel()) && config.groupChannel.enableOgtag;
  var isFormMessageEnabledInGroupChannel = (channel === null || channel === void 0 ? void 0 : channel.isGroupChannel()) && config.groupChannel.enableFormTypeMessage;
  var renderUnknownMessageItemBody = function() {
    return import_react52.default.createElement(UnknownMessageItemBody, { className, message, isByMe, mouseHover, isReactionEnabled: isReactionEnabledInChannel });
  };
  return K(message).when(function(message2) {
    return isFormMessageEnabledInGroupChannel && isFormMessage(message2);
  }, function() {
    return import_react52.default.createElement(FormMessageItemBody, { isByMe, message, form: message.messageForm, logger: config.logger });
  }).when(isTemplateMessage, function() {
    var _a3, _b3;
    var templatePayload = message.extendedMessagePayload[MESSAGE_TEMPLATE_KEY];
    if (!isValidTemplateMessageType(templatePayload)) {
      (_b3 = (_a3 = config.logger) === null || _a3 === void 0 ? void 0 : _a3.error) === null || _b3 === void 0 ? void 0 : _b3.call(_a3, "TemplateMessageItemBody: invalid type value in message.extendedMessagePayload.message_template.", templatePayload);
      return renderUnknownMessageItemBody();
    }
    return import_react52.default.createElement(TemplateMessageItemBody, { className, message, isByMe, theme: config === null || config === void 0 ? void 0 : config.theme });
  }).when(function(message2) {
    return isOgMessageEnabledInGroupChannel && isSendableMessage(message2) && isOGMessage(message2);
  }, function() {
    var _a3;
    return import_react52.default.createElement(OGMessageItemBody, { className, message, isByMe, mouseHover, isMentionEnabled: (_a3 = config.groupChannel.enableMention) !== null && _a3 !== void 0 ? _a3 : false, isReactionEnabled: isReactionEnabledInChannel, onMessageHeightChange, isMarkdownEnabled: config.groupChannel.enableMarkdownForUserMessage });
  }).when(isTextMessage, function() {
    var _a3;
    return import_react52.default.createElement(TextMessageItemBody, { className, message, isByMe, mouseHover, isMentionEnabled: (_a3 = config.groupChannel.enableMention) !== null && _a3 !== void 0 ? _a3 : false, isReactionEnabled: isReactionEnabledInChannel, isMarkdownEnabled: config.groupChannel.enableMarkdownForUserMessage });
  }).when(function(message2) {
    return getUIKitMessageType(message2) === messageTypes.FILE;
  }, function() {
    return import_react52.default.createElement(FileMessageItemBody, { className, message, isByMe, mouseHover, isReactionEnabled: isReactionEnabledInChannel, onBeforeDownloadFileMessage });
  }).when(isMultipleFilesMessage, function() {
    var _a3;
    return import_react52.default.createElement(MultipleFilesMessageItemBody, __assign({ className, message, isByMe, mouseHover, isReactionEnabled: isReactionEnabledInChannel, threadMessageKindKey, statefulFileInfoList, onBeforeDownloadFileMessage }, (_a3 = customSubcomponentsProps["MultipleFilesMessageItemBody"]) !== null && _a3 !== void 0 ? _a3 : {}));
  }).when(isVoiceMessage, function() {
    var _a3;
    return import_react52.default.createElement(VoiceMessageItemBody, { className, message, channelUrl: (_a3 = channel === null || channel === void 0 ? void 0 : channel.url) !== null && _a3 !== void 0 ? _a3 : "", isByMe, isReactionEnabled: isReactionEnabledInChannel });
  }).when(isThumbnailMessage, function() {
    var _a3;
    return import_react52.default.createElement(ThumbnailMessageItemBody, __assign({ className, message, isByMe, mouseHover, isReactionEnabled: isReactionEnabledInChannel, showFileViewer, style: isMobile ? { width: "100%" } : {} }, (_a3 = customSubcomponentsProps["ThumbnailMessageItemBody"]) !== null && _a3 !== void 0 ? _a3 : {}));
  }).otherwise(function() {
    return renderUnknownMessageItemBody();
  });
};
var MessageHeader = function(props) {
  var _a2, _b2;
  var channel = props.channel, message = props.message;
  return import_react52.default.createElement(
    Label,
    { className: "sendbird-message-content__middle__sender-name", type: LabelTypography.CAPTION_2, color: LabelColors.ONBACKGROUND_2 },
    /**
     * To use the latest member profile information, message.sender might be outdated
     */
    ((_b2 = (_a2 = channel === null || channel === void 0 ? void 0 : channel.members) === null || _a2 === void 0 ? void 0 : _a2.find(function(member) {
      var _a3;
      return (member === null || member === void 0 ? void 0 : member.userId) === ((_a3 = message === null || message === void 0 ? void 0 : message.sender) === null || _a3 === void 0 ? void 0 : _a3.userId);
    })) === null || _b2 === void 0 ? void 0 : _b2.nickname) || getSenderName(message)
    // TODO: Divide getting profileUrl logic to utils
  );
};

// node_modules/@sendbird/uikit-react/ui/FeedbackIconButton.js
var import_react53 = __toESM(require_react(), 1);
var FeedbackIconButton = import_react53.default.forwardRef(function(props, ref) {
  var children = props.children, isSelected = props.isSelected, _a2 = props.onClick, onClick = _a2 === void 0 ? function() {
  } : _a2, _b2 = props.disabled, disabled = _b2 === void 0 ? false : _b2;
  return import_react53.default.createElement(
    "button",
    { className: [
      "sendbird-iconbutton__feedback",
      isSelected ? "sendbird-iconbutton__feedback__pressed" : "",
      disabled ? "sendbird-iconbutton__feedback__disabled" : ""
    ].join(" "), ref, type: "button", onClick: function(e2) {
      onClick === null || onClick === void 0 ? void 0 : onClick(e2);
    }, disabled },
    import_react53.default.createElement("span", { className: [
      "sendbird-iconbutton__feedback__inner",
      isSelected ? "sendbird-iconbutton__feedback__inner__pressed" : "",
      disabled ? "sendbird-iconbutton__feedback__inner__disabled" : ""
    ].join(" ") }, children)
  );
});

// node_modules/@sendbird/uikit-react/ui/MobileFeedbackMenu.js
var import_react54 = __toESM(require_react(), 1);
var import_react_dom14 = __toESM(require_react_dom(), 1);
function MobileFeedbackMenu(props) {
  var hideMenu = props.hideMenu, onEditFeedback = props.onEditFeedback, onRemoveFeedback = props.onRemoveFeedback;
  var stringSet = useLocalization().stringSet;
  return import_react54.default.createElement(
    BottomSheet,
    { onBackdropClick: hideMenu },
    import_react54.default.createElement(
      "div",
      { className: "sendbird-message__bottomsheet--feedback-options-menu" },
      import_react54.default.createElement(
        "div",
        { className: "sendbird-message__bottomsheet--feedback-option", onClick: function() {
          hideMenu();
          onEditFeedback();
        } },
        import_react54.default.createElement(Label, { type: LabelTypography.BODY_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.EDIT_COMMENT)
      ),
      import_react54.default.createElement(
        "div",
        { className: "sendbird-message__bottomsheet--feedback-option", onClick: function() {
          hideMenu();
          onRemoveFeedback();
        } },
        import_react54.default.createElement(Label, { type: LabelTypography.BODY_1, color: LabelColors.ERROR }, stringSet.REMOVE_FEEDBACK)
      )
    )
  );
}

// node_modules/@sendbird/uikit-react/ui/MessageFeedbackModal.js
var import_react55 = __toESM(require_react(), 1);
var import_react_dom15 = __toESM(require_react_dom(), 1);
function MessageFeedbackModal(props) {
  var _a2, _b2;
  var selectedFeedback = props.selectedFeedback, message = props.message, onClose = props.onClose, onSubmit = props.onSubmit, onUpdate = props.onUpdate, onRemove = props.onRemove;
  var stringSet = (0, import_react55.useContext)(LocalizationContext).stringSet;
  var isMobile = useMediaQueryContext().isMobile;
  var isEdit = (message === null || message === void 0 ? void 0 : message.myFeedback) && selectedFeedback === message.myFeedback.rating;
  var hasComment = (_a2 = message === null || message === void 0 ? void 0 : message.myFeedback) === null || _a2 === void 0 ? void 0 : _a2.comment;
  var onSubmitWrapper = function() {
    var _a3, _b3, _c;
    if (!selectedFeedback)
      return;
    var comment = (_b3 = (_a3 = inputRef.current) === null || _a3 === void 0 ? void 0 : _a3.value) !== null && _b3 !== void 0 ? _b3 : "";
    if (isEdit) {
      if (comment !== ((_c = message.myFeedback) === null || _c === void 0 ? void 0 : _c.comment)) {
        onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(selectedFeedback, comment);
      } else {
        onClose === null || onClose === void 0 ? void 0 : onClose();
      }
    } else if (!message.myFeedback) {
      onSubmit === null || onSubmit === void 0 ? void 0 : onSubmit(selectedFeedback, comment);
    }
  };
  var modalRef = (0, import_react55.useRef)();
  var inputRef = (0, import_react55.useRef)();
  var onKeyDown = useKeyDown(modalRef, {
    Enter: function() {
      return onSubmitWrapper();
    },
    Escape: function() {
      return onClose === null || onClose === void 0 ? void 0 : onClose();
    }
  });
  return import_react55.default.createElement(
    "div",
    { onKeyDown },
    import_react55.default.createElement(
      Modal,
      { contentClassName: "sendbird-message-feedback-modal-content__mobile", type: ButtonTypes.PRIMARY, onCancel: onClose, onSubmit: function() {
        onSubmitWrapper();
      }, submitText: stringSet.BUTTON__SUBMIT, renderHeader: function() {
        return import_react55.default.createElement(
          "div",
          { className: "sendbird-modal__header" },
          import_react55.default.createElement(Label, { type: LabelTypography.H_1, color: LabelColors.ONBACKGROUND_1, className: "sendbird-message-feedback-modal-header" }, stringSet.FEEDBACK_MODAL_TITLE)
        );
      }, customFooter: import_react55.default.createElement(
        "div",
        { className: "sendbird-message-feedback-modal-footer__root" },
        !isMobile && (message === null || message === void 0 ? void 0 : message.myFeedback) && selectedFeedback === message.myFeedback.rating ? import_react55.default.createElement(Button, { type: ButtonTypes.WARNING, onClick: onRemove, labelType: LabelTypography.BUTTON_3 }, stringSet.BUTTON__REMOVE_FEEDBACK) : import_react55.default.createElement("div", null),
        import_react55.default.createElement(
          "div",
          { className: "sendbird-message-feedback-modal-footer__right-content" },
          import_react55.default.createElement(
            Button,
            { type: ButtonTypes.SECONDARY, onClick: onClose },
            import_react55.default.createElement(Label, { type: LabelTypography.BUTTON_3, color: LabelColors.ONBACKGROUND_1 }, stringSet.BUTTON__CANCEL)
          ),
          import_react55.default.createElement(
            Button,
            { onClick: function() {
              return onSubmitWrapper();
            } },
            import_react55.default.createElement(Label, { type: LabelTypography.BUTTON_3, color: LabelColors.ONCONTENT_1 }, hasComment ? stringSet.BUTTON__SAVE : stringSet.BUTTON__SUBMIT)
          )
        )
      ) },
      import_react55.default.createElement(
        "div",
        { className: "sendbird-message-feedback-modal-body__root" },
        import_react55.default.createElement(Input, { name: "sendbird-message-feedback-modal-body__root", ref: inputRef, value: isEdit ? (_b2 = message.myFeedback) === null || _b2 === void 0 ? void 0 : _b2.comment : void 0, placeHolder: stringSet.FEEDBACK_CONTENT_PLACEHOLDER, autoFocus: true })
      )
    )
  );
}

// node_modules/@sendbird/uikit-react/chunks/bundle-C-Qr6Xbj.js
var import_react56 = __toESM(require_react(), 1);
function useElementObserver(selector, targetElement) {
  var _a2 = (0, import_react56.useState)(false), isElementMounted = _a2[0], setIsElementMounted = _a2[1];
  (0, import_react56.useEffect)(function() {
    var targetElements = Array.isArray(targetElement) ? targetElement : [targetElement];
    var updateElementState = function() {
      var _a3;
      var elements = targetElements === null || targetElements === void 0 ? void 0 : targetElements.map(function(target) {
        return target === null || target === void 0 ? void 0 : target.querySelector(selector);
      });
      setIsElementMounted((_a3 = elements === null || elements === void 0 ? void 0 : elements.some(function(element) {
        return !!element;
      })) !== null && _a3 !== void 0 ? _a3 : false);
    };
    updateElementState();
    var observerCallback = function(mutations) {
      mutations.forEach(function(mutation) {
        if (mutation.addedNodes.length || mutation.removedNodes.length) {
          Array.from(mutation.addedNodes).forEach(function(node) {
            if (node.nodeType === Node.ELEMENT_NODE && node.matches(selector)) {
              setIsElementMounted(true);
            }
          });
          Array.from(mutation.removedNodes).forEach(function(node) {
            if (node.nodeType === Node.ELEMENT_NODE && node.matches(selector)) {
              setIsElementMounted(false);
            }
          });
        }
      });
    };
    var observer = new MutationObserver(observerCallback);
    var observerOptions = {
      childList: true,
      // Observe addition and removal of child nodes
      subtree: true
      // Observe the entire subtree
    };
    targetElements === null || targetElements === void 0 ? void 0 : targetElements.forEach(function(target) {
      if (target)
        observer.observe(target, observerOptions);
    });
    return function() {
      observer.disconnect();
    };
  }, [selector, targetElement]);
  return isElementMounted;
}

// node_modules/@sendbird/uikit-react/ui/MessageContent.js
var import_react_dom16 = __toESM(require_react_dom(), 1);
var SbFeedbackStatus;
(function(SbFeedbackStatus2) {
  SbFeedbackStatus2["NOT_APPLICABLE"] = "NOT_APPLICABLE";
  SbFeedbackStatus2["NO_FEEDBACK"] = "NO_FEEDBACK";
  SbFeedbackStatus2["SUBMITTED"] = "SUBMITTED";
})(SbFeedbackStatus || (SbFeedbackStatus = {}));
function MessageContentForTemplateMessage(props) {
  var _a2, _b2, _c;
  var channel = props.channel, message = props.message, showFileViewer = props.showFileViewer, onMessageHeightChange = props.onMessageHeightChange, onBeforeDownloadFileMessage = props.onBeforeDownloadFileMessage, renderSenderProfile = props.renderSenderProfile, renderMessageHeader = props.renderMessageHeader, renderMessageBody = props.renderMessageBody, isByMe = props.isByMe, displayThreadReplies = props.displayThreadReplies, mouseHover = props.mouseHover, isMobile = props.isMobile, isReactionEnabledInChannel = props.isReactionEnabledInChannel, hoveredMenuClassName = props.hoveredMenuClassName, templateType = props.templateType, useReplying = props.useReplying;
  var config = useSendbird().state.config;
  var dateLocale = useLocalization().dateLocale;
  var uiContainerTypeClassName = (_a2 = uiContainerType[templateType]) !== null && _a2 !== void 0 ? _a2 : "";
  var senderProfile = renderSenderProfile(__assign(__assign({}, props), { chainBottom: false, className: "", isByMe, displayThreadReplies }));
  var messageHeader = renderMessageHeader(props);
  var messageBody = renderMessageBody({
    message,
    channel,
    showFileViewer,
    onMessageHeightChange,
    mouseHover,
    isMobile,
    config,
    isReactionEnabledInChannel,
    isByMe,
    onBeforeDownloadFileMessage
  });
  var timeStamp = import_react57.default.createElement(Label, { className: classnames("sendbird-message-content__middle__body-container__created-at", "right", hoveredMenuClassName, uiContainerTypeClassName), type: LabelTypography.CAPTION_3, color: LabelColors.ONBACKGROUND_2 }, format((message === null || message === void 0 ? void 0 : message.createdAt) || 0, "p", {
    locale: dateLocale
  }));
  var templateData = (_b2 = message.extendedMessagePayload) === null || _b2 === void 0 ? void 0 : _b2[MESSAGE_TEMPLATE_KEY];
  var _d = (_c = templateData === null || templateData === void 0 ? void 0 : templateData.container_options) !== null && _c !== void 0 ? _c : {}, _e = _d.profile, profile = _e === void 0 ? true : _e, _f = _d.time, time = _f === void 0 ? true : _f, _g = _d.nickname, nickname = _g === void 0 ? true : _g;
  var hasContainerHeader = profile || nickname;
  return import_react57.default.createElement(
    "div",
    { className: "sendbird-message-content__sendbird-ui-container-type__default__root" },
    !isByMe && hasContainerHeader && !useReplying && import_react57.default.createElement(
      "div",
      { className: "sendbird-message-content__sendbird-ui-container-type__default__header-container" },
      import_react57.default.createElement("div", { className: "sendbird-message-content__sendbird-ui-container-type__default__header-container__left__profile" }, profile && senderProfile),
      nickname && messageHeader
    ),
    messageBody,
    !isByMe && time && import_react57.default.createElement("div", { className: "sendbird-message-content__sendbird-ui-container-type__default__bottom" }, timeStamp)
  );
}
function MessageContent(props) {
  var _this = this;
  var _a2, _b2, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
  var className = props.className, userId = props.userId, channel = props.channel, message = props.message, _p = props.disabled, disabled = _p === void 0 ? false : _p, _q = props.chainTop, chainTop = _q === void 0 ? false : _q, _r = props.chainBottom, chainBottom = _r === void 0 ? false : _r, _s = props.isReactionEnabled, isReactionEnabled = _s === void 0 ? false : _s, _t = props.disableQuoteMessage, disableQuoteMessage = _t === void 0 ? false : _t, replyType = props.replyType, threadReplySelectType = props.threadReplySelectType, nicknamesMap = props.nicknamesMap, emojiContainer = props.emojiContainer, scrollToMessage = props.scrollToMessage, showEdit = props.showEdit, showRemove = props.showRemove, showFileViewer = props.showFileViewer, resendMessage = props.resendMessage, deleteMessage = props.deleteMessage, toggleReaction = props.toggleReaction, setQuoteMessage = props.setQuoteMessage, onReplyInThread = props.onReplyInThread, onQuoteMessageClick = props.onQuoteMessageClick, onMessageHeightChange = props.onMessageHeightChange, onBeforeDownloadFileMessage = props.onBeforeDownloadFileMessage, filterEmojiCategoryIds = props.filterEmojiCategoryIds;
  var _u = deleteNullish(props), _v = _u.renderSenderProfile, renderSenderProfile = _v === void 0 ? function(props2) {
    return import_react57.default.createElement(MessageProfile, __assign({}, props2));
  } : _v, _w = _u.renderMessageBody, renderMessageBody = _w === void 0 ? function(props2) {
    return import_react57.default.createElement(MessageBody, __assign({}, props2));
  } : _w, _x = _u.renderMessageHeader, renderMessageHeader = _x === void 0 ? function(props2) {
    return import_react57.default.createElement(MessageHeader, __assign({}, props2));
  } : _x, _y = _u.renderMessageMenu, renderMessageMenu = _y === void 0 ? function(props2) {
    return import_react57.default.createElement(MessageMenu, __assign({}, props2));
  } : _y, _z = _u.renderEmojiMenu, renderEmojiMenu = _z === void 0 ? function(props2) {
    return import_react57.default.createElement(MessageEmojiMenu, __assign({}, props2));
  } : _z, _0 = _u.renderEmojiReactions, renderEmojiReactions = _0 === void 0 ? function(props2) {
    return import_react57.default.createElement(EmojiReactions, __assign({}, props2));
  } : _0, _1 = _u.renderMobileMenuOnLongPress, renderMobileMenuOnLongPress = _1 === void 0 ? function(props2) {
    return import_react57.default.createElement(MobileMenu, __assign({}, props2));
  } : _1;
  var _2 = useLocalization(), dateLocale = _2.dateLocale, stringSet = _2.stringSet;
  var _3 = useSendbird().state, config = _3.config, eventHandlers = _3.eventHandlers;
  var logger = config.logger;
  var onPressUserProfileHandler = (_a2 = eventHandlers === null || eventHandlers === void 0 ? void 0 : eventHandlers.reaction) === null || _a2 === void 0 ? void 0 : _a2.onPressUserProfile;
  var contentRef = (0, import_react57.useRef)();
  var threadRepliesRef = (0, import_react57.useRef)();
  var feedbackButtonsRef = (0, import_react57.useRef)();
  var isMobile = useMediaQueryContext().isMobile;
  var _4 = (0, import_react57.useState)(false), showMenu = _4[0], setShowMenu = _4[1];
  var _5 = (0, import_react57.useState)(false), mouseHover = _5[0], setMouseHover = _5[1];
  var isMenuMounted = useElementObserver("#".concat(getObservingId(message.messageId), ".").concat(MENU_OBSERVING_CLASS_NAME), [
    document.getElementById(MENU_ROOT_ID),
    document.getElementById(EMOJI_MENU_ROOT_ID)
  ]);
  var _6 = (0, import_react57.useState)(false), showFeedbackOptionsMenu = _6[0], setShowFeedbackOptionsMenu = _6[1];
  var _7 = (0, import_react57.useState)(false), showFeedbackModal = _7[0], setShowFeedbackModal = _7[1];
  var _8 = (0, import_react57.useState)(""), feedbackFailedText = _8[0], setFeedbackFailedText = _8[1];
  var isByMe = userId === ((_b2 = message === null || message === void 0 ? void 0 : message.sender) === null || _b2 === void 0 ? void 0 : _b2.userId) || (message === null || message === void 0 ? void 0 : message.sendingStatus) === "pending" || (message === null || message === void 0 ? void 0 : message.sendingStatus) === "failed";
  var isByMeClassName = isByMe ? "outgoing" : "incoming";
  var chainTopClassName = chainTop ? "chain-top" : "";
  var isReactionEnabledInChannel = isReactionEnabled && !(channel === null || channel === void 0 ? void 0 : channel.isEphemeral);
  var isReactionEnabledClassName = isReactionEnabledInChannel ? "use-reactions" : "";
  var hoveredMenuClassName = isMenuMounted ? "sendbird-mouse-hover" : "";
  var useReplying = !!((replyType === "QUOTE_REPLY" || replyType === "THREAD") && (message === null || message === void 0 ? void 0 : message.parentMessageId) && (message === null || message === void 0 ? void 0 : message.parentMessage) && !disableQuoteMessage);
  var useReplyingClassName = useReplying ? "use-quote" : "";
  var displayThreadReplies = ((_c = message === null || message === void 0 ? void 0 : message.threadInfo) === null || _c === void 0 ? void 0 : _c.replyCount) && message.threadInfo.replyCount > 0 && replyType === "THREAD";
  var isFeedbackMessage = !isByMe && !!(message === null || message === void 0 ? void 0 : message.myFeedbackStatus) && message.myFeedbackStatus !== SbFeedbackStatus.NOT_APPLICABLE;
  var isFeedbackEnabled = !!((_d = config === null || config === void 0 ? void 0 : config.groupChannel) === null || _d === void 0 ? void 0 : _d.enableFeedback) && isFeedbackMessage;
  var hasFeedback = (_e = message === null || message === void 0 ? void 0 : message.myFeedback) === null || _e === void 0 ? void 0 : _e.rating;
  var isNotSpecialMessage = !isTemplateMessage(message) && !isFormMessage(message);
  var showLongPressMenu = isNotSpecialMessage && isMobile;
  var showOutgoingMenu = isNotSpecialMessage && isByMe && !isMobile;
  var showThreadReplies = isNotSpecialMessage && displayThreadReplies;
  var showRightContent = isNotSpecialMessage && !isByMe && !isMobile;
  var getTotalBottom = function() {
    var sum = 2;
    if (threadRepliesRef.current) {
      sum += 4 + threadRepliesRef.current.clientHeight;
    }
    if (feedbackButtonsRef.current) {
      sum += 4 + feedbackButtonsRef.current.clientHeight;
    }
    return sum > 0 ? sum + "px" : "";
  };
  var onCloseFeedbackForm = function() {
    setShowFeedbackModal(false);
  };
  var openFeedbackFormOrMenu = function(hasFeedback2) {
    if (hasFeedback2 === void 0) {
      hasFeedback2 = false;
    }
    if (isMobile && hasFeedback2) {
      setShowFeedbackOptionsMenu(true);
    } else {
      setShowFeedbackModal(true);
    }
  };
  var longPress = useLongPress({
    onLongPress: function() {
      if (showLongPressMenu) {
        setShowMenu(true);
      }
    },
    onClick: noop
  }, {
    delay: 300,
    shouldPreventDefault: false
  });
  if (isAdminMessage(message)) {
    return import_react57.default.createElement(AdminMessage, { message });
  }
  if (isTemplateMessage(message)) {
    var templatePayload = message.extendedMessagePayload[MESSAGE_TEMPLATE_KEY];
    if (isValidTemplateMessageType(templatePayload)) {
      return import_react57.default.createElement(MessageContentForTemplateMessage, __assign({}, props, { renderSenderProfile, renderMessageHeader, renderMessageBody, isByMe, displayThreadReplies, mouseHover, isMobile, isReactionEnabledInChannel, hoveredMenuClassName, templateType: templatePayload["type"], useReplying }));
    }
  }
  return import_react57.default.createElement(
    "div",
    { className: getClassName([
      className !== null && className !== void 0 ? className : "",
      "sendbird-message-content",
      isByMeClassName
    ]), onMouseOver: function() {
      return setMouseHover(true);
    }, onMouseLeave: function() {
      return setMouseHover(false);
    } },
    import_react57.default.createElement(
      "div",
      { className: classnames("sendbird-message-content__left", isReactionEnabledClassName, isByMeClassName, useReplyingClassName), "data-testid": "sendbird-message-content__left" },
      renderSenderProfile(__assign(__assign({}, props), { className: "sendbird-message-content__left__avatar", isByMe, displayThreadReplies, bottom: getTotalBottom() })),
      showOutgoingMenu && import_react57.default.createElement(
        "div",
        { className: classnames("sendbird-message-content-menu", isReactionEnabledClassName, hoveredMenuClassName, isByMeClassName) },
        renderMessageMenu({
          channel,
          message,
          isByMe,
          replyType,
          showEdit,
          showRemove,
          resendMessage,
          setQuoteMessage,
          onReplyInThread: function(_a3) {
            var _b3, _c2;
            var message2 = _a3.message;
            if (threadReplySelectType === ThreadReplySelectType.THREAD) {
              onReplyInThread === null || onReplyInThread === void 0 ? void 0 : onReplyInThread({ message: message2 });
            } else if (threadReplySelectType === ThreadReplySelectType.PARENT) {
              scrollToMessage === null || scrollToMessage === void 0 ? void 0 : scrollToMessage((_c2 = (_b3 = message2.parentMessage) === null || _b3 === void 0 ? void 0 : _b3.createdAt) !== null && _c2 !== void 0 ? _c2 : 0, message2.parentMessageId);
            }
          },
          deleteMessage
        }),
        isReactionEnabledInChannel && renderEmojiMenu({
          message,
          userId,
          emojiContainer,
          toggleReaction,
          filterEmojiCategoryIds
        })
      )
    ),
    import_react57.default.createElement(
      "div",
      __assign({ className: classnames("sendbird-message-content__middle"), "data-testid": "sendbird-message-content__middle" }, isMobile ? __assign({}, longPress) : {}, { ref: contentRef }),
      !isByMe && !chainTop && !useReplying && renderMessageHeader(props),
      useReplying ? import_react57.default.createElement(
        "div",
        { className: classnames("sendbird-message-content__middle__quote-message", isByMe ? "outgoing" : "incoming", useReplyingClassName), "data-testid": "sendbird-message-content__middle__quote-message" },
        import_react57.default.createElement(QuoteMessage, { className: "sendbird-message-content__middle__quote-message__quote", message, userId, isByMe, isUnavailable: ((_f = channel === null || channel === void 0 ? void 0 : channel.messageOffsetTimestamp) !== null && _f !== void 0 ? _f : 0) > ((_h = (_g = message.parentMessage) === null || _g === void 0 ? void 0 : _g.createdAt) !== null && _h !== void 0 ? _h : 0), onClick: function() {
          var _a3;
          if (replyType === "THREAD" && threadReplySelectType === ThreadReplySelectType.THREAD) {
            onQuoteMessageClick === null || onQuoteMessageClick === void 0 ? void 0 : onQuoteMessageClick({ message });
          }
          if ((replyType === "QUOTE_REPLY" || replyType === "THREAD" && threadReplySelectType === ThreadReplySelectType.PARENT) && ((_a3 = message === null || message === void 0 ? void 0 : message.parentMessage) === null || _a3 === void 0 ? void 0 : _a3.createdAt) && (message === null || message === void 0 ? void 0 : message.parentMessageId)) {
            scrollToMessage === null || scrollToMessage === void 0 ? void 0 : scrollToMessage(message.parentMessage.createdAt, message.parentMessageId);
          }
        } })
      ) : null,
      import_react57.default.createElement(
        "div",
        { className: classnames("sendbird-message-content__middle__body-container") },
        isByMe && !chainBottom && import_react57.default.createElement(
          "div",
          { className: classnames("sendbird-message-content__middle__body-container__created-at", "left", hoveredMenuClassName) },
          import_react57.default.createElement(
            "div",
            { className: "sendbird-message-content__middle__body-container__created-at__component-container" },
            import_react57.default.createElement(MessageStatus, { message, channel })
          )
        ),
        renderMessageBody({
          message,
          channel,
          showFileViewer,
          onMessageHeightChange,
          mouseHover,
          isMobile,
          config,
          isReactionEnabledInChannel,
          isByMe,
          onBeforeDownloadFileMessage
        }),
        isReactionEnabledInChannel && ((_j = message === null || message === void 0 ? void 0 : message.reactions) === null || _j === void 0 ? void 0 : _j.length) > 0 && import_react57.default.createElement("div", { className: classnames("sendbird-message-content-reactions", isMultipleFilesMessage(message) ? "image-grid" : isByMe && !isThumbnailMessage(message) && !isOGMessage(message) && "primary", mouseHover && "mouse-hover") }, renderEmojiReactions({
          userId,
          message,
          channel,
          isByMe,
          // @ts-ignore
          emojiContainer: emojiContainer !== null && emojiContainer !== void 0 ? emojiContainer : new Ct({}),
          memberNicknamesMap: nicknamesMap !== null && nicknamesMap !== void 0 ? nicknamesMap : /* @__PURE__ */ new Map(),
          toggleReaction,
          onPressUserProfile: onPressUserProfileHandler,
          filterEmojiCategoryIds
        })),
        !isByMe && !chainBottom && import_react57.default.createElement(Label, { className: classnames("sendbird-message-content__middle__body-container__created-at", "right", hoveredMenuClassName), type: LabelTypography.CAPTION_3, color: LabelColors.ONBACKGROUND_2 }, format((message === null || message === void 0 ? void 0 : message.createdAt) || 0, stringSet.DATE_FORMAT__MESSAGE_CREATED_AT, {
          locale: dateLocale
        }))
      ),
      showThreadReplies && (message === null || message === void 0 ? void 0 : message.threadInfo) && import_react57.default.createElement(ThreadReplies$1, { className: "sendbird-message-content__middle__thread-replies", threadInfo: message === null || message === void 0 ? void 0 : message.threadInfo, onClick: function() {
        return onReplyInThread === null || onReplyInThread === void 0 ? void 0 : onReplyInThread({ message });
      }, ref: threadRepliesRef }),
      isFeedbackEnabled && import_react57.default.createElement(
        "div",
        { className: "sendbird-message-content__middle__body-container__feedback-buttons-container", ref: feedbackButtonsRef },
        import_react57.default.createElement(
          FeedbackIconButton,
          { isSelected: ((_k = message === null || message === void 0 ? void 0 : message.myFeedback) === null || _k === void 0 ? void 0 : _k.rating) === Le.GOOD, onClick: function() {
            return __awaiter(_this, void 0, void 0, function() {
              var error_1;
              var _a3, _b3;
              return __generator(this, function(_c2) {
                switch (_c2.label) {
                  case 0:
                    if (!!hasFeedback)
                      return [3, 5];
                    _c2.label = 1;
                  case 1:
                    _c2.trys.push([1, 3, , 4]);
                    return [4, message.submitFeedback({
                      rating: Le.GOOD
                    })];
                  case 2:
                    _c2.sent();
                    openFeedbackFormOrMenu();
                    return [3, 4];
                  case 3:
                    error_1 = _c2.sent();
                    (_b3 = (_a3 = config === null || config === void 0 ? void 0 : config.logger) === null || _a3 === void 0 ? void 0 : _a3.error) === null || _b3 === void 0 ? void 0 : _b3.call(_a3, "Channel: Submit feedback failed.", error_1);
                    setFeedbackFailedText(stringSet.FEEDBACK_FAILED_SUBMIT);
                    return [3, 4];
                  case 4:
                    return [3, 6];
                  case 5:
                    openFeedbackFormOrMenu(true);
                    _c2.label = 6;
                  case 6:
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          }, disabled: !!(message === null || message === void 0 ? void 0 : message.myFeedback) && message.myFeedback.rating !== Le.GOOD },
          import_react57.default.createElement(Icon, { type: IconTypes.FEEDBACK_LIKE, width: "24px", height: "24px" })
        ),
        import_react57.default.createElement(
          FeedbackIconButton,
          { isSelected: ((_l = message === null || message === void 0 ? void 0 : message.myFeedback) === null || _l === void 0 ? void 0 : _l.rating) === Le.BAD, onClick: function() {
            return __awaiter(_this, void 0, void 0, function() {
              var error_2;
              var _a3, _b3;
              return __generator(this, function(_c2) {
                switch (_c2.label) {
                  case 0:
                    if (!!hasFeedback)
                      return [3, 5];
                    _c2.label = 1;
                  case 1:
                    _c2.trys.push([1, 3, , 4]);
                    return [4, message.submitFeedback({
                      rating: Le.BAD
                    })];
                  case 2:
                    _c2.sent();
                    openFeedbackFormOrMenu();
                    return [3, 4];
                  case 3:
                    error_2 = _c2.sent();
                    (_b3 = (_a3 = config === null || config === void 0 ? void 0 : config.logger) === null || _a3 === void 0 ? void 0 : _a3.error) === null || _b3 === void 0 ? void 0 : _b3.call(_a3, "Channel: Submit feedback failed.", error_2);
                    setFeedbackFailedText(stringSet.FEEDBACK_FAILED_SUBMIT);
                    return [3, 4];
                  case 4:
                    return [3, 6];
                  case 5:
                    openFeedbackFormOrMenu(true);
                    _c2.label = 6;
                  case 6:
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          }, disabled: !!(message === null || message === void 0 ? void 0 : message.myFeedback) && message.myFeedback.rating !== Le.BAD },
          import_react57.default.createElement(Icon, { type: IconTypes.FEEDBACK_DISLIKE, width: "24px", height: "24px" })
        )
      )
    ),
    showRightContent && import_react57.default.createElement(
      "div",
      { className: classnames("sendbird-message-content__right", chainTopClassName, isReactionEnabledClassName, useReplyingClassName), "data-testid": "sendbird-message-content__right" },
      import_react57.default.createElement(
        "div",
        { className: classnames("sendbird-message-content-menu", chainTopClassName, hoveredMenuClassName, isByMeClassName) },
        isReactionEnabledInChannel && renderEmojiMenu({
          className: "sendbird-message-content-menu__reaction-menu",
          message,
          userId,
          emojiContainer,
          toggleReaction,
          filterEmojiCategoryIds
        }),
        renderMessageMenu({
          className: "sendbird-message-content-menu__normal-menu",
          channel,
          message,
          isByMe,
          replyType,
          showRemove,
          resendMessage,
          setQuoteMessage,
          onReplyInThread: function(_a3) {
            var _b3, _c2;
            var message2 = _a3.message;
            if (threadReplySelectType === ThreadReplySelectType.THREAD) {
              onReplyInThread === null || onReplyInThread === void 0 ? void 0 : onReplyInThread({ message: message2 });
            } else if (threadReplySelectType === ThreadReplySelectType.PARENT) {
              scrollToMessage === null || scrollToMessage === void 0 ? void 0 : scrollToMessage((_c2 = (_b3 = message2.parentMessage) === null || _b3 === void 0 ? void 0 : _b3.createdAt) !== null && _c2 !== void 0 ? _c2 : 0, message2.parentMessageId);
            }
          },
          deleteMessage
        })
      )
    ),
    showMenu && isSendableMessage(message) && channel && renderMobileMenuOnLongPress({
      parentRef: contentRef,
      channel,
      hideMenu: function() {
        setShowMenu(false);
      },
      message,
      isReactionEnabled: isReactionEnabledInChannel,
      isByMe,
      userId,
      replyType,
      disabled,
      showRemove,
      emojiContainer,
      resendMessage,
      deleteMessage,
      setQuoteMessage,
      toggleReaction,
      showEdit,
      onReplyInThread: function(_a3) {
        var _b3;
        var message2 = _a3.message;
        if (threadReplySelectType === ThreadReplySelectType.THREAD) {
          onReplyInThread === null || onReplyInThread === void 0 ? void 0 : onReplyInThread({ message: message2 });
        } else if (threadReplySelectType === ThreadReplySelectType.PARENT) {
          scrollToMessage === null || scrollToMessage === void 0 ? void 0 : scrollToMessage(((_b3 = message2 === null || message2 === void 0 ? void 0 : message2.parentMessage) === null || _b3 === void 0 ? void 0 : _b3.createdAt) || 0, (message2 === null || message2 === void 0 ? void 0 : message2.parentMessageId) || 0);
        }
      },
      onDownloadClick: function(e2) {
        return __awaiter(_this, void 0, void 0, function() {
          var allowDownload, err_1;
          var _a3, _b3;
          return __generator(this, function(_c2) {
            switch (_c2.label) {
              case 0:
                if (!onBeforeDownloadFileMessage) {
                  return [
                    2
                    /*return*/
                  ];
                }
                _c2.label = 1;
              case 1:
                _c2.trys.push([1, 3, , 4]);
                return [4, onBeforeDownloadFileMessage({ message })];
              case 2:
                allowDownload = _c2.sent();
                if (!allowDownload) {
                  e2.preventDefault();
                  (_a3 = logger === null || logger === void 0 ? void 0 : logger.info) === null || _a3 === void 0 ? void 0 : _a3.call(logger, "MessageContent: Not allowed to download.");
                }
                return [3, 4];
              case 3:
                err_1 = _c2.sent();
                (_b3 = logger === null || logger === void 0 ? void 0 : logger.error) === null || _b3 === void 0 ? void 0 : _b3.call(logger, "MessageContent: Error occurred while determining download continuation:", err_1);
                return [3, 4];
              case 4:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      }
    }),
    ((_m = message === null || message === void 0 ? void 0 : message.myFeedback) === null || _m === void 0 ? void 0 : _m.rating) && showFeedbackOptionsMenu && import_react57.default.createElement(MobileFeedbackMenu, { hideMenu: function() {
      setShowFeedbackOptionsMenu(false);
    }, onEditFeedback: function() {
      setShowFeedbackOptionsMenu(false);
      setShowFeedbackModal(true);
    }, onRemoveFeedback: function() {
      return __awaiter(_this, void 0, void 0, function() {
        var error_3;
        var _a3, _b3;
        return __generator(this, function(_c2) {
          switch (_c2.label) {
            case 0:
              _c2.trys.push([0, 3, , 4]);
              if (!(message.myFeedback !== null))
                return [3, 2];
              return [4, message.deleteFeedback(message.myFeedback.id)];
            case 1:
              _c2.sent();
              _c2.label = 2;
            case 2:
              return [3, 4];
            case 3:
              error_3 = _c2.sent();
              (_b3 = (_a3 = config === null || config === void 0 ? void 0 : config.logger) === null || _a3 === void 0 ? void 0 : _a3.error) === null || _b3 === void 0 ? void 0 : _b3.call(_a3, "Channel: Delete feedback failed.", error_3);
              setFeedbackFailedText(stringSet.FEEDBACK_FAILED_DELETE);
              return [3, 4];
            case 4:
              setShowFeedbackOptionsMenu(false);
              return [
                2
                /*return*/
              ];
          }
        });
      });
    } }),
    ((_o = message === null || message === void 0 ? void 0 : message.myFeedback) === null || _o === void 0 ? void 0 : _o.rating) && showFeedbackModal && import_react57.default.createElement(MessageFeedbackModal, { selectedFeedback: message.myFeedback.rating, message, onUpdate: function(selectedFeedback, comment) {
      return __awaiter(_this, void 0, void 0, function() {
        var newFeedback, error_4;
        var _a3, _b3;
        return __generator(this, function(_c2) {
          switch (_c2.label) {
            case 0:
              if (!(message.myFeedback !== null))
                return [3, 4];
              newFeedback = new Qe({
                id: message.myFeedback.id,
                rating: selectedFeedback,
                comment
              });
              _c2.label = 1;
            case 1:
              _c2.trys.push([1, 3, , 4]);
              return [4, message.updateFeedback(newFeedback)];
            case 2:
              _c2.sent();
              return [3, 4];
            case 3:
              error_4 = _c2.sent();
              (_b3 = (_a3 = config === null || config === void 0 ? void 0 : config.logger) === null || _a3 === void 0 ? void 0 : _a3.error) === null || _b3 === void 0 ? void 0 : _b3.call(_a3, "Channel: Update feedback failed.", error_4);
              setFeedbackFailedText(stringSet.FEEDBACK_FAILED_SAVE);
              return [3, 4];
            case 4:
              onCloseFeedbackForm();
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }, onClose: onCloseFeedbackForm, onRemove: function() {
      return __awaiter(_this, void 0, void 0, function() {
        var error_5;
        var _a3, _b3;
        return __generator(this, function(_c2) {
          switch (_c2.label) {
            case 0:
              _c2.trys.push([0, 3, , 4]);
              if (!(message.myFeedback !== null))
                return [3, 2];
              return [4, message.deleteFeedback(message.myFeedback.id)];
            case 1:
              _c2.sent();
              _c2.label = 2;
            case 2:
              return [3, 4];
            case 3:
              error_5 = _c2.sent();
              (_b3 = (_a3 = config === null || config === void 0 ? void 0 : config.logger) === null || _a3 === void 0 ? void 0 : _a3.error) === null || _b3 === void 0 ? void 0 : _b3.call(_a3, "Channel: Delete feedback failed.", error_5);
              setFeedbackFailedText(stringSet.FEEDBACK_FAILED_DELETE);
              return [3, 4];
            case 4:
              onCloseFeedbackForm();
              return [
                2
                /*return*/
              ];
          }
        });
      });
    } }),
    feedbackFailedText && import_react57.default.createElement(MessageFeedbackFailedModal, { text: feedbackFailedText, onCancel: function() {
      setFeedbackFailedText("");
    } })
  );
}

// node_modules/@sendbird/uikit-react/GroupChannel/components/SuggestedReplies.js
var import_react58 = __toESM(require_react(), 1);
var ReplyItem = function(_a2) {
  var value = _a2.value, onClickReply = _a2.onClickReply, _b2 = _a2.type, type = _b2 === void 0 ? "vertical" : _b2;
  return import_react58.default.createElement("div", { className: "sendbird-suggested-replies__option ".concat(type), id: value, onClick: function(e2) {
    return onClickReply(e2, value);
  } }, value);
};
var SuggestedReplies = function(_a2) {
  var replyOptions = _a2.replyOptions, onSendMessage = _a2.onSendMessage, _b2 = _a2.type, type = _b2 === void 0 ? "vertical" : _b2;
  var _c = (0, import_react58.useState)(false), replied = _c[0], setReplied = _c[1];
  var onClickReply = function(event, option) {
    event.preventDefault();
    onSendMessage({ message: option });
    setReplied(true);
  };
  if (replied) {
    return null;
  }
  var children = replyOptions.map(function(option, index) {
    return import_react58.default.createElement(ReplyItem, { key: index, value: option, onClickReply, type });
  });
  return import_react58.default.createElement("div", { className: "sendbird-suggested-replies ".concat(type) }, children);
};

// node_modules/@sendbird/uikit-react/chunks/bundle-CaZn7sCJ.js
var import_react59 = __toESM(require_react(), 1);
function SuggestedUserMentionItem(props) {
  var member = props.member, _a2 = props.isFocused, isFocused = _a2 === void 0 ? false : _a2, parentScrollRef = props.parentScrollRef, onClick = props.onClick, onMouseOver = props.onMouseOver, onMouseMove = props.onMouseMove, renderUserMentionItem = props.renderUserMentionItem;
  var scrollRef = (0, import_react59.useRef)(null);
  var stringSet = (0, import_react59.useContext)(LocalizationContext).stringSet;
  (0, import_react59.useEffect)(function() {
    if (isFocused && (parentScrollRef === null || parentScrollRef === void 0 ? void 0 : parentScrollRef.current) != null && (scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current) != null && (parentScrollRef.current.scrollTop >= scrollRef.current.offsetTop || parentScrollRef.current.scrollTop + parentScrollRef.current.clientHeight <= scrollRef.current.offsetTop)) {
      scrollRef.current.scrollIntoView({ block: "nearest", inline: "nearest" });
    }
  }, [isFocused]);
  var customMentionItem = (0, import_react59.useMemo)(function() {
    if (renderUserMentionItem) {
      return import_react59.default.createElement("div", { className: "sendbird-mention-suggest-list__user-item", onClick: function(event) {
        return onClick === null || onClick === void 0 ? void 0 : onClick({ event, member, itemRef: scrollRef });
      }, onMouseOver: function(event) {
        return onMouseOver === null || onMouseOver === void 0 ? void 0 : onMouseOver({ event, member, itemRef: scrollRef });
      }, onMouseMove: function(event) {
        return onMouseMove === null || onMouseMove === void 0 ? void 0 : onMouseMove({ event, member, itemRef: scrollRef });
      }, key: (member === null || member === void 0 ? void 0 : member.userId) || uuidv4(), ref: scrollRef }, renderUserMentionItem({ user: member }));
    }
  }, [renderUserMentionItem]);
  if (customMentionItem) {
    return customMentionItem;
  }
  return import_react59.default.createElement(
    "div",
    { className: classnames("sendbird-mention-suggest-list__user-item", isFocused && "focused"), onClick: function(event) {
      return onClick === null || onClick === void 0 ? void 0 : onClick({ event, member, itemRef: scrollRef });
    }, onMouseOver: function(event) {
      return onMouseOver === null || onMouseOver === void 0 ? void 0 : onMouseOver({ event, member, itemRef: scrollRef });
    }, onMouseMove: function(event) {
      return onMouseMove === null || onMouseMove === void 0 ? void 0 : onMouseMove({ event, member, itemRef: scrollRef });
    }, key: (member === null || member === void 0 ? void 0 : member.userId) || uuidv4(), ref: scrollRef },
    import_react59.default.createElement(Avatar$1, { className: "sendbird-mention-suggest-list__user-item__avatar", src: member === null || member === void 0 ? void 0 : member.profileUrl, alt: "user-profile", width: "24px", height: "24px" }),
    import_react59.default.createElement(Label, { className: "sendbird-mention-suggest-list__user-item__nickname", testID: "sendbird-mention-suggest-list__user-item__nickname", type: LabelTypography.SUBTITLE_2, color: (member === null || member === void 0 ? void 0 : member.nickname) ? LabelColors.ONBACKGROUND_1 : LabelColors.ONBACKGROUND_3 }, (member === null || member === void 0 ? void 0 : member.nickname) || (stringSet === null || stringSet === void 0 ? void 0 : stringSet.MENTION_NAME__NO_NAME)),
    import_react59.default.createElement(Label, { className: "sendbird-mention-suggest-list__user-item__user-id", testID: "sendbird-mention-suggest-list__user-item__user-id", type: LabelTypography.SUBTITLE_2, color: LabelColors.ONBACKGROUND_2 }, member === null || member === void 0 ? void 0 : member.userId)
  );
}
function fetchMembersFromChannel(currentUserId, channel, maxSuggestionCount, searchString) {
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(_a2) {
      return [2, channel.members.sort(function(a3, b2) {
        var _a3;
        return (_a3 = a3.nickname) === null || _a3 === void 0 ? void 0 : _a3.localeCompare(b2.nickname);
      }).filter(function(member) {
        var _a3;
        return ((_a3 = member.nickname) === null || _a3 === void 0 ? void 0 : _a3.toLowerCase().startsWith(searchString.toLowerCase())) && member.userId !== currentUserId && member.isActive;
      }).slice(0, maxSuggestionCount)];
    });
  });
}
function fetchMembersFromQuery(currentUserId, channel, maxSuggestionCount, searchString) {
  return __awaiter(this, void 0, void 0, function() {
    var query;
    return __generator(this, function(_a2) {
      query = channel.createMemberListQuery({
        limit: maxSuggestionCount + 1,
        // because current user could be included
        nicknameStartsWithFilter: searchString
      });
      return [2, query.next().then(function(memberList) {
        return memberList.filter(function(member) {
          return currentUserId !== (member === null || member === void 0 ? void 0 : member.userId);
        }).slice(0, maxSuggestionCount);
      })];
    });
  });
}
var DEBOUNCING_TIME = 300;
var SuggestedMentionListView = function(props) {
  var _a2, _b2, _c;
  var className = props.className, currentChannel = props.currentChannel, _d = props.targetNickname, targetNickname = _d === void 0 ? "" : _d, onUserItemClick = props.onUserItemClick, onFocusItemChange = props.onFocusItemChange, onFetchUsers = props.onFetchUsers, renderUserMentionItem = props.renderUserMentionItem, inputEvent = props.inputEvent, _e = props.ableAddMention, ableAddMention = _e === void 0 ? true : _e, _f = props.maxMentionCount, maxMentionCount = _f === void 0 ? MAX_USER_MENTION_COUNT : _f, _g = props.maxSuggestionCount, maxSuggestionCount = _g === void 0 ? MAX_USER_SUGGESTION_COUNT : _g;
  var state = useSendbird().state;
  var config = state.config, stores = state.stores;
  var logger = config.logger;
  var currentUserId = ((_c = (_b2 = (_a2 = stores === null || stores === void 0 ? void 0 : stores.sdkStore) === null || _a2 === void 0 ? void 0 : _a2.sdk) === null || _b2 === void 0 ? void 0 : _b2.currentUser) === null || _c === void 0 ? void 0 : _c.userId) || "";
  var scrollRef = (0, import_react59.useRef)(null);
  var stringSet = useLocalization().stringSet;
  var _h = (0, import_react59.useState)(null), timer = _h[0], setTimer = _h[1];
  var _j = (0, import_react59.useState)(""), searchString = _j[0], setSearchString = _j[1];
  var _k = (0, import_react59.useState)(""), lastSearchString = _k[0], setLastSearchString = _k[1];
  var _l = (0, import_react59.useState)(null), currentFocusedMember = _l[0], setCurrentFocusedMember = _l[1];
  var _m = (0, import_react59.useState)([]), currentMemberList = _m[0], setCurrentMemberList = _m[1];
  (0, import_react59.useEffect)(function() {
    clearTimeout(timer !== null && timer !== void 0 ? timer : void 0);
    setTimer(setTimeout(function() {
      setSearchString(targetNickname);
    }, DEBOUNCING_TIME));
  }, [targetNickname]);
  (0, import_react59.useEffect)(function() {
    if ((inputEvent === null || inputEvent === void 0 ? void 0 : inputEvent.key) === MessageInputKeys.Enter) {
      if (currentFocusedMember && currentMemberList.length > 0) {
        onUserItemClick === null || onUserItemClick === void 0 ? void 0 : onUserItemClick(currentFocusedMember);
      }
    }
    if ((inputEvent === null || inputEvent === void 0 ? void 0 : inputEvent.key) === MessageInputKeys.ArrowUp) {
      var currentUserIndex = currentMemberList.findIndex(function(member) {
        return (member === null || member === void 0 ? void 0 : member.userId) === (currentFocusedMember === null || currentFocusedMember === void 0 ? void 0 : currentFocusedMember.userId);
      });
      if (0 < currentUserIndex) {
        setCurrentFocusedMember(currentMemberList[currentUserIndex - 1]);
        onFocusItemChange === null || onFocusItemChange === void 0 ? void 0 : onFocusItemChange(currentMemberList[currentUserIndex - 1]);
      }
    }
    if ((inputEvent === null || inputEvent === void 0 ? void 0 : inputEvent.key) === MessageInputKeys.ArrowDown) {
      var currentUserIndex = currentMemberList.findIndex(function(member) {
        return (member === null || member === void 0 ? void 0 : member.userId) === (currentFocusedMember === null || currentFocusedMember === void 0 ? void 0 : currentFocusedMember.userId);
      });
      if (currentUserIndex < currentMemberList.length - 1) {
        setCurrentFocusedMember(currentMemberList[currentUserIndex + 1]);
        onFocusItemChange === null || onFocusItemChange === void 0 ? void 0 : onFocusItemChange(currentMemberList[currentUserIndex + 1]);
      }
    }
  }, [inputEvent]);
  (0, import_react59.useEffect)(function() {
    if (lastSearchString && searchString.indexOf(lastSearchString) === 0 && currentMemberList.length === 0) {
      return;
    }
    if (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.isSuper) {
      if (!(currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.createMemberListQuery)) {
        logger.warning("SuggestedMentionList: Creating member list query failed");
        return;
      }
    }
    var fetcher = (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.isSuper) ? fetchMembersFromQuery : fetchMembersFromChannel;
    fetcher(currentUserId, currentChannel, maxSuggestionCount, searchString.slice(USER_MENTION_TEMP_CHAR.length)).then(function(suggestingMembers) {
      if (suggestingMembers.length < 1) {
        logger.info("SuggestedMentionList: Fetched member list is empty");
      } else {
        logger.info("SuggestedMentionList: Fetching member list succeeded", { memberList: suggestingMembers });
        setCurrentFocusedMember(suggestingMembers[0]);
      }
      setLastSearchString(searchString);
      onFetchUsers === null || onFetchUsers === void 0 ? void 0 : onFetchUsers(suggestingMembers);
      setCurrentMemberList(suggestingMembers);
    }).catch(function(error) {
      if (error) {
        logger.error("SuggestedMentionList: Fetching member list failed", error);
      }
    });
  }, [
    currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url,
    // We have to be specific like this or React would not recognize the changes in instances.
    currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.members.map(function(member) {
      return member.nickname;
    }).join(),
    currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.members.map(function(member) {
      return member.isActive;
    }).join(),
    searchString,
    maxSuggestionCount,
    currentUserId,
    currentMemberList.length,
    lastSearchString
  ]);
  if (!ableAddMention && currentMemberList.length === 0) {
    return null;
  }
  return import_react59.default.createElement(
    "div",
    { className: classnames("sendbird-mention-suggest-list", className), "data-testid": "sendbird-mention-suggest-list", key: "sendbird-mention-suggest-list", ref: scrollRef },
    ableAddMention && (currentMemberList === null || currentMemberList === void 0 ? void 0 : currentMemberList.map(function(member) {
      return import_react59.default.createElement(SuggestedUserMentionItem, { key: (member === null || member === void 0 ? void 0 : member.userId) || uuidv4(), member, isFocused: (member === null || member === void 0 ? void 0 : member.userId) === (currentFocusedMember === null || currentFocusedMember === void 0 ? void 0 : currentFocusedMember.userId), parentScrollRef: scrollRef, onClick: function(_a3) {
        var member2 = _a3.member;
        onUserItemClick === null || onUserItemClick === void 0 ? void 0 : onUserItemClick(member2);
      }, onMouseOver: function(_a3) {
        var member2 = _a3.member;
        setCurrentFocusedMember(member2);
      }, renderUserMentionItem });
    })),
    !ableAddMention && import_react59.default.createElement(
      "div",
      { className: "sendbird-mention-suggest-list__notice-item" },
      import_react59.default.createElement(Icon, { className: "sendbird-mention-suggest-list__notice-item__icon", type: IconTypes.INFO, fillColor: IconColors.ON_BACKGROUND_2, width: "20px", height: "20px" }),
      import_react59.default.createElement(Label, { className: "sendbird-mention-suggest-list__notice-item__text", type: LabelTypography.SUBTITLE_2, color: LabelColors.ONBACKGROUND_2 }, stringSet.MENTION_COUNT__OVER_LIMIT.replace("%d", String(maxMentionCount)))
    )
  );
};

// node_modules/@sendbird/uikit-react/chunks/bundle-DL8bJVs5.js
var useDidMountEffect = function(func, deps) {
  var _a2 = (0, import_react60.useState)(false), didMount = _a2[0], setDidMount = _a2[1];
  (0, import_react60.useEffect)(function() {
    if (didMount) {
      func();
    } else {
      setDidMount(true);
    }
  }, deps);
};
var MessageView = function(props) {
  var _a2, _b2;
  var message = props.message, children = props.children, hasSeparator = props.hasSeparator, chainTop = props.chainTop, chainBottom = props.chainBottom, handleScroll = props.handleScroll, channel = props.channel, emojiContainer = props.emojiContainer, editInputDisabled = props.editInputDisabled, shouldRenderSuggestedReplies = props.shouldRenderSuggestedReplies, isReactionEnabled = props.isReactionEnabled, replyType = props.replyType, threadReplySelectType = props.threadReplySelectType, nicknamesMap = props.nicknamesMap, scrollToMessage = props.scrollToMessage, toggleReaction = props.toggleReaction, setQuoteMessage = props.setQuoteMessage, onQuoteMessageClick = props.onQuoteMessageClick, onReplyInThreadClick = props.onReplyInThreadClick, onBeforeDownloadFileMessage = props.onBeforeDownloadFileMessage, sendUserMessage = props.sendUserMessage, updateUserMessage = props.updateUserMessage, resendMessage = props.resendMessage, deleteMessage = props.deleteMessage, setAnimatedMessageId = props.setAnimatedMessageId, animatedMessageId = props.animatedMessageId, onMessageAnimated = props.onMessageAnimated, _c = props.usedInLegacy, usedInLegacy = _c === void 0 ? true : _c;
  var _d = deleteNullish(props), renderUserMentionItem = _d.renderUserMentionItem, renderMessage = _d.renderMessage, _e = _d.renderMessageContent, renderMessageContent = _e === void 0 ? function(props2) {
    return import_react60.default.createElement(MessageContent, __assign({}, props2));
  } : _e, _f = _d.renderSuggestedReplies, renderSuggestedReplies = _f === void 0 ? function(props2) {
    return import_react60.default.createElement(SuggestedReplies, __assign({}, props2));
  } : _f, renderCustomSeparator = _d.renderCustomSeparator, renderEditInput = _d.renderEditInput, renderFileViewer = _d.renderFileViewer, renderRemoveMessageModal = _d.renderRemoveMessageModal, filterEmojiCategoryIds = _d.filterEmojiCategoryIds;
  var _g = useLocalization(), dateLocale = _g.dateLocale, stringSet = _g.stringSet;
  var state = useSendbird().state;
  var _h = state.config, userId = _h.userId, isOnline = _h.isOnline, userMention = _h.userMention, logger = _h.logger, groupChannel = _h.groupChannel;
  var maxUserMentionCount = (userMention === null || userMention === void 0 ? void 0 : userMention.maxMentionCount) || MAX_USER_MENTION_COUNT;
  var maxUserSuggestionCount = (userMention === null || userMention === void 0 ? void 0 : userMention.maxSuggestionCount) || MAX_USER_SUGGESTION_COUNT;
  var _j = (0, import_react60.useState)(false), showEdit = _j[0], setShowEdit = _j[1];
  var _k = (0, import_react60.useState)(false), showRemove = _k[0], setShowRemove = _k[1];
  var _l = (0, import_react60.useState)(false), showFileViewer = _l[0], setShowFileViewer = _l[1];
  var _m = (0, import_react60.useState)(false), isAnimated = _m[0], setIsAnimated = _m[1];
  var _o = (0, import_react60.useState)(""), mentionNickname = _o[0], setMentionNickname = _o[1];
  var _p = (0, import_react60.useState)([]), mentionedUsers = _p[0], setMentionedUsers = _p[1];
  var _q = (0, import_react60.useState)([]), mentionedUserIds = _q[0], setMentionedUserIds = _q[1];
  var _r = (0, import_react60.useState)(null), messageInputEvent = _r[0], setMessageInputEvent = _r[1];
  var _s = (0, import_react60.useState)(null), selectedUser = _s[0], setSelectedUser = _s[1];
  var _t = (0, import_react60.useState)([]), mentionSuggestedUsers = _t[0], setMentionSuggestedUsers = _t[1];
  var editMessageInputRef = (0, import_react60.useRef)(null);
  var messageScrollRef = (0, import_react60.useRef)(null);
  var displaySuggestedMentionList = isOnline && groupChannel.enableMention && mentionNickname.length > 0 && !isDisabledBecauseFrozen2(channel) && !isDisabledBecauseMuted2(channel);
  var mentionNodes = useDirtyGetMentions({ ref: editMessageInputRef }, { logger });
  var ableMention = (mentionNodes === null || mentionNodes === void 0 ? void 0 : mentionNodes.length) < maxUserMentionCount;
  (0, import_react60.useEffect)(function() {
    setMentionedUsers(mentionedUsers.filter(function(_a3) {
      var userId2 = _a3.userId;
      var i2 = mentionedUserIds.indexOf(userId2);
      if (i2 < 0) {
        return false;
      } else {
        mentionedUserIds.splice(i2, 1);
        return true;
      }
    }));
  }, [mentionedUserIds]);
  useDidMountEffect(function() {
    handleScroll === null || handleScroll === void 0 ? void 0 : handleScroll();
  }, [showEdit, (_a2 = message === null || message === void 0 ? void 0 : message.reactions) === null || _a2 === void 0 ? void 0 : _a2.length]);
  useDidMountEffect(function() {
    handleScroll === null || handleScroll === void 0 ? void 0 : handleScroll(true);
  }, [message === null || message === void 0 ? void 0 : message.updatedAt, message === null || message === void 0 ? void 0 : message.message]);
  var prevShouldRenderSuggestedReplies = (0, import_react60.useRef)(shouldRenderSuggestedReplies);
  (0, import_react60.useEffect)(function() {
    if (prevShouldRenderSuggestedReplies.current !== shouldRenderSuggestedReplies) {
      handleScroll === null || handleScroll === void 0 ? void 0 : handleScroll();
    } else {
      prevShouldRenderSuggestedReplies.current = shouldRenderSuggestedReplies;
    }
  }, [shouldRenderSuggestedReplies]);
  (0, import_react60.useLayoutEffect)(function() {
    if (usedInLegacy)
      handleScroll === null || handleScroll === void 0 ? void 0 : handleScroll(true);
  }, []);
  (0, import_react60.useLayoutEffect)(function() {
    var timeouts = [];
    if (animatedMessageId === message.messageId && (messageScrollRef === null || messageScrollRef === void 0 ? void 0 : messageScrollRef.current)) {
      timeouts.push(setTimeout(function() {
        setIsAnimated(true);
      }, 500));
      timeouts.push(setTimeout(function() {
        setAnimatedMessageId(null);
        onMessageAnimated === null || onMessageAnimated === void 0 ? void 0 : onMessageAnimated();
      }, 1600));
    } else {
      setIsAnimated(false);
    }
    return function() {
      timeouts.forEach(function(it) {
        return clearTimeout(it);
      });
    };
  }, [animatedMessageId, messageScrollRef.current, message.messageId]);
  var renderedCustomSeparator = (0, import_react60.useMemo)(function() {
    var _a3;
    return (_a3 = renderCustomSeparator === null || renderCustomSeparator === void 0 ? void 0 : renderCustomSeparator({ message })) !== null && _a3 !== void 0 ? _a3 : null;
  }, [message, renderCustomSeparator]);
  var renderChildren = function() {
    if (children) {
      return children;
    }
    if (renderMessage) {
      var messageProps = __assign(__assign({}, props), { renderMessage: void 0 });
      return renderMessage(messageProps);
    }
    return import_react60.default.createElement(
      import_react60.default.Fragment,
      null,
      renderMessageContent({
        className: "sendbird-message-hoc__message-content",
        userId,
        scrollToMessage,
        channel,
        message,
        disabled: !isOnline,
        chainTop,
        chainBottom,
        isReactionEnabled,
        replyType,
        threadReplySelectType,
        nicknamesMap,
        emojiContainer,
        showEdit: setShowEdit,
        showRemove: setShowRemove,
        showFileViewer: setShowFileViewer,
        resendMessage,
        deleteMessage,
        toggleReaction,
        setQuoteMessage,
        onReplyInThread: onReplyInThreadClick,
        onQuoteMessageClick,
        onMessageHeightChange: handleScroll,
        onBeforeDownloadFileMessage,
        filterEmojiCategoryIds
      }),
      shouldRenderSuggestedReplies && renderSuggestedReplies({
        replyOptions: getSuggestedReplies(message),
        onSendMessage: sendUserMessage,
        type: groupChannel === null || groupChannel === void 0 ? void 0 : groupChannel.suggestedRepliesDirection
      }),
      showRemove && (renderRemoveMessageModal === null || renderRemoveMessageModal === void 0 ? void 0 : renderRemoveMessageModal({ message, onCancel: function() {
        return setShowRemove(false);
      } })),
      showFileViewer && renderFileViewer({ message, onCancel: function() {
        return setShowFileViewer(false);
      } })
    );
  };
  if (showEdit && ((_b2 = message === null || message === void 0 ? void 0 : message.isUserMessage) === null || _b2 === void 0 ? void 0 : _b2.call(message))) {
    return (renderEditInput === null || renderEditInput === void 0 ? void 0 : renderEditInput()) || import_react60.default.createElement(
      import_react60.default.Fragment,
      null,
      displaySuggestedMentionList && import_react60.default.createElement(SuggestedMentionListView, { currentChannel: channel, targetNickname: mentionNickname, inputEvent: messageInputEvent !== null && messageInputEvent !== void 0 ? messageInputEvent : void 0, renderUserMentionItem, onUserItemClick: function(user) {
        if (user) {
          setMentionedUsers(__spreadArray(__spreadArray([], mentionedUsers, true), [user], false));
        }
        setMentionNickname("");
        setSelectedUser(user);
        setMessageInputEvent(null);
      }, onFocusItemChange: function() {
        setMessageInputEvent(null);
      }, onFetchUsers: function(users) {
        setMentionSuggestedUsers(users);
      }, ableAddMention: ableMention, maxMentionCount: maxUserMentionCount, maxSuggestionCount: maxUserSuggestionCount }),
      import_react60.default.createElement(MessageInput, { isEdit: true, channel, disabled: editInputDisabled, ref: editMessageInputRef, mentionSelectedUser: selectedUser, isMentionEnabled: groupChannel.enableMention, message, onStartTyping: function() {
        var _a3;
        (_a3 = channel === null || channel === void 0 ? void 0 : channel.startTyping) === null || _a3 === void 0 ? void 0 : _a3.call(channel);
      }, onUpdateMessage: function(_a3) {
        var _b3;
        var messageId = _a3.messageId, message2 = _a3.message, mentionTemplate = _a3.mentionTemplate;
        updateUserMessage(messageId, {
          message: message2,
          mentionedUsers,
          mentionedMessageTemplate: mentionTemplate
        });
        setShowEdit(false);
        (_b3 = channel === null || channel === void 0 ? void 0 : channel.endTyping) === null || _b3 === void 0 ? void 0 : _b3.call(channel);
      }, onCancelEdit: function() {
        var _a3;
        setMentionNickname("");
        setMentionedUsers([]);
        setMentionedUserIds([]);
        setMentionSuggestedUsers([]);
        setShowEdit(false);
        (_a3 = channel === null || channel === void 0 ? void 0 : channel.endTyping) === null || _a3 === void 0 ? void 0 : _a3.call(channel);
      }, onUserMentioned: function(user) {
        if ((selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser.userId) === (user === null || user === void 0 ? void 0 : user.userId)) {
          setSelectedUser(null);
          setMentionNickname("");
        }
      }, onMentionStringChange: function(mentionText) {
        setMentionNickname(mentionText);
      }, onMentionedUserIdsUpdated: function(userIds) {
        setMentionedUserIds(userIds);
      }, onKeyDown: function(e2) {
        if (displaySuggestedMentionList && (mentionSuggestedUsers === null || mentionSuggestedUsers === void 0 ? void 0 : mentionSuggestedUsers.length) > 0 && (e2.key === MessageInputKeys.Enter && ableMention || e2.key === MessageInputKeys.ArrowUp || e2.key === MessageInputKeys.ArrowDown)) {
          setMessageInputEvent(e2);
          return true;
        }
        return false;
      } })
    );
  }
  return import_react60.default.createElement(
    "div",
    { className: classnames("sendbird-msg-hoc sendbird-msg--scroll-ref", isAnimated && "sendbird-msg-hoc__animated"), "data-testid": "sendbird-message-view", style: children || renderMessage ? void 0 : { marginBottom: "2px" }, "data-sb-message-id": message.messageId, "data-sb-created-at": message.createdAt, ref: messageScrollRef },
    hasSeparator && (renderedCustomSeparator || import_react60.default.createElement(
      DateSeparator,
      null,
      import_react60.default.createElement(Label, { type: LabelTypography.CAPTION_2, color: LabelColors.ONBACKGROUND_2 }, format(message.createdAt, stringSet.DATE_FORMAT__MESSAGE_LIST__DATE_SEPARATOR, {
        locale: dateLocale
      }))
    )),
    renderChildren()
  );
};

// node_modules/@sendbird/uikit-react/Channel/components/FileViewer.js
var import_react62 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-BoobDQ7G.js
var import_react61 = __toESM(require_react(), 1);
var import_react_dom17 = __toESM(require_react_dom(), 1);
var FileViewerView = function(_a2) {
  var message = _a2.message, onCancel = _a2.onCancel, deleteMessage = _a2.deleteMessage, onDownloadClick = _a2.onDownloadClick;
  var sender = message.sender, type = message.type, url = message.url, _b2 = message.name, name = _b2 === void 0 ? "" : _b2, threadInfo = message.threadInfo;
  var profileUrl = sender.profileUrl, nickname = sender.nickname, userId = sender.userId;
  var state = useSendbird().state;
  var config = state.config;
  return (0, import_react_dom17.createPortal)(import_react61.default.createElement(FileViewerComponent2, { profileUrl, nickname, type, url, name, onCancel, onDelete: function() {
    return deleteMessage(message).then(function() {
      return onCancel();
    });
  }, isByMe: config.userId === userId, disableDelete: (threadInfo === null || threadInfo === void 0 ? void 0 : threadInfo.replyCount) ? threadInfo.replyCount > 0 : false, onDownloadClick }), document.getElementById(MODAL_ROOT));
};
var FileViewerComponent2 = function(_a2) {
  var profileUrl = _a2.profileUrl, nickname = _a2.nickname, name = _a2.name, type = _a2.type, url = _a2.url, isByMe = _a2.isByMe, onCancel = _a2.onCancel, onDelete = _a2.onDelete, disableDelete = _a2.disableDelete, onDownloadClick = _a2.onDownloadClick;
  return import_react61.default.createElement(
    Modal,
    { onClose: onCancel },
    import_react61.default.createElement(
      "div",
      { className: "sendbird-fileviewer", "data-testid": "sendbird-fileviewer" },
      import_react61.default.createElement(
        "div",
        { className: "sendbird-fileviewer__header" },
        import_react61.default.createElement(
          "div",
          { className: "sendbird-fileviewer__header__left" },
          import_react61.default.createElement(
            "div",
            { className: "sendbird-fileviewer__header__left__avatar" },
            import_react61.default.createElement(Avatar$1, { height: "32px", width: "32px", src: profileUrl })
          ),
          import_react61.default.createElement(
            "div",
            { className: "sendbird-fileviewer__header__left__text-container" },
            import_react61.default.createElement(Label, { className: "sendbird-fileviewer__header__left__filename", type: LabelTypography.H_2, color: LabelColors.ONBACKGROUND_1 }, name),
            import_react61.default.createElement(Label, { className: "sendbird-fileviewer__header__left__sender-name", type: LabelTypography.BODY_1, color: LabelColors.ONBACKGROUND_2 }, nickname)
          )
        ),
        import_react61.default.createElement(
          "div",
          { className: "sendbird-fileviewer__header__right" },
          isSupportedFileView(type) && import_react61.default.createElement(
            "div",
            { className: "sendbird-fileviewer__header__right__actions" },
            import_react61.default.createElement(
              "a",
              { className: "sendbird-fileviewer__header__right__actions__download", rel: "noopener noreferrer", href: url, target: "_blank", onClick: onDownloadClick },
              import_react61.default.createElement(Icon, { type: IconTypes.DOWNLOAD, fillColor: IconColors.ON_BACKGROUND_1, height: "24px", width: "24px" })
            ),
            onDelete && isByMe && import_react61.default.createElement(
              "div",
              { className: "sendbird-fileviewer__header__right__actions__delete" },
              import_react61.default.createElement(Icon, { className: disableDelete ? "disabled" : "", type: IconTypes.DELETE, fillColor: disableDelete ? IconColors.GRAY : IconColors.ON_BACKGROUND_1, height: "24px", width: "24px", onClick: function() {
                if (!disableDelete) {
                  onDelete();
                }
              } })
            )
          ),
          import_react61.default.createElement(
            "div",
            { className: "sendbird-fileviewer__header__right__actions__close" },
            import_react61.default.createElement(Icon, { type: IconTypes.CLOSE, fillColor: IconColors.ON_BACKGROUND_1, height: "24px", width: "24px", onClick: onCancel })
          )
        )
      ),
      import_react61.default.createElement(
        "div",
        { className: "sendbird-fileviewer__content" },
        isVideo(type) && import_react61.default.createElement(
          "video",
          { controls: true, className: "sendbird-fileviewer__content__video" },
          import_react61.default.createElement("source", { src: url, type })
        ),
        isImage(type) && import_react61.default.createElement("img", { src: url, alt: name, className: "sendbird-fileviewer__content__img" }),
        !isSupportedFileView(type) && import_react61.default.createElement(
          "div",
          { className: "sendbird-fileviewer__content__unsupported" },
          import_react61.default.createElement(Label, { type: LabelTypography.H_1, color: LabelColors.ONBACKGROUND_1 }, LabelStringSet.UI__FILE_VIEWER__UNSUPPORT)
        )
      )
    )
  );
};

// node_modules/@sendbird/uikit-react/Channel/components/FileViewer.js
var import_react_dom18 = __toESM(require_react_dom(), 1);
var FileViewer2 = function(props) {
  var deleteMessage = useChannelContext().deleteMessage;
  return import_react62.default.createElement(FileViewerView, __assign({}, props, { deleteMessage }));
};

// node_modules/@sendbird/uikit-react/Channel/components/RemoveMessageModal.js
var import_react64 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-DiNcrytb.js
var import_react63 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-DMQ4ARs5.js
function getModalDeleteMessageTitle(stringSet, message) {
  return K(message).when(isMultipleFilesMessage, function() {
    var filesCount = message.fileInfoList.length;
    return "Do you want to delete all ".concat(filesCount, " photos?");
  }).otherwise(function() {
    return stringSet.MODAL__DELETE_MESSAGE__TITLE;
  });
}

// node_modules/@sendbird/uikit-react/chunks/bundle-DiNcrytb.js
var RemoveMessageModalView = function(props) {
  var _a2;
  var _b2 = props.onSubmit, onSubmit = _b2 === void 0 ? function() {
  } : _b2, onCancel = props.onCancel, message = props.message, deleteMessage = props.deleteMessage;
  var stringSet = (0, import_react63.useContext)(LocalizationContext).stringSet;
  return import_react63.default.createElement(Modal, { type: ButtonTypes.DANGER, disabled: ((_a2 = message === null || message === void 0 ? void 0 : message.threadInfo) === null || _a2 === void 0 ? void 0 : _a2.replyCount) ? message.threadInfo.replyCount > 0 : void 0, onCancel, onSubmit: function() {
    if (message.isUserMessage() || message.isFileMessage() || message.isMultipleFilesMessage()) {
      deleteMessage(message).then(function() {
        onSubmit();
        onCancel();
      });
    }
  }, submitText: stringSet.MESSAGE_MENU__DELETE, titleText: getModalDeleteMessageTitle(stringSet, message) });
};

// node_modules/@sendbird/uikit-react/Channel/components/RemoveMessageModal.js
var import_react_dom19 = __toESM(require_react_dom(), 1);
var RemoveMessageModal = function(props) {
  var deleteMessage = useChannelContext().deleteMessage;
  return import_react64.default.createElement(RemoveMessageModalView, __assign({}, props, { deleteMessage }));
};

// node_modules/@sendbird/uikit-react/Channel/components/Message.js
var import_react_dom20 = __toESM(require_react_dom(), 1);
var Message = function(props) {
  var _a2, _b2;
  var config = useSendbird().state.config;
  var _c = useChannelContext(), initialized = _c.initialized, currentGroupChannel = _c.currentGroupChannel, animatedMessageId = _c.animatedMessageId, setAnimatedMessageId = _c.setAnimatedMessageId, updateMessage = _c.updateMessage, scrollToMessage = _c.scrollToMessage, replyType = _c.replyType, threadReplySelectType = _c.threadReplySelectType, isReactionEnabled = _c.isReactionEnabled, toggleReaction = _c.toggleReaction, emojiContainer = _c.emojiContainer, nicknamesMap = _c.nicknamesMap, setQuoteMessage = _c.setQuoteMessage, resendMessage = _c.resendMessage, deleteMessage = _c.deleteMessage, renderUserMentionItem = _c.renderUserMentionItem, onReplyInThread = _c.onReplyInThread, onQuoteMessageClick = _c.onQuoteMessageClick, onMessageAnimated = _c.onMessageAnimated, sendMessage = _c.sendMessage, localMessages = _c.localMessages, allMessages = _c.allMessages;
  var message = props.message;
  if (!currentGroupChannel)
    return null;
  return import_react65.default.createElement(MessageView, __assign({}, props, { channel: currentGroupChannel, emojiContainer, editInputDisabled: !initialized || isDisabledBecauseFrozen(currentGroupChannel) || isDisabledBecauseMuted(currentGroupChannel) || !config.isOnline, shouldRenderSuggestedReplies: ((_a2 = config === null || config === void 0 ? void 0 : config.groupChannel) === null || _a2 === void 0 ? void 0 : _a2.enableSuggestedReplies) && (((_b2 = config === null || config === void 0 ? void 0 : config.groupChannel) === null || _b2 === void 0 ? void 0 : _b2.showSuggestedRepliesFor) === "all_messages" ? true : message.messageId === allMessages[allMessages.length - 1].messageId) && (localMessages === null || localMessages === void 0 ? void 0 : localMessages.length) === 0 && getSuggestedReplies(message).length > 0, isReactionEnabled, replyType, threadReplySelectType, nicknamesMap, renderUserMentionItem, scrollToMessage, toggleReaction, setQuoteMessage, onQuoteMessageClick, onReplyInThreadClick: onReplyInThread, sendUserMessage: function(params) {
    sendMessage({
      message: params.message,
      mentionedUsers: params.mentionedUsers,
      mentionTemplate: params.mentionedMessageTemplate
    });
  }, updateUserMessage: function(messageId, params) {
    var _a3;
    updateMessage({
      messageId,
      message: (_a3 = params.message) !== null && _a3 !== void 0 ? _a3 : "",
      mentionedUsers: params.mentionedUsers,
      mentionTemplate: params.mentionedMessageTemplate
    });
  }, resendMessage, deleteMessage, animatedMessageId, setAnimatedMessageId, onMessageAnimated, renderFileViewer: function(props2) {
    return import_react65.default.createElement(FileViewer2, __assign({}, props2));
  }, renderRemoveMessageModal: function(props2) {
    return import_react65.default.createElement(RemoveMessageModal, __assign({}, props2));
  } }));
};

// node_modules/@sendbird/uikit-react/GroupChannel/components/UnreadCount.js
var import_react66 = __toESM(require_react(), 1);
var UnreadCount = function(_a2) {
  var _b2 = _a2.className, className = _b2 === void 0 ? "" : _b2, _c = _a2.count, count = _c === void 0 ? 0 : _c, _d = _a2.time, time = _d === void 0 ? "" : _d, onClick = _a2.onClick, lastReadAt = _a2.lastReadAt;
  var _e = (0, import_react66.useContext)(LocalizationContext), stringSet = _e.stringSet, dateLocale = _e.dateLocale;
  var unreadSince = (0, import_react66.useMemo)(function() {
    var _a3, _b3;
    if (stringSet.CHANNEL__MESSAGE_LIST__NOTIFICATION__ON !== "on") {
      var timeArray = ((_b3 = (_a3 = time === null || time === void 0 ? void 0 : time.toString) === null || _a3 === void 0 ? void 0 : _a3.call(time)) === null || _b3 === void 0 ? void 0 : _b3.split(" ")) || [];
      timeArray === null || timeArray === void 0 ? void 0 : timeArray.splice(-2, 0, stringSet.CHANNEL__MESSAGE_LIST__NOTIFICATION__ON);
      return timeArray.join(" ");
    } else if (lastReadAt) {
      return format(lastReadAt, stringSet.DATE_FORMAT__MESSAGE_LIST__NOTIFICATION__UNREAD_SINCE, { locale: dateLocale });
    }
  }, [time, lastReadAt]);
  return import_react66.default.createElement(
    "div",
    { className: classnames(count < 1 ? "sendbird-notification--hide" : "sendbird-notification", className), "data-testid": "sendbird-notification", onClick },
    import_react66.default.createElement(
      Label,
      { className: "sendbird-notification__text", testID: "sendbird-notification__text", color: LabelColors.ONCONTENT_1, type: LabelTypography.CAPTION_2 },
      "".concat(count, " "),
      stringSet.CHANNEL__MESSAGE_LIST__NOTIFICATION__NEW_MESSAGE,
      " ".concat(unreadSince)
    ),
    import_react66.default.createElement(Icon, { width: "24px", height: "24px", type: IconTypes.CHEVRON_DOWN, fillColor: IconColors.CONTENT })
  );
};

// node_modules/@sendbird/uikit-react/GroupChannel/components/FrozenNotification.js
var import_react67 = __toESM(require_react(), 1);
var FrozenNotification = function(_a2) {
  var _b2 = _a2.className, className = _b2 === void 0 ? "" : _b2;
  var stringSet = (0, import_react67.useContext)(LocalizationContext).stringSet;
  return import_react67.default.createElement(
    "div",
    { className: classnames("sendbird-notification", "sendbird-notification--frozen", className), "data-testid": "sendbird-notification" },
    import_react67.default.createElement(Label, { className: "sendbird-notification__text", testID: "sendbird-notification__text", type: LabelTypography.CAPTION_2 }, stringSet.CHANNEL_FROZEN)
  );
};

// node_modules/@sendbird/uikit-react/chunks/bundle-BkJOIji-.js
var DELAY = 100;
function calcScrollBottom(scrollHeight, scrollTop) {
  return scrollHeight - scrollTop;
}
function useHandleOnScrollCallback(_a2) {
  var hasMore = _a2.hasMore, hasNext = _a2.hasNext, onScroll = _a2.onScroll, scrollRef = _a2.scrollRef, setShowScrollDownButton = _a2.setShowScrollDownButton;
  var scrollCb = usePreservedCallback(function() {
    var element = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current;
    if (element == null)
      return;
    var scrollTop = element.scrollTop, scrollHeight = element.scrollHeight, clientHeight = element.clientHeight;
    var scrollBottom = calcScrollBottom(scrollHeight, scrollTop);
    if (typeof setShowScrollDownButton === "function") {
      setShowScrollDownButton(scrollHeight > scrollTop + clientHeight + 1);
    }
    if (hasMore && isAboutSame(scrollTop, 0, SCROLL_BUFFER)) {
      onScroll(function() {
        var messagesAreAddedToView = element.scrollHeight > scrollHeight;
        if (messagesAreAddedToView)
          element.scrollTop = element.scrollHeight - scrollBottom;
      });
    }
    if (hasNext && isAboutSame(clientHeight + scrollTop, scrollHeight, SCROLL_BUFFER)) {
      onScroll(function() {
        var messagesAreAddedToView = element.scrollHeight > scrollHeight;
        if (messagesAreAddedToView)
          element.scrollTop = scrollTop;
      });
    }
  });
  return useThrottleCallback(scrollCb, DELAY, { trailing: true });
}

// node_modules/@sendbird/uikit-react/ui/TypingIndicatorBubble.js
var import_react68 = __toESM(require_react(), 1);
var TypingDots = function() {
  return import_react68.default.createElement(
    "div",
    { className: "typing-dots-container" },
    import_react68.default.createElement("span", null),
    import_react68.default.createElement("span", null),
    import_react68.default.createElement("span", null)
  );
};
var AVATAR_BORDER_SIZE = 2;
var AVATAR_DIAMETER_WITHOUT_BORDER = 28;
var AVATAR_DIAMETER = AVATAR_DIAMETER_WITHOUT_BORDER + AVATAR_BORDER_SIZE * 2;
var LEFT_GAP = 24;
var MAX_PROFILES_COUNT = 3;
var LEFT_FOR_BORDER = AVATAR_BORDER_SIZE;
var AvatarStack = function(props) {
  var sources = props.sources, max = props.max;
  return import_react68.default.createElement(
    import_react68.default.Fragment,
    null,
    " ",
    sources.slice(0, max).map(function(src, index) {
      return import_react68.default.createElement(Avatar$1, {
        className: "sendbird-message-content__left__avatar multiple",
        src: src || "",
        key: "avatar_stack_item_".concat(src),
        // TODO: Divide getting profileUrl logic to utils
        width: "".concat(AVATAR_DIAMETER_WITHOUT_BORDER, "px"),
        height: "".concat(AVATAR_DIAMETER_WITHOUT_BORDER, "px"),
        zIndex: index,
        left: "".concat(index * LEFT_GAP - LEFT_FOR_BORDER, "px")
      });
    }),
    " "
  );
};
var TypingIndicatorBubbleAvatar = function(props) {
  var typingMembers = props.typingMembers;
  var membersCount = typingMembers.length;
  var displayCount = Math.min(membersCount, 4);
  var hiddenCount = membersCount - MAX_PROFILES_COUNT;
  var superImposedWidth = (displayCount - 1) * (AVATAR_DIAMETER - LEFT_GAP);
  var rightPaddingSize = 12;
  return import_react68.default.createElement(
    "div",
    { className: "sendbird-message-content__left incoming", style: {
      minWidth: displayCount * AVATAR_DIAMETER - superImposedWidth + rightPaddingSize
    } },
    import_react68.default.createElement(AvatarStack, { sources: typingMembers.map(function(member) {
      return member.profileUrl;
    }), max: MAX_PROFILES_COUNT }),
    hiddenCount > 0 ? import_react68.default.createElement(Avatar$1, {
      className: "sendbird-message-content__left__avatar multiple",
      // TODO: Divide getting profileUrl logic to utils
      width: "".concat(AVATAR_DIAMETER_WITHOUT_BORDER, "px"),
      height: "".concat(AVATAR_DIAMETER_WITHOUT_BORDER, "px"),
      zIndex: MAX_PROFILES_COUNT,
      left: "".concat(MAX_PROFILES_COUNT * LEFT_GAP, "px"),
      customDefaultComponent: function(_a2) {
        var width = _a2.width, height = _a2.height;
        return import_react68.default.createElement(AvatarDefault, { width, height, text: "+".concat(hiddenCount) });
      }
    }) : null
  );
};
var TypingIndicatorBubble = function(props) {
  var typingMembers = props.typingMembers, handleScroll = props.handleScroll;
  (0, import_react68.useLayoutEffect)(function() {
    handleScroll === null || handleScroll === void 0 ? void 0 : handleScroll(true);
  }, []);
  if (typingMembers.length === 0)
    return null;
  return import_react68.default.createElement(
    "div",
    { className: "sendbird-message-content incoming", style: { marginBottom: "2px" } },
    import_react68.default.createElement(TypingIndicatorBubbleAvatar, { typingMembers }),
    import_react68.default.createElement(
      "div",
      { className: "sendbird-message-content__middle" },
      import_react68.default.createElement(TypingDots, null)
    )
  );
};

// node_modules/@sendbird/uikit-react/Channel/utils/compareMessagesForGrouping.js
var compareMessagesForGrouping = function(prevMessage, currMessage, nextMessage, stringSet, currentChannel, replyType) {
  if (!currentChannel || currentChannel.channelType !== "group") {
    return [
      isSameGroup(prevMessage, currMessage, stringSet),
      isSameGroup(currMessage, nextMessage, stringSet)
    ];
  }
  if (replyType === "THREAD" && (currMessage === null || currMessage === void 0 ? void 0 : currMessage.threadInfo)) {
    return [false, false];
  }
  var sendingStatus = (currMessage === null || currMessage === void 0 ? void 0 : currMessage.sendingStatus) || "";
  var isAcceptable = sendingStatus !== "pending" && sendingStatus !== "failed";
  return [
    isSameGroup(prevMessage, currMessage, stringSet, currentChannel) && isAcceptable,
    isSameGroup(currMessage, nextMessage, stringSet, currentChannel) && isAcceptable
  ];
};
var getMessageCreatedAt = function(message, stringSet) {
  return format(message.createdAt, stringSet.DATE_FORMAT__MESSAGE_CREATED_AT);
};
var isSameGroup = function(message, comparingMessage, stringSet, currentChannel) {
  var _a2, _b2;
  if (!(message && comparingMessage && message.messageType && message.messageType !== "admin" && comparingMessage.messageType && (comparingMessage === null || comparingMessage === void 0 ? void 0 : comparingMessage.messageType) !== "admin" && "sender" in message && "sender" in comparingMessage && message.createdAt && comparingMessage.createdAt && message.sender.userId && comparingMessage.sender.userId)) {
    return false;
  }
  return (message === null || message === void 0 ? void 0 : message.sendingStatus) === (comparingMessage === null || comparingMessage === void 0 ? void 0 : comparingMessage.sendingStatus) && ((_a2 = message === null || message === void 0 ? void 0 : message.sender) === null || _a2 === void 0 ? void 0 : _a2.userId) === ((_b2 = comparingMessage === null || comparingMessage === void 0 ? void 0 : comparingMessage.sender) === null || _b2 === void 0 ? void 0 : _b2.userId) && getMessageCreatedAt(message, stringSet) === getMessageCreatedAt(comparingMessage, stringSet) && (currentChannel ? isReadMessage(currentChannel, message) === isReadMessage(currentChannel, comparingMessage) : true);
};

// node_modules/@sendbird/uikit-react/Channel/utils/getMessagePartsInfo.js
var getMessagePartsInfo = function(_a2) {
  var allMessages = _a2.allMessages, stringSet = _a2.stringSet, _b2 = _a2.isMessageGroupingEnabled, isMessageGroupingEnabled = _b2 === void 0 ? true : _b2, _c = _a2.currentIndex, currentIndex = _c === void 0 ? 0 : _c, currentMessage = _a2.currentMessage, _d = _a2.currentChannel, currentChannel = _d === void 0 ? null : _d, _e = _a2.replyType, replyType = _e === void 0 ? "" : _e;
  var previousMessage = allMessages[currentIndex - 1];
  var nextMessage = allMessages[currentIndex + 1];
  var _f = isMessageGroupingEnabled ? compareMessagesForGrouping(previousMessage, currentMessage, nextMessage, stringSet, currentChannel, replyType) : [false, false], chainTop = _f[0], chainBottom = _f[1];
  var previousMessageCreatedAt = previousMessage === null || previousMessage === void 0 ? void 0 : previousMessage.createdAt;
  var currentCreatedAt = currentMessage.createdAt;
  var isLocalMessage = "sendingStatus" in currentMessage && currentMessage.sendingStatus !== "succeeded";
  var hasSeparator = isLocalMessage ? false : !(previousMessageCreatedAt && isSameDay(currentCreatedAt, previousMessageCreatedAt));
  return {
    chainTop,
    chainBottom,
    hasSeparator
  };
};

// node_modules/@sendbird/uikit-react/Channel/components/MessageList.js
var import_react_dom21 = __toESM(require_react_dom(), 1);
var DELAY2 = 100;
function useSetScrollToBottom(_a2) {
  var loading = _a2.loading;
  var _b2 = (0, import_react69.useState)(0), scrollBottom = _b2[0], setScrollBottom = _b2[1];
  (0, import_react69.useEffect)(function() {
    if (loading) {
      setScrollBottom(0);
    }
  }, [loading]);
  var scrollCb = function(e2) {
    var element = e2.target;
    try {
      setScrollBottom(element.scrollHeight - element.scrollTop - element.offsetHeight);
    } catch (_a3) {
    }
  };
  return {
    scrollBottom,
    scrollToBottomHandler: useThrottleCallback(scrollCb, DELAY2, { trailing: true })
  };
}
function useScrollBehavior() {
  var _a2 = useChannelContext(), scrollRef = _a2.scrollRef, _b2 = _a2.scrollBehavior, scrollBehavior = _b2 === void 0 ? "auto" : _b2;
  (0, import_react69.useEffect)(function() {
    if (scrollRef.current) {
      scrollRef.current.style.scrollBehavior = scrollBehavior;
    }
  }, [scrollRef.current]);
  return null;
}
var SCROLL_BOTTOM_PADDING = 50;
var MessageList = function(props) {
  var _a2, _b2, _c, _d, _e, _f, _g;
  var _h = props.className, className = _h === void 0 ? "" : _h;
  var _j = deleteNullish(props), renderMessage = _j.renderMessage, renderMessageContent = _j.renderMessageContent, renderSuggestedReplies = _j.renderSuggestedReplies, renderCustomSeparator = _j.renderCustomSeparator, _k = _j.renderPlaceholderLoader, renderPlaceholderLoader = _k === void 0 ? function() {
    return import_react69.default.createElement(PlaceHolder, { type: PlaceHolderTypes.LOADING });
  } : _k, _l = _j.renderPlaceholderEmpty, renderPlaceholderEmpty = _l === void 0 ? function() {
    return import_react69.default.createElement(PlaceHolder, { className: "sendbird-conversation__no-messages", type: PlaceHolderTypes.NO_MESSAGES });
  } : _l, _m = _j.renderFrozenNotification, renderFrozenNotification = _m === void 0 ? function() {
    return import_react69.default.createElement(FrozenNotification, { className: "sendbird-conversation__messages__notification" });
  } : _m;
  var _o = useChannelContext(), allMessages = _o.allMessages, localMessages = _o.localMessages, hasMorePrev = _o.hasMorePrev, hasMoreNext = _o.hasMoreNext, setInitialTimeStamp = _o.setInitialTimeStamp, setAnimatedMessageId = _o.setAnimatedMessageId, setHighLightedMessageId = _o.setHighLightedMessageId, isMessageGroupingEnabled = _o.isMessageGroupingEnabled, scrollRef = _o.scrollRef, onScrollCallback = _o.onScrollCallback, onScrollDownCallback = _o.onScrollDownCallback, messagesDispatcher = _o.messagesDispatcher, messageActionTypes = _o.messageActionTypes, currentGroupChannel = _o.currentGroupChannel, disableMarkAsRead = _o.disableMarkAsRead, filterMessageList = _o.filterMessageList, replyType = _o.replyType, loading = _o.loading, isScrolled = _o.isScrolled, unreadSince = _o.unreadSince, unreadSinceDate = _o.unreadSinceDate, typingMembers = _o.typingMembers;
  var store = useSendbird().state;
  var stringSet = useLocalization().stringSet;
  var allMessagesFiltered = typeof filterMessageList === "function" ? allMessages.filter(filterMessageList) : allMessages;
  var markAsReadScheduler = store.config.markAsReadScheduler;
  var _p = (0, import_react69.useState)(false), isScrollBottom = _p[0], setIsScrollBottom = _p[1];
  useScrollBehavior();
  var onScroll = function(callback) {
    var element = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current;
    if (element == null) {
      return;
    }
    var scrollTop = element.scrollTop, clientHeight = element.clientHeight, scrollHeight = element.scrollHeight;
    if (hasMorePrev && isAboutSame(scrollTop, 0, SCROLL_BUFFER)) {
      onScrollCallback(callback);
    }
    if (hasMoreNext && isAboutSame(clientHeight + scrollTop, scrollHeight, SCROLL_BUFFER)) {
      onScrollDownCallback(callback);
    }
    if (!disableMarkAsRead && isAboutSame(clientHeight + scrollTop, scrollHeight, SCROLL_BUFFER) && !!currentGroupChannel) {
      messagesDispatcher({
        type: messageActionTypes.MARK_AS_READ,
        payload: { channel: currentGroupChannel }
      });
      markAsReadScheduler.push(currentGroupChannel);
    }
  };
  var onClickScrollBot = function() {
    var _a3, _b3;
    setInitialTimeStamp === null || setInitialTimeStamp === void 0 ? void 0 : setInitialTimeStamp(null);
    setAnimatedMessageId === null || setAnimatedMessageId === void 0 ? void 0 : setAnimatedMessageId(null);
    setHighLightedMessageId === null || setHighLightedMessageId === void 0 ? void 0 : setHighLightedMessageId(null);
    if (scrollRef.current && scrollRef.current.scrollTop > -1) {
      scrollRef.current.scrollTop = ((_a3 = scrollRef.current.scrollHeight) !== null && _a3 !== void 0 ? _a3 : 0) - ((_b3 = scrollRef.current.offsetHeight) !== null && _b3 !== void 0 ? _b3 : 0);
    }
  };
  var moveScroll = function(isBottomMessageAffected) {
    if (isBottomMessageAffected === void 0) {
      isBottomMessageAffected = false;
    }
    var current = scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current;
    if (current) {
      var bottom = current.scrollHeight - current.scrollTop - current.offsetHeight;
      if (scrollBottom < bottom && (!isBottomMessageAffected || scrollBottom < SCROLL_BUFFER)) {
        current.scrollTop += bottom - scrollBottom;
      }
    }
  };
  var handleOnScroll = useHandleOnScrollCallback({
    hasMore: hasMorePrev,
    hasNext: hasMoreNext,
    onScroll,
    scrollRef
  });
  var onScrollReachedEndDetector = useOnScrollPositionChangeDetector({
    onReachedBottom: function() {
      if (!hasMoreNext && !disableMarkAsRead && !!currentGroupChannel) {
        messagesDispatcher({
          type: messageActionTypes.MARK_AS_READ,
          payload: { channel: currentGroupChannel }
        });
        markAsReadScheduler.push(currentGroupChannel);
      }
      setIsScrollBottom(true);
    },
    onReachedTop: function() {
      setIsScrollBottom(false);
    },
    onInBetween: function() {
      setIsScrollBottom(false);
    }
  });
  var _q = useSetScrollToBottom({ loading }), scrollToBottomHandler = _q.scrollToBottomHandler, scrollBottom = _q.scrollBottom;
  if (loading) {
    return renderPlaceholderLoader();
  }
  if (allMessagesFiltered.length < 1) {
    return renderPlaceholderEmpty();
  }
  return import_react69.default.createElement(
    import_react69.default.Fragment,
    null,
    !isScrolled && import_react69.default.createElement(PlaceHolder, { type: PlaceHolderTypes.LOADING }),
    import_react69.default.createElement(
      "div",
      { className: "sendbird-conversation__messages ".concat(className), dir: getHTMLTextDirection((_a2 = store === null || store === void 0 ? void 0 : store.config) === null || _a2 === void 0 ? void 0 : _a2.htmlTextDirection, (_b2 = store === null || store === void 0 ? void 0 : store.config) === null || _b2 === void 0 ? void 0 : _b2.forceLeftToRightMessageLayout) },
      import_react69.default.createElement(
        "div",
        { className: "sendbird-conversation__scroll-container" },
        import_react69.default.createElement("div", { className: "sendbird-conversation__padding" }),
        import_react69.default.createElement(
          "div",
          { className: "sendbird-conversation__messages-padding", "data-testid": "sendbird-message-list-container", ref: scrollRef, onScroll: function(e2) {
            handleOnScroll();
            scrollToBottomHandler(e2);
            onScrollReachedEndDetector(e2);
          } },
          allMessagesFiltered.map(function(m3, idx) {
            var _a3, _b3;
            var _c2 = getMessagePartsInfo({
              allMessages: allMessagesFiltered,
              stringSet,
              replyType,
              isMessageGroupingEnabled,
              currentIndex: idx,
              currentMessage: m3,
              currentChannel: currentGroupChannel
            }), chainTop = _c2.chainTop, chainBottom = _c2.chainBottom, hasSeparator = _c2.hasSeparator;
            var isByMe = ((_a3 = m3 === null || m3 === void 0 ? void 0 : m3.sender) === null || _a3 === void 0 ? void 0 : _a3.userId) === ((_b3 = store === null || store === void 0 ? void 0 : store.config) === null || _b3 === void 0 ? void 0 : _b3.userId);
            return import_react69.default.createElement(
              MessageProvider,
              { message: m3, key: m3 === null || m3 === void 0 ? void 0 : m3.messageId, isByMe },
              import_react69.default.createElement(Message, {
                handleScroll: moveScroll,
                message: m3,
                hasSeparator,
                chainTop,
                chainBottom,
                renderMessageContent,
                renderSuggestedReplies,
                renderCustomSeparator,
                // backward compatibility
                renderMessage
              })
            );
          }),
          localMessages.map(function(m3, idx) {
            var _a3, _b3;
            var _c2 = getMessagePartsInfo({
              allMessages: allMessagesFiltered,
              stringSet,
              replyType,
              isMessageGroupingEnabled,
              currentIndex: idx,
              currentMessage: m3,
              currentChannel: currentGroupChannel
            }), chainTop = _c2.chainTop, chainBottom = _c2.chainBottom;
            var isByMe = ((_a3 = m3 === null || m3 === void 0 ? void 0 : m3.sender) === null || _a3 === void 0 ? void 0 : _a3.userId) === ((_b3 = store === null || store === void 0 ? void 0 : store.config) === null || _b3 === void 0 ? void 0 : _b3.userId);
            return import_react69.default.createElement(
              MessageProvider,
              { message: m3, key: m3 === null || m3 === void 0 ? void 0 : m3.messageId, isByMe },
              import_react69.default.createElement(Message, {
                handleScroll: moveScroll,
                message: m3,
                chainTop,
                chainBottom,
                renderMessageContent,
                renderSuggestedReplies,
                renderCustomSeparator,
                // backward compatibility
                renderMessage
              })
            );
          }),
          !hasMoreNext && ((_d = (_c = store === null || store === void 0 ? void 0 : store.config) === null || _c === void 0 ? void 0 : _c.groupChannel) === null || _d === void 0 ? void 0 : _d.enableTypingIndicator) && ((_g = (_f = (_e = store === null || store === void 0 ? void 0 : store.config) === null || _e === void 0 ? void 0 : _e.groupChannel) === null || _f === void 0 ? void 0 : _f.typingIndicatorTypes) === null || _g === void 0 ? void 0 : _g.has(TypingIndicatorType.Bubble)) && import_react69.default.createElement(TypingIndicatorBubble, { typingMembers, handleScroll: moveScroll })
        )
      ),
      (currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.isFrozen) && renderFrozenNotification(),
      /**
       * Show unread count IFF scroll is not bottom or is bottom but hasNext is true.
       */
      (!isScrollBottom || hasMoreNext) && (unreadSince || unreadSinceDate) && import_react69.default.createElement(UnreadCount, { className: "sendbird-conversation__messages__notification", count: currentGroupChannel === null || currentGroupChannel === void 0 ? void 0 : currentGroupChannel.unreadMessageCount, time: unreadSince, lastReadAt: unreadSinceDate, onClick: function() {
        if (scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current)
          scrollRef.current.scrollTop = scrollRef.current.scrollHeight;
        if (!disableMarkAsRead && !!currentGroupChannel) {
          markAsReadScheduler.push(currentGroupChannel);
          messagesDispatcher({
            type: messageActionTypes.MARK_AS_READ,
            payload: { channel: currentGroupChannel }
          });
        }
        setInitialTimeStamp(null);
        setAnimatedMessageId(null);
        setHighLightedMessageId(null);
      } }),
      // This flag is an unmatched variable
      scrollBottom > SCROLL_BOTTOM_PADDING && import_react69.default.createElement(
        "div",
        { className: "sendbird-conversation__scroll-bottom-button", onClick: onClickScrollBot, onKeyDown: onClickScrollBot, tabIndex: 0, role: "button" },
        import_react69.default.createElement(Icon, { width: "24px", height: "24px", type: IconTypes.CHEVRON_DOWN, fillColor: IconColors.PRIMARY })
      )
    )
  );
};

// node_modules/@sendbird/uikit-react/Channel/components/MessageInput.js
var import_react75 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-D59i-wy0.js
var import_react74 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/GroupChannel/components/SuggestedMentionList.js
var import_react70 = __toESM(require_react(), 1);
var SuggestedMentionList = function(props) {
  return import_react70.default.createElement(SuggestedMentionListView, __assign({}, props));
};

// node_modules/@sendbird/uikit-react/ui/QuoteMessageInput.js
var import_react71 = __toESM(require_react(), 1);
var componentClassname = "sendbird-quote_message_input__avatar";
function QuoteMessageThumbnail(_a2) {
  var _b2;
  var message = _a2.message;
  if (!isFileMessage(message) && !isMultipleFilesMessage(message) || isVoiceMessage(message)) {
    return import_react71.default.createElement(import_react71.default.Fragment, null);
  }
  var thumbnailUrl = getMessageFirstFileThumbnailUrl(message);
  if (!thumbnailUrl) {
    if (isImageMessage(message) || isVideoMessage(message)) {
      thumbnailUrl = getMessageFirstFileUrl(message);
    } else if (isMultipleFilesMessage(message) && isImageFileInfo((_b2 = message.fileInfoList) === null || _b2 === void 0 ? void 0 : _b2[0])) {
      thumbnailUrl = message.fileInfoList[0].url;
    }
  }
  if (isVideoMessage(message) && thumbnailUrl) {
    return import_react71.default.createElement(
      "div",
      { className: componentClassname },
      import_react71.default.createElement("video", { style: {
        width: "44px",
        height: "44px"
      }, src: thumbnailUrl })
    );
  } else if ((isThumbnailMessage(message) || isMultipleFilesMessage(message)) && thumbnailUrl) {
    return import_react71.default.createElement(ImageRenderer, { className: componentClassname, url: thumbnailUrl, alt: getMessageFirstFileType(message), width: "44px", height: "44px", fixedSize: true });
  } else if (isAudioMessage(message)) {
    return import_react71.default.createElement(
      "div",
      { className: componentClassname },
      import_react71.default.createElement(Icon, { type: IconTypes.FILE_AUDIO, fillColor: IconColors.ON_BACKGROUND_2, width: "24px", height: "24px" })
    );
  } else {
    return import_react71.default.createElement(
      "div",
      { className: componentClassname },
      import_react71.default.createElement(Icon, { type: IconTypes.FILE_DOCUMENT, fillColor: IconColors.ON_BACKGROUND_2, width: "24px", height: "24px" })
    );
  }
}
function QuoteMessageInput(_a2) {
  var className = _a2.className, replyingMessage = _a2.replyingMessage, onClose = _a2.onClose;
  var stringSet = (0, import_react71.useContext)(LocalizationContext).stringSet;
  var fileMessage = replyingMessage;
  var sender = replyingMessage === null || replyingMessage === void 0 ? void 0 : replyingMessage.sender;
  var displayFileIcon = (isFileMessage(replyingMessage) || isMultipleFilesMessage(replyingMessage)) && !isVoiceMessage(replyingMessage);
  return import_react71.default.createElement(
    "div",
    { className: getClassName(["sendbird-quote_message_input", className !== null && className !== void 0 ? className : ""]) },
    displayFileIcon && import_react71.default.createElement(QuoteMessageThumbnail, { message: fileMessage }),
    import_react71.default.createElement(
      "div",
      { className: "sendbird-quote_message_input__body", style: {
        width: "calc(100% - ".concat(displayFileIcon ? "164px" : "120px", ")"),
        left: displayFileIcon ? "92px" : "40px"
      } },
      import_react71.default.createElement(Label, { className: "sendbird-quote_message_input__body__sender-name", type: LabelTypography.CAPTION_1, color: LabelColors.ONBACKGROUND_1 }, "".concat(stringSet.QUOTE_MESSAGE_INPUT__REPLY_TO, " ").concat(sender && sender.nickname ? sender.nickname : stringSet.NO_NAME)),
      import_react71.default.createElement(
        Label,
        { className: "sendbird-quote_message_input__body__message-content", type: LabelTypography.BODY_2, color: LabelColors.ONBACKGROUND_3 },
        isImageMessage(fileMessage) && !isGifMessage(fileMessage) && stringSet.QUOTE_MESSAGE_INPUT__FILE_TYPE_IMAGE,
        isVideoMessage(fileMessage) && stringSet.QUOTE_MESSAGE_INPUT__FILE_TYPE__VIDEO,
        isGifMessage(fileMessage) && stringSet.QUOTE_MESSAGE_INPUT__FILE_TYPE_GIF,
        isUserMessage(replyingMessage) && replyingMessage.message,
        getUIKitMessageType(replyingMessage) === UIKitMessageTypes.FILE && getMessageFirstFileName(fileMessage),
        isMultipleFilesMessage(replyingMessage) && "".concat(fileMessage.fileInfoList.length, " Photos"),
        isVoiceMessage(replyingMessage) && stringSet.VOICE_MESSAGE
      )
    ),
    import_react71.default.createElement(Icon, { className: "sendbird-quote_message_input__close-button", type: IconTypes.CLOSE, fillColor: IconColors.ON_BACKGROUND_2, width: "24px", height: "24px", onClick: function() {
      return onClose === null || onClose === void 0 ? void 0 : onClose(replyingMessage);
    } })
  );
}

// node_modules/@sendbird/uikit-react/VoiceRecorder/useVoiceRecorder.js
var import_react72 = __toESM(require_react(), 1);
var import_react_dom22 = __toESM(require_react_dom(), 1);
var VoiceRecorderStatus = {
  PREPARING: "PREPARING",
  READY_TO_RECORD: "READY_TO_RECORD",
  RECORDING: "RECORDING",
  COMPLETED: "COMPLETED"
};
var useVoiceRecorder = function(_a2) {
  var _b2 = _a2.onRecordingStarted, onRecordingStarted = _b2 === void 0 ? noop : _b2, _c = _a2.onRecordingEnded, onRecordingEnded = _c === void 0 ? noop : _c;
  var state = useSendbird().state;
  var config = state.config;
  var voiceRecord = config.voiceRecord;
  var maxRecordingTime = voiceRecord === null || voiceRecord === void 0 ? void 0 : voiceRecord.maxRecordingTime;
  var voiceRecorder = useVoiceRecorderContext();
  var isRecordable = voiceRecorder.isRecordable;
  var _d = (0, import_react72.useState)(null), recordedFile = _d[0], setRecordedFile = _d[1];
  var _e = (0, import_react72.useState)(VoiceRecorderStatus.PREPARING), recordingStatus = _e[0], setRecordingStatus = _e[1];
  (0, import_react72.useEffect)(function() {
    if (isRecordable && recordingStatus === VoiceRecorderStatus.PREPARING) {
      setRecordingStatus(VoiceRecorderStatus.READY_TO_RECORD);
    }
  }, [isRecordable]);
  var start = (0, import_react72.useCallback)(function() {
    voiceRecorder === null || voiceRecorder === void 0 ? void 0 : voiceRecorder.start({
      onRecordingStarted: function() {
        setRecordingStatus(VoiceRecorderStatus.RECORDING);
        onRecordingStarted();
        startTimer();
      },
      onRecordingEnded: function(audioFile) {
        setRecordingStatus(VoiceRecorderStatus.COMPLETED);
        onRecordingEnded(audioFile);
        setRecordedFile(audioFile);
        stopTimer();
      }
    });
  }, [onRecordingStarted, onRecordingEnded]);
  var stop = (0, import_react72.useCallback)(function() {
    voiceRecorder === null || voiceRecorder === void 0 ? void 0 : voiceRecorder.stop();
    stopTimer();
  }, [voiceRecorder]);
  var cancel = (0, import_react72.useCallback)(function() {
    stop();
    setRecordedFile(null);
  }, [voiceRecorder]);
  var _f = (0, import_react72.useState)(0), recordingTime = _f[0], setRecordingTime = _f[1];
  var timer = (0, import_react72.useRef)(null);
  function startTimer() {
    stopTimer();
    setRecordingTime(0);
    timer.current = setInterval(function() {
      setRecordingTime(function(prevTime) {
        var newTime = prevTime + 100;
        if (newTime > maxRecordingTime) {
          stopTimer();
        }
        return newTime;
      });
    }, 100);
  }
  function stopTimer() {
    if (timer.current) {
      clearInterval(timer.current);
      timer.current = null;
    }
  }
  (0, import_react72.useEffect)(function() {
    if (recordingTime > maxRecordingTime) {
      stop();
    }
  }, [recordingTime, maxRecordingTime, stop]);
  return {
    start,
    stop,
    cancel,
    recordingStatus,
    recordingTime,
    recordedFile,
    recordingLimit: maxRecordingTime
  };
};

// node_modules/@sendbird/uikit-react/chunks/bundle-vF_8gzZb.js
var import_react73 = __toESM(require_react(), 1);
var VoiceMessageInputStatus = {
  READY_TO_RECORD: "READY_TO_RECORD",
  RECORDING: "RECORDING",
  READY_TO_PLAY: "READY_TO_PLAY",
  PLAYING: "PLAYING"
};
var ControlerIcon = function(_a2) {
  var inputState = _a2.inputState;
  switch (inputState) {
    case VoiceMessageInputStatus.READY_TO_RECORD: {
      return import_react73.default.createElement("div", { className: "sendbird-controler-icon record-icon" });
    }
    case VoiceMessageInputStatus.RECORDING: {
      return import_react73.default.createElement("div", { className: "sendbird-controler-icon stop-icon" });
    }
    case VoiceMessageInputStatus.READY_TO_PLAY: {
      return import_react73.default.createElement(Icon, { className: "sendbird-controler-icon play-icon", width: "20px", height: "20px", type: IconTypes.PLAY, fillColor: IconColors.ON_BACKGROUND_1 });
    }
    case VoiceMessageInputStatus.PLAYING: {
      return import_react73.default.createElement(
        "div",
        { className: "sendbird-controler-icon pause-icon" },
        import_react73.default.createElement("div", { className: "sendbird-controler-icon pause-icon-inner" }),
        import_react73.default.createElement("div", { className: "sendbird-controler-icon pause-icon-inner" })
      );
    }
    default:
      return import_react73.default.createElement(import_react73.default.Fragment, null);
  }
};
var VoiceMessageInput = function(_a2) {
  var _b2 = _a2.minRecordTime, minRecordTime = _b2 === void 0 ? VOICE_RECORDER_DEFAULT_MIN : _b2, maximumValue = _a2.maximumValue, _c = _a2.currentValue, currentValue = _c === void 0 ? 0 : _c, currentType = _a2.currentType, onCancelClick = _a2.onCancelClick, onControlClick = _a2.onControlClick, onSubmitClick = _a2.onSubmitClick, renderCancelButton = _a2.renderCancelButton, renderControlButton = _a2.renderControlButton, renderSubmitButton = _a2.renderSubmitButton;
  var _d = (0, import_react73.useState)(0), lastClickTime = _d[0], setLastClickTime = _d[1];
  var isReadyToRecord = (0, import_react73.useMemo)(function() {
    return currentType === VoiceMessageInputStatus.READY_TO_RECORD;
  }, [currentType]);
  var isRecording = (0, import_react73.useMemo)(function() {
    return currentType === VoiceMessageInputStatus.RECORDING;
  }, [currentType]);
  var isSendButtonDisabled = (0, import_react73.useMemo)(function() {
    if (currentType === VoiceMessageInputStatus.READY_TO_RECORD || currentType === VoiceMessageInputStatus.RECORDING) {
      return minRecordTime > currentValue;
    }
    return false;
  }, [currentType, minRecordTime, currentValue]);
  var isPlayMode = (0, import_react73.useMemo)(function() {
    return currentType === VoiceMessageInputStatus.READY_TO_PLAY || currentType === VoiceMessageInputStatus.PLAYING;
  }, [currentType]);
  var stringSet = useLocalization().stringSet;
  var handleOnCancelClick = function() {
    var currentTime = Date.now();
    if (currentTime - lastClickTime > VOICE_RECORDER_CLICK_BUFFER_TIME) {
      onCancelClick === null || onCancelClick === void 0 ? void 0 : onCancelClick();
      setLastClickTime(currentTime);
    }
  };
  var handleOnControlClick = function() {
    var currentTime = Date.now();
    if (currentTime - lastClickTime > VOICE_RECORDER_CLICK_BUFFER_TIME) {
      onControlClick === null || onControlClick === void 0 ? void 0 : onControlClick(currentType);
      setLastClickTime(currentTime);
    }
  };
  var handleOnSubmitClick = function() {
    var currentTime = Date.now();
    if (currentTime - lastClickTime > VOICE_RECORDER_CLICK_BUFFER_TIME) {
      if (!isSendButtonDisabled) {
        onSubmitClick === null || onSubmitClick === void 0 ? void 0 : onSubmitClick();
      }
      setLastClickTime(currentTime);
    }
  };
  return import_react73.default.createElement(
    "div",
    { className: "sendbird-voice-message-input" },
    import_react73.default.createElement(
      "div",
      { className: "sendbird-voice-message-input__indicator" },
      import_react73.default.createElement(
        "div",
        { className: "sendbird-voice-message-input__indicator__progress-bar" },
        import_react73.default.createElement(ProgressBar, { className: "sendbird-voice-message-input__indicator__progress-bar__bar", disabled: isReadyToRecord, maxSize: maximumValue, currentSize: currentValue })
      ),
      isRecording ? import_react73.default.createElement("div", { className: "sendbird-voice-message-input__indicator__on-rec" }) : null,
      import_react73.default.createElement(PlaybackTime, { className: "sendbird-voice-message-input__indicator__playback-time", time: isPlayMode ? maximumValue - currentValue : currentValue, labelColor: isReadyToRecord ? LabelColors.ONBACKGROUND_4 : LabelColors.ONCONTENT_1 })
    ),
    import_react73.default.createElement(
      "div",
      { className: "sendbird-voice-message-input__controler" },
      (renderCancelButton === null || renderCancelButton === void 0 ? void 0 : renderCancelButton()) || import_react73.default.createElement(
        TextButton,
        { className: "sendbird-voice-message-input__controler__cancel", onClick: handleOnCancelClick, disableUnderline: true },
        import_react73.default.createElement(Label, { type: LabelTypography.BUTTON_1, color: LabelColors.PRIMARY }, stringSet.BUTTON__CANCEL)
      ),
      (renderControlButton === null || renderControlButton === void 0 ? void 0 : renderControlButton(currentType)) || import_react73.default.createElement(
        "div",
        { className: "sendbird-voice-message-input__controler__main", onClick: handleOnControlClick },
        import_react73.default.createElement(ControlerIcon, { inputState: currentType })
      ),
      (renderSubmitButton === null || renderSubmitButton === void 0 ? void 0 : renderSubmitButton()) || import_react73.default.createElement(
        "div",
        { className: classnames("sendbird-voice-message-input__controler__submit", isSendButtonDisabled && "voice-message--disabled"), onClick: handleOnSubmitClick },
        import_react73.default.createElement(Icon, { width: "19px", height: "19px", type: IconTypes.SEND, fillColor: isSendButtonDisabled ? IconColors.ON_BACKGROUND_4 : IconColors.CONTENT })
      )
    )
  );
};

// node_modules/@sendbird/uikit-react/chunks/bundle-4VvXLz4o.js
var compressImage = function(_a2) {
  var imageFile = _a2.imageFile, compressionRate = _a2.compressionRate, resizingWidth = _a2.resizingWidth, resizingHeight = _a2.resizingHeight, outputFormat = _a2.outputFormat;
  var image = document.createElement("img");
  return new Promise(function(resolve, reject) {
    image.src = URL.createObjectURL(imageFile);
    image.onerror = reject;
    image.onload = function() {
      URL.revokeObjectURL(image.src);
      var canvas = document.createElement("canvas");
      var originWidth = image.width;
      var originHeight = image.height;
      var targetResizingWidth = !resizingWidth || resizingWidth > originWidth ? originWidth : resizingWidth;
      var targetResizingHeight = !resizingHeight || resizingHeight > originHeight ? originHeight : resizingHeight;
      var widthRatio = originWidth / targetResizingWidth;
      var heightRatio = originHeight / targetResizingHeight;
      if (widthRatio > heightRatio) {
        targetResizingHeight = originHeight / (resizingWidth ? widthRatio : 1);
      } else if (heightRatio > widthRatio) {
        targetResizingWidth = originWidth / (resizingHeight ? heightRatio : 1);
      }
      canvas.width = targetResizingWidth;
      canvas.height = targetResizingHeight;
      var ctx = canvas.getContext("2d");
      if (!ctx) {
        reject(new Error("Failed to get canvas 2d context"));
        return;
      }
      ctx.drawImage(image, 0, 0, targetResizingWidth, targetResizingHeight);
      var targetFileType = outputFormat === "preserve" ? imageFile.type : "image/".concat(outputFormat);
      var targetSubtype = targetFileType.split("/").pop();
      var dotIndex = imageFile.name.lastIndexOf(".");
      var targetName = "".concat(dotIndex === -1 ? imageFile.name : imageFile.name.substring(0, dotIndex), ".").concat(targetSubtype);
      ctx.canvas.toBlob(function(blob) {
        if (blob) {
          var file = new File([blob], targetName, { type: targetFileType });
          resolve(file);
        } else {
          reject(new Error("Failed to compress image"));
        }
      }, targetFileType, compressionRate);
    };
  });
};
var compressImages = function(_a2) {
  return __awaiter(void 0, [_a2], void 0, function(_b2) {
    var compressionRate, _c, outputFormat, resizingWidth, resizingHeight, result;
    var files = _b2.files, logger = _b2.logger, imageCompression = _b2.imageCompression;
    return __generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          compressionRate = imageCompression.compressionRate, _c = imageCompression.outputFormat, outputFormat = _c === void 0 ? "preserve" : _c;
          resizingWidth = imageCompression.resizingWidth ? pxToNumber(imageCompression.resizingWidth) : void 0;
          resizingHeight = imageCompression.resizingHeight ? pxToNumber(imageCompression.resizingHeight) : void 0;
          result = {
            failedIndexes: [],
            compressedFiles: []
          };
          if (!(Array.isArray(files) && files.length > 0)) {
            logger === null || logger === void 0 ? void 0 : logger.warning("utils - compressImages: There are no files.", files);
            return [2, result];
          }
          if (!compressionRate || compressionRate < 0 || 1 < compressionRate) {
            logger === null || logger === void 0 ? void 0 : logger.warning("utils - compressImages: The compressionRate is not acceptable.", compressionRate);
            return [2, result];
          }
          return [4, Promise.all(files.map(function(file, index) {
            return __awaiter(void 0, void 0, void 0, function() {
              var compressedImage, err_1;
              return __generator(this, function(_a3) {
                switch (_a3.label) {
                  case 0:
                    if (!(file.type === "image/jpg" || file.type === "image/png" || file.type === "image/jpeg")) {
                      logger === null || logger === void 0 ? void 0 : logger.warning("utils - compressImages: The fileType is not compressible.", { file, index });
                      result.failedIndexes.push(index);
                      result.compressedFiles.push(file);
                      return [
                        2
                        /*return*/
                      ];
                    }
                    _a3.label = 1;
                  case 1:
                    _a3.trys.push([1, 3, , 4]);
                    return [4, compressImage({
                      imageFile: file,
                      compressionRate,
                      resizingWidth,
                      resizingHeight,
                      outputFormat
                    })];
                  case 2:
                    compressedImage = _a3.sent();
                    result.compressedFiles.push(compressedImage);
                    return [3, 4];
                  case 3:
                    err_1 = _a3.sent();
                    result.compressedFiles.push(file);
                    result.failedIndexes.push(index);
                    logger === null || logger === void 0 ? void 0 : logger.warning("utils - compressImages: Failed to compress image file", { file, err: err_1 });
                    return [3, 4];
                  case 4:
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          }))];
        case 1:
          _d.sent();
          logger === null || logger === void 0 ? void 0 : logger.info("utils - compressImages: Finished compressing images", result);
          return [2, result];
      }
    });
  });
};

// node_modules/@sendbird/uikit-react/chunks/bundle-D59i-wy0.js
var VoiceMessageInputWrapper = function(_a2) {
  var channel = _a2.channel, onCancelClick = _a2.onCancelClick, onSubmitClick = _a2.onSubmitClick;
  var uuid = (0, import_react74.useRef)(uuidv4()).current;
  var _b2 = (0, import_react74.useState)(null), audioFile = _b2[0], setAudioFile = _b2[1];
  var _c = (0, import_react74.useState)(VoiceMessageInputStatus.READY_TO_RECORD), voiceInputState = _c[0], setVoiceInputState = _c[1];
  var _d = (0, import_react74.useState)(false), isSubmitted = _d[0], setSubmit = _d[1];
  var _e = (0, import_react74.useState)(false), isDisabled = _e[0], setDisabled = _e[1];
  var _f = (0, import_react74.useState)(false), showModal = _f[0], setShowModal = _f[1];
  var stringSet = useLocalization().stringSet;
  var state = useSendbird().state;
  var config = state.config;
  var _g = useVoiceRecorder({
    onRecordingStarted: function() {
      setVoiceInputState(VoiceMessageInputStatus.RECORDING);
    },
    onRecordingEnded: function(audioFile2) {
      setAudioFile(audioFile2);
    }
  }), start = _g.start, stop = _g.stop, cancel = _g.cancel, recordingTime = _g.recordingTime, recordingStatus = _g.recordingStatus, recordingLimit = _g.recordingLimit;
  var voicePlayer = useVoicePlayer({
    channelUrl: channel === null || channel === void 0 ? void 0 : channel.url,
    key: uuid,
    audioFile: audioFile !== null && audioFile !== void 0 ? audioFile : void 0
  });
  var play = voicePlayer.play, pause = voicePlayer.pause, playbackTime = voicePlayer.playbackTime, playingStatus = voicePlayer.playingStatus;
  var stopVoicePlayer = voicePlayer.stop;
  (0, import_react74.useEffect)(function() {
    if (isDisabledBecauseFrozen2(channel) || isDisabledBecauseMuted2(channel)) {
      setDisabled(true);
    } else {
      setDisabled(false);
    }
  }, [channel === null || channel === void 0 ? void 0 : channel.myRole, channel === null || channel === void 0 ? void 0 : channel.isFrozen, channel === null || channel === void 0 ? void 0 : channel.myMutedState]);
  (0, import_react74.useEffect)(function() {
    if (isSubmitted && audioFile) {
      onSubmitClick === null || onSubmitClick === void 0 ? void 0 : onSubmitClick(audioFile, recordingTime);
      setSubmit(false);
      setAudioFile(null);
    }
  }, [isSubmitted, audioFile, recordingTime]);
  (0, import_react74.useEffect)(function() {
    if (audioFile) {
      if (recordingTime < config.voiceRecord.minRecordingTime) {
        setVoiceInputState(VoiceMessageInputStatus.READY_TO_RECORD);
        setAudioFile(null);
      } else if (playingStatus === VOICE_PLAYER_STATUS.PLAYING) {
        setVoiceInputState(VoiceMessageInputStatus.PLAYING);
      } else {
        setVoiceInputState(VoiceMessageInputStatus.READY_TO_PLAY);
      }
    }
  }, [audioFile, recordingTime, playingStatus]);
  return import_react74.default.createElement(
    "div",
    { className: "sendbird-voice-message-input-wrapper" },
    import_react74.default.createElement(VoiceMessageInput, { currentValue: recordingStatus === VoiceRecorderStatus.COMPLETED ? playbackTime : recordingTime, maximumValue: recordingStatus === VoiceRecorderStatus.COMPLETED ? recordingTime : recordingLimit, currentType: voiceInputState, onCancelClick: function() {
      onCancelClick === null || onCancelClick === void 0 ? void 0 : onCancelClick();
      cancel();
      stopVoicePlayer();
    }, onSubmitClick: function() {
      if (isDisabled) {
        setShowModal(true);
        setVoiceInputState(VoiceMessageInputStatus.READY_TO_RECORD);
      } else {
        stop();
        pause();
        setSubmit(true);
      }
    }, onControlClick: function(type) {
      switch (type) {
        case VoiceMessageInputStatus.READY_TO_RECORD: {
          stopVoicePlayer();
          start();
          break;
        }
        case VoiceMessageInputStatus.RECORDING: {
          if (recordingTime >= config.voiceRecord.minRecordingTime && !isDisabled) {
            stop();
          } else if (isDisabled) {
            cancel();
            setShowModal(true);
            setVoiceInputState(VoiceMessageInputStatus.READY_TO_RECORD);
          } else {
            cancel();
            setVoiceInputState(VoiceMessageInputStatus.READY_TO_RECORD);
          }
          break;
        }
        case VoiceMessageInputStatus.READY_TO_PLAY: {
          play();
          break;
        }
        case VoiceMessageInputStatus.PLAYING: {
          pause();
          break;
        }
      }
    } }),
    showModal && import_react74.default.createElement(
      Modal,
      { className: "sendbird-voice-message-input-wrapper-alert", titleText: isDisabledBecauseMuted2(channel) ? stringSet.MODAL__VOICE_MESSAGE_INPUT_DISABLED__TITLE_MUTED : stringSet.MODAL__VOICE_MESSAGE_INPUT_DISABLED__TITLE_FROZEN, hideFooter: true, isCloseOnClickOutside: true, onClose: function() {
        setShowModal(false);
        onCancelClick === null || onCancelClick === void 0 ? void 0 : onCancelClick();
      } },
      import_react74.default.createElement(
        "div",
        { className: "sendbird-voice-message-input-wrapper-alert__body" },
        import_react74.default.createElement(Button, { className: "sendbird-voice-message-input-wrapper-alert__body__ok-button", type: ButtonTypes.PRIMARY, size: ButtonSizes.BIG, onClick: function() {
          setShowModal(false);
          onCancelClick === null || onCancelClick === void 0 ? void 0 : onCancelClick();
        } }, stringSet.BUTTON__OK)
      )
    )
  );
};
var useHandleUploadFiles = function(_a2, _b2) {
  var sendFileMessage = _a2.sendFileMessage, sendMultipleFilesMessage = _a2.sendMultipleFilesMessage, quoteMessage = _a2.quoteMessage;
  var logger = _b2.logger;
  var stringSet = useLocalization().stringSet;
  var state = useSendbird().state;
  var config = state.config;
  var imageCompression = config.imageCompression;
  var uikitUploadSizeLimit = config === null || config === void 0 ? void 0 : config.uikitUploadSizeLimit;
  var uikitMultipleFilesMessageLimit = config === null || config === void 0 ? void 0 : config.uikitMultipleFilesMessageLimit;
  var openModal = useGlobalModalContext().openModal;
  return (0, import_react74.useCallback)(function(files) {
    return __awaiter(void 0, void 0, void 0, function() {
      var ONE_MiB, compressedFiles, sendingFiles, file, imageFiles_1, otherFiles_1;
      return __generator(this, function(_a3) {
        switch (_a3.label) {
          case 0:
            if (files.length === 0) {
              logger.warning("Channel|useHandleUploadFiles: given file list is empty.", { files });
              return [
                2
                /*return*/
              ];
            }
            if (files.length > uikitMultipleFilesMessageLimit) {
              logger.info("Channel|useHandleUploadFiles: Cannot upload files more than ".concat(uikitMultipleFilesMessageLimit));
              openModal({
                modalProps: {
                  titleText: stringSet.FILE_UPLOAD_NOTIFICATION__COUNT_LIMIT.replace("%d", "".concat(uikitUploadSizeLimit)),
                  hideFooter: true
                },
                childElement: function(_a4) {
                  var closeModal = _a4.closeModal;
                  return import_react74.default.createElement(ModalFooter, { type: ButtonTypes.PRIMARY, submitText: stringSet.BUTTON__OK, hideCancelButton: true, onCancel: closeModal, onSubmit: closeModal });
                }
              });
              return [
                2
                /*return*/
              ];
            }
            if (files.some(function(file2) {
              return file2.size > uikitUploadSizeLimit;
            })) {
              logger.info("Channel|useHandleUploadFiles: Cannot upload file size exceeding ".concat(uikitUploadSizeLimit));
              ONE_MiB = 1024 * 1024;
              openModal({
                modalProps: {
                  titleText: stringSet.FILE_UPLOAD_NOTIFICATION__SIZE_LIMIT.replace("%d", "".concat(Math.floor(uikitUploadSizeLimit / ONE_MiB))),
                  hideFooter: true
                },
                childElement: function(_a4) {
                  var closeModal = _a4.closeModal;
                  return import_react74.default.createElement(ModalFooter, { type: ButtonTypes.PRIMARY, submitText: stringSet.BUTTON__OK, hideCancelButton: true, onCancel: closeModal, onSubmit: closeModal });
                }
              });
              return [
                2
                /*return*/
              ];
            }
            return [4, compressImages({
              files,
              imageCompression,
              logger
            })];
          case 1:
            compressedFiles = _a3.sent().compressedFiles;
            sendingFiles = compressedFiles;
            if (sendingFiles.length === 1) {
              logger.info("Channel|useHandleUploadFiles: sending one file.");
              file = sendingFiles[0];
              return [2, sendFileMessage({ file, parentMessageId: quoteMessage === null || quoteMessage === void 0 ? void 0 : quoteMessage.messageId })];
            } else if (sendingFiles.length > 1) {
              logger.info("Channel|useHandleUploadFiles: sending multiple files.");
              imageFiles_1 = [];
              otherFiles_1 = [];
              sendingFiles.forEach(function(file2) {
                if (isImage(file2.type)) {
                  imageFiles_1.push(file2);
                } else {
                  otherFiles_1.push(file2);
                }
              });
              return [2, otherFiles_1.reduce(function(previousPromise, item) {
                return previousPromise.then(function() {
                  return sendFileMessage({ file: item, parentMessageId: quoteMessage === null || quoteMessage === void 0 ? void 0 : quoteMessage.messageId });
                });
              }, function() {
                if (imageFiles_1.length === 0) {
                  return Promise.resolve();
                } else if (imageFiles_1.length === 1) {
                  return sendFileMessage({ file: imageFiles_1[0] });
                } else {
                  return sendMultipleFilesMessage({
                    fileInfoList: imageFiles_1.map(function(file2) {
                      return {
                        file: file2,
                        fileName: file2.name,
                        fileSize: file2.size,
                        mimeType: file2.type
                      };
                    }),
                    parentMessageId: quoteMessage === null || quoteMessage === void 0 ? void 0 : quoteMessage.messageId
                  });
                }
              }())];
            }
            return [
              2
              /*return*/
            ];
        }
      });
    });
  }, [sendFileMessage, sendMultipleFilesMessage, quoteMessage]);
};
var MessageInputWrapperView = import_react74.default.forwardRef(function(props, ref) {
  var _a2;
  var currentChannel = props.currentChannel, messages = props.messages, loading = props.loading, quoteMessage = props.quoteMessage, setQuoteMessage = props.setQuoteMessage, messageInputRef = props.messageInputRef, sendUserMessage = props.sendUserMessage, sendFileMessage = props.sendFileMessage, sendVoiceMessage = props.sendVoiceMessage, sendMultipleFilesMessage = props.sendMultipleFilesMessage, renderUserMentionItem = props.renderUserMentionItem, renderFileUploadIcon = props.renderFileUploadIcon, renderVoiceMessageIcon = props.renderVoiceMessageIcon, renderSendMessageIcon = props.renderSendMessageIcon, acceptableMimeTypes = props.acceptableMimeTypes, disabled = props.disabled;
  var stringSet = useLocalization().stringSet;
  var isMobile = useMediaQueryContext().isMobile;
  var state = useSendbird().state;
  var stores = state.stores, config = state.config;
  var isOnline = config.isOnline, userMention = config.userMention, logger = config.logger, groupChannel = config.groupChannel;
  var sdk = stores.sdkStore.sdk;
  var maxMentionCount = userMention.maxMentionCount, maxSuggestionCount = userMention.maxSuggestionCount;
  var isBroadcast = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.isBroadcast;
  var isOperator = (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.myRole) === "operator";
  var isMultipleFilesMessageEnabled = (_a2 = props.isMultipleFilesMessageEnabled) !== null && _a2 !== void 0 ? _a2 : config.isMultipleFilesMessageEnabled;
  var isMentionEnabled = groupChannel.enableMention;
  var isVoiceMessageEnabled = groupChannel.enableVoiceMessage;
  var _b2 = (0, import_react74.useState)(""), mentionNickname = _b2[0], setMentionNickname = _b2[1];
  var _c = (0, import_react74.useState)([]), mentionedUsers = _c[0], setMentionedUsers = _c[1];
  var _d = (0, import_react74.useState)([]), mentionedUserIds = _d[0], setMentionedUserIds = _d[1];
  var _e = (0, import_react74.useState)(null), selectedUser = _e[0], setSelectedUser = _e[1];
  var _f = (0, import_react74.useState)([]), mentionSuggestedUsers = _f[0], setMentionSuggestedUsers = _f[1];
  var _g = (0, import_react74.useState)(null), messageInputEvent = _g[0], setMessageInputEvent = _g[1];
  var _h = (0, import_react74.useState)(false), showVoiceMessageInput = _h[0], setShowVoiceMessageInput = _h[1];
  var isMessageInputDisabled = loading || (!currentChannel || !sdk) || !sdk.isCacheEnabled && !isOnline || isDisabledBecauseFrozen2(currentChannel) || isDisabledBecauseMuted2(currentChannel) || isDisabledBecauseSuggestedReplies(currentChannel, config.groupChannel.enableSuggestedReplies) || isDisabledBecauseMessageForm(messages, config.groupChannel.enableFormTypeMessage) || disabled;
  var showSuggestedMentionList = !isMessageInputDisabled && isMentionEnabled && mentionNickname.length > 0 && !isBroadcast;
  var mentionNodes = useDirtyGetMentions({ ref: ref || messageInputRef }, { logger });
  var ableMention = (mentionNodes === null || mentionNodes === void 0 ? void 0 : mentionNodes.length) < maxMentionCount;
  (0, import_react74.useEffect)(function() {
    setMentionNickname("");
    setMentionedUsers([]);
    setMentionedUserIds([]);
    setSelectedUser(null);
    setMentionSuggestedUsers([]);
    setMessageInputEvent(null);
    setShowVoiceMessageInput(false);
  }, [currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url]);
  (0, import_react74.useEffect)(function() {
    setMentionedUsers(mentionedUsers.filter(function(_a3) {
      var userId = _a3.userId;
      var i2 = mentionedUserIds.indexOf(userId);
      if (i2 < 0) {
        return false;
      } else {
        mentionedUserIds.splice(i2, 1);
        return true;
      }
    }));
  }, [mentionedUserIds]);
  var handleUploadFiles = useHandleUploadFiles({
    sendFileMessage,
    sendMultipleFilesMessage,
    quoteMessage: quoteMessage !== null && quoteMessage !== void 0 ? quoteMessage : void 0
  }, { logger });
  if (isBroadcast && !isOperator) {
    return null;
  }
  return import_react74.default.createElement(
    "div",
    { className: showVoiceMessageInput ? "sendbird-message-input-wrapper--voice-message" : "sendbird-message-input-wrapper" },
    showSuggestedMentionList && import_react74.default.createElement(SuggestedMentionList, { currentChannel, targetNickname: mentionNickname, inputEvent: messageInputEvent !== null && messageInputEvent !== void 0 ? messageInputEvent : void 0, renderUserMentionItem, onUserItemClick: function(user) {
      if (user) {
        setMentionedUsers(__spreadArray(__spreadArray([], mentionedUsers, true), [user], false));
      }
      setMentionNickname("");
      setSelectedUser(user);
      setMessageInputEvent(null);
    }, onFocusItemChange: function() {
      setMessageInputEvent(null);
    }, onFetchUsers: function(users) {
      setMentionSuggestedUsers(users);
    }, ableAddMention: ableMention, maxMentionCount, maxSuggestionCount }),
    quoteMessage && import_react74.default.createElement(
      "div",
      { className: "sendbird-message-input-wrapper__quote-message-input" },
      import_react74.default.createElement(QuoteMessageInput, { replyingMessage: quoteMessage, onClose: function() {
        return setQuoteMessage(null);
      } })
    ),
    showVoiceMessageInput ? import_react74.default.createElement(VoiceMessageInputWrapper, { channel: currentChannel !== null && currentChannel !== void 0 ? currentChannel : void 0, onSubmitClick: function(recordedFile, duration) {
      sendVoiceMessage({ file: recordedFile, parentMessageId: quoteMessage === null || quoteMessage === void 0 ? void 0 : quoteMessage.messageId }, duration);
      setQuoteMessage(null);
      setShowVoiceMessageInput(false);
    }, onCancelClick: function() {
      setShowVoiceMessageInput(false);
    } }) : import_react74.default.createElement(MessageInput, { className: "sendbird-message-input-wrapper__message-input", channel: currentChannel, channelUrl: currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.url, isMobile, acceptableMimeTypes, mentionSelectedUser: selectedUser, isMentionEnabled, isVoiceMessageEnabled, isSelectingMultipleFilesEnabled: isMultipleFilesMessageEnabled, onVoiceMessageIconClick: function() {
      setShowVoiceMessageInput(true);
    }, setMentionedUsers, placeholder: quoteMessage && stringSet.MESSAGE_INPUT__QUOTE_REPLY__PLACE_HOLDER || isDisabledBecauseFrozen2(currentChannel) && stringSet.MESSAGE_INPUT__PLACE_HOLDER__FROZEN || isDisabledBecauseMuted2(currentChannel) && (isMobile ? stringSet.MESSAGE_INPUT__PLACE_HOLDER__MUTED_SHORT : stringSet.MESSAGE_INPUT__PLACE_HOLDER__MUTED) || isDisabledBecauseSuggestedReplies(currentChannel, config.groupChannel.enableSuggestedReplies) && stringSet.MESSAGE_INPUT__PLACE_HOLDER__SUGGESTED_REPLIES || isDisabledBecauseMessageForm(messages, config.groupChannel.enableFormTypeMessage) && stringSet.MESSAGE_INPUT__PLACE_HOLDER__MESSAGE_FORM || disabled && stringSet.MESSAGE_INPUT__PLACE_HOLDER__DISABLED || void 0, ref: ref || messageInputRef, disabled: isMessageInputDisabled, renderFileUploadIcon, renderSendMessageIcon, renderVoiceMessageIcon, onStartTyping: function() {
      currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.startTyping();
    }, onSendMessage: function(_a3) {
      var _b3;
      var message = _a3.message, mentionTemplate = _a3.mentionTemplate;
      sendUserMessage({
        message,
        mentionedUsers,
        mentionedMessageTemplate: mentionTemplate,
        parentMessageId: quoteMessage === null || quoteMessage === void 0 ? void 0 : quoteMessage.messageId
      });
      setMentionNickname("");
      setMentionedUsers([]);
      setQuoteMessage(null);
      (_b3 = currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.endTyping) === null || _b3 === void 0 ? void 0 : _b3.call(currentChannel);
    }, onFileUpload: function(fileList) {
      handleUploadFiles(fileList);
      setQuoteMessage(null);
    }, onUserMentioned: function(user) {
      if ((selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser.userId) === (user === null || user === void 0 ? void 0 : user.userId)) {
        setSelectedUser(null);
        setMentionNickname("");
      }
    }, onMentionStringChange: function(mentionText) {
      setMentionNickname(mentionText);
    }, onMentionedUserIdsUpdated: function(userIds) {
      setMentionedUserIds(userIds);
    }, onKeyDown: function(e2) {
      if (showSuggestedMentionList && (mentionSuggestedUsers === null || mentionSuggestedUsers === void 0 ? void 0 : mentionSuggestedUsers.length) > 0 && (e2.key === MessageInputKeys.Enter && ableMention || e2.key === MessageInputKeys.ArrowUp || e2.key === MessageInputKeys.ArrowDown)) {
        setMessageInputEvent(e2);
        return true;
      }
      return false;
    } })
  );
});

// node_modules/@sendbird/uikit-react/Channel/components/MessageInput.js
var import_react_dom23 = __toESM(require_react_dom(), 1);
var MessageInputWrapper = function(props) {
  var context = useChannelContext();
  var quoteMessage = context.quoteMessage, currentGroupChannel = context.currentGroupChannel, sendMessage = context.sendMessage, sendFileMessage = context.sendFileMessage, sendVoiceMessage = context.sendVoiceMessage, sendMultipleFilesMessage = context.sendMultipleFilesMessage;
  return import_react75.default.createElement(MessageInputWrapperView, __assign({}, props, context, { currentChannel: currentGroupChannel, messages: context.allMessages, sendUserMessage: function(params) {
    return sendMessage({
      message: params.message,
      mentionTemplate: params.mentionedMessageTemplate,
      mentionedUsers: params.mentionedUsers,
      quoteMessage: quoteMessage !== null && quoteMessage !== void 0 ? quoteMessage : void 0
    });
  }, sendFileMessage: function(params) {
    return sendFileMessage(params.file, quoteMessage !== null && quoteMessage !== void 0 ? quoteMessage : void 0);
  }, sendVoiceMessage: function(_a2, duration) {
    var file = _a2.file;
    return sendVoiceMessage(file, duration, quoteMessage !== null && quoteMessage !== void 0 ? quoteMessage : void 0);
  }, sendMultipleFilesMessage: function(_a2) {
    var fileInfoList = _a2.fileInfoList;
    return sendMultipleFilesMessage(fileInfoList.map(function(fileInfo) {
      return fileInfo.file;
    }), quoteMessage !== null && quoteMessage !== void 0 ? quoteMessage : void 0);
  } }));
};

// node_modules/@sendbird/uikit-react/Channel/components/ChannelUI.js
var import_react_dom24 = __toESM(require_react_dom(), 1);
var ChannelUI = function(props) {
  var context = useChannelContext();
  var channelUrl = context.channelUrl, isInvalid = context.isInvalid;
  var _a2 = deleteNullish(props), _b2 = _a2.renderChannelHeader, renderChannelHeader = _b2 === void 0 ? function(p) {
    return import_react76.default.createElement(ChannelHeader, __assign({}, p));
  } : _b2, _c = _a2.renderMessageList, renderMessageList = _c === void 0 ? function(p) {
    return import_react76.default.createElement(MessageList, __assign({}, p, { className: "sendbird-conversation__message-list" }));
  } : _c, _d = _a2.renderMessageInput, renderMessageInput = _d === void 0 ? function() {
    return import_react76.default.createElement(MessageInputWrapper, __assign({}, props));
  } : _d;
  return import_react76.default.createElement(GroupChannelUIView, __assign({}, props, context, { isLoading: props === null || props === void 0 ? void 0 : props.isLoading, isInvalid, channelUrl, renderChannelHeader, renderMessageList, renderMessageInput }));
};

// node_modules/@sendbird/uikit-react/Channel.js
var import_react_dom25 = __toESM(require_react_dom());
var Channel = function(props) {
  return import_react77.default.createElement(
    ChannelProvider,
    __assign({}, props),
    import_react77.default.createElement(ChannelUI, __assign({}, props))
  );
};

export {
  useReconnectOnIdle,
  ThreadReplySelectType,
  getComponentKeyFromMessage,
  isContextMenuClosed,
  getMessageTopOffset,
  isDisabledBecauseFrozen2 as isDisabledBecauseFrozen,
  isDisabledBecauseMuted2 as isDisabledBecauseMuted,
  getIsReactionEnabled,
  getCaseResolvedReplyType,
  getCaseResolvedThreadReplySelectType,
  TypingIndicatorText,
  TypingIndicatorType,
  GroupChannelUIView,
  getChannelTitle,
  GroupChannelHeaderView,
  format,
  useDirtyGetMentions,
  DateSeparator,
  MessageInputKeys,
  MENTION_USER_LABEL_CLASSNAME,
  tokenizeMessage,
  getChannelPreviewMessage,
  MessageInput,
  isSameDay,
  isToday,
  isThisYear,
  isYesterday,
  getChannelTitle2,
  getLastMessageCreatedAt,
  getTotalMembers,
  getLastMessageText,
  getChannelUnreadMessageCount,
  MessageStatus,
  MessageMenu,
  useLongPress,
  MessageEmojiMenu,
  GlobalModalProvider,
  useGlobalModalContext,
  MessageProvider,
  EmojiReactions,
  getMessageFirstFileName,
  getMessageFirstFileUrl,
  MobileMenu,
  LinkLabel,
  TextFragment,
  FileViewer,
  ThreadMessageKind,
  MultipleFilesMessageItemBody,
  useThreadMessageKindKeySelector,
  useFileInfoListWithUploaded,
  ALL,
  VoicePlayerProvider,
  useVoicePlayerContext,
  VoiceRecorderProvider,
  VoiceMessageItemBody,
  MessageProfile,
  MessageBody,
  MessageHeader,
  useElementObserver,
  SuggestedMentionListView,
  MessageView,
  FileViewerView,
  getModalDeleteMessageTitle,
  RemoveMessageModalView,
  UnreadCount,
  FrozenNotification,
  TypingIndicatorBubble,
  compareMessagesForGrouping,
  getMessagePartsInfo,
  compressImages,
  VoiceMessageInputWrapper,
  MessageInputWrapperView,
  getNicknamesMapFromMembers2 as getNicknamesMapFromMembers,
  getParentMessageFrom,
  isAboutSame2 as isAboutSame,
  compareIds2 as compareIds,
  scrollIntoLast2 as scrollIntoLast,
  useSendMultipleFilesMessage,
  useHandleOnScrollCallback,
  Channel
};
/*! Bundled license information:

dompurify/dist/purify.es.mjs:
  (*! @license DOMPurify 3.2.4 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/3.2.4/LICENSE *)
*/
//# sourceMappingURL=chunk-ELYTTIPP.js.map

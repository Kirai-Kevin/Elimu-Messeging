import {
  D,
  H as H2,
  I,
  L,
  M,
  T,
  U,
  f,
  g,
  t as t2,
  v as v2,
  y
} from "./chunk-YS32VLIJ.js";
import {
  At,
  Gn,
  Hr,
  Ir,
  Mr,
  Pt,
  Ti,
  Tr,
  Ut,
  ar,
  hr,
  la,
  lr,
  nr,
  pr,
  tn,
  ur
} from "./chunk-TTFJWE4I.js";
import {
  C,
  Fe,
  Fr,
  Ge,
  H,
  Jr,
  Oo,
  Rr,
  S,
  So,
  To,
  a,
  ae,
  as,
  at,
  b,
  c,
  cs,
  fe,
  k,
  ko,
  kr,
  lo,
  ls,
  n,
  no,
  o,
  oe,
  os,
  pe,
  qe,
  r,
  s,
  se,
  t,
  uo,
  ut,
  v,
  wo,
  ze
} from "./chunk-KXGQOUB2.js";

// node_modules/@sendbird/chat/openChannel.js
var Ce = function(r2) {
  function a2() {
    var e = null !== r2 && r2.apply(this, arguments) || this;
    return e._channels = /* @__PURE__ */ new Map(), e._enteredChannelUrls = [], e;
  }
  return t(a2, r2), Object.defineProperty(a2.prototype, "enteredChannels", { get: function() {
    var e = this;
    return this._enteredChannelUrls.map(function(n2) {
      return e._channels.get(n2);
    }).filter(function(e2) {
      return !!e2;
    });
  }, enumerable: false, configurable: true }), a2.prototype.isEnteredChannel = function(e) {
    return this._enteredChannelUrls.includes(e);
  }, a2.prototype.enter = function(e) {
    this._enteredChannelUrls.indexOf(e) < 0 && this._enteredChannelUrls.push(e);
  }, a2.prototype.exit = function(e) {
    var n2 = this._enteredChannelUrls.indexOf(e);
    n2 >= 0 && this._enteredChannelUrls.splice(n2, 1);
  }, a2.prototype.exitAll = function() {
    this._enteredChannelUrls = [];
  }, a2.prototype.get = function(e) {
    return r(this, void 0, void 0, function() {
      return s(this, function(n2) {
        return [2, this._channels.get(e)];
      });
    });
  }, a2.prototype.upsert = function(e) {
    return r(this, void 0, void 0, function() {
      var n2, r3 = this;
      return s(this, function(t3) {
        return n2 = [], e.forEach(function(e2) {
          if (r3._channels.has(e2.url)) {
            var t4 = r3._channels.get(e2.url);
            Object.assign(t4, e2), n2.push(t4);
          } else
            r3._channels.set(e2.url, e2), n2.push(e2);
        }), [2, n2];
      });
    });
  }, a2.prototype.remove = function(e) {
    return r(this, void 0, void 0, function() {
      return s(this, function(n2) {
        return this._channels.delete(e), this.exit(e), [2];
      });
    });
  }, a2.prototype.clear = function() {
    return r(this, void 0, void 0, function() {
      return s(this, function(e) {
        return this._channels.clear(), this._enteredChannelUrls = [], [2];
      });
    });
  }, a2;
}(Jr);
var ve = { channelUrl: void 0, name: void 0, coverUrlOrImage: void 0, data: void 0, customType: void 0, operatorUserIds: void 0, isEphemeral: void 0 };
var _e = function(n2) {
  function t3(e) {
    var t4 = e.channelUrl, r2 = e.isInternalCall, a2 = n2.call(this) || this;
    return a2.method = ae.GET, a2.path = "".concat(r2 ? pe : fe, "/").concat(encodeURIComponent(t4)), a2.params = { show_pinned_messages: true }, a2;
  }
  return t(t3, n2), t3;
}(Fe);
var ge = function(n2) {
  function t3(e, t4) {
    var r2 = n2.call(this, e, t4) || this;
    return r2.channel = new xe(e, t4), r2;
  }
  return t(t3, n2), t3;
}(qe);
var ye = function(n2) {
  function t3(e) {
    var t4 = this, r2 = e.channelUrl, a2 = e.coverUrlOrImage, u = e.name, c2 = e.data, h = e.customType, f2 = e.operatorUserIds, C2 = e.isEphemeral;
    return (t4 = n2.call(this) || this).method = ae.POST, t4.path = fe, t4.params = se(oe({ channel_url: r2, cover_url: S("string", a2) ? a2 : null, cover_file: k(a2) ? a2 : null, name: u, data: c2, custom_type: h, operators: f2, is_ephemeral: C2 })), t4;
  }
  return t(t3, n2), t3;
}(Fe);
!function(n2) {
  function t3(e, t4) {
    var r2 = n2.call(this, e, t4) || this;
    return r2.channel = new xe(e, t4), r2;
  }
  t(t3, n2);
}(qe);
var me = function(n2) {
  function t3(e) {
    var t4 = e.channelUrl;
    return n2.call(this, { code: "ENTR", payload: { channel_url: t4 }, ackRequired: true }) || this;
  }
  return t(t3, n2), t3;
}(Ge);
var Ue = function(n2) {
  function t3(e, t4, r2) {
    var a2, s2, i = this;
    return i = n2.call(this, e, "SYEV", r2) || this, r2.data && (i.participantCount = null !== (a2 = r2.data.participant_count) && void 0 !== a2 ? a2 : 0, i.user = new ls(e, r2.data), i.ts = null !== (s2 = r2.data.edge_ts) && void 0 !== s2 ? s2 : 0), i;
  }
  return t(t3, n2), t3;
}(v2);
var Ee = function(n2) {
  function t3(e) {
    var t4 = e.channelUrl;
    return n2.call(this, { code: "EXIT", payload: { channel_url: t4 }, ackRequired: true }) || this;
  }
  return t(t3, n2), t3;
}(Ge);
var Me = function(n2) {
  function t3(e, t4, r2) {
    var a2, s2, i = this;
    return i = n2.call(this, e, "EXIT", r2) || this, r2.data && (i.participantCount = null !== (a2 = r2.data.participant_count) && void 0 !== a2 ? a2 : 0, i.user = new ls(e, r2.data), i.ts = null !== (s2 = r2.data.edge_ts) && void 0 !== s2 ? s2 : 0), i;
  }
  return t(t3, n2), t3;
}(v2);
var we = {};
var Pe = function(r2) {
  function o2(e, a2) {
    var s2 = r2.call(this, e, n(n({}, a2), { channelType: H.OPEN })) || this;
    return s2.subscribeChannelEvent = ut, s2.unsubscribeChannelEvent = ut, s2.refreshChannel = function() {
      return r(s2, void 0, void 0, function() {
        return s(this, function(e2) {
          return [2, ut()];
        });
      });
    }, s2._openChannelCache = new Ce(e), s2._openChannelHandlers = /* @__PURE__ */ new Map(), s2._dispatcher.on(function(e2) {
      var n2, t3;
      if (e2 instanceof ze)
        s2._handleEvent(e2).catch(function(e3) {
          if (v(e3) && "foreground" === s2._sdkState.appState)
            throw e3;
        });
      else if (e2 instanceof Fr && e2.stateType === Rr.CONNECTED) {
        var r3 = s2._openChannelCache.enteredChannels;
        try {
          for (var a3 = o(r3), i = a3.next(); !i.done; i = a3.next()) {
            i.value.enter();
          }
        } catch (e3) {
          n2 = { error: e3 };
        } finally {
          try {
            i && !i.done && (t3 = a3.return) && t3.call(a3);
          } finally {
            if (n2)
              throw n2.error;
          }
        }
      }
    }), we[e] || (we[e] = s2), s2;
  }
  return t(o2, r2), o2.of = function(e) {
    return we[e];
  }, o2.prototype.buildOpenChannelFromSerializedData = function(e) {
    var n2 = as(e);
    return new xe(this._iid, xe.payloadify(n2));
  }, o2.prototype.getChannelFromCache = function(e) {
    var r3;
    return r(this, void 0, void 0, function() {
      return s(this, function(n2) {
        switch (n2.label) {
          case 0:
            return [4, this._openChannelCache.get(e)];
          case 1:
            return [2, null !== (r3 = n2.sent()) && void 0 !== r3 ? r3 : null];
        }
      });
    });
  }, o2.prototype.upsertChannelsToCache = function(e) {
    return r(this, void 0, void 0, function() {
      return s(this, function(n2) {
        switch (n2.label) {
          case 0:
            return [4, this._openChannelCache.upsert(e)];
          case 1:
            return [2, n2.sent()];
        }
      });
    });
  }, o2.prototype.removeChannelsFromCache = function(e) {
    return r(this, void 0, void 0, function() {
      var n2, r3, a2, s2, i, o3;
      return s(this, function(t3) {
        switch (t3.label) {
          case 0:
            t3.trys.push([0, 5, 6, 7]), n2 = o(e), r3 = n2.next(), t3.label = 1;
          case 1:
            return r3.done ? [3, 4] : (a2 = r3.value, [4, this._openChannelCache.remove(a2)]);
          case 2:
            t3.sent(), t3.label = 3;
          case 3:
            return r3 = n2.next(), [3, 1];
          case 4:
            return [3, 7];
          case 5:
            return s2 = t3.sent(), i = { error: s2 }, [3, 7];
          case 6:
            try {
              r3 && !r3.done && (o3 = n2.return) && o3.call(n2);
            } finally {
              if (i)
                throw i.error;
            }
            return [7];
          case 7:
            return [2];
        }
      });
    });
  }, o2.prototype.setEnteredToCache = function(e) {
    this._openChannelCache.enter(e.url);
  }, o2.prototype.setExitedToCache = function(e) {
    this._openChannelCache.exit(e.url);
  }, Object.defineProperty(o2.prototype, "handlers", { get: function() {
    return c([], a(this._openChannelHandlers.values()), false);
  }, enumerable: false, configurable: true }), o2.prototype._handleEvent = function(e) {
    return r(this, void 0, void 0, function() {
      var r3, a2, s2, i, o3, u, l, c2, h, d, p, f2, C2, v3, _, g2, y2, U2, E, w, P, O, x, R, L2, F, k2, S2, $, J, ee, ne, te, ae2, fe2, Ce2, ve2, _e2, ge2, ye2, me2, Ee2, we2, Pe2, be2, Te2, Ne2, De2, He2, Ie2, Oe2, xe2, Ae2, Re2, Le2, Fe3, ke2, Se, qe2, ze2, Qe, Ge2, je, Ke, Ve, We, Be, Xe, Ye, Ze, $e, Je, en, nn, tn2 = this;
      return s(this, function(rn) {
        switch (rn.label) {
          case 0:
            switch (rn.trys.push([0, 59, , 60]), e.code) {
              case "MESG":
              case "FILE":
              case "ADMM":
              case "BRDM":
                return [3, 1];
              case "MEDI":
              case "FEDI":
              case "AEDI":
                return [3, 4];
              case "DELM":
                return [3, 7];
              case "MRCT":
                return [3, 10];
              case "MTHD":
                return [3, 13];
              case "MCNT":
                return [3, 16];
              case "PEDI":
                return [3, 27];
              case "VOTE":
                return [3, 30];
              case "SYEV":
                return [3, 33];
            }
            return [3, 58];
          case 1:
            return i = null, "MESG" === e.code ? i = e.as(Ir) : "FILE" === e.code ? i = e.as(Pt) : "ADMM" !== e.code && "BRDM" != e.code || (i = e.as(L)), i ? (r3 = i.message, a2 = i.isMentioned, r3.channelType !== H.OPEN ? [3, 3] : [4, this.getChannel(r3.channelUrl, true)]) : [3, 3];
          case 2:
            s2 = rn.sent(), kr(function() {
              return r(tn2, void 0, void 0, function() {
                var e2, n2, i2, o4, u2;
                return s(this, function(t3) {
                  try {
                    for (e2 = o(this._openChannelHandlers.values()), n2 = e2.next(); !n2.done; n2 = e2.next())
                      i2 = n2.value, this._openChannelCache.isEnteredChannel(s2.url) && (i2.onMessageReceived && i2.onMessageReceived(s2, r3), a2 && i2.onMentionReceived && i2.onMentionReceived(s2, r3));
                  } catch (e3) {
                    o4 = { error: e3 };
                  } finally {
                    try {
                      n2 && !n2.done && (u2 = e2.return) && u2.call(e2);
                    } finally {
                      if (o4)
                        throw o4.error;
                    }
                  }
                  return [2];
                });
              });
            }), rn.label = 3;
          case 3:
            return [3, 58];
          case 4:
            return i = null, "MEDI" === e.code ? i = e.as(Tr) : "FEDI" === e.code ? i = e.as(Mr) : "AEDI" === e.code && (i = e.as(I)), i ? (o3 = i.message, u = i.mentionCountChange, o3.channelType !== H.OPEN ? [3, 6] : [4, this.getChannel(o3.channelUrl, true)]) : [3, 6];
          case 5:
            l = rn.sent(), c2 = false, l.lastPinnedMessage && l.lastPinnedMessage.messageId === o3.messageId && l.lastPinnedMessage.updatedAt < o3.updatedAt && (l.lastPinnedMessage = o3, c2 = true), kr(function() {
              return r(tn2, void 0, void 0, function() {
                var e2, n2, r4, a3, s3, i2, h2;
                return s(this, function(t3) {
                  try {
                    for (e2 = o(this._openChannelHandlers.values()), n2 = e2.next(); !n2.done; n2 = e2.next())
                      r4 = n2.value, this._openChannelCache.isEnteredChannel(l.url) && (c2 && (null === (i2 = r4.onPinnedMessageUpdated) || void 0 === i2 || i2.call(r4, l), null === (h2 = r4.onChannelChanged) || void 0 === h2 || h2.call(r4, l)), r4.onMessageUpdated && r4.onMessageUpdated(l, o3), u > 0 && r4.onMentionReceived && r4.onMentionReceived(l, o3));
                  } catch (e3) {
                    a3 = { error: e3 };
                  } finally {
                    try {
                      n2 && !n2.done && (s3 = e2.return) && s3.call(e2);
                    } finally {
                      if (a3)
                        throw a3.error;
                    }
                  }
                  return [2];
                });
              });
            }), rn.label = 6;
          case 6:
            return [3, 58];
          case 7:
            return h = e.as(at), ne = h.channelUrl, te = h.channelType, d = h.messageId, te !== H.OPEN ? [3, 9] : [4, this.getChannel(ne, true)];
          case 8:
            p = rn.sent(), kr(function() {
              return r(tn2, void 0, void 0, function() {
                var e2, n2, r4, a3, s3;
                return s(this, function(t3) {
                  try {
                    for (e2 = o(this._openChannelHandlers.values()), n2 = e2.next(); !n2.done; n2 = e2.next())
                      r4 = n2.value, this._openChannelCache.isEnteredChannel(p.url) && r4.onMessageDeleted && r4.onMessageDeleted(p, d);
                  } catch (e3) {
                    a3 = { error: e3 };
                  } finally {
                    try {
                      n2 && !n2.done && (s3 = e2.return) && s3.call(e2);
                    } finally {
                      if (a3)
                        throw a3.error;
                    }
                  }
                  return [2];
                });
              });
            }), rn.label = 9;
          case 9:
            return [3, 58];
          case 10:
            return f2 = e.as(U), ne = f2.channelUrl, te = f2.channelType, C2 = f2.event, te !== H.OPEN ? [3, 12] : [4, this.getChannel(ne, true)];
          case 11:
            v3 = rn.sent(), kr(function() {
              return r(tn2, void 0, void 0, function() {
                var e2, n2, r4, a3, s3;
                return s(this, function(t3) {
                  try {
                    for (e2 = o(this._openChannelHandlers.values()), n2 = e2.next(); !n2.done; n2 = e2.next())
                      r4 = n2.value, this._openChannelCache.isEnteredChannel(v3.url) && r4.onReactionUpdated && r4.onReactionUpdated(v3, C2);
                  } catch (e3) {
                    a3 = { error: e3 };
                  } finally {
                    try {
                      n2 && !n2.done && (s3 = e2.return) && s3.call(e2);
                    } finally {
                      if (a3)
                        throw a3.error;
                    }
                  }
                  return [2];
                });
              });
            }), rn.label = 12;
          case 12:
            return [3, 58];
          case 13:
            return (_ = e.as(M).event).channelType !== H.OPEN ? [3, 15] : [4, this.getChannel(_.channelUrl, true)];
          case 14:
            g2 = rn.sent(), kr(function() {
              return r(tn2, void 0, void 0, function() {
                var e2, n2, r4, a3, s3;
                return s(this, function(t3) {
                  try {
                    for (e2 = o(this._openChannelHandlers.values()), n2 = e2.next(); !n2.done; n2 = e2.next())
                      r4 = n2.value, this._openChannelCache.isEnteredChannel(g2.url) && r4.onThreadInfoUpdated && r4.onThreadInfoUpdated(g2, _);
                  } catch (e3) {
                    a3 = { error: e3 };
                  } finally {
                    try {
                      n2 && !n2.done && (s3 = e2.return) && s3.call(e2);
                    } finally {
                      if (a3)
                        throw a3.error;
                    }
                  }
                  return [2];
                });
              });
            }), rn.label = 15;
          case 15:
            return [3, 58];
          case 16:
            y2 = e.as(y).openChannelMemberCounts, U2 = [], rn.label = 17;
          case 17:
            rn.trys.push([17, 22, 23, 24]), E = o(y2), w = E.next(), rn.label = 18;
          case 18:
            return w.done ? [3, 21] : (P = w.value, ne = P.channelUrl, Ee2 = P.participantCount, O = P.updatedAt, [4, this.getChannelFromCache(ne)]);
          case 19:
            (x = rn.sent()) && x._updateParticipantCount(Ee2, O) && U2.push(x), rn.label = 20;
          case 20:
            return w = E.next(), [3, 18];
          case 21:
            return [3, 24];
          case 22:
            return R = rn.sent(), en = { error: R }, [3, 24];
          case 23:
            try {
              w && !w.done && (nn = E.return) && nn.call(E);
            } finally {
              if (en)
                throw en.error;
            }
            return [7];
          case 24:
            return U2.length > 0 ? [4, this.upsertChannelsToCache(U2)] : [3, 26];
          case 25:
            L2 = rn.sent(), kr(function() {
              return r(tn2, void 0, void 0, function() {
                var e2, n2, r4, a3, s3;
                return s(this, function(t3) {
                  try {
                    for (e2 = o(this._openChannelHandlers.values()), n2 = e2.next(); !n2.done; n2 = e2.next())
                      (r4 = n2.value).onChannelMemberCountChanged && r4.onChannelMemberCountChanged(L2);
                  } catch (e3) {
                    a3 = { error: e3 };
                  } finally {
                    try {
                      n2 && !n2.done && (s3 = e2.return) && s3.call(e2);
                    } finally {
                      if (a3)
                        throw a3.error;
                    }
                  }
                  return [2];
                });
              });
            }), rn.label = 26;
          case 26:
            return [3, 58];
          case 27:
            return F = e.as(D), k2 = F.event, S2 = F.status, ne = F.channelUrl, te = F.channelType, ne && te === H.OPEN ? [4, this.getChannel(ne, true)] : [3, 29];
          case 28:
            $ = rn.sent(), this._dispatcher.dispatch(new wo({ event: k2, source: no.EVENT_POLL_UPDATED })), kr(S2 === To ? function() {
              return r(tn2, void 0, void 0, function() {
                var e2, n2, r4, a3, s3;
                return s(this, function(t3) {
                  try {
                    for (e2 = o(this._openChannelHandlers.values()), n2 = e2.next(); !n2.done; n2 = e2.next())
                      (r4 = n2.value).onPollDeleted && r4.onPollDeleted($, k2.pollId);
                  } catch (e3) {
                    a3 = { error: e3 };
                  } finally {
                    try {
                      n2 && !n2.done && (s3 = e2.return) && s3.call(e2);
                    } finally {
                      if (a3)
                        throw a3.error;
                    }
                  }
                  return [2];
                });
              });
            } : function() {
              return r(tn2, void 0, void 0, function() {
                var e2, n2, r4, a3, s3;
                return s(this, function(t3) {
                  try {
                    for (e2 = o(this._openChannelHandlers.values()), n2 = e2.next(); !n2.done; n2 = e2.next())
                      (r4 = n2.value).onPollUpdated && r4.onPollUpdated($, k2);
                  } catch (e3) {
                    a3 = { error: e3 };
                  } finally {
                    try {
                      n2 && !n2.done && (s3 = e2.return) && s3.call(e2);
                    } finally {
                      if (a3)
                        throw a3.error;
                    }
                  }
                  return [2];
                });
              });
            }), rn.label = 29;
          case 29:
            return [3, 58];
          case 30:
            return J = e.as(Hr), ee = J.event, ne = J.channelUrl, te = J.channelType, ne && te === H.OPEN ? [4, this.getChannel(ne, true)] : [3, 32];
          case 31:
            ae2 = rn.sent(), this._dispatcher.dispatch(new So({ event: ee, source: no.EVENT_POLL_VOTED })), kr(function() {
              return r(tn2, void 0, void 0, function() {
                var e2, n2, r4, a3, s3;
                return s(this, function(t3) {
                  try {
                    for (e2 = o(this._openChannelHandlers.values()), n2 = e2.next(); !n2.done; n2 = e2.next())
                      (r4 = n2.value).onPollVoted && r4.onPollVoted(ae2, ee);
                  } catch (e3) {
                    a3 = { error: e3 };
                  } finally {
                    try {
                      n2 && !n2.done && (s3 = e2.return) && s3.call(e2);
                    } finally {
                      if (a3)
                        throw a3.error;
                    }
                  }
                  return [2];
                });
              });
            }), rn.label = 32;
          case 32:
            return [3, 58];
          case 33:
            if (!(fe2 = e.as(v2).event).isOpenChannelEvent)
              return [3, 57];
            switch (fe2.category) {
              case f.CHANNEL_ENTER:
                return [3, 34];
              case f.CHANNEL_EXIT:
                return [3, 36];
              case f.CHANNEL_OPERATOR_UPDATE:
                return [3, 38];
              case f.USER_CHANNEL_MUTE:
              case f.USER_CHANNEL_UNMUTE:
                return [3, 40];
              case f.USER_CHANNEL_BAN:
              case f.USER_CHANNEL_UNBAN:
                return [3, 42];
              case f.CHANNEL_FREEZE:
              case f.CHANNEL_UNFREEZE:
                return [3, 44];
              case f.CHANNEL_DELETED:
                return [3, 46];
              case f.CHANNEL_PROP_CHANGED:
                return [3, 49];
              case f.CHANNEL_META_DATA_CHANGED:
                return [3, 51];
              case f.CHANNEL_META_COUNTERS_CHANGED:
                return [3, 53];
              case f.PINNED_MESSAGE_CHANGED:
                return [3, 55];
            }
            return [3, 57];
          case 34:
            return [4, this.getChannel(fe2.channelUrl, true)];
          case 35:
            return Ce2 = rn.sent(), ve2 = e.as(Ue), Ee2 = ve2.participantCount, _e2 = ve2.user, ge2 = Ce2._updateParticipantCount(Ee2, fe2.ts), kr(function() {
              return r(tn2, void 0, void 0, function() {
                return s(this, function(e2) {
                  return this._openChannelHandlers.forEach(function(e3) {
                    e3.onUserEntered && e3.onUserEntered(Ce2, _e2), ge2 && e3.onChannelParticipantCountChanged && e3.onChannelParticipantCountChanged(Ce2);
                  }), [2];
                });
              });
            }), [3, 57];
          case 36:
            return [4, this.getChannel(fe2.channelUrl, true)];
          case 37:
            return ye2 = rn.sent(), me2 = e.as(Me), Ee2 = me2.participantCount, we2 = me2.user, Pe2 = ye2._updateParticipantCount(Ee2, fe2.ts), kr(function() {
              return r(tn2, void 0, void 0, function() {
                return s(this, function(e2) {
                  return this._openChannelHandlers.forEach(function(e3) {
                    e3.onUserExited && e3.onUserExited(ye2, we2), Pe2 && e3.onChannelParticipantCountChanged && e3.onChannelParticipantCountChanged(ye2);
                  }), [2];
                });
              });
            }), [3, 57];
          case 38:
            return [4, this.getChannel(fe2.channelUrl, true)];
          case 39:
            return be2 = rn.sent(), Te2 = e.as(T).operators, be2.operators = Te2, this.upsertChannelsToCache([be2]), kr(function() {
              return r(tn2, void 0, void 0, function() {
                return s(this, function(e2) {
                  return this._openChannelHandlers.forEach(function(e3) {
                    e3.onOperatorUpdated && e3.onOperatorUpdated(be2, Te2);
                  }), [2];
                });
              });
            }), [3, 57];
          case 40:
            return [4, this.getChannel(fe2.channelUrl, true)];
          case 41:
            return Ne2 = rn.sent(), De2 = fe2.category === f.USER_CHANNEL_MUTE, He2 = e.as(De2 ? ar : ur).user, kr(function() {
              return r(tn2, void 0, void 0, function() {
                return s(this, function(e2) {
                  return this._openChannelHandlers.forEach(function(e3) {
                    De2 ? e3.onUserMuted && e3.onUserMuted(Ne2, He2) : e3.onUserUnmuted && e3.onUserUnmuted(Ne2, He2);
                  }), [2];
                });
              });
            }), [3, 57];
          case 42:
            return [4, this.getChannel(fe2.channelUrl, true)];
          case 43:
            return Ie2 = rn.sent(), Oe2 = fe2.category === f.USER_CHANNEL_BAN, xe2 = e.as(Oe2 ? lr : hr).user, kr(function() {
              return r(tn2, void 0, void 0, function() {
                return s(this, function(e2) {
                  return this._openChannelHandlers.forEach(function(e3) {
                    Oe2 ? e3.onUserBanned && e3.onUserBanned(Ie2, xe2) : e3.onUserUnbanned && e3.onUserUnbanned(Ie2, xe2);
                  }), [2];
                });
              });
            }), [3, 57];
          case 44:
            return [4, this.getChannel(fe2.channelUrl, true)];
          case 45:
            return Ae2 = rn.sent(), Re2 = e.as(pr).freeze, Ae2.isFrozen = Re2, this.upsertChannelsToCache([Ae2]), kr(function() {
              return r(tn2, void 0, void 0, function() {
                return s(this, function(e2) {
                  return this._openChannelHandlers.forEach(function(e3) {
                    Re2 ? e3.onChannelFrozen && e3.onChannelFrozen(Ae2) : e3.onChannelUnfrozen && e3.onChannelUnfrozen(Ae2);
                  }), [2];
                });
              });
            }), [3, 57];
          case 46:
            return [4, this.getChannel(fe2.channelUrl, true)];
          case 47:
            return Le2 = rn.sent(), [4, this.removeChannelsFromCache([Le2.url])];
          case 48:
            return rn.sent(), kr(function() {
              return r(tn2, void 0, void 0, function() {
                return s(this, function(e2) {
                  return this._openChannelHandlers.forEach(function(e3) {
                    e3.onChannelDeleted && e3.onChannelDeleted(Le2.url, Le2.channelType);
                  }), [2];
                });
              });
            }), [3, 57];
          case 49:
            return [4, this.getChannelWithoutCache(fe2.channelUrl, true)];
          case 50:
            return Fe3 = rn.sent(), kr(function() {
              return r(tn2, void 0, void 0, function() {
                return s(this, function(e2) {
                  return this._openChannelHandlers.forEach(function(e3) {
                    e3.onChannelChanged && e3.onChannelChanged(Fe3);
                  }), [2];
                });
              });
            }), [3, 57];
          case 51:
            return [4, this.getChannel(fe2.channelUrl, true)];
          case 52:
            return ke2 = rn.sent(), Se = e.as(Gn), qe2 = Se.created, ze2 = Se.updated, Qe = Se.deleted, qe2 && ke2._upsertCachedMetaData(qe2, fe2.ts), ze2 && ke2._upsertCachedMetaData(ze2, fe2.ts), Qe && ke2._removeFromCachedMetaData(Qe, fe2.ts), kr(function() {
              return r(tn2, void 0, void 0, function() {
                return s(this, function(e2) {
                  return this._openChannelHandlers.forEach(function(e3) {
                    qe2 && e3.onMetaDataCreated && e3.onMetaDataCreated(ke2, qe2), ze2 && e3.onMetaDataUpdated && e3.onMetaDataUpdated(ke2, ze2), Qe && e3.onMetaDataDeleted && e3.onMetaDataDeleted(ke2, Qe);
                  }), [2];
                });
              });
            }), [3, 57];
          case 53:
            return [4, this.getChannel(fe2.channelUrl, true)];
          case 54:
            return Ge2 = rn.sent(), je = e.as(nr), Ke = je.created, Ve = je.updated, We = je.deleted, kr(function() {
              return r(tn2, void 0, void 0, function() {
                return s(this, function(e2) {
                  return this._openChannelHandlers.forEach(function(e3) {
                    Ke && e3.onMetaCounterCreated && e3.onMetaCounterCreated(Ge2, Ke), Ve && e3.onMetaCounterUpdated && e3.onMetaCounterUpdated(Ge2, Ve), We && e3.onMetaCounterDeleted && e3.onMetaCounterDeleted(Ge2, We);
                  }), [2];
                });
              });
            }), [3, 57];
          case 55:
            return [4, this.getChannel(fe2.channelUrl, true)];
          case 56:
            return Be = rn.sent(), Xe = e.as(H2), Ye = Xe.pinnedMessageIds, Ze = Xe.latestPinnedMessage, ($e = Xe.ts) > Be._pinnedMessagesUpdatedAt && (Be.pinnedMessageIds = Ye, Be.lastPinnedMessage = Ze, Be._pinnedMessagesUpdatedAt = $e, this.upsertChannelsToCache([Be]), kr(function() {
              return r(tn2, void 0, void 0, function() {
                var e2, n2, r4, a3, s3;
                return s(this, function(t3) {
                  try {
                    for (e2 = o(this._openChannelHandlers.values()), n2 = e2.next(); !n2.done; n2 = e2.next())
                      (r4 = n2.value).onChannelChanged && r4.onChannelChanged(Be);
                  } catch (e3) {
                    a3 = { error: e3 };
                  } finally {
                    try {
                      n2 && !n2.done && (s3 = e2.return) && s3.call(e2);
                    } finally {
                      if (a3)
                        throw a3.error;
                    }
                  }
                  return [2];
                });
              });
            }), kr(function() {
              return r(tn2, void 0, void 0, function() {
                return s(this, function(e2) {
                  return this._openChannelHandlers.forEach(function(e3) {
                    e3.onPinnedMessageUpdated && e3.onPinnedMessageUpdated(Be);
                  }), [2];
                });
              });
            })), [3, 57];
          case 57:
            return [3, 58];
          case 58:
            return [3, 60];
          case 59:
            if (Je = rn.sent(), v(Je))
              throw Je;
            return [3, 60];
          case 60:
            return [2];
        }
      });
    });
  }, o2.prototype.addHandler = function(e, n2) {
    this._openChannelHandlers.set(e, n2);
  }, o2.prototype.removeHandler = function(e) {
    this._openChannelHandlers.delete(e);
  }, o2.prototype.clearHandler = function() {
    this._openChannelHandlers.clear();
  }, o2.prototype.getChannel = function(e, r3) {
    return void 0 === r3 && (r3 = false), r(this, void 0, void 0, function() {
      var n2;
      return s(this, function(t3) {
        switch (t3.label) {
          case 0:
            cs(S("string", e)).throw(b.invalidParameters), t3.label = 1;
          case 1:
            return t3.trys.push([1, 3, , 4]), [4, this.getChannelFromCache(e)];
          case 2:
            return (n2 = t3.sent()) ? [2, n2] : [3, 4];
          case 3:
            return t3.sent(), [3, 4];
          case 4:
            return [4, this.getChannelWithoutCache(e, r3)];
          case 5:
            return [2, t3.sent()];
        }
      });
    });
  }, o2.prototype.getChannelWithoutCache = function(e, r3) {
    return void 0 === r3 && (r3 = false), r(this, void 0, void 0, function() {
      var n2, a2, i;
      return s(this, function(t3) {
        switch (t3.label) {
          case 0:
            return cs(S("string", e)).throw(b.invalidParameters), n2 = new _e({ channelUrl: e, isInternalCall: r3 }), [4, this._requestQueue.send(n2)];
          case 1:
            return a2 = t3.sent(), i = a2.as(ge).channel, [4, this.upsertChannelsToCache([i])];
          case 2:
            return [2, t3.sent()[0]];
        }
      });
    });
  }, o2.prototype.createChannel = function(e) {
    return r(this, void 0, void 0, function() {
      var n2, r3, o3, u;
      return s(this, function(t3) {
        switch (t3.label) {
          case 0:
            return n2 = n(n({}, ve), e), cs(function(e2) {
              return C("string", e2.operatorUserIds, true) && (S("string", e2.coverUrlOrImage, true) || k(e2.coverUrlOrImage, true)) && S("string", e2.name, true) && S("string", e2.data, true) && S("string", e2.customType, true) && (S("string", e2.channelUrl) && /^\w+$/.test(e2.channelUrl) || null === e2.channelUrl || void 0 === e2.channelUrl) && S("boolean", e2.isEphemeral, true);
            }(n2)).throw(b.invalidParameters), r3 = new ye(n2), [4, this._requestQueue.send(r3)];
          case 1:
            return o3 = t3.sent(), u = o3.as(ge).channel, this.upsertChannelsToCache([u]), [2, u];
        }
      });
    });
  }, o2;
}(g);
var be = { name: void 0, coverUrlOrImage: void 0, data: void 0, customType: void 0, operatorUserIds: void 0 };
var Te = function(n2) {
  function t3(e) {
    var t4 = this, r2 = e.channelUrl, a2 = e.token, s2 = e.limit;
    return (t4 = n2.call(this) || this).method = ae.GET, t4.path = "".concat(fe, "/").concat(encodeURIComponent(r2), "/participants"), t4.params = { token: a2, limit: s2 }, t4;
  }
  return t(t3, n2), t3;
}(Fe);
var Ne = function(n2) {
  function t3(e, t4) {
    var r2 = n2.call(this, e, t4) || this;
    r2.participants = [];
    var a2 = t4.next, s2 = t4.participants;
    return r2.token = a2, r2.participants = s2.map(function(n3) {
      return new tn(e, n3);
    }), r2;
  }
  return t(t3, n2), t3;
}(qe);
var De = function(r2) {
  function a2(e, n2, t3) {
    return r2.call(this, e, n2, H.OPEN, t3) || this;
  }
  return t(a2, r2), a2.prototype._validate = function() {
    return r2.prototype._validate.call(this);
  }, a2.prototype.next = function() {
    return r(this, void 0, void 0, function() {
      var e, n2, r3, a3, s2, i;
      return s(this, function(t3) {
        switch (t3.label) {
          case 0:
            return this._validate() ? this._isLoading ? [3, 3] : this._hasNext ? (this._isLoading = true, e = uo.of(this._iid).requestQueue, n2 = new Te(n(n({}, this), { token: this._token })), [4, e.send(n2)]) : [3, 2] : [3, 5];
          case 1:
            return r3 = t3.sent(), a3 = r3.as(Ne), s2 = a3.participants, i = a3.token, this._token = i, this._hasNext = !!i, this._isLoading = false, [2, s2];
          case 2:
            return [2, []];
          case 3:
            throw b.queryInProgress;
          case 4:
            return [3, 6];
          case 5:
            throw b.invalidParameters;
          case 6:
            return [2];
        }
      });
    });
  }, a2;
}(ko);
var He = function(n2) {
  function t3(e) {
    var t4 = this, r2 = e.channelUrl, a2 = e.coverUrlOrImage, u = e.name, c2 = e.data, h = e.customType, f2 = e.operatorUserIds;
    return (t4 = n2.call(this) || this).method = ae.PUT, t4.path = "".concat(fe, "/").concat(encodeURIComponent(r2)), t4.params = se(oe({ cover_url: S("string", a2) ? a2 : null, cover_file: k(a2) ? a2 : null, name: u, data: c2, custom_type: h, operators: f2 })), t4;
  }
  return t(t3, n2), t3;
}(Fe);
var Ie = function(n2) {
  function t3(e, t4) {
    var r2 = n2.call(this, e, t4) || this;
    return r2.channel = new xe(e, t4), r2;
  }
  return t(t3, n2), t3;
}(qe);
var Oe = function(n2) {
  function t3(e) {
    var t4 = this, r2 = e.channelUrl;
    return (t4 = n2.call(this) || this).method = ae.DELETE, t4.path = "".concat(fe, "/").concat(encodeURIComponent(r2)), t4;
  }
  return t(t3, n2), t3;
}(Fe);
!function(n2) {
  function t3(e, t4) {
    return n2.call(this, e, t4) || this;
  }
  t(t3, n2);
}(qe);
var xe = function(r2) {
  function o2(e, n2) {
    var t3, a2 = this;
    return (a2 = r2.call(this, e, n2) || this)._lastParticipantCountUpdated = 0, a2.participantCount = 0, a2.operators = [], a2.lastPinnedMessage = null, a2._pinnedMessagesUpdatedAt = 0, a2.channelType = H.OPEN, a2.participantCount = null !== (t3 = n2.participant_count) && void 0 !== t3 ? t3 : 0, a2.operators = Array.isArray(n2.operators) ? n2.operators.map(function(n3) {
      return new ls(e, n3);
    }) : [], a2.lastPinnedMessage = n2.latest_pinned_message ? At(a2._iid, n({ channel_type: a2.channelType }, n2.latest_pinned_message)) : null, a2;
  }
  return t(o2, r2), o2.payloadify = function(e) {
    return se(oe(n(n({}, Ti.payloadify(e)), { participant_count: e.participantCount, operators: e.operators.map(function(e2) {
      return ls.payloadify(e2);
    }), latest_pinned_message: e.lastPinnedMessage ? Ut(e.lastPinnedMessage) : null })));
  }, o2.prototype.serialize = function() {
    return os(this);
  }, o2.prototype.isOperator = function(e) {
    return e instanceof ls ? this.isOperator(e.userId) : this.operators.some(function(n2) {
      return n2.userId === e;
    });
  }, o2.prototype._updateParticipantCount = function(e, n2) {
    return n2 > this._lastParticipantCountUpdated && (this.participantCount = e, this._lastParticipantCountUpdated = n2, true);
  }, o2.prototype.createParticipantListQuery = function(e) {
    return new De(this._iid, this.url, e);
  }, o2.prototype.refresh = function() {
    return r(this, void 0, void 0, function() {
      return s(this, function(e) {
        switch (e.label) {
          case 0:
            return [4, Pe.of(this._iid).getChannelWithoutCache(this.url)];
          case 1:
            return [2, e.sent()];
        }
      });
    });
  }, o2.prototype.enter = function() {
    return r(this, void 0, void 0, function() {
      var e, n2, r3, a2, s2, i;
      return s(this, function(t3) {
        switch (t3.label) {
          case 0:
            return e = uo.of(this._iid).requestQueue, n2 = new me({ channelUrl: this.url }), [4, e.send(n2)];
          case 1:
            return r3 = t3.sent(), a2 = r3.as(Ue), s2 = a2.participantCount, i = a2.ts, this._updateParticipantCount(s2, i), Pe.of(this._iid).setEnteredToCache(this), [2];
        }
      });
    });
  }, o2.prototype.exit = function() {
    return r(this, void 0, void 0, function() {
      var e, n2, r3, a2, s2, i;
      return s(this, function(t3) {
        switch (t3.label) {
          case 0:
            return e = uo.of(this._iid).requestQueue, n2 = new Ee({ channelUrl: this.url }), [4, e.send(n2)];
          case 1:
            return r3 = t3.sent(), a2 = r3.as(Me), s2 = a2.participantCount, i = a2.ts, this._updateParticipantCount(s2, i), Pe.of(this._iid).setExitedToCache(this), la.of(this._iid).fileMessageQueue.cancel(this), [2];
        }
      });
    });
  }, o2.prototype.updateChannel = function(e) {
    return r(this, void 0, void 0, function() {
      var n2, r3, o3, u, l;
      return s(this, function(t3) {
        switch (t3.label) {
          case 0:
            return n2 = n(n({}, be), e), cs(function(e2) {
              return C("string", e2.operatorUserIds, true) && (S("string", e2.coverUrlOrImage, true) || k(e2.coverUrlOrImage, true)) && S("string", e2.name, true) && S("string", e2.data, true) && S("string", e2.customType, true);
            }(n2)).throw(b.invalidParameters), r3 = uo.of(this._iid).requestQueue, o3 = new He(n({ channelUrl: this.url }, n2)), [4, r3.send(o3)];
          case 1:
            return u = t3.sent(), l = u.as(Ie).channel, this._update(l), [4, Pe.of(this._iid).upsertChannelsToCache([l])];
          case 2:
            return t3.sent(), [2, this];
        }
      });
    });
  }, o2.prototype.updateChannelWithOperatorUserIds = function(e, r3, a2, s2, i) {
    return r(this, void 0, void 0, function() {
      var n2;
      return s(this, function(t3) {
        return n2 = n(n({}, be), { name: e, coverUrlOrImage: r3, data: a2, operatorUserIds: s2, customType: i }), [2, this.updateChannel(n2)];
      });
    });
  }, o2.prototype.delete = function() {
    return r(this, void 0, void 0, function() {
      var e, n2;
      return s(this, function(t3) {
        switch (t3.label) {
          case 0:
            return e = uo.of(this._iid).requestQueue, n2 = new Oe({ channelUrl: this.url }), [4, e.send(n2)];
          case 1:
            return t3.sent(), [4, Pe.of(this._iid).removeChannelsFromCache([this.url])];
          case 2:
            return t3.sent(), [2];
        }
      });
    });
  }, o2.prototype.updateUserMessage = function(e, a2) {
    return r(this, void 0, void 0, function() {
      var n2, s2, i, o3 = this;
      return s(this, function(t3) {
        switch (t3.label) {
          case 0:
            return [4, r2.prototype.updateUserMessage.call(this, e, a2)];
          case 1:
            return n2 = t3.sent(), s2 = false, i = false, this.lastPinnedMessage && this.lastPinnedMessage.messageId === n2.messageId && (this.lastPinnedMessage = n2, s2 = true, i = true), s2 && Pe.of(this._iid).handlers.map(function(e2) {
              e2.onChannelChanged && e2.onChannelChanged(o3);
            }), i && Pe.of(this._iid).handlers.map(function(e2) {
              e2.onPinnedMessageUpdated && e2.onPinnedMessageUpdated(o3);
            }), [2, n2];
        }
      });
    });
  }, o2.prototype.updateFileMessage = function(e, a2) {
    return r(this, void 0, void 0, function() {
      var n2, s2, i, o3 = this;
      return s(this, function(t3) {
        switch (t3.label) {
          case 0:
            return [4, r2.prototype.updateFileMessage.call(this, e, a2)];
          case 1:
            return n2 = t3.sent(), s2 = false, i = false, this.lastPinnedMessage && this.lastPinnedMessage.messageId === n2.messageId && (this.lastPinnedMessage = n2, s2 = true, i = true), s2 && Pe.of(this._iid).handlers.map(function(e2) {
              e2.onChannelChanged && e2.onChannelChanged(o3);
            }), i && Pe.of(this._iid).handlers.map(function(e2) {
              e2.onPinnedMessageUpdated && e2.onPinnedMessageUpdated(o3);
            }), [2, n2];
        }
      });
    });
  }, o2;
}(Ti);
var Ae = function(n2) {
  function t3(e) {
    void 0 === e && (e = {});
    var t4 = n2.call(this) || this;
    return Object.keys(e).forEach(function(n3) {
      t4.hasOwnProperty(n3) && (t4[n3] = e[n3]);
    }), t4;
  }
  return t(t3, n2), t3;
}(function(n2) {
  function t3() {
    var e = null !== n2 && n2.apply(this, arguments) || this;
    return e.onUserEntered = ut, e.onUserExited = ut, e.onChannelParticipantCountChanged = ut, e.onPollUpdated = ut, e.onPollVoted = ut, e.onPollDeleted = ut, e.onPinnedMessageUpdated = ut, e;
  }
  return t(t3, n2), t3;
}(t2));
var Re = function(n2) {
  function t3(e) {
    var t4 = this, r2 = e.token, a2 = e.limit, s2 = e.nameKeyword, i = e.urlKeyword, u = e.customTypes, c2 = e.includeFrozen, h = e.includeMetaData;
    return (t4 = n2.call(this) || this).method = ae.GET, t4.path = fe, t4.params = se({ token: r2, limit: a2, name_contains: s2, url_contains: i, custom_types: u, show_frozen: c2, show_metadata: h, show_pinned_messages: true }), t4;
  }
  return t(t3, n2), t3;
}(Fe);
var Le = function(n2) {
  function t3(e, t4) {
    var r2 = n2.call(this, e, t4) || this;
    r2.channels = [];
    var a2 = t4.next, s2 = t4.channels, i = t4.ts;
    return r2.token = a2, s2 && s2.length > 0 && (r2.channels = s2.map(function(n3) {
      return new xe(e, n3);
    })), r2.ts = "number" == typeof i ? i : null, r2;
  }
  return t(t3, n2), t3;
}(qe);
var Fe2 = function(r2) {
  function i(e, n2) {
    var t3, a2, s2, i2, o2, u = this;
    return (u = r2.call(this, e, n2) || this).includeFrozen = true, u.includeMetaData = true, u.nameKeyword = null, u.urlKeyword = null, u.customTypes = null, u.includeFrozen = null === (t3 = n2.includeFrozen) || void 0 === t3 || t3, u.includeMetaData = null === (a2 = n2.includeMetaData) || void 0 === a2 || a2, u.nameKeyword = null !== (s2 = n2.nameKeyword) && void 0 !== s2 ? s2 : null, u.urlKeyword = null !== (i2 = n2.urlKeyword) && void 0 !== i2 ? i2 : null, u.customTypes = null !== (o2 = n2.customTypes) && void 0 !== o2 ? o2 : null, u;
  }
  return t(i, r2), i.prototype._validate = function() {
    return r2.prototype._validate.call(this) && S("boolean", this.includeFrozen) && S("boolean", this.includeMetaData) && S("string", this.nameKeyword, true) && S("string", this.urlKeyword, true) && C("string", this.customTypes, true);
  }, i.prototype.next = function() {
    return r(this, void 0, void 0, function() {
      var e, n2, r3, a2, s2, i2;
      return s(this, function(t3) {
        switch (t3.label) {
          case 0:
            return this._validate() ? this._isLoading ? [3, 4] : this._hasNext ? (this._isLoading = true, e = uo.of(this._iid).requestQueue, n2 = new Re(oe(n(n({}, this), { token: this._token }))), [4, e.send(n2)]) : [3, 3] : [3, 6];
          case 1:
            return r3 = t3.sent(), a2 = r3.as(Le), s2 = a2.channels, i2 = a2.token, this._token = i2, this._hasNext = !!i2, [4, Pe.of(this._iid).upsertChannelsToCache(s2)];
          case 2:
            return t3.sent(), this._isLoading = false, [2, s2];
          case 3:
            return [2, []];
          case 4:
            throw b.queryInProgress;
          case 5:
            return [3, 7];
          case 6:
            throw b.invalidParameters;
          case 7:
            return [2];
        }
      });
    });
  }, i;
}(Oo);
var ke = function(r2) {
  function a2() {
    var e = null !== r2 && r2.apply(this, arguments) || this;
    return e.name = "openChannel", e;
  }
  return t(a2, r2), a2.prototype.init = function(e, n2) {
    var t3 = n2.sdkState, a3 = n2.dispatcher, s2 = n2.sessionManager, i = n2.requestQueue, o2 = n2.logger, u = n2.onlineDetector, l = n2.cacheContext;
    r2.prototype.init.call(this, e, { sdkState: t3, dispatcher: a3, sessionManager: s2, requestQueue: i, logger: o2, onlineDetector: u, cacheContext: l }), this._manager = new Pe(e, { sdkState: t3, dispatcher: a3, requestQueue: i, logger: o2, cacheContext: l, sessionManager: s2 });
  }, a2.prototype.createOpenChannelListQuery = function(e) {
    return void 0 === e && (e = {}), new Fe2(this._iid, e);
  }, a2.prototype.addOpenChannelHandler = function(e, n2) {
    this._manager.addHandler(e, n2);
  }, a2.prototype.removeOpenChannelHandler = function(e) {
    this._manager.removeHandler(e);
  }, a2.prototype.removeAllOpenChannelHandlers = function() {
    this._manager.clearHandler();
  }, a2.prototype.buildOpenChannelFromSerializedData = function(e) {
    return this._manager.buildOpenChannelFromSerializedData(e);
  }, a2.prototype.getChannel = function(e) {
    return r(this, void 0, void 0, function() {
      return s(this, function(n2) {
        return [2, this._manager.getChannel(e)];
      });
    });
  }, a2.prototype.getChannelWithoutCache = function(e) {
    return r(this, void 0, void 0, function() {
      return s(this, function(n2) {
        return [2, this._manager.getChannelWithoutCache(e)];
      });
    });
  }, a2.prototype.createChannel = function(e) {
    return void 0 === e && (e = {}), r(this, void 0, void 0, function() {
      return s(this, function(n2) {
        return [2, this._manager.createChannel(e)];
      });
    });
  }, a2.prototype.createChannelWithOperatorUserIds = function(e, r3, a3, s2, i) {
    return r(this, void 0, void 0, function() {
      var n2;
      return s(this, function(t3) {
        return (n2 = n({}, ve)).name = e, n2.coverUrlOrImage = r3, n2.data = a3, n2.operatorUserIds = s2, n2.customType = i, [2, this._manager.createChannel(n2)];
      });
    });
  }, a2;
}(lo);

export {
  De,
  xe,
  Ae,
  Fe2 as Fe,
  ke
};
//# sourceMappingURL=chunk-7RQKLDUL.js.map

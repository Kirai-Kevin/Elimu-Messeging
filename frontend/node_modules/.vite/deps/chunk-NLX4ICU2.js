import {
  Js,
  qs
} from "./chunk-TTFJWE4I.js";
import {
  Fr,
  O,
  Q,
  Rr,
  Z,
  ls,
  ne,
  no,
  o,
  po,
  r,
  re,
  s,
  t,
  u,
  ze
} from "./chunk-KXGQOUB2.js";

// node_modules/@sendbird/chat/lib/__bundle-bd7172d3.js
var E;
var C;
var R;
!function(e) {
  e.LATEST_LAST_MESSAGE = "latest_last_message", e.CHRONOLOGICAL = "chronological", e.CHANNEL_NAME_ALPHABETICAL = "channel_name_alphabetical", e.METADATA_VALUE_ALPHABETICAL = "metadata_value_alphabetical";
}(E || (E = {})), function(e) {
  e.CHRONOLOGICAL = "chronological", e.CHANNEL_NAME_ALPHABETICAL = "channel_name_alphabetical", e.METADATA_VALUE_ALPHABETICAL = "metadata_value_alphabetical";
}(C || (C = {})), function(e) {
  e.CREATED_AT = "created_at", e.SCHEDULED_AT = "scheduled_at";
}(R || (R = {}));
var L;
var b = function(e) {
  switch (e) {
    case E.LATEST_LAST_MESSAGE:
      return ["-lastMessageUpdatedAt", "-createdAt", "syncIndex"];
    case E.CHRONOLOGICAL:
      return ["-createdAt", "syncIndex"];
    case E.CHANNEL_NAME_ALPHABETICAL:
      return ["name"];
    default:
      return ["-lastMessageUpdatedAt", "-createdAt", "syncIndex"];
  }
};
var y = function(t2) {
  function n(e) {
    var n2 = e.message, s2 = t2.call(this) || this;
    return s2.message = n2, s2;
  }
  return t(n, t2), n;
}(re);
var I = {};
var N = function() {
  function e(e2, t2) {
    var n = t2.localCacheEnabled, s2 = t2.enableAutoResend, r2 = t2.dispatcher, i = t2.sdkState, u2 = t2.logger, c = this;
    this._iid = e2, I[e2] = this, this._localCacheEnabled = n, this._enableAutoResend = s2, this._isProcessingAutoResend = false, this._autoResendQueue = [], this._dispatcher = r2, this._logger = u2, this._sdkState = i, this._localCacheEnabled && r2.on(function(e3) {
      if (e3 instanceof Fr)
        switch (e3.stateType) {
          case Rr.CONNECTED:
            c._isProcessingAutoResend || c.processAutoResendRegisteredPendingMessages().then(function() {
              return c._processNextAutoResend();
            });
            break;
          case Rr.INTERNAL_DISCONNECTED:
          case Rr.EXTERNAL_DISCONNECTED:
            c._isProcessingAutoResend = false;
        }
    });
  }
  return e.of = function(e2) {
    return I[e2];
  }, e.prototype.processNonAutoResendRegisteredPendingMessages = function() {
    return r(this, void 0, void 0, function() {
      var e2, t2, n, i, a, o2;
      return s(this, function(s2) {
        switch (s2.label) {
          case 0:
            return this._enableAutoResend ? [4, this._fetchAllCachedPendingMessages()] : [2];
          case 1:
            e2 = s2.sent();
            try {
              for (t2 = o(e2), n = t2.next(); !n.done; n = t2.next())
                0 === (i = n.value).errorCode && (this._logger.debug("cached pending message is not auto-resend registered. changing its sending status to failed: ", i.reqId), i.sendingStatus = Z.FAILED, i.errorCode = u.ACK_TIMEOUT, this._dispatcher.dispatch(new po({ messages: [i], source: no.LOCAL_MESSAGE_FAILED })));
            } catch (e3) {
              a = { error: e3 };
            } finally {
              try {
                n && !n.done && (o2 = t2.return) && o2.call(t2);
              } finally {
                if (a)
                  throw a.error;
              }
            }
            return [2];
        }
      });
    });
  }, e.prototype.processAutoResendRegisteredPendingMessages = function() {
    return r(this, void 0, void 0, function() {
      var e2, t2, n, a, o2, c, l, f;
      return s(this, function(s2) {
        switch (s2.label) {
          case 0:
            return [4, this._fetchAllCachedPendingMessages()];
          case 1:
            e2 = s2.sent();
            try {
              for (t2 = o(e2), n = t2.next(); !n.done; n = t2.next())
                a = n.value, this._enableAutoResend && a.errorCode && O(a.errorCode) && (o2 = (/* @__PURE__ */ new Date()).getTime(), c = a.createdAt + 2592e5, this._enableAutoResend && o2 <= c ? this._autoResendQueue.map(function(e3) {
                  return e3.reqId;
                }).indexOf(a.reqId) < 0 && this._autoResendQueue.push(a) : (this._logger.debug("auto-resend registered pending messaged expired. expiration date: ", new Date(c).toLocaleString()), a.sendingStatus = Z.FAILED, this._dispatcher.dispatch(new po({ messages: [a], source: no.LOCAL_MESSAGE_FAILED }))));
            } catch (e3) {
              l = { error: e3 };
            } finally {
              try {
                n && !n.done && (f = t2.return) && f.call(t2);
              } finally {
                if (l)
                  throw l.error;
              }
            }
            return [2];
        }
      });
    });
  }, e.prototype.completeCurrentAndProcessNextAutoResend = function(e2) {
    if (this._localCacheEnabled && this._enableAutoResend && (e2.sendingStatus === Z.SUCCEEDED || e2.sendingStatus === Z.FAILED && !O(e2.errorCode))) {
      var t2 = this.indexOf(e2);
      t2 >= 0 && this._autoResendQueue.splice(t2, 1), 0 === t2 && this._processNextAutoResend();
    }
  }, e.prototype._fetchAllCachedPendingMessages = function() {
    return r(this, void 0, void 0, function() {
      var e2, t2;
      return s(this, function(n) {
        switch (n.label) {
          case 0:
            return e2 = Js.of(this._iid), (t2 = new qs()).replyType = Q.ALL, [4, e2.fetch({ sendingStatus: Z.PENDING, backward: true, filter: t2 })];
          case 1:
            return [2, n.sent()];
        }
      });
    });
  }, e.prototype.indexOf = function(e2) {
    return this._autoResendQueue.length > 0 ? this._autoResendQueue.map(function(e3) {
      return e3.reqId;
    }).indexOf(e2.reqId) : -1;
  }, e.prototype._isNotInQueue = function(e2) {
    return -1 === this._autoResendQueue.map(function(e3) {
      return e3.reqId;
    }).indexOf(e2.reqId);
  }, e.prototype._processNextAutoResend = function() {
    return r(this, void 0, void 0, function() {
      var e2;
      return s(this, function(t2) {
        if (this._localCacheEnabled && this._enableAutoResend && "foreground" === this._sdkState.appState)
          try {
            this._autoResendQueue.length > 0 ? (this._isProcessingAutoResend || (this._logger.debug("auto-resend queue started."), this._isProcessingAutoResend = true), e2 = this._autoResendQueue[0], this._dispatcher.dispatch(new y({ message: e2 })), this._logger.debug("processing auto-resend for message request id: ", e2.reqId)) : (this._logger.debug("auto-resend queue finished."), this._isProcessingAutoResend = false);
          } catch (e3) {
            this._logger.warn("process auto-resend error: ", e3), this._isProcessingAutoResend = false;
          }
        return [2];
      });
    });
  }, e;
}();
!function(e) {
  e[e.USER_BLOCK = 20001] = "USER_BLOCK", e[e.USER_UNBLOCK = 2e4] = "USER_UNBLOCK", e[e.FRIEND_DISCOVERED = 20900] = "FRIEND_DISCOVERED";
}(L || (L = {}));
var D;
var v = function() {
  function e(e2) {
    this.category = e2.cat, this.data = e2.data;
  }
  return e.getDataAsUserBlockEvent = function(e2, t2) {
    var n = t2.data, s2 = n.blocker, r2 = n.blockee;
    return { blocker: new ls(e2, s2), blockee: new ls(e2, r2) };
  }, e.getDataAsFriendDiscoveredEvent = function(e2, t2) {
    var n = t2.data.friend_discoveries;
    return { friendDiscoveries: Array.isArray(n) ? n.map(function(t3) {
      return new ls(e2, t3);
    }) : [] };
  }, e;
}();
var T = function(t2) {
  function n(e, n2) {
    var s2 = n2.userId, r2 = t2.call(this) || this;
    return r2._iid = e, r2.userId = s2, r2;
  }
  return t(n, t2), n;
}(re);
var S = function(t2) {
  function n() {
    return t2.call(this) || this;
  }
  return t(n, t2), n;
}(re);
var m = function(t2) {
  function n(e) {
    var n2 = e.configTs, s2 = t2.call(this) || this;
    return s2.configTs = n2, s2;
  }
  return t(n, t2), n;
}(re);
var O2 = function(t2) {
  function n(e, n2, s2) {
    var r2 = t2.call(this, e, "USEV", s2) || this;
    return r2.event = new v(s2), r2;
  }
  return t(n, t2), n;
}(ze);
var P = function(t2) {
  function n(e) {
    var n2 = e.appConfigsInfo, s2 = e.configTs, r2 = t2.call(this) || this;
    return r2.appConfigsInfo = {}, r2.configTs = 0, r2.appConfigsInfo = n2, r2.configTs = s2, r2;
  }
  return t(n, t2), n;
}(re);
!function(e) {
  e[e.IDLE = 0] = "IDLE", e[e.RUNNING = 1] = "RUNNING", e[e.END = 2] = "END";
}(D || (D = {}));
var w = function(t2) {
  function r2(e, n, s2, r3) {
    var i = t2.call(this) || this;
    return i._state = D.IDLE, i._retryCount = 0, i._retryLimit = 3, i.priority = 0, i._worker = n, i;
  }
  return t(r2, t2), Object.defineProperty(r2.prototype, "isIdle", { get: function() {
    return this._state === D.IDLE;
  }, enumerable: false, configurable: true }), Object.defineProperty(r2.prototype, "isRunning", { get: function() {
    return this._state === D.RUNNING;
  }, enumerable: false, configurable: true }), Object.defineProperty(r2.prototype, "isDone", { get: function() {
    return this._state === D.END;
  }, enumerable: false, configurable: true }), Object.defineProperty(r2.prototype, "retryCount", { get: function() {
    return this._retryCount;
  }, enumerable: false, configurable: true }), Object.defineProperty(r2.prototype, "retryLimit", { get: function() {
    return this._retryLimit;
  }, enumerable: false, configurable: true }), r2.prototype._run = function(e) {
    return r(this, void 0, void 0, function() {
      var t3, n;
      return s(this, function(s2) {
        switch (s2.label) {
          case 0:
            if (!this.isRunning)
              return [3, 4];
            s2.label = 1;
          case 1:
            return s2.trys.push([1, 3, , 4]), [4, this._worker(e)];
          case 2:
            return t3 = s2.sent(), this._retryCount = 0, this.dispatch("progress", t3), t3.hasNext ? this._run(t3.nextToken) : this.end(), [3, 4];
          case 3:
            return n = s2.sent(), this.dispatch("error", n), this._retryCount < this._retryLimit ? (this._retryCount++, this._run(e)) : this.stop(), [3, 4];
          case 4:
            return [2];
        }
      });
    });
  }, r2.prototype.start = function(e) {
    this.isIdle && (this._state = D.RUNNING, this._run(e));
  }, r2.prototype.stop = function() {
    this._state = D.IDLE, this.dispatch("stop");
  }, r2.prototype.end = function() {
    this._state = D.END, this.dispatch("end");
  }, r2;
}(ne);

export {
  E,
  C,
  R,
  L,
  b,
  y,
  N,
  v,
  T,
  S,
  m,
  O2 as O,
  P,
  w
};
//# sourceMappingURL=chunk-NLX4ICU2.js.map

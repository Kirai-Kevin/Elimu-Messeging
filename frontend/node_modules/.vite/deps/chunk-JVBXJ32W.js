import {
  C as C2,
  E,
  L,
  N,
  O,
  P,
  R,
  S as S2,
  T as T2,
  b as b2,
  m,
  v as v2,
  w,
  y
} from "./chunk-NLX4ICU2.js";
import {
  D as D2,
  H as H2,
  I,
  L as L2,
  M,
  T as T3,
  U,
  f,
  g,
  t as t2,
  v as v3,
  y as y2
} from "./chunk-YS32VLIJ.js";
import {
  At,
  De,
  En,
  Gn,
  Gs,
  Hr,
  Ii,
  In,
  Ir,
  It,
  Je,
  Js,
  Ke,
  Ks,
  Mr as Mr2,
  Nt,
  Os,
  Pe,
  Pr as Pr2,
  Pt,
  Qs,
  Re as Re2,
  St,
  Ti,
  Tn,
  Tr,
  Ut,
  Ve,
  Vs,
  Wr,
  Xr,
  Ye,
  Yr,
  Ze,
  Zs,
  _a,
  _n,
  _t,
  ar,
  bi,
  bn,
  da,
  dt,
  en,
  fi,
  hr,
  ht,
  ia,
  la,
  li,
  ln,
  lr,
  lt,
  nn,
  nr,
  pr,
  qs,
  qt,
  un,
  ur,
  vn,
  wt,
  xe,
  yt
} from "./chunk-TTFJWE4I.js";
import {
  $e,
  A,
  B,
  C,
  D,
  Dr,
  Eo,
  F,
  Fe,
  Fr,
  Ge,
  Gr,
  H,
  Jr,
  K,
  Me,
  Mr,
  Oo,
  Pr,
  Q,
  Qo,
  Re,
  Rr,
  S,
  So,
  T,
  To,
  V,
  Ws,
  Z,
  _,
  _e,
  a,
  ae,
  as,
  at,
  b,
  bo,
  c,
  cs,
  de,
  ee,
  fo,
  go,
  j,
  k,
  ko,
  kr,
  lo,
  ls,
  mo,
  ms,
  n,
  ne,
  no,
  o,
  oe,
  os,
  po,
  qe,
  r,
  re,
  s,
  se,
  t,
  u,
  ue,
  uo,
  ut,
  v,
  vo,
  wo,
  ws,
  ye,
  z,
  ze
} from "./chunk-KXGQOUB2.js";

// node_modules/@sendbird/chat/lib/__bundle-f45f0892.js
var Zt;
!function(e) {
  e.NONE = "none", e.JOINED = "joined", e.INVITED = "invited", e.LEFT = "left";
}(Zt || (Zt = {}));
var $t;
var en2;
var tn;
var nn2;
var sn;
var rn;
var an;
var on;
var un2 = function(i) {
  function o2(e, t3) {
    var n2 = i.call(this, e, t3) || this;
    return n2.state = null, n2.role = null, n2.isMuted = false, n2.isBlockedByMe = false, n2.isBlockingMe = false, n2.state = T(Zt, t3.state) ? t3.state : null, n2.role = T(V, t3.role) ? t3.role : null, "boolean" == typeof t3.is_muted && (n2.isMuted = t3.is_muted), "boolean" == typeof t3.is_blocked_by_me && (n2.isBlockedByMe = t3.is_blocked_by_me), "boolean" == typeof t3.is_blocking_me && (n2.isBlockingMe = t3.is_blocking_me), n2;
  }
  return t(o2, i), o2.payloadify = function(e) {
    return se(oe(n(n({}, i.payloadify.call(this, e)), { state: e.state, role: e.role, is_muted: e.isMuted, is_blocked_by_me: e.isBlockedByMe, is_blocking_me: e.isBlockingMe })));
  }, o2;
}(en);
var cn = function(t3) {
  function n2(e, n3) {
    var s2, r2, a2 = this;
    return (a2 = t3.call(this, e) || this).channelUrl = null !== (s2 = n3.channel_url) && void 0 !== s2 ? s2 : "", a2.channelType = null !== (r2 = n3.channel_type) && void 0 !== r2 ? r2 : H.GROUP, a2.member = new ls(a2._iid, n3.user), a2.deliveryAt = n3.ts, a2;
  }
  return t(n2, t3), n2;
}(Jr);
!function(e) {
  e.ALL = "all", e.PUBLIC = "public", e.PRIVATE = "private";
}($t || ($t = {})), function(e) {
  e.ALL = "all", e.JOINED = "joined_only", e.INVITED = "invited_only", e.INVITED_BY_FRIEND = "invited_by_friend", e.INVITED_BY_NON_FRIEND = "invited_by_non_friend";
}(en2 || (en2 = {})), function(e) {
  e.ALL = "all", e.SUPER = "super", e.NON_SUPER = "nonsuper", e.BROADCAST_ONLY = "broadcast_only", e.EXCLUSIVE_ONLY = "exclusive_only";
}(tn || (tn = {})), function(e) {
  e.ALL = "all", e.UNREAD_MESSAGE = "unread_message";
}(nn2 || (nn2 = {})), function(e) {
  e.ALL = "all", e.UNHIDDEN = "unhidden_only", e.HIDDEN = "hidden_only", e.HIDDEN_ALLOW_AUTO_UNHIDE = "hidden_allow_auto_unhide", e.HIDDEN_PREVENT_AUTO_UNHIDE = "hidden_prevent_auto_unhide";
}(sn || (sn = {})), function(e) {
  e.ALL = "all", e.OPERATOR = "operator", e.NONOPERATOR = "nonoperator";
}(rn || (rn = {})), function(e) {
  e.AND = "AND", e.OR = "OR";
}(an || (an = {})), function(e) {
  e.MEMBER_NICKNAME = "member_nickname", e.CHANNEL_NAME = "channel_name";
}(on || (on = {}));
var ln2;
var hn = function() {
  function e(e2) {
    var t3, n2, s2, r2, a2, i, o2, u2, c2, l, h, d, _2, p, f2;
    this._searchFilter = null, this._userIdsFilter = null, this.includeEmpty = null !== (t3 = null == e2 ? void 0 : e2.includeEmpty) && void 0 !== t3 && t3, this.nicknameContainsFilter = null !== (n2 = null == e2 ? void 0 : e2.nicknameContainsFilter) && void 0 !== n2 ? n2 : null, this.nicknameStartsWithFilter = null !== (s2 = null == e2 ? void 0 : e2.nicknameStartsWithFilter) && void 0 !== s2 ? s2 : null, this.nicknameExactMatchFilter = null !== (r2 = null == e2 ? void 0 : e2.nicknameExactMatchFilter) && void 0 !== r2 ? r2 : null, this.channelNameContainsFilter = null !== (a2 = null == e2 ? void 0 : e2.channelNameContainsFilter) && void 0 !== a2 ? a2 : "", this.myMemberStateFilter = null !== (i = null == e2 ? void 0 : e2.myMemberStateFilter) && void 0 !== i ? i : en2.ALL, this.customTypesFilter = null !== (o2 = null == e2 ? void 0 : e2.customTypesFilter) && void 0 !== o2 ? o2 : null, this.channelUrlsFilter = null !== (u2 = null == e2 ? void 0 : e2.channelUrlsFilter) && void 0 !== u2 ? u2 : null, this.superChannelFilter = null !== (c2 = null == e2 ? void 0 : e2.superChannelFilter) && void 0 !== c2 ? c2 : tn.ALL, this.publicChannelFilter = null !== (l = null == e2 ? void 0 : e2.publicChannelFilter) && void 0 !== l ? l : $t.ALL, this.customTypeStartsWithFilter = null !== (h = null == e2 ? void 0 : e2.customTypeStartsWithFilter) && void 0 !== h ? h : null, this.unreadChannelFilter = null !== (d = null == e2 ? void 0 : e2.unreadChannelFilter) && void 0 !== d ? d : nn2.ALL, this.hiddenChannelFilter = null !== (_2 = null == e2 ? void 0 : e2.hiddenChannelFilter) && void 0 !== _2 ? _2 : sn.UNHIDDEN, this.includeFrozen = null === (p = null == e2 ? void 0 : e2.includeFrozen) || void 0 === p || p, (null == e2 ? void 0 : e2.createdAfter) && (this.createdAfter = e2.createdAfter), (null == e2 ? void 0 : e2.createdBefore) && (this.createdBefore = e2.createdBefore), this.includeMetaData = null === (f2 = null == e2 ? void 0 : e2.includeMetaData) || void 0 === f2 || f2;
  }
  return e.prototype._isFriend = function(e2) {
    return !(!e2 || !e2.friendDiscoveryKey && !e2.friendName);
  }, Object.defineProperty(e.prototype, "searchFilter", { get: function() {
    return this._searchFilter;
  }, enumerable: false, configurable: true }), e.prototype.setSearchFilter = function(e2, t3) {
    Array.isArray(e2) && 0 !== e2.length && "string" == typeof t3 && t3 && (this._searchFilter = { query: t3, fields: e2 });
  }, Object.defineProperty(e.prototype, "userIdsFilter", { get: function() {
    return this._userIdsFilter;
  }, enumerable: false, configurable: true }), e.prototype.setUserIdsFilter = function(e2, t3, n2) {
    void 0 === n2 && (n2 = an.AND), this._userIdsFilter = { userIds: e2, includeMode: t3, queryType: n2 };
  }, e.prototype.clone = function() {
    var t3, n2 = new e();
    this.searchFilter && n2.setSearchFilter(this.searchFilter.fields, null !== (t3 = this.searchFilter.query) && void 0 !== t3 ? t3 : void 0), this.userIdsFilter && n2.setUserIdsFilter(this.userIdsFilter.userIds, this.userIdsFilter.includeMode, this.userIdsFilter.queryType);
    var s2 = JSON.parse(JSON.stringify(this));
    return Object.keys(s2).forEach(function(e2) {
      n2[e2] = s2[e2];
    }), n2;
  }, e.prototype.match = function(e2, t3) {
    if (this._searchFilter) {
      var n2 = this._searchFilter, s2 = n2.query, r2 = n2.fields;
      if (s2 && r2 && r2.length > 0 && !r2.some(function(t4) {
        switch (t4) {
          case on.CHANNEL_NAME:
            return e2.name.toLowerCase().includes(s2.toLowerCase());
          case on.MEMBER_NICKNAME:
            return e2.members.some(function(e3) {
              return e3.nickname.toLowerCase().includes(s2.toLowerCase());
            });
          default:
            return true;
        }
      }))
        return false;
    }
    if (this._userIdsFilter) {
      var a2 = this._userIdsFilter, i = a2.userIds, o2 = a2.includeMode, u2 = a2.queryType, l = e2.members.map(function(e3) {
        return e3.userId;
      });
      if (o2) {
        if (i.length > 0)
          switch (u2) {
            case an.AND:
              if (i.some(function(e3) {
                return !l.includes(e3);
              }))
                return false;
              break;
            case an.OR:
              if (i.every(function(e3) {
                return !l.includes(e3);
              }))
                return false;
          }
      } else {
        if (i.includes(t3) || i.push(t3), e2.members.length > i.length)
          return false;
        if (!D(i, l))
          return false;
      }
    }
    if (!this.includeEmpty && !e2.lastMessage)
      return false;
    if (!this.includeFrozen && e2.isFrozen)
      return false;
    if (this.customTypesFilter && this.customTypesFilter.length > 0 && !this.customTypesFilter.includes("*") && !this.customTypesFilter.includes(e2.customType))
      return false;
    if (this.customTypeStartsWithFilter && !new RegExp("^".concat(this.customTypeStartsWithFilter)).test(e2.customType))
      return false;
    if (this.channelNameContainsFilter && !e2.name.toLowerCase().includes(this.channelNameContainsFilter.toLowerCase()))
      return false;
    if (this.nicknameContainsFilter) {
      var h = this.nicknameContainsFilter.toLowerCase();
      if (!e2.members.some(function(e3) {
        return e3.userId !== t3 && e3.nickname.toLowerCase().includes(h);
      }))
        return false;
    }
    if (this.nicknameStartsWithFilter) {
      var d = this.nicknameStartsWithFilter.toLowerCase();
      if (!e2.members.some(function(e3) {
        return e3.userId !== t3 && e3.nickname.toLowerCase().startsWith(d);
      }))
        return false;
    }
    if (this.nicknameExactMatchFilter) {
      var _2 = this.nicknameExactMatchFilter.toLowerCase();
      if (!e2.members.some(function(e3) {
        return e3.userId !== t3 && e3.nickname.toLowerCase() != _2;
      }))
        return false;
    }
    if (this.channelUrlsFilter && this.channelUrlsFilter.length > 0 && !this.channelUrlsFilter.includes(e2.url))
      return false;
    if (this.myMemberStateFilter)
      switch (this.myMemberStateFilter) {
        case en2.ALL:
          if ("none" === e2.myMemberState)
            return false;
          break;
        case en2.JOINED:
          if ("joined" !== e2.myMemberState)
            return false;
          break;
        case en2.INVITED:
          if ("invited" !== e2.myMemberState)
            return false;
          break;
        case en2.INVITED_BY_FRIEND:
          if ("invited" !== e2.myMemberState || !this._isFriend(e2.inviter))
            return false;
          break;
        case en2.INVITED_BY_NON_FRIEND:
          if ("invited" !== e2.myMemberState || this._isFriend(e2.inviter))
            return false;
      }
    if (this.hiddenChannelFilter)
      switch (this.hiddenChannelFilter) {
        case sn.UNHIDDEN:
          if (e2.isHidden || "unhidden" !== e2.hiddenState)
            return false;
          break;
        case sn.HIDDEN:
          if (!e2.isHidden)
            return false;
          break;
        case sn.HIDDEN_ALLOW_AUTO_UNHIDE:
          if (!e2.isHidden || "hidden_allow_auto_unhide" !== e2.hiddenState)
            return false;
          break;
        case sn.HIDDEN_PREVENT_AUTO_UNHIDE:
          if (!e2.isHidden || "hidden_prevent_auto_unhide" !== e2.hiddenState)
            return false;
      }
    if (this.unreadChannelFilter && this.unreadChannelFilter === nn2.UNREAD_MESSAGE) {
      if (0 === e2.unreadMessageCount)
        return false;
    }
    if (this.publicChannelFilter)
      switch (this.publicChannelFilter) {
        case $t.PUBLIC:
          if (!e2.isPublic)
            return false;
          break;
        case $t.PRIVATE:
          if (e2.isPublic)
            return false;
      }
    if (this.superChannelFilter)
      switch (this.superChannelFilter) {
        case tn.SUPER:
          if (!e2.isSuper)
            return false;
          break;
        case tn.NON_SUPER:
          if (e2.isSuper)
            return false;
      }
    return !(this.createdAfter && e2.createdAt < this.createdAfter) && !(this.createdBefore && e2.createdAt > this.createdBefore);
  }, e;
}();
var dn = function(t3) {
  function n2(e, n3) {
    var s2 = n3.sdkState, r2 = n3.cacheContext, a2 = t3.call(this, e) || this;
    return a2._channels = /* @__PURE__ */ new Map(), a2._sdkState = s2, a2._cacheContext = r2, a2;
  }
  return t(n2, t3), Object.defineProperty(n2.prototype, "collection", { get: function() {
    var e = this._cacheContext.nestdb;
    return cs(!!e).throw(b.databaseError), e.collection(Yr);
  }, enumerable: false, configurable: true }), Object.defineProperty(n2.prototype, "localCacheEnabled", { get: function() {
    return this._cacheContext.localCacheEnabled && !!this.collection;
  }, enumerable: false, configurable: true }), n2.prototype._serialize = function(e, t4) {
    return void 0 === t4 && (t4 = 0), n(n({}, e.serialize()), { lastMessageUpdatedAt: e.lastMessage ? e.lastMessage.createdAt : 0, syncIndex: t4 });
  }, n2.prototype._deserialize = function(e) {
    return ys.of(this._iid).buildGroupChannelFromSerializedData(e);
  }, Object.defineProperty(n2.prototype, "channels", { get: function() {
    return c([], a(this._channels.values()), false);
  }, enumerable: false, configurable: true }), n2.prototype.isCachedInMemory = function(e) {
    return this._channels.has(e);
  }, n2.prototype.filterOffsetChanged = function(e) {
    var t4 = this;
    return e.filter(function(e2) {
      if (t4._channels.has(e2.url))
        return t4._channels.get(e2.url).messageOffsetTimestamp < e2.messageOffsetTimestamp;
    });
  }, n2.prototype.get = function(e) {
    return r(this, void 0, void 0, function() {
      var t4, n3;
      return s(this, function(s2) {
        switch (s2.label) {
          case 0:
            return this._channels.has(e) ? [3, 3] : this.localCacheEnabled ? [4, this.collection.getByKey(e)] : [3, 2];
          case 1:
            if (t4 = s2.sent())
              return n3 = this._deserialize(t4), this._channels.set(e, n3), [2, n3];
            s2.label = 2;
          case 2:
            return [2, void 0];
          case 3:
            return [2, this._channels.get(e)];
        }
      });
    });
  }, n2.prototype.fetch = function(e) {
    var t4 = e.token, n3 = e.limit, s2 = void 0 === n3 ? Wr : n3, r2 = e.backward, a2 = void 0 !== r2 && r2, i = e.filter, o2 = void 0 === i ? new hn() : i, u2 = e.order, c2 = void 0 === u2 ? E.LATEST_LAST_MESSAGE : u2, l = e.borderlineChannelUrl;
    return r(this, void 0, void 0, function() {
      var e2, n4, r3, i2, u3, h = this;
      return s(this, function(d) {
        switch (d.label) {
          case 0:
            return this.localCacheEnabled ? (e2 = !!l, n4 = b2(c2), r3 = { where: function(n5) {
              if (t4)
                switch (c2) {
                  case E.CHANNEL_NAME_ALPHABETICAL:
                    if (!a2 && n5.name.localeCompare(t4) < 0 || a2 && n5.name.localeCompare(t4) > 0)
                      return false;
                    break;
                  case E.CHRONOLOGICAL:
                    if (!a2 && n5.createdAt > t4 || a2 && n5.createdAt < t4)
                      return false;
                    break;
                  case E.LATEST_LAST_MESSAGE:
                    if (!a2 && n5.lastMessageUpdatedAt > t4 || a2 && n5.lastMessageUpdatedAt < t4)
                      return false;
                }
              return e2 && l && l === n5.url ? (e2 = false, false) : !e2 && o2.match(h._deserialize(n5), h._sdkState.userId);
            }, index: n4, backward: a2 }, [4, this.collection.query(r3)]) : [3, 3];
          case 1:
            return [4, d.sent().fetch({ limit: s2 })];
          case 2:
            return i2 = d.sent(), (u3 = i2.map(function(e3) {
              return h._deserialize(e3);
            })).forEach(function(e3) {
              !o2.includeMetaData && e3.cachedMetaData && e3._clearCachedMetaData(), h._channels.has(e3.url) || h._channels.set(e3.url, e3);
            }), [2, u3];
          case 3:
            return [2, []];
        }
      });
    });
  }, n2.prototype.upsert = function(e, t4) {
    return r(this, void 0, void 0, function() {
      var n3, s2, r2, a2 = this;
      return s(this, function(i) {
        switch (i.label) {
          case 0:
            if (n3 = [], e.forEach(function(e2) {
              if (a2._channels.has(e2.url)) {
                var s3 = a2._channels.get(e2.url);
                if (s3._pinnedMessagesUpdatedAt < e2._pinnedMessagesUpdatedAt && (s3._pinnedMessagesUpdatedAt = e2._pinnedMessagesUpdatedAt), s3._messageCollectionLastAccessedAt > e2._messageCollectionLastAccessedAt && (e2._messageCollectionLastAccessedAt = s3._messageCollectionLastAccessedAt), e2.cachedMetaData instanceof Map && e2.cachedMetaData.size > 0 && t4)
                  s3._updateCachedMetaData(e2.cachedMetaData, t4).isUpdated || Object.assign(e2, { _cachedMetaData: s3.cachedMetaData });
                s3._update(e2), n3.push(s3);
              } else
                a2._channels.set(e2.url, e2), n3.push(e2);
            }), !this.localCacheEnabled)
              return [3, 2];
            for (s2 = [], r2 = 0; r2 < n3.length; r2++)
              s2.push(this._serialize(n3[r2], r2));
            return [4, this.collection.upsertMany(s2)];
          case 1:
            i.sent(), i.label = 2;
          case 2:
            return [2, n3];
        }
      });
    });
  }, n2.prototype.remove = function(e) {
    return r(this, void 0, void 0, function() {
      var t4, n3, s2, r2, a2, i;
      return s(this, function(o2) {
        switch (o2.label) {
          case 0:
            o2.trys.push([0, 5, 6, 7]), t4 = o(e), n3 = t4.next(), o2.label = 1;
          case 1:
            return n3.done ? [3, 4] : (s2 = n3.value, this._channels.delete(s2), this.localCacheEnabled ? [4, this.collection.remove(s2)] : [3, 3]);
          case 2:
            o2.sent(), o2.label = 3;
          case 3:
            return n3 = t4.next(), [3, 1];
          case 4:
            return [3, 7];
          case 5:
            return r2 = o2.sent(), a2 = { error: r2 }, [3, 7];
          case 6:
            try {
              n3 && !n3.done && (i = t4.return) && i.call(t4);
            } finally {
              if (a2)
                throw a2.error;
            }
            return [7];
          case 7:
            return [2];
        }
      });
    });
  }, n2.prototype.clear = function() {
    return r(this, void 0, void 0, function() {
      return s(this, function(e) {
        switch (e.label) {
          case 0:
            return this.clearMemoryCache(), this.localCacheEnabled ? [4, this.collection.clear()] : [3, 2];
          case 1:
            e.sent(), e.label = 2;
          case 2:
            return [2];
        }
      });
    });
  }, n2.prototype.clearMemoryCache = function() {
    this._channels.clear();
  }, n2.prototype._setBlockStateOfAllChannels = function(e, t4, n3) {
    return r(this, void 0, void 0, function() {
      var s2, r2, a2, i, o2, u2, c2, l, h, d, _2, p, m2, g2, E2, C3, y3, M2, b3;
      return s(this, function(f2) {
        switch (f2.label) {
          case 0:
            if (s2 = [], e === this._sdkState.userId)
              try {
                for (r2 = o(this._channels.values()), a2 = r2.next(); !a2.done; a2 = r2.next()) {
                  l = a2.value;
                  try {
                    for (g2 = void 0, i = o(l.members), o2 = i.next(); !o2.done; o2 = i.next())
                      if ((_2 = o2.value).userId === t4) {
                        _2.isBlockedByMe = n3, s2.push(l);
                        break;
                      }
                  } catch (e2) {
                    g2 = { error: e2 };
                  } finally {
                    try {
                      o2 && !o2.done && (E2 = i.return) && E2.call(i);
                    } finally {
                      if (g2)
                        throw g2.error;
                    }
                  }
                }
              } catch (e2) {
                p = { error: e2 };
              } finally {
                try {
                  a2 && !a2.done && (m2 = r2.return) && m2.call(r2);
                } finally {
                  if (p)
                    throw p.error;
                }
              }
            else if (t4 === this._sdkState.userId)
              try {
                for (u2 = o(this._channels.values()), c2 = u2.next(); !c2.done; c2 = u2.next()) {
                  l = c2.value;
                  try {
                    for (M2 = void 0, h = o(l.members), d = h.next(); !d.done; d = h.next())
                      if ((_2 = d.value).userId === e) {
                        _2.isBlockingMe = n3, s2.push(l);
                        break;
                      }
                  } catch (e2) {
                    M2 = { error: e2 };
                  } finally {
                    try {
                      d && !d.done && (b3 = h.return) && b3.call(h);
                    } finally {
                      if (M2)
                        throw M2.error;
                    }
                  }
                }
              } catch (e2) {
                C3 = { error: e2 };
              } finally {
                try {
                  c2 && !c2.done && (y3 = u2.return) && y3.call(u2);
                } finally {
                  if (C3)
                    throw C3.error;
                }
              }
            return s2.length > 0 ? [4, this.upsert(s2)] : [3, 2];
          case 1:
            f2.sent(), f2.label = 2;
          case 2:
            return [2];
        }
      });
    });
  }, n2.prototype.block = function(e, t4) {
    return r(this, void 0, void 0, function() {
      return s(this, function(n3) {
        switch (n3.label) {
          case 0:
            return [4, this._setBlockStateOfAllChannels(e, t4, true)];
          case 1:
            return n3.sent(), [2];
        }
      });
    });
  }, n2.prototype.unblock = function(e, t4) {
    return r(this, void 0, void 0, function() {
      return s(this, function(n3) {
        switch (n3.label) {
          case 0:
            return [4, this._setBlockStateOfAllChannels(e, t4, false)];
          case 1:
            return n3.sent(), [2];
        }
      });
    });
  }, n2.prototype.markAsRead = function(e, t4) {
    return void 0 === t4 && (t4 = c([], a(this._channels.keys()), false)), r(this, void 0, void 0, function() {
      var n3, s2, r2, a2, i, o2, u2, c2;
      return s(this, function(l) {
        switch (l.label) {
          case 0:
            n3 = [], l.label = 1;
          case 1:
            l.trys.push([1, 6, 7, 8]), s2 = o(t4), r2 = s2.next(), l.label = 2;
          case 2:
            return r2.done ? [3, 5] : (a2 = r2.value, [4, this.get(a2)]);
          case 3:
            (null == (i = l.sent()) ? void 0 : i._updateUnreadMemberState(this._sdkState.userId, e)) && (i._updateUnreadCount(0, 0), n3.push(i)), l.label = 4;
          case 4:
            return r2 = s2.next(), [3, 2];
          case 5:
            return [3, 8];
          case 6:
            return o2 = l.sent(), u2 = { error: o2 }, [3, 8];
          case 7:
            try {
              r2 && !r2.done && (c2 = s2.return) && c2.call(s2);
            } finally {
              if (u2)
                throw u2.error;
            }
            return [7];
          case 8:
            return n3.length > 0 ? [4, this.upsert(n3)] : [3, 10];
          case 9:
            l.sent(), l.label = 10;
          case 10:
            return [2];
        }
      });
    });
  }, n2;
}(Jr);
var _n2 = { invitedUserIds: void 0, channelUrl: void 0, coverUrl: void 0, coverImage: void 0, isDistinct: void 0, isSuper: void 0, isBroadcast: void 0, isExclusive: void 0, isPublic: void 0, isDiscoverable: void 0, isStrict: void 0, isEphemeral: void 0, accessCode: void 0, name: void 0, data: void 0, customType: void 0, operatorUserIds: void 0, messageSurvivalSeconds: void 0 };
var pn = function(e) {
  return C("string", e.invitedUserIds, true) && S("string", e.channelUrl, true) && S("string", e.coverUrl, true) && (k(e.coverImage) || S("string", e.coverImage, true)) && S("boolean", e.isDistinct, true) && S("boolean", e.isSuper, true) && S("boolean", e.isBroadcast, true) && S("boolean", e.isExclusive, true) && S("boolean", e.isPublic, true) && S("boolean", e.isStrict, true) && S("boolean", e.isDiscoverable, true) && S("boolean", e.isEphemeral, true) && S("string", e.accessCode, true) && S("string", e.name, true) && S("string", e.data, true) && S("string", e.customType, true) && C("string", e.operatorUserIds, true) && S("number", e.messageSurvivalSeconds, true);
};
var fn = { customTypes: void 0, includeEmpty: false, includeFrozen: true, includeMetaData: true, includeChatNotification: false };
var vn2 = function(e) {
  return C("string", e.customTypes, true) && S("boolean", e.includeEmpty, true) && S("boolean", e.includeFrozen, true) && S("boolean", e.includeMetaData, true) && S("boolean", e.includeChatNotification, true);
};
var mn = { myMemberStateFilter: en2.ALL };
var gn = function(e) {
  return T(en2, e.myMemberStateFilter);
};
!function(e) {
  e.GROUP_CHANNEL_UNREAD_MENTION_COUNT = "group_channel_unread_mention_count", e.NONSUPER_UNREAD_MENTION_COUNT = "non_super_group_channel_unread_mention_count", e.SUPER_UNREAD_MENTION_COUNT = "super_group_channel_unread_mention_count", e.GROUP_CHANNEL_UNREAD_MESSAGE_COUNT = "group_channel_unread_message_count", e.NONSUPER_UNREAD_MESSAGE_COUNT = "non_super_group_channel_unread_message_count", e.SUPER_UNREAD_MESSAGE_COUNT = "super_group_channel_unread_message_count", e.GROUP_CHANNEL_INVITATION_COUNT = "group_channel_invitation_count", e.NONSUPER_INVITATION_COUNT = "non_super_group_channel_invitation_count", e.SUPER_INVITATION_COUNT = "super_group_channel_invitation_count";
}(ln2 || (ln2 = {}));
var En2 = { keys: [ln2.GROUP_CHANNEL_UNREAD_MENTION_COUNT, ln2.NONSUPER_UNREAD_MENTION_COUNT, ln2.SUPER_UNREAD_MENTION_COUNT, ln2.GROUP_CHANNEL_UNREAD_MESSAGE_COUNT, ln2.NONSUPER_UNREAD_MESSAGE_COUNT, ln2.SUPER_UNREAD_MESSAGE_COUNT, ln2.GROUP_CHANNEL_INVITATION_COUNT, ln2.NONSUPER_INVITATION_COUNT, ln2.SUPER_INVITATION_COUNT], customTypeFilters: void 0, customTypesFilter: void 0 };
var Cn = { channelCustomTypesFilter: void 0, superChannelFilter: tn.ALL };
var yn = function(e) {
  return C("string", e.channelCustomTypesFilter, true) && T(tn, e.superChannelFilter);
};
var Mn = { channelUrl: void 0, scheduledStatus: void 0, messageTypeFilter: j.ALL };
var bn2 = n({}, no);
var Nn = function(e) {
  return e.startsWith("EVENT_") || e === no.SYNC_CHANNEL_CHANGELOGS || e === no.REFRESH_CHANNEL;
};
var Un = function(t3) {
  function n2(e) {
    var n3 = e.channels, s2 = e.context, r2 = e.isWebSocketEventComing, a2 = void 0 !== r2 && r2, i = e.ts, o2 = t3.call(this) || this;
    return o2.channels = n3, o2.context = s2, o2.isWebSocketEventComing = a2, o2.ts = i, o2;
  }
  return t(n2, t3), n2;
}(re);
var Sn = function(t3) {
  function n2(e) {
    var n3 = e.channelUrls, s2 = e.context, r2 = e.isWebSocketEventComing, a2 = void 0 !== r2 && r2, i = t3.call(this) || this;
    return i.channelUrls = n3, i.context = s2, i.isWebSocketEventComing = a2, i;
  }
  return t(n2, t3), n2;
}(re);
var Tn2 = function(t3) {
  function n2(e) {
    var n3 = e.channel, s2 = t3.call(this) || this;
    return s2.channel = n3, s2;
  }
  return t(n2, t3), n2;
}(re);
var An = function() {
  function e(e2) {
    var t3 = e2.groupChannelCache, n2 = e2.userInfoCache, s2 = e2.messageCache, r2 = e2.unsentMessageCache, a2 = e2.dispatcher, i = this;
    this._observers = /* @__PURE__ */ new Map(), a2.on(function(e3) {
      return r(i, void 0, void 0, function() {
        var a3, i2, o2, u2, c2, l, h, d, _2, m2, g2, E2, C3, M2, N2, U2, S3, T4, A2 = this;
        return s(this, function(I2) {
          switch (I2.label) {
            case 0:
              if (!(e3 instanceof Un))
                return [3, 19];
              if (a3 = e3.channels, C3 = e3.context, M2 = e3.isWebSocketEventComing, i2 = a3.filter(function(e4) {
                return e4 instanceof fr;
              }), C3.source !== no.EVENT_CHANNEL_RESET_HISTORY && C3.source !== no.EVENT_CHANNEL_HIDDEN)
                return [3, 9];
              I2.label = 1;
            case 1:
              I2.trys.push([1, 6, 7, 8]), o2 = o(i2), u2 = o2.next(), I2.label = 2;
            case 2:
              return u2.done ? [3, 5] : (_2 = u2.value, [4, s2.removeUnderOffset(_2.url, _2.messageOffsetTimestamp)]);
            case 3:
              I2.sent(), I2.label = 4;
            case 4:
              return u2 = o2.next(), [3, 2];
            case 5:
              return [3, 8];
            case 6:
              return c2 = I2.sent(), N2 = { error: c2 }, [3, 8];
            case 7:
              try {
                u2 && !u2.done && (U2 = o2.return) && U2.call(o2);
              } finally {
                if (N2)
                  throw N2.error;
              }
              return [7];
            case 8:
              return [3, 17];
            case 9:
              l = t3.filterOffsetChanged(i2), I2.label = 10;
            case 10:
              I2.trys.push([10, 15, 16, 17]), h = o(l), d = h.next(), I2.label = 11;
            case 11:
              return d.done ? [3, 14] : (_2 = d.value, [4, s2.removeUnderOffset(_2.url, _2.messageOffsetTimestamp)]);
            case 12:
              I2.sent(), I2.label = 13;
            case 13:
              return d = h.next(), [3, 11];
            case 14:
              return [3, 17];
            case 15:
              return m2 = I2.sent(), S3 = { error: m2 }, [3, 17];
            case 16:
              try {
                d && !d.done && (T4 = h.return) && T4.call(h);
              } finally {
                if (S3)
                  throw S3.error;
              }
              return [7];
            case 17:
              return [4, t3.upsert(i2, e3.ts)];
            case 18:
              return g2 = I2.sent(), M2 || this._broadcastUpdateEvent(g2, C3), [3, 25];
            case 19:
              return e3 instanceof Sn ? (E2 = e3.channelUrls, C3 = e3.context, M2 = e3.isWebSocketEventComing, [4, t3.remove(E2)]) : [3, 22];
            case 20:
              return I2.sent(), [4, Dr(function() {
                return r(A2, void 0, void 0, function() {
                  var e4, t4, n3, a4, i3, o3;
                  return s(this, function(u3) {
                    switch (u3.label) {
                      case 0:
                        u3.trys.push([0, 6, 7, 8]), e4 = o(E2), t4 = e4.next(), u3.label = 1;
                      case 1:
                        return t4.done ? [3, 5] : (n3 = t4.value, [4, s2.removeMessagesOfChannel(n3)]);
                      case 2:
                        return u3.sent(), [4, r2.removeMessagesOfChannel(n3)];
                      case 3:
                        u3.sent(), u3.label = 4;
                      case 4:
                        return t4 = e4.next(), [3, 1];
                      case 5:
                        return [3, 8];
                      case 6:
                        return a4 = u3.sent(), i3 = { error: a4 }, [3, 8];
                      case 7:
                        try {
                          t4 && !t4.done && (o3 = e4.return) && o3.call(e4);
                        } finally {
                          if (i3)
                            throw i3.error;
                        }
                        return [7];
                      case 8:
                        return [2];
                    }
                  });
                });
              })];
            case 21:
              return I2.sent(), M2 || this._broadcastRemoveEvent(E2, C3), [3, 25];
            case 22:
              return e3 instanceof T2 ? [4, t3.fetch({ token: Number.MAX_SAFE_INTEGER, limit: Number.MAX_SAFE_INTEGER })] : [3, 25];
            case 23:
              return I2.sent(), [4, n2.fetch({ limit: Number.MAX_SAFE_INTEGER })];
            case 24:
              I2.sent(), I2.label = 25;
            case 25:
              return [2];
          }
        });
      });
    });
  }
  return e.prototype._broadcastUpdateEvent = function(e2, t3) {
    var n2, s2;
    try {
      for (var r2 = o(this._observers.values()), a2 = r2.next(); !a2.done; a2 = r2.next()) {
        var i = a2.value;
        i.onUpdate && i.onUpdate(e2, t3);
      }
    } catch (e3) {
      n2 = { error: e3 };
    } finally {
      try {
        a2 && !a2.done && (s2 = r2.return) && s2.call(r2);
      } finally {
        if (n2)
          throw n2.error;
      }
    }
  }, e.prototype._broadcastRemoveEvent = function(e2, t3) {
    var n2, s2;
    try {
      for (var r2 = o(this._observers.values()), a2 = r2.next(); !a2.done; a2 = r2.next()) {
        var i = a2.value;
        i.onRemove && i.onRemove(e2, t3);
      }
    } catch (e3) {
      n2 = { error: e3 };
    } finally {
      try {
        a2 && !a2.done && (s2 = r2.return) && s2.call(r2);
      } finally {
        if (n2)
          throw n2.error;
      }
    }
  }, e.prototype.subscribe = function(e2, t3) {
    this._observers.set(e2, t3);
  }, e.prototype.unsubscribe = function(e2) {
    this._observers.delete(e2);
  }, e.prototype.unsubscribeAll = function() {
    this._observers.clear();
  }, e;
}();
var In2 = function(r2) {
  function a2(e) {
    var a3 = e.userId, i = e.ts, o2 = e.token, u2 = e.filter, c2 = e.includeChatNotification, l = void 0 !== c2 && c2, h = r2.call(this) || this, d = n(n({}, fn), u2), _2 = d.customTypes, p = d.includeEmpty, f2 = d.includeFrozen;
    return h.method = ae.GET, h.path = "".concat(ue, "/").concat(encodeURIComponent(a3), "/my_group_channels/changelogs"), h.params = se(oe({ show_delivery_receipt: true, show_member: true, show_read_receipt: true, change_ts: i || null, token: o2, custom_types: _2, show_empty: p, show_frozen: f2, include_chat_notification: l })), h;
  }
  return t(a2, r2), a2;
}(Fe);
var wn = function(t3) {
  function n2(e, n3) {
    var s2 = t3.call(this, e, n3) || this;
    return s2.updatedChannels = n3.updated.map(function(t4) {
      return new fr(e, Object.assign(t4, { ts: n3.ts }));
    }), s2.deletedChannelUrls = n3.deleted, s2.hasMore = n3.has_more, s2.token = n3.next, s2.ts = n3.ts, s2;
  }
  return t(n2, t3), n2;
}(qe);
var Ln = function(t3) {
  function n2(e) {
    var n3 = e.channelUrl, s2 = e.isInternalCall, r2 = e.showLatestMessage, a2 = t3.call(this) || this;
    return a2.method = ae.GET, a2.path = "".concat(s2 ? _e : de, "/").concat(encodeURIComponent(n3)), a2.params = { show_member: true, show_read_receipt: true, show_delivery_receipt: true, show_latest_message: null != r2 && r2 }, a2;
  }
  return t(n2, t3), n2;
}(Fe);
var Dn = function(t3) {
  function n2(e, n3) {
    var s2 = t3.call(this, e, n3) || this;
    return s2.channel = new fr(e, n3), s2;
  }
  return t(n2, t3), n2;
}(qe);
var xn = { includeEmpty: false, includeFrozen: true, includeMetaData: true, includeChatNotification: false, channelUrlsFilter: void 0, customTypesFilter: void 0, customTypeStartsWithFilter: void 0, nicknameContainsFilter: void 0, nicknameStartsWithFilter: void 0, nicknameExactMatchFilter: void 0, channelNameContainsFilter: void 0, myMemberStateFilter: en2.ALL, unreadChannelFilter: nn2.ALL, superChannelFilter: tn.ALL, publicChannelFilter: $t.ALL, hiddenChannelFilter: sn.ALL, userIdsFilter: { userIds: [], includeMode: true, queryType: an.AND }, searchFilter: { query: void 0, fields: [] }, metadataKey: void 0, metadataValues: void 0, metadataOrderKeyFilter: void 0, metadataValueStartsWith: void 0, order: E.LATEST_LAST_MESSAGE, createdAfter: void 0, createdBefore: void 0 };
var Rn = function(n2) {
  function s2(e) {
    var s3 = this, r2 = e.userId, a2 = e.token, i = e.limit, o2 = e.order, u2 = e.includeEmpty, c2 = e.myMemberStateFilter, l = e.superChannelFilter, h = e.publicChannelFilter, d = e.unreadChannelFilter, _2 = e.nicknameContainsFilter, p = e.nicknameStartsWithFilter, f2 = e.nicknameExactMatchFilter, v4 = e.channelNameContainsFilter, m2 = e.channelUrlsFilter, g2 = e.customTypesFilter, E2 = e.customTypeStartsWithFilter, C3 = e.hiddenChannelFilter, y3 = e.metadataOrderKeyFilter, M2 = e.metadataKey, b3 = e.metadataValues, S3 = e.metadataValueStartsWith, T4 = e.includeFrozen, A2 = e.includeMetaData, I2 = e.searchFilter, w2 = e.userIdsFilter, L3 = e.includeChatNotification, D3 = void 0 !== L3 && L3, x = e.includeLeftChannel, R2 = void 0 !== x && x, F2 = e.createdAfter, k2 = e.createdBefore;
    return (s3 = n2.call(this) || this).method = ae.GET, s3.path = "".concat(ue, "/").concat(encodeURIComponent(r2), "/my_group_channels"), s3.params = se({ token: a2, limit: i, order: null != o2 ? o2 : xn.order, show_member: true, show_read_receipt: true, show_delivery_receipt: true, show_empty: null != u2 ? u2 : xn.includeEmpty, member_state_filter: null != c2 ? c2 : xn.myMemberStateFilter, super_mode: null != l ? l : xn.superChannelFilter, public_mode: null != h ? h : xn.publicChannelFilter, unread_filter: null != d ? d : xn.unreadChannelFilter, members_nickname_contains: _2, members_nickname_startswith: p, members_nickname: f2, name_contains: v4, channel_urls: m2, custom_types: g2, custom_type_startswith: E2, hidden_mode: C3, metadata_order_key: y3, metadata_key: M2, metadata_values: b3, metadata_value_startswith: S3, show_frozen: T4, show_metadata: A2, include_chat_notification: D3, include_left_channel: R2, created_after: F2, created_before: k2 }), I2 && I2.query && I2.fields && (s3.params.search_query = I2.query, s3.params.search_fields = I2.fields), w2 && w2.userIds && w2.userIds.length > 0 && (w2.includeMode ? (s3.params.members_include_in = w2.userIds, s3.params.query_type = w2.queryType.toUpperCase()) : s3.params.members_exactly_in = w2.userIds), s3;
  }
  return t(s2, n2), s2;
}(Fe);
var Fn = function(t3) {
  function n2(e, n3) {
    var s2 = t3.call(this, e, n3) || this;
    s2.channels = [];
    var r2 = n3.next, a2 = n3.channels, i = n3.ts;
    return s2.token = r2, a2 && a2.length > 0 && (s2.channels = a2.map(function(t4) {
      return t4.ts = i, new fr(e, t4);
    })), s2.ts = null != i ? i : 0, s2;
  }
  return t(n2, t3), n2;
}(qe);
var kn = function(t3) {
  function n2(e) {
    var n3 = e.userId, s2 = e.filter, r2 = t3.call(this) || this, a2 = s2.myMemberStateFilter;
    return r2.method = ae.GET, r2.path = "".concat(ue, "/").concat(encodeURIComponent(n3), "/group_channel_count"), r2.params = { state: null != a2 ? a2 : en2.ALL }, r2;
  }
  return t(n2, t3), n2;
}(Fe);
var Pn = function(t3) {
  function n2(e, n3) {
    var s2 = t3.call(this, e, n3) || this;
    return s2.groupChannelCount = n3.group_channel_count, s2;
  }
  return t(n2, t3), n2;
}(qe);
var On = function(n2) {
  function s2(e) {
    var s3 = e.userId, r2 = e.filter, a2 = n2.call(this) || this, i = r2.keys, o2 = r2.customTypeFilters, u2 = r2.customTypesFilter;
    return a2.method = ae.GET, a2.path = "".concat(ue, "/").concat(encodeURIComponent(s3), "/unread_item_count"), a2.params = se({ item_keys: i, custom_types: null != u2 ? u2 : o2 }), a2;
  }
  return t(s2, n2), s2;
}(Fe);
var Hn = function(t3) {
  function n2(e, n3) {
    var s2 = t3.call(this, e, n3) || this;
    return "number" == typeof n3[ln2.GROUP_CHANNEL_UNREAD_MENTION_COUNT] && (s2.groupChannelUnreadMentionCount = n3[ln2.GROUP_CHANNEL_UNREAD_MENTION_COUNT]), "number" == typeof n3[ln2.GROUP_CHANNEL_UNREAD_MESSAGE_COUNT] && (s2.groupChannelUnreadMessageCount = n3[ln2.GROUP_CHANNEL_UNREAD_MESSAGE_COUNT]), "number" == typeof n3[ln2.GROUP_CHANNEL_INVITATION_COUNT] && (s2.groupChannelInvitationCount = n3[ln2.GROUP_CHANNEL_INVITATION_COUNT]), "number" == typeof n3[ln2.SUPER_UNREAD_MENTION_COUNT] && (s2.superGroupChannelUnreadMentionCount = n3[ln2.SUPER_UNREAD_MENTION_COUNT]), "number" == typeof n3[ln2.SUPER_UNREAD_MESSAGE_COUNT] && (s2.superGroupChannelUnreadMessageCount = n3[ln2.SUPER_UNREAD_MESSAGE_COUNT]), "number" == typeof n3[ln2.SUPER_INVITATION_COUNT] && (s2.superGroupChannelInvitationCount = n3[ln2.SUPER_INVITATION_COUNT]), "number" == typeof n3[ln2.NONSUPER_UNREAD_MENTION_COUNT] && (s2.nonSuperGroupChannelUnreadMentionCount = n3[ln2.NONSUPER_UNREAD_MENTION_COUNT]), "number" == typeof n3[ln2.NONSUPER_UNREAD_MESSAGE_COUNT] && (s2.nonSuperGroupChannelUnreadMessageCount = n3[ln2.NONSUPER_UNREAD_MESSAGE_COUNT]), "number" == typeof n3[ln2.NONSUPER_INVITATION_COUNT] && (s2.nonSuperGroupChannelInvitationCount = n3[ln2.NONSUPER_INVITATION_COUNT]), s2;
  }
  return t(n2, t3), n2;
}(qe);
var Gn2 = function(t3) {
  function n2(e) {
    var n3 = e.userId, s2 = t3.call(this) || this;
    return s2.method = ae.GET, s2.path = "".concat(ue, "/").concat(encodeURIComponent(n3), "/unread_channel_count"), s2;
  }
  return t(n2, t3), n2;
}(Fe);
var Vn = function(t3) {
  function n2(e, n3) {
    var s2 = t3.call(this, e, n3) || this;
    return s2.unreadCount = n3.unread_count, s2;
  }
  return t(n2, t3), n2;
}(qe);
var Bn = function(t3) {
  function n2(e) {
    var n3 = e.userId, s2 = e.filter, r2 = e.includeFeedChannel, a2 = void 0 !== r2 && r2, i = t3.call(this) || this, o2 = s2.channelCustomTypesFilter, u2 = s2.superChannelFilter;
    return i.method = ae.GET, i.path = "".concat(ue, "/").concat(encodeURIComponent(n3), "/unread_message_count"), i.params = { super_mode: null != u2 ? u2 : tn.ALL, custom_types: o2, include_feed_channel: a2 }, i;
  }
  return t(n2, t3), n2;
}(Fe);
var qn = function(t3) {
  function n2(e, n3) {
    var s2 = t3.call(this, e, n3) || this;
    return s2.unreadCount = n3.unread_count, s2.unreadFeedCount = n3.unread_feed_count, s2;
  }
  return t(n2, t3), n2;
}(qe);
var zn = function(t3) {
  function n2(e) {
    var n3 = e.channelUrl, s2 = e.scheduledStatus, r2 = e.messageTypeFilter, a2 = t3.call(this) || this;
    return a2.method = ae.GET, a2.path = "".concat(ye, "/count"), a2.params = { channel_url: n3, status: jn(s2) }, r2 && (a2.params.message_type = r2), a2;
  }
  return t(n2, t3), n2;
}(Fe);
var Wn = function(t3) {
  function n2(e, n3) {
    var s2 = t3.call(this, e, n3) || this;
    return s2.count = n3.count, s2;
  }
  return t(n2, t3), n2;
}(qe);
var jn = function(e) {
  if (!e)
    return [];
  var t3 = [];
  return e.forEach(function(e2) {
    switch (e2) {
      case dt.PENDING:
        t3.push(ht.PENDING);
        break;
      case dt.SENT:
        t3.push(ht.IN_QUEUE), t3.push(ht.SENT);
        break;
      case dt.CANCELED:
        t3.push(ht.CANCELED);
        break;
      case dt.FAILED:
        t3.push(ht.FAILED);
    }
  }), t3;
};
var Qn = function(n2) {
  function s2(e) {
    var s3 = this, r2 = e.userId, a2 = e.channelUrl, i = e.coverUrl, o2 = e.coverImage, u2 = e.isDistinct, c2 = e.isSuper, l = e.isBroadcast, h = e.isPublic, p = e.isExclusive, f2 = e.isDiscoverable, v4 = e.isStrict, m2 = e.isEphemeral, g2 = e.accessCode, E2 = e.name, C3 = e.data, y3 = e.customType, M2 = e.messageSurvivalSeconds, b3 = e.invitedUserIds, U2 = e.operatorUserIds;
    return (s3 = n2.call(this) || this).method = ae.POST, s3.path = de, s3.params = se({ user_ids: c([r2], a(null != b3 ? b3 : []), false).filter(function(e2, t3, n3) {
      return t3 === n3.indexOf(e2);
    }), channel_url: a2, cover_url: i, cover_file: o2, is_distinct: u2, is_super: c2, is_broadcast: l, is_exclusive: p, is_public: h, is_discoverable: f2, strict: v4, is_ephemeral: m2, access_code: g2, name: E2, data: C3, custom_type: y3, operator_ids: U2, message_survival_seconds: M2 }), s3;
  }
  return t(s2, n2), s2;
}(Fe);
var Yn = function(t3) {
  function n2(e, n3) {
    var s2, r2 = this;
    return (r2 = t3.call(this, e, n3) || this).channel = new fr(e, n3), r2.isCreated = null === (s2 = n3.is_created) || void 0 === s2 || s2, r2;
  }
  return t(n2, t3), n2;
}(qe);
var Kn = function(t3) {
  function n2(e) {
    var n3 = e.userId, s2 = e.channelUrls, r2 = t3.call(this) || this;
    return r2.method = ae.PUT, r2.path = "".concat(ue, "/").concat(encodeURIComponent(n3), "/mark_as_read_all"), r2.params = { channel_urls: s2 }, r2;
  }
  return t(n2, t3), n2;
}(Fe);
!function(t3) {
  function n2() {
    return null !== t3 && t3.apply(this, arguments) || this;
  }
  t(n2, t3);
}(qe);
var Jn = function(t3) {
  function n2(e) {
    var n3 = this, s2 = e.channelUrl, r2 = e.userId, a2 = e.accessCode;
    return (n3 = t3.call(this) || this).method = ae.PUT, n3.path = "".concat(de, "/").concat(encodeURIComponent(s2), "/join"), n3.params = { user_id: r2, access_code: a2 }, n3;
  }
  return t(n2, t3), n2;
}(Fe);
var Xn = function(t3) {
  function n2(e, n3) {
    var s2 = t3.call(this, e, n3) || this;
    return s2.channel = new fr(e, n3), s2;
  }
  return t(n2, t3), n2;
}(qe);
var Zn = function(t3) {
  function n2(e, n3, s2) {
    var r2 = t3.call(this, e, n3, s2) || this, a2 = s2.data, i = a2.member_count, o2 = void 0 === i ? 0 : i, u2 = a2.joined_member_count, c2 = void 0 === u2 ? 0 : u2, l = a2.users, h = void 0 === l ? null : l;
    return r2.memberCount = o2, r2.joinedMemberCount = c2, r2.members = Array.isArray(h) ? h.map(function(t4) {
      return new un2(e, t4);
    }) : [new un2(e, s2.data)], r2;
  }
  return t(n2, t3), n2;
}(v3);
var $n = function(t3) {
  function n2(e) {
    var n3 = this, s2 = e.channelUrl, r2 = e.userId, a2 = e.shouldRemoveOperatorStatus;
    return (n3 = t3.call(this) || this).method = ae.PUT, n3.path = "".concat(de, "/").concat(encodeURIComponent(s2), "/leave"), n3.params = { user_id: r2, should_remove_operator_status: a2 }, n3;
  }
  return t(n2, t3), n2;
}(Fe);
!function(t3) {
  function n2(e, n3) {
    return t3.call(this, e, n3) || this;
  }
  t(n2, t3);
}(qe);
var es = function(t3) {
  function n2(e, n3, s2) {
    var r2 = t3.call(this, e, n3, s2) || this, a2 = s2.data, i = a2.member_count, o2 = void 0 === i ? 0 : i, u2 = a2.joined_member_count, c2 = void 0 === u2 ? 0 : u2;
    return r2.memberCount = o2, r2.joinedMemberCount = c2, r2.member = new un2(r2._iid, s2.data), r2;
  }
  return t(n2, t3), n2;
}(v3);
var ts = function(t3) {
  function n2(e) {
    var n3 = this, s2 = e.channelUrl, r2 = e.userIds;
    return (n3 = t3.call(this) || this).method = ae.POST, n3.path = "".concat(de, "/").concat(encodeURIComponent(s2), "/invite"), n3.params = { user_ids: r2 }, n3;
  }
  return t(n2, t3), n2;
}(Fe);
var ns = function(t3) {
  function n2(e, n3) {
    var s2 = t3.call(this, e, n3) || this;
    return s2.channel = new fr(e, n3), s2;
  }
  return t(n2, t3), n2;
}(qe);
var ss = function(t3) {
  function n2(e, n3, s2) {
    var r2 = t3.call(this, e, n3, s2) || this;
    r2.inviter = null;
    var a2 = s2.data, i = a2.member_count, u2 = void 0 === i ? 0 : i, c2 = a2.joined_member_count, l = void 0 === c2 ? 0 : c2, h = a2.inviter, d = a2.invitees, _2 = void 0 === d ? [] : d;
    return r2.memberCount = u2, r2.joinedMemberCount = l, h && Object.keys(h).length > 0 && (r2.inviter = new ls(e, h)), r2.invitees = _2.map(function(t4) {
      return new un2(e, t4);
    }), r2;
  }
  return t(n2, t3), n2;
}(v3);
var rs = function(t3) {
  function n2(e) {
    var n3 = this, s2 = e.channelUrl, r2 = e.userId;
    return (n3 = t3.call(this) || this).method = ae.PUT, n3.path = "".concat(de, "/").concat(encodeURIComponent(s2), "/decline"), n3.params = { user_id: r2 }, n3;
  }
  return t(n2, t3), n2;
}(Fe);
!function(t3) {
  function n2(e, n3) {
    var s2 = t3.call(this, e, n3) || this;
    return s2.channel = new fr(e, n3), s2.channel.myMemberState = Zt.NONE, s2;
  }
  t(n2, t3);
}(qe);
var as2 = function(t3) {
  function n2(e, n3, s2) {
    var r2 = t3.call(this, e, n3, s2) || this, a2 = s2.data, i = a2.member_count, u2 = a2.joined_member_count, c2 = a2.inviter, l = a2.invitee;
    return r2.memberCount = null != i ? i : 0, r2.joinedMemberCount = null != u2 ? u2 : 0, r2.inviter = new ls(e, c2), r2.invitee = new un2(e, l), r2;
  }
  return t(n2, t3), n2;
}(v3);
var is = { hidePreviousMessages: false, allowAutoUnhide: true };
var os2 = function(t3) {
  function n2(e) {
    var n3 = this, s2 = e.channelUrl, r2 = e.userId, a2 = e.hidePreviousMessages, i = e.allowAutoUnhide;
    return (n3 = t3.call(this) || this).method = ae.PUT, n3.path = "".concat(de, "/").concat(encodeURIComponent(s2), "/hide"), n3.params = { user_id: r2, hide_previous_messages: null != a2 ? a2 : is.hidePreviousMessages, allow_auto_unhide: null != i ? i : is.allowAutoUnhide }, n3;
  }
  return t(n2, t3), n2;
}(Fe);
var us = function(t3) {
  function n2(e, n3) {
    var s2 = t3.call(this, e, n3) || this, r2 = n3.ts_message_offset;
    return s2.messageOffsetTimestamp = r2, s2;
  }
  return t(n2, t3), n2;
}(qe);
var cs2 = function(t3) {
  function n2(e, n3, s2) {
    var r2, a2, i, o2 = this;
    return (o2 = t3.call(this, e, "SYEV", s2) || this).allowAutoUnhide = null, o2.hidePreviousMessages = null, o2.messageOffsetTimestamp = null, s2.data && (o2.allowAutoUnhide = null !== (r2 = s2.data.allow_auto_unhide) && void 0 !== r2 ? r2 : null, o2.hidePreviousMessages = null !== (a2 = s2.data.hide_previous_messages) && void 0 !== a2 ? a2 : null), o2.messageOffsetTimestamp = null !== (i = s2.ts_message_offset) && void 0 !== i ? i : null, o2;
  }
  return t(n2, t3), n2;
}(ze);
var ls2 = function(t3) {
  function n2(e) {
    var n3 = e.channelUrl, s2 = e.time;
    return t3.call(this, { code: "TPST", ackRequired: false, payload: { channel_url: n3, time: s2 } }) || this;
  }
  return t(n2, t3), n2;
}(Ge);
var hs = function(t3) {
  function n2(e, n3, s2) {
    var r2 = t3.call(this, e, "SYEV", s2) || this;
    return r2.user = new ls(e, s2.data), r2;
  }
  return t(n2, t3), n2;
}(ze);
var ds = function(t3) {
  function n2(e) {
    var n3 = e.channelUrl, s2 = e.time;
    return t3.call(this, { code: "TPEN", ackRequired: false, payload: { channel_url: n3, time: s2 } }) || this;
  }
  return t(n2, t3), n2;
}(Ge);
var _s = function(t3) {
  function n2(e, n3, s2) {
    var r2 = t3.call(this, e, "SYEV", s2) || this;
    return r2.user = new ls(e, s2.data), r2;
  }
  return t(n2, t3), n2;
}(ze);
var ps = function(t3) {
  function n2(e) {
    var n3 = e.channelUrl, s2 = e.messageId;
    return t3.call(this, { code: "MACK", ackRequired: false, payload: { channel_url: n3, msg_id: s2 } }) || this;
  }
  return t(n2, t3), n2;
}(Ge);
var fs = function(t3) {
  function a2(e, n2) {
    var s2, r2, a3, i, o2, u2, c2, l, h, d, _2, p, f2, v4, m2, g2, E2, C3, y3, M2, b3, N2, U2, S3 = this;
    return (S3 = t3.call(this, e, n2) || this).includeEmpty = false, S3.includeFrozen = true, S3.includeMetaData = true, S3.includeChatNotification = false, S3.channelUrlsFilter = null, S3.customTypesFilter = null, S3.customTypeStartsWithFilter = null, S3.nicknameContainsFilter = null, S3.nicknameStartsWithFilter = null, S3.nicknameExactMatchFilter = null, S3.channelNameContainsFilter = "", S3.myMemberStateFilter = en2.ALL, S3.unreadChannelFilter = nn2.ALL, S3.superChannelFilter = tn.ALL, S3.publicChannelFilter = $t.ALL, S3.hiddenChannelFilter = sn.UNHIDDEN, S3.searchFilter = { fields: [], query: null }, S3.userIdsFilter = { userIds: [], includeMode: true, queryType: an.AND }, S3.metadataKey = null, S3.metadataValues = null, S3.metadataOrderKeyFilter = null, S3.metadataValueStartsWith = null, S3.order = E.LATEST_LAST_MESSAGE, S3.includeEmpty = null !== (s2 = n2.includeEmpty) && void 0 !== s2 && s2, S3.includeFrozen = null === (r2 = n2.includeFrozen) || void 0 === r2 || r2, S3.includeMetaData = null === (a3 = n2.includeMetaData) || void 0 === a3 || a3, S3.includeChatNotification = null !== (i = n2.includeChatNotification) && void 0 !== i && i, S3.channelUrlsFilter = null !== (o2 = n2.channelUrlsFilter) && void 0 !== o2 ? o2 : null, S3.customTypesFilter = null !== (u2 = n2.customTypesFilter) && void 0 !== u2 ? u2 : null, S3.customTypeStartsWithFilter = null !== (c2 = n2.customTypeStartsWithFilter) && void 0 !== c2 ? c2 : "", S3.nicknameContainsFilter = null !== (l = n2.nicknameContainsFilter) && void 0 !== l ? l : null, S3.nicknameStartsWithFilter = null !== (h = n2.nicknameStartsWithFilter) && void 0 !== h ? h : null, S3.nicknameExactMatchFilter = null !== (d = n2.nicknameExactMatchFilter) && void 0 !== d ? d : null, S3.channelNameContainsFilter = null !== (_2 = n2.channelNameContainsFilter) && void 0 !== _2 ? _2 : "", S3.myMemberStateFilter = null !== (p = n2.myMemberStateFilter) && void 0 !== p ? p : en2.ALL, S3.unreadChannelFilter = null !== (f2 = n2.unreadChannelFilter) && void 0 !== f2 ? f2 : nn2.ALL, S3.superChannelFilter = null !== (v4 = n2.superChannelFilter) && void 0 !== v4 ? v4 : tn.ALL, S3.publicChannelFilter = null !== (m2 = n2.publicChannelFilter) && void 0 !== m2 ? m2 : $t.ALL, S3.hiddenChannelFilter = null !== (g2 = n2.hiddenChannelFilter) && void 0 !== g2 ? g2 : sn.UNHIDDEN, S3.searchFilter = null !== (E2 = n2.searchFilter) && void 0 !== E2 ? E2 : { fields: [], query: null }, S3.userIdsFilter = null !== (C3 = n2.userIdsFilter) && void 0 !== C3 ? C3 : { userIds: [], includeMode: true, queryType: an.AND }, S3.metadataKey = null !== (y3 = n2.metadataKey) && void 0 !== y3 ? y3 : null, S3.metadataValues = null !== (M2 = n2.metadataValues) && void 0 !== M2 ? M2 : null, S3.metadataOrderKeyFilter = null !== (b3 = n2.metadataOrderKeyFilter) && void 0 !== b3 ? b3 : null, S3.metadataValueStartsWith = null !== (N2 = n2.metadataValueStartsWith) && void 0 !== N2 ? N2 : null, S3.order = null !== (U2 = n2.order) && void 0 !== U2 ? U2 : E.LATEST_LAST_MESSAGE, n2.createdAfter && (S3.createdAfter = n2.createdAfter), n2.createdBefore && (S3.createdBefore = n2.createdBefore), S3;
  }
  return t(a2, t3), a2.prototype._validate = function() {
    return t3.prototype._validate.call(this) && S("boolean", this.includeEmpty) && S("boolean", this.includeFrozen) && S("boolean", this.includeMetaData) && S("string", this.channelNameContainsFilter) && C("string", this.channelUrlsFilter, true) && C("string", this.customTypesFilter, true) && S("string", this.customTypeStartsWithFilter) && S("string", this.nicknameContainsFilter, true) && S("string", this.nicknameStartsWithFilter, true) && S("string", this.nicknameExactMatchFilter, true) && T(en2, this.myMemberStateFilter) && T(tn, this.superChannelFilter) && T($t, this.publicChannelFilter) && T(nn2, this.unreadChannelFilter) && T(sn, this.hiddenChannelFilter) && C(on, this.searchFilter.fields) && S("string", this.searchFilter.query, true) && C("string", this.userIdsFilter.userIds) && S("boolean", this.userIdsFilter.includeMode) && T(an, this.userIdsFilter.queryType) && T(E, this.order) && S("string", this.metadataOrderKeyFilter, true) && S("string", this.metadataKey, true) && C("string", this.metadataValues, true) && S("string", this.metadataValueStartsWith, true) && A(this.createdAfter, true) && A(this.createdBefore, true);
  }, a2.prototype.serialize = function() {
    return os(this);
  }, a2.prototype.next = function() {
    return r(this, void 0, void 0, function() {
      var e, t4, r2;
      return s(this, function(a3) {
        switch (a3.label) {
          case 0:
            return this._validate() ? this._isLoading ? [3, 3] : this._hasNext ? (this._isLoading = true, [4, ys.of(this._iid).getMyGroupChannels(this._token, oe(n({}, this)), this.limit, no.REQUEST_CHANNEL, true)]) : [3, 2] : [3, 5];
          case 1:
            return e = a3.sent(), t4 = e.channels, r2 = e.token, this._token = r2, this._hasNext = !!r2, this._isLoading = false, [2, t4];
          case 2:
            return [2, []];
          case 3:
            throw b.queryInProgress;
          case 4:
            return [3, 6];
          case 5:
            throw b.invalidParameters;
          case 6:
            return [2];
        }
      });
    });
  }, a2;
}(Oo);
var vs = function(n2) {
  function s2(e) {
    var s3 = e.channelUrl, r2 = e.userId, a2 = n2.call(this) || this;
    return a2.method = ae.PUT, a2.path = "".concat(de, "/").concat(encodeURIComponent(s3), "/messages/mark_as_delivered"), a2.params = se({ user_id: r2 }), a2;
  }
  return t(s2, n2), s2;
}(Fe);
!function(t3) {
  function n2() {
    return null !== t3 && t3.apply(this, arguments) || this;
  }
  t(n2, t3);
}(qe);
var ms2;
var gs = function(t3) {
  function n2(e, n3, s2) {
    var r2 = t3.call(this, e, "DLVR", s2) || this;
    return r2.channelUrl = s2.channel_url, r2.deliveredStateUpdate = s2.updated, r2;
  }
  return t(n2, t3), n2;
}(ze);
var Es = function() {
  function e(e2) {
    var t3 = e2.top, n2 = void 0 === t3 ? Number.MAX_SAFE_INTEGER : t3, s2 = e2.bottom, r2 = void 0 === s2 ? 0 : s2;
    this.top = n2, this.bottom = r2;
  }
  return e.prototype.includes = function() {
    for (var e2 = this, t3 = [], n2 = 0; n2 < arguments.length; n2++)
      t3[n2] = arguments[n2];
    return t3.every(function(t4) {
      return e2.top <= t4 && t4 <= e2.bottom;
    });
  }, e.prototype.overlap = function(e2) {
    return this.includes(e2.top) || this.includes(e2.bottom);
  }, e.prototype.intersect = function() {
    for (var e2 = this, t3 = [], n2 = 0; n2 < arguments.length; n2++)
      t3[n2] = arguments[n2];
    return t3.some(function(t4) {
      return e2.top <= t4 && t4 <= e2.bottom;
    });
  }, e.prototype.extends = function() {
    for (var e2 = [], t3 = 0; t3 < arguments.length; t3++)
      e2[t3] = arguments[t3];
    this.top = Math.min.apply(Math, c([this.top], a(e2), false)), this.bottom = Math.max.apply(Math, c([this.bottom], a(e2), false));
  }, e;
}();
var Cs = {};
var ys = function(u2) {
  function c2(e, t3) {
    var n2, r2 = this;
    return (r2 = u2.call(this, e, n(n({}, t3), { channelType: H.GROUP })) || this)._leftChannels = /* @__PURE__ */ new Map(), r2._markAsReadAllLastSentAt = 0, r2._forceDisableMack = null !== (n2 = t3.forceDisableMack) && void 0 !== n2 && n2, r2._groupChannelHandlers = /* @__PURE__ */ new Map(), r2._groupChannelCache = new dn(r2._iid, { sdkState: t3.sdkState, cacheContext: t3.cacheContext }), r2._userInfoCache = new ia(r2._iid, { sdkState: t3.sdkState, cacheContext: t3.cacheContext }), r2._groupChannelBroadcast = new An({ dispatcher: t3.dispatcher, groupChannelCache: r2._groupChannelCache, userInfoCache: r2._userInfoCache, messageCache: Zs.of(r2._iid), unsentMessageCache: Js.of(r2._iid) }), setInterval(function() {
      var e2, t4, n3 = function(e3) {
        e3.invalidateTypingStatus() && (r2._dispatcher.dispatch(new Un({ channels: [e3], context: { source: no.EVENT_CHANNEL_TYPING_STATUS_UPDATE } })), r2._groupChannelHandlers.forEach(function(t5) {
          t5.onTypingStatusUpdated && t5.onTypingStatusUpdated(e3);
        }));
      };
      try {
        for (var s2 = o(r2._groupChannelCache.channels), a2 = s2.next(); !a2.done; a2 = s2.next()) {
          n3(a2.value);
        }
      } catch (t5) {
        e2 = { error: t5 };
      } finally {
        try {
          a2 && !a2.done && (t4 = s2.return) && t4.call(s2);
        } finally {
          if (e2)
            throw e2.error;
        }
      }
    }, 1e3), r2._dispatcher.on(function(e2) {
      if (e2 instanceof ze)
        r2._handleEvent(e2).catch(function(e3) {
          if (v(e3) && "foreground" === r2._sdkState.appState)
            throw e3;
        });
      else if (e2 instanceof y)
        r(r2, void 0, void 0, function() {
          var t5, n4;
          return s(this, function(s3) {
            switch (s3.label) {
              case 0:
                return t5 = e2.message, [4, this.getChannelFromCache(t5.channelUrl)];
              case 1:
                return (n4 = s3.sent()) && !n4.isFrozen ? [3, 3] : [4, this.getChannelWithoutCache(t5.channelUrl, true)];
              case 2:
                n4 = s3.sent(), s3.label = 3;
              case 3:
                return n4.isFrozen || (t5 instanceof wt ? n4._autoResendUserMessage(t5) : t5 instanceof Nt && n4._autoResendFileMessage(t5)), [2];
            }
          });
        });
      else if (e2 instanceof S2)
        r2.reduceDBSize();
      else if (e2 instanceof P) {
        var t4 = e2.appConfigsInfo, n3 = e2.configTs, s2 = t4.message_purge_offset;
        s2 && r2._messageDataRetention(s2), r2._dispatcher.dispatch(new m({ configTs: n3 }));
      } else
        e2 instanceof lt && r(r2, void 0, void 0, function() {
          var t5, n4, s3, r3, a2, o2 = this;
          return s(this, function(u3) {
            switch (u3.label) {
              case 0:
                return t5 = e2.channelUrl, n4 = e2.channelType, s3 = e2.parentMessage, r3 = new da(this._iid, { channel_type: H.GROUP, channel_url: t5, parent_message_id: s3.messageId, thread_info: De.payloadify(s3.threadInfo) }), n4 !== H.GROUP ? [3, 2] : [4, this.getChannel(t5, true)];
              case 1:
                a2 = u3.sent(), kr(function() {
                  return r(o2, void 0, void 0, function() {
                    var e3, t6, n5, s4, i;
                    return s(this, function(o3) {
                      try {
                        for (e3 = o(this._groupChannelHandlers.values()), t6 = e3.next(); !t6.done; t6 = e3.next())
                          (n5 = t6.value).onThreadInfoUpdated && n5.onThreadInfoUpdated(a2, r3);
                      } catch (e4) {
                        s4 = { error: e4 };
                      } finally {
                        try {
                          t6 && !t6.done && (i = e3.return) && i.call(e3);
                        } finally {
                          if (s4)
                            throw s4.error;
                        }
                      }
                      return [2];
                    });
                  });
                }), u3.label = 2;
              case 2:
                return [2];
            }
          });
        });
    }), Cs[e] || (Cs[e] = r2), r2;
  }
  return t(c2, u2), Object.defineProperty(c2.prototype, "_messageCache", { get: function() {
    return Zs.of(this._iid);
  }, enumerable: false, configurable: true }), Object.defineProperty(c2.prototype, "_unsentMessageCache", { get: function() {
    return Js.of(this._iid);
  }, enumerable: false, configurable: true }), c2.of = function(e) {
    return Cs[e] || (Cs[e] = new c2(e, uo.of(e))), Cs[e];
  }, c2.clear = function(e) {
    Cs[e] && delete Cs[e];
  }, Object.defineProperty(c2.prototype, "handlers", { get: function() {
    return c([], a(this._groupChannelHandlers.values()), false);
  }, enumerable: false, configurable: true }), c2.prototype.buildGroupChannelFromSerializedData = function(e) {
    var t3 = as(e);
    return new fr(this._iid, fr.payloadify(t3));
  }, c2.prototype.buildGroupChannelListQueryFromSerializedData = function(e) {
    var t3 = as(e);
    return new fs(this._iid, t3);
  }, c2.prototype.buildMemberFromSerializedData = function(e) {
    var t3 = as(e);
    return new un2(this._iid, un2.payloadify(t3));
  }, c2.prototype.getChannelFromCache = function(e) {
    var t3;
    return r(this, void 0, void 0, function() {
      return s(this, function(n2) {
        switch (n2.label) {
          case 0:
            return [4, this._groupChannelCache.get(e)];
          case 1:
            return [2, null !== (t3 = n2.sent()) && void 0 !== t3 ? t3 : null];
        }
      });
    });
  }, c2.prototype.getChannelsFromCache = function(e, t3, n2, s2, r2) {
    return r(this, void 0, void 0, function() {
      return s(this, function(a2) {
        switch (a2.label) {
          case 0:
            return [4, this._groupChannelCache.fetch({ token: e, filter: t3, order: n2, limit: s2, borderlineChannelUrl: r2 })];
          case 1:
            return [2, a2.sent()];
        }
      });
    });
  }, c2.prototype.upsertChannelsToCache = function(e) {
    return r(this, void 0, void 0, function() {
      return s(this, function(t3) {
        switch (t3.label) {
          case 0:
            return [4, this._groupChannelCache.upsert(e)];
          case 1:
            return [2, t3.sent()];
        }
      });
    });
  }, c2.prototype.removeChannelsFromCache = function(e) {
    return r(this, void 0, void 0, function() {
      return s(this, function(t3) {
        switch (t3.label) {
          case 0:
            return [4, this._groupChannelCache.remove(e)];
          case 1:
            return t3.sent(), [2];
        }
      });
    });
  }, c2.prototype.clearChannelsFromCache = function() {
    return r(this, void 0, void 0, function() {
      return s(this, function(e) {
        switch (e.label) {
          case 0:
            return [4, this._groupChannelCache.clear()];
          case 1:
            return e.sent(), [2];
        }
      });
    });
  }, c2.prototype.reduceDBSize = function() {
    return r(this, void 0, void 0, function() {
      var e, t3, n2, s2, r2, a2, i, o2, u3, c3, l, h, d, _2, p;
      return s(this, function(f2) {
        switch (f2.label) {
          case 0:
            return e = Zs.of(this._iid), t3 = uo.of(this._iid).cacheContext, n2 = t3.localCacheConfig, s2 = t3.nestdb, t3.localCacheEnabled && s2 && s2.state == Os.OPENED ? (r2 = 1024 * n2.maxSize * 1024, [4, s2.estimateUsage()]) : [2];
          case 1:
            if ((a2 = f2.sent()) < r2)
              return [2];
            i = [], o2 = this._groupChannelCache.channels, u3 = {}, d = 0, f2.label = 2;
          case 2:
            return d < o2.length ? [4, this.getMessagesFromCache(o2[d].url, 0, "prev", new qs())] : [3, 5];
          case 3:
            c3 = f2.sent(), u3[o2[d].url] = JSON.stringify(c3).length, l = new F({ channel: o2[d], cachedMessageCount: c3.length }), i.push(l), f2.label = 4;
          case 4:
            return d++, [3, 2];
          case 5:
            h = i.sort(n2.clearOrderComparator), d = 0, f2.label = 6;
          case 6:
            return d < h.length ? [4, e.removeMessagesOfChannel(h[d].channel.url)] : [3, 10];
          case 7:
            return f2.sent(), [4, e._getGroupChannelPreferenceSize(h[d].channel.url)];
          case 8:
            if (_2 = f2.sent(), p = u3[h[d].channel.url] + _2, (a2 -= p) < r2)
              return [3, 10];
            f2.label = 9;
          case 9:
            return d++, [3, 6];
          case 10:
            return [4, ia.of(this._iid).clear()];
          case 11:
            return f2.sent(), [2];
        }
      });
    });
  }, c2.prototype._messageDataRetention = function(e) {
    var t3;
    return r(this, void 0, void 0, function() {
      var n2, s2, r2, a2, i, o2, u3, c3, l, h, d = this;
      return s(this, function(_2) {
        switch (_2.label) {
          case 0:
            n2 = [], s2 = Zs.of(this._iid), r2 = function(r3) {
              var i2, o3;
              return s(this, function(u4) {
                switch (u4.label) {
                  case 0:
                    return i2 = r3.customType, o3 = null !== (t3 = e[i2]) && void 0 !== t3 ? t3 : e.global, [4, s2.removeUnderOffset(r3.url, o3, true)];
                  case 1:
                    return u4.sent(), r3.lastMessage && r3.lastMessage.createdAt <= o3 && (r3.lastMessage = null, n2.push(r3), kr(function() {
                      return r(d, void 0, void 0, function() {
                        var e2, t4, n3, s3, a3;
                        return s(this, function(i3) {
                          try {
                            for (e2 = o(this._groupChannelHandlers.values()), t4 = e2.next(); !t4.done; t4 = e2.next())
                              (n3 = t4.value).onChannelChanged && n3.onChannelChanged(r3);
                          } catch (e3) {
                            s3 = { error: e3 };
                          } finally {
                            try {
                              t4 && !t4.done && (a3 = e2.return) && a3.call(e2);
                            } finally {
                              if (s3)
                                throw s3.error;
                            }
                          }
                          return [2];
                        });
                      });
                    })), a2._dispatcher.dispatch(new go({ channelUrl: r3.url, messageDeletionTimestamp: o3, source: no.EVENT_MESSAGE_OFFSET_UPDATED })), [2];
                }
              });
            }, a2 = this, _2.label = 1;
          case 1:
            _2.trys.push([1, 6, 7, 8]), i = o(this._groupChannelCache.channels), o2 = i.next(), _2.label = 2;
          case 2:
            return o2.done ? [3, 5] : (u3 = o2.value, [5, r2(u3)]);
          case 3:
            _2.sent(), _2.label = 4;
          case 4:
            return o2 = i.next(), [3, 2];
          case 5:
            return [3, 8];
          case 6:
            return c3 = _2.sent(), l = { error: c3 }, [3, 8];
          case 7:
            try {
              o2 && !o2.done && (h = i.return) && h.call(i);
            } finally {
              if (l)
                throw l.error;
            }
            return [7];
          case 8:
            return n2.length > 0 && this._dispatcher.dispatch(new Un({ channels: n2, context: { source: no.EVENT_CHANNEL_UPDATED } })), [2];
        }
      });
    });
  }, c2.prototype._isSuperGroupMackDisabled = function(e) {
    var t3 = uo.of(this._iid).appInfo;
    return !(!e.isSuper || e.isBroadcast || !(null == t3 ? void 0 : t3.disableSuperGroupMack));
  }, c2.prototype._getCachedUserInfo = function(e) {
    return this._userInfoCache.getUserInfoFromCache(e);
  }, c2.prototype._upsertCachedUserInfo = function(e, t3) {
    uo.of(this._iid).useMemberInfoInMessage && this._userInfoCache.upsert(e, t3);
  }, c2.prototype._handleEvent = function(e) {
    var t3, n2;
    return r(this, void 0, void 0, function() {
      var s2, r2, u3, c3, l, h, d, _2, m2, g2, E2, C3, M2, N2, U2, S3, T4, A2, I2, w2, L3, D3, x, R2, F2, P2, G, V2, J, Z2, $, ee2, te, ne2, se2, re2, ae2, ie, oe2, ue2, ce, le, he, de2, _e2, pe, fe, ve, me, ge, Ee, Ce, ye2, Me2, be, Ne, Ue, Se, Te, Ae, Ie, we, Le, De3, xe2, Je3, Xe2, Ze3, $e3, et, tt, nt, st, rt, at2, it, ot, ut2, ct, lt2, ht2, dt2, _t2, pt, ft, vt, mt, gt, Et, Ct, yt2, Mt, bt, Nt2, Ut2, St2, Tt, At2, It2, wt2, Lt, Dt, xt, Rt, Ft, Ht, Gt, Bt, $t2, en3, tn2, nn3, sn2, rn2, an2, on2, un3, cn2, ln3, hn2, dn2, _n3, pn2, fn2, vn3, mn2, gn2, En3, Cn2, yn2, Mn2, bn3, Nn2, Tn3, An2, In3, wn2, Ln2, Dn2, xn2, Rn2, Fn2, kn2, Pn2, On2, Hn2, Gn3, Vn2, Bn2, qn2, zn2, Wn2, jn2, Qn2, Yn2, Kn2, Jn2, Xn2, $n2, ts2, ns2, rs2, is2 = this;
      return s(this, function(os3) {
        switch (os3.label) {
          case 0:
            switch (os3.trys.push([0, 88, , 89]), e.code) {
              case "MESG":
              case "FILE":
              case "ADMM":
              case "BRDM":
                return [3, 1];
              case "MEDI":
              case "FEDI":
              case "AEDI":
                return [3, 4];
              case "DELM":
                return [3, 7];
              case "READ":
                return [3, 10];
              case "DLVR":
                return [3, 13];
              case "MRCT":
                return [3, 15];
              case "MTHD":
                return [3, 27];
              case "MCNT":
                return [3, 31];
              case "PEDI":
                return [3, 40];
              case "VOTE":
                return [3, 43];
              case "SYEV":
                return [3, 46];
              case "USEV":
                return [3, 86];
            }
            return [3, 87];
          case 1:
            return _2 = null, "MESG" === e.code ? _2 = e.as(Ir) : "FILE" === e.code ? _2 = e.as(Pt) : "ADMM" !== e.code && "BRDM" != e.code || (_2 = e.as(L2)), _2 ? (s2 = _2.message, r2 = _2.isMentioned, u3 = _2.forceUpdateLastMessage, s2.channelType !== H.GROUP ? [3, 3] : ($ = this._groupChannelCache.isCachedInMemory(s2.channelUrl), F2 = s2 instanceof _t && s2.sender.userId === this._sdkState.userId, [4, this.getChannel(s2.channelUrl, true)])) : [3, 3];
          case 2:
            if (c3 = os3.sent(), E2 = uo.of(this._iid).useMemberInfoInMessage, this._forceDisableMack || this._isSuperGroupMackDisabled(c3) || s2 instanceof It || F2 || Dr(function() {
              return r(is2, void 0, void 0, function() {
                var e2;
                return s(this, function(t4) {
                  switch (t4.label) {
                    case 0:
                      return e2 = new ps(s2), [4, this._requestQueue.send(e2)];
                    case 1:
                      return t4.sent(), [2];
                  }
                });
              });
            }), s2 instanceof _t) {
              l = s2.sender, c3.isSuper && this._upsertCachedUserInfo(l, s2.createdAt);
              try {
                for (h = o(c3.members), d = h.next(); !d.done; d = h.next())
                  if ((Ht = d.value).userId === s2.sender.userId) {
                    E2 && (Ht.nickname = s2.sender.nickname, Ht.plainProfileUrl = s2.sender.plainProfileUrl, Ht.metaData = s2.sender.metaData, Ht.isBlockedByMe = s2.sender.isBlockedByMe);
                    break;
                  }
              } catch (e2) {
                On2 = { error: e2 };
              } finally {
                try {
                  d && !d.done && (Hn2 = h.return) && Hn2.call(h);
                } finally {
                  if (On2)
                    throw On2.error;
                }
              }
              E2 && r2 && (null === (t3 = s2.mentionedUsers) || void 0 === t3 || t3.forEach(function(e2) {
                var t4, n3;
                try {
                  for (var s3 = o(c3.members), r3 = s3.next(); !r3.done; r3 = s3.next()) {
                    var a2 = r3.value;
                    if (e2.userId === a2.userId) {
                      a2.nickname = e2.nickname, a2.plainProfileUrl = e2.plainProfileUrl, a2.metaData = e2.metaData;
                      break;
                    }
                  }
                } catch (e3) {
                  t4 = { error: e3 };
                } finally {
                  try {
                    r3 && !r3.done && (n3 = s3.return) && n3.call(s3);
                  } finally {
                    if (t4)
                      throw t4.error;
                  }
                }
              })), F2 && (T4 = this._sessionManager.currentUser) && (T4.nickname = s2.sender.nickname, T4.plainProfileUrl = s2.sender.plainProfileUrl, T4.metaData = s2.sender.metaData);
            }
            s2.silent && !F2 || (c3.isEphemeral || $) && (c3._updateLastMessage(s2), F2 || c3._shouldUpdateUnreadCountWith(s2) && c3._updateUnreadCount(c3.unreadMessageCount + 1, c3.unreadMentionCount + (r2 ? 1 : 0))), u3 && c3._updateLastMessage(s2), this._dispatcher.dispatch(new Un({ channels: [c3], context: { source: no.EVENT_MESSAGE_RECEIVED } })), s2.silent && !F2 || kr(function() {
              return r(is2, void 0, void 0, function() {
                var e2, t4, n3, s3, r3;
                return s(this, function(a2) {
                  try {
                    for (e2 = o(this._groupChannelHandlers.values()), t4 = e2.next(); !t4.done; t4 = e2.next())
                      (n3 = t4.value).onChannelChanged && n3.onChannelChanged(c3);
                  } catch (e3) {
                    s3 = { error: e3 };
                  } finally {
                    try {
                      t4 && !t4.done && (r3 = e2.return) && r3.call(e2);
                    } finally {
                      if (s3)
                        throw s3.error;
                    }
                  }
                  return [2];
                });
              });
            }), this._dispatcher.dispatch(new po({ messages: [s2], source: no.EVENT_MESSAGE_RECEIVED })), kr(function() {
              return r(is2, void 0, void 0, function() {
                var e2, t4, n3, a2, i;
                return s(this, function(o2) {
                  try {
                    for (e2 = o(this._groupChannelHandlers.values()), t4 = e2.next(); !t4.done; t4 = e2.next())
                      (n3 = t4.value).onMessageReceived && n3.onMessageReceived(c3, s2), r2 && n3.onMentionReceived && n3.onMentionReceived(c3, s2);
                  } catch (e3) {
                    a2 = { error: e3 };
                  } finally {
                    try {
                      t4 && !t4.done && (i = e2.return) && i.call(e2);
                    } finally {
                      if (a2)
                        throw a2.error;
                    }
                  }
                  return [2];
                });
              });
            }), os3.label = 3;
          case 3:
            return [3, 87];
          case 4:
            return _2 = null, "MEDI" === e.code ? _2 = e.as(Tr) : "FEDI" === e.code ? _2 = e.as(Mr2) : "AEDI" === e.code && (_2 = e.as(I)), _2 ? (m2 = _2.message, g2 = _2.mentionCountChange, E2 = uo.of(this._iid).useMemberInfoInMessage, m2.threadInfo && (m2.threadInfo.unreadReplyCount = void 0), m2.channelType !== H.GROUP ? [3, 6] : ($ = this._groupChannelCache.isCachedInMemory(m2.channelUrl), [4, this.getChannel(m2.channelUrl, true)])) : [3, 6];
          case 5:
            if (C3 = os3.sent(), F2 = false, m2 instanceof _t) {
              F2 = m2.sender.userId === this._sdkState.userId, C3.isSuper && this._upsertCachedUserInfo(m2.sender, m2.updatedAt);
              try {
                for (M2 = o(C3.members), N2 = M2.next(); !N2.done; N2 = M2.next())
                  if ((Ht = N2.value).userId === m2.sender.userId) {
                    E2 && (Ht.nickname = m2.sender.nickname, Ht.plainProfileUrl = m2.sender.plainProfileUrl, Ht.metaData = m2.sender.metaData, Ht.isBlockedByMe = m2.sender.isBlockedByMe);
                    break;
                  }
              } catch (e2) {
                Gn3 = { error: e2 };
              } finally {
                try {
                  N2 && !N2.done && (Vn2 = M2.return) && Vn2.call(M2);
                } finally {
                  if (Gn3)
                    throw Gn3.error;
                }
              }
            }
            U2 = false, F2 ? (S3 = m2.sender, (T4 = this._sessionManager.currentUser) && (T4.nickname = S3.nickname, T4.plainProfileUrl = S3.plainProfileUrl, T4.metaData = S3.metaData)) : C3.isReadMessage(m2) || 0 !== g2 && !m2.silent && $ && (C3._updateUnreadCount(C3.unreadMessageCount, C3.unreadMentionCount + g2), U2 = true), C3._updateLastMessage(m2) ? U2 = true : (null === (n2 = C3.lastMessage) || void 0 === n2 ? void 0 : n2.isIdentical(m2)) && ($ ? C3._updateLastMessage(m2) && (U2 = true) : U2 = true), A2 = false, C3.lastPinnedMessage && C3.lastPinnedMessage.messageId === m2.messageId && (C3.lastPinnedMessage = m2, U2 = true, A2 = true), U2 && (this._dispatcher.dispatch(new Un({ channels: [C3], context: { source: A2 ? no.EVENT_PINNED_MESSAGE_UPDATED : no.EVENT_MESSAGE_UPDATED } })), m2.silent && !F2 || kr(function() {
              return r(is2, void 0, void 0, function() {
                var e2, t4, n3, s3, r3;
                return s(this, function(a2) {
                  try {
                    for (e2 = o(this._groupChannelHandlers.values()), t4 = e2.next(); !t4.done; t4 = e2.next())
                      (n3 = t4.value).onChannelChanged && n3.onChannelChanged(C3);
                  } catch (e3) {
                    s3 = { error: e3 };
                  } finally {
                    try {
                      t4 && !t4.done && (r3 = e2.return) && r3.call(e2);
                    } finally {
                      if (s3)
                        throw s3.error;
                    }
                  }
                  return [2];
                });
              });
            }), A2 && kr(function() {
              return r(is2, void 0, void 0, function() {
                var e2, t4, n3, s3, r3;
                return s(this, function(a2) {
                  try {
                    for (e2 = o(this._groupChannelHandlers.values()), t4 = e2.next(); !t4.done; t4 = e2.next())
                      (n3 = t4.value).onPinnedMessageUpdated && n3.onPinnedMessageUpdated(C3);
                  } catch (e3) {
                    s3 = { error: e3 };
                  } finally {
                    try {
                      t4 && !t4.done && (r3 = e2.return) && r3.call(e2);
                    } finally {
                      if (s3)
                        throw s3.error;
                    }
                  }
                  return [2];
                });
              });
            })), this._dispatcher.dispatch(new po({ messages: [m2], source: no.EVENT_MESSAGE_UPDATED })), kr(function() {
              return r(is2, void 0, void 0, function() {
                var e2, t4, n3, s3, r3;
                return s(this, function(a2) {
                  try {
                    for (e2 = o(this._groupChannelHandlers.values()), t4 = e2.next(); !t4.done; t4 = e2.next())
                      (n3 = t4.value).onMessageUpdated && n3.onMessageUpdated(C3, m2), g2 > 0 && n3.onMentionReceived && n3.onMentionReceived(C3, m2);
                  } catch (e3) {
                    s3 = { error: e3 };
                  } finally {
                    try {
                      t4 && !t4.done && (r3 = e2.return) && r3.call(e2);
                    } finally {
                      if (s3)
                        throw s3.error;
                    }
                  }
                  return [2];
                });
              });
            }), os3.label = 6;
          case 6:
            return [3, 87];
          case 7:
            return I2 = e.as(at), Ie = I2.channelUrl, we = I2.channelType, w2 = I2.messageId, L3 = I2.silent, D3 = I2.messageCreatedAt, x = I2.senderId, we !== H.GROUP ? [3, 9] : [4, this.getChannel(Ie, true)];
          case 8:
            R2 = os3.sent(), F2 = x === this._sdkState.userId, L3 || F2 || D3 > 0 && R2.myLastRead < D3 && R2.unreadMessageCount > 0 && R2._updateUnreadCount(R2.unreadMessageCount - 1, 0), this._dispatcher.dispatch(new Eo({ messageIds: [w2], source: no.EVENT_MESSAGE_DELETED })), kr(function() {
              return r(is2, void 0, void 0, function() {
                var e2, t4, n3, s3, r3;
                return s(this, function(a2) {
                  try {
                    for (e2 = o(this._groupChannelHandlers.values()), t4 = e2.next(); !t4.done; t4 = e2.next())
                      (n3 = t4.value).onMessageDeleted && n3.onMessageDeleted(R2, w2);
                  } catch (e3) {
                    s3 = { error: e3 };
                  } finally {
                    try {
                      t4 && !t4.done && (r3 = e2.return) && r3.call(e2);
                    } finally {
                      if (s3)
                        throw s3.error;
                    }
                  }
                  return [2];
                });
              });
            }), os3.label = 9;
          case 9:
            return [3, 87];
          case 10:
            return (P2 = e.as(Ze).readStatus).channelType !== H.GROUP ? [3, 12] : ($ = this._groupChannelCache.isCachedInMemory(P2.channelUrl), [4, this.getChannel(P2.channelUrl, true)]);
          case 11:
            G = os3.sent(), $ && G._updateUnreadMemberState(P2.reader.userId, P2.readAt), P2.reader.userId === this._sdkState.userId ? $ ? (G.unreadMessageCount > 0 || G.unreadMentionCount > 0) && (G._updateUnreadCount(0, 0), this._dispatcher.dispatch(new Un({ channels: [G], context: { source: no.EVENT_CHANNEL_READ } })), kr(function() {
              return r(is2, void 0, void 0, function() {
                var e2, t4, n3, s3, r3;
                return s(this, function(a2) {
                  try {
                    for (e2 = o(this._groupChannelHandlers.values()), t4 = e2.next(); !t4.done; t4 = e2.next())
                      (n3 = t4.value).onChannelChanged && n3.onChannelChanged(G);
                  } catch (e3) {
                    s3 = { error: e3 };
                  } finally {
                    try {
                      t4 && !t4.done && (r3 = e2.return) && r3.call(e2);
                    } finally {
                      if (s3)
                        throw s3.error;
                    }
                  }
                  return [2];
                });
              });
            })) : 0 !== G.unreadMessageCount && 0 !== G.unreadMentionCount || (this._dispatcher.dispatch(new Un({ channels: [G], context: { source: no.EVENT_CHANNEL_READ } })), kr(function() {
              return r(is2, void 0, void 0, function() {
                var e2, t4, n3, s3, r3;
                return s(this, function(a2) {
                  try {
                    for (e2 = o(this._groupChannelHandlers.values()), t4 = e2.next(); !t4.done; t4 = e2.next())
                      (n3 = t4.value).onChannelChanged && n3.onChannelChanged(G);
                  } catch (e3) {
                    s3 = { error: e3 };
                  } finally {
                    try {
                      t4 && !t4.done && (r3 = e2.return) && r3.call(e2);
                    } finally {
                      if (s3)
                        throw s3.error;
                    }
                  }
                  return [2];
                });
              });
            })) : (this._dispatcher.dispatch(new Un({ channels: [G], context: { source: no.EVENT_CHANNEL_READ } })), kr(function() {
              return r(is2, void 0, void 0, function() {
                var e2, t4, n3, s3, r3;
                return s(this, function(a2) {
                  try {
                    for (e2 = o(this._groupChannelHandlers.values()), t4 = e2.next(); !t4.done; t4 = e2.next())
                      (n3 = t4.value).onUnreadMemberStatusUpdated && n3.onUnreadMemberStatusUpdated(G);
                  } catch (e3) {
                    s3 = { error: e3 };
                  } finally {
                    try {
                      t4 && !t4.done && (r3 = e2.return) && r3.call(e2);
                    } finally {
                      if (s3)
                        throw s3.error;
                    }
                  }
                  return [2];
                });
              });
            })), os3.label = 12;
          case 12:
            return [3, 87];
          case 13:
            return V2 = e.as(gs), Ie = V2.channelUrl, J = V2.deliveredStateUpdate, Z2 = void 0 === J ? {} : J, $ = this._groupChannelCache.isCachedInMemory(Ie), [4, this.getChannel(Ie, true)];
          case 14:
            return ee2 = os3.sent(), $ && Object.keys(Z2).forEach(function(e2) {
              ee2._updateUndeliveredMemberState(e2, Z2[e2]);
            }), Object.keys(Z2).some(function(e2) {
              return e2 !== is2._sdkState.userId;
            }) && (this._dispatcher.dispatch(new Un({ channels: [ee2], context: { source: no.EVENT_CHANNEL_DELIVERED } })), kr(function() {
              return r(is2, void 0, void 0, function() {
                var e2, t4, n3, s3, r3;
                return s(this, function(a2) {
                  try {
                    for (e2 = o(this._groupChannelHandlers.values()), t4 = e2.next(); !t4.done; t4 = e2.next())
                      (n3 = t4.value).onUndeliveredMemberStatusUpdated && n3.onUndeliveredMemberStatusUpdated(ee2);
                  } catch (e3) {
                    s3 = { error: e3 };
                  } finally {
                    try {
                      t4 && !t4.done && (r3 = e2.return) && r3.call(e2);
                    } finally {
                      if (s3)
                        throw s3.error;
                    }
                  }
                  return [2];
                });
              });
            })), [3, 87];
          case 15:
            return te = e.as(U), Ie = te.channelUrl, we = te.channelType, ne2 = te.event, we !== H.GROUP ? [3, 26] : [4, this.getChannel(Ie, true)];
          case 16:
            return se2 = os3.sent(), [4, this.getMessageFromCache(ne2.messageId)];
          case 17:
            if (de2 = os3.sent(), !se2.isSuper)
              return [3, 25];
            os3.label = 18;
          case 18:
            os3.trys.push([18, 23, 24, 25]), re2 = o(Object.keys(ne2._sampledUserInfoList)), ae2 = re2.next(), os3.label = 19;
          case 19:
            return ae2.done ? [3, 22] : (ie = ae2.value, [4, this._userInfoCache.get(ie)]);
          case 20:
            (oe2 = os3.sent()) ? (oe2.plainProfileUrl = ne2._sampledUserInfoList[ie].profile_url, oe2.nickname = ne2._sampledUserInfoList[ie].nickname, this._upsertCachedUserInfo(oe2, ne2.updatedAt)) : (ue2 = new ls(this._iid, { user_id: ie, nickname: ne2._sampledUserInfoList[ie].nickname, profile_url: ne2._sampledUserInfoList[ie].profile_url, require_auth_for_profile_image: ne2._sampledUserInfoList[ie].require_auth_for_profile_image }), this._upsertCachedUserInfo(ue2, ne2.updatedAt)), os3.label = 21;
          case 21:
            return ae2 = re2.next(), [3, 19];
          case 22:
            return [3, 25];
          case 23:
            return ce = os3.sent(), Bn2 = { error: ce }, [3, 25];
          case 24:
            try {
              ae2 && !ae2.done && (qn2 = re2.return) && qn2.call(re2);
            } finally {
              if (Bn2)
                throw Bn2.error;
            }
            return [7];
          case 25:
            de2 ? de2 instanceof yt && (de2.applyReactionEvent(ne2), this._dispatcher.dispatch(new po({ messages: [de2], source: no.EVENT_MESSAGE_REACTION_UPDATED }))) : this._dispatcher.dispatch(new vo({ event: ne2, source: no.EVENT_MESSAGE_REACTION_UPDATED })), kr(function() {
              return r(is2, void 0, void 0, function() {
                var e2, t4, n3, s3, r3;
                return s(this, function(a2) {
                  try {
                    for (e2 = o(this._groupChannelHandlers.values()), t4 = e2.next(); !t4.done; t4 = e2.next())
                      (n3 = t4.value).onReactionUpdated && n3.onReactionUpdated(se2, ne2);
                  } catch (e3) {
                    s3 = { error: e3 };
                  } finally {
                    try {
                      t4 && !t4.done && (r3 = e2.return) && r3.call(e2);
                    } finally {
                      if (s3)
                        throw s3.error;
                    }
                  }
                  return [2];
                });
              });
            }), os3.label = 26;
          case 26:
            return [3, 87];
          case 27:
            return (le = e.as(M).event).channelType !== H.GROUP ? [3, 30] : [4, this.getChannel(le.channelUrl, true)];
          case 28:
            return he = os3.sent(), [4, this.getMessageFromCache(le.targetMessageId)];
          case 29:
            if ((de2 = os3.sent()) ? de2 instanceof yt && (de2.applyThreadInfoUpdateEvent(le), this._dispatcher.dispatch(new po({ messages: [de2], source: no.EVENT_MESSAGE_THREADINFO_UPDATED }))) : this._dispatcher.dispatch(new bo({ event: le, source: no.EVENT_MESSAGE_THREADINFO_UPDATED })), he.isSuper)
              try {
                for (_e2 = o(le.threadInfo.mostRepliedUsers), pe = _e2.next(); !pe.done; pe = _e2.next())
                  wt2 = pe.value, this._upsertCachedUserInfo(wt2, le.threadInfo.updatedAt);
              } catch (e2) {
                zn2 = { error: e2 };
              } finally {
                try {
                  pe && !pe.done && (Wn2 = _e2.return) && Wn2.call(_e2);
                } finally {
                  if (zn2)
                    throw zn2.error;
                }
              }
            kr(function() {
              return r(is2, void 0, void 0, function() {
                var e2, t4, n3, s3, r3;
                return s(this, function(a2) {
                  try {
                    for (e2 = o(this._groupChannelHandlers.values()), t4 = e2.next(); !t4.done; t4 = e2.next())
                      (n3 = t4.value).onThreadInfoUpdated && n3.onThreadInfoUpdated(he, le);
                  } catch (e3) {
                    s3 = { error: e3 };
                  } finally {
                    try {
                      t4 && !t4.done && (r3 = e2.return) && r3.call(e2);
                    } finally {
                      if (s3)
                        throw s3.error;
                    }
                  }
                  return [2];
                });
              });
            }), os3.label = 30;
          case 30:
            return [3, 87];
          case 31:
            fe = e.as(y2).groupChannelMemberCounts, ve = [], os3.label = 32;
          case 32:
            os3.trys.push([32, 37, 38, 39]), me = o(fe), ge = me.next(), os3.label = 33;
          case 33:
            return ge.done ? [3, 36] : (Ee = ge.value, Ie = Ee.channelUrl, Nt2 = Ee.memberCount, Ut2 = Ee.joinedMemberCount, Ce = Ee.updatedAt, [4, this.getChannelFromCache(Ie)]);
          case 34:
            (ye2 = os3.sent()) && ye2._setLatestMemberCount(Nt2, Ut2, Ce) && ve.push(ye2), os3.label = 35;
          case 35:
            return ge = me.next(), [3, 33];
          case 36:
            return [3, 39];
          case 37:
            return Me2 = os3.sent(), jn2 = { error: Me2 }, [3, 39];
          case 38:
            try {
              ge && !ge.done && (Qn2 = me.return) && Qn2.call(me);
            } finally {
              if (jn2)
                throw jn2.error;
            }
            return [7];
          case 39:
            return ve.length > 0 && (this._dispatcher.dispatch(new Un({ channels: ve, context: { source: no.EVENT_CHANNEL_MEMBER_COUNT_UPDATED } })), kr(function() {
              return r(is2, void 0, void 0, function() {
                var e2, t4, n3, s3, r3;
                return s(this, function(a2) {
                  try {
                    for (e2 = o(this._groupChannelHandlers.values()), t4 = e2.next(); !t4.done; t4 = e2.next())
                      (n3 = t4.value).onChannelMemberCountChanged && n3.onChannelMemberCountChanged(ve);
                  } catch (e3) {
                    s3 = { error: e3 };
                  } finally {
                    try {
                      t4 && !t4.done && (r3 = e2.return) && r3.call(e2);
                    } finally {
                      if (s3)
                        throw s3.error;
                    }
                  }
                  return [2];
                });
              });
            })), [3, 87];
          case 40:
            return be = e.as(D2), Ne = be.event, Ue = be.status, Ie = be.channelUrl, we = be.channelType, Ie && we === H.GROUP ? [4, this.getChannel(Ie, true)] : [3, 42];
          case 41:
            Se = os3.sent(), this._dispatcher.dispatch(new wo({ event: Ne, source: no.EVENT_POLL_UPDATED })), kr(Ue === To ? function() {
              return r(is2, void 0, void 0, function() {
                var e2, t4, n3, s3, r3;
                return s(this, function(a2) {
                  try {
                    for (e2 = o(this._groupChannelHandlers.values()), t4 = e2.next(); !t4.done; t4 = e2.next())
                      (n3 = t4.value).onPollDeleted && n3.onPollDeleted(Se, Ne.pollId);
                  } catch (e3) {
                    s3 = { error: e3 };
                  } finally {
                    try {
                      t4 && !t4.done && (r3 = e2.return) && r3.call(e2);
                    } finally {
                      if (s3)
                        throw s3.error;
                    }
                  }
                  return [2];
                });
              });
            } : function() {
              return r(is2, void 0, void 0, function() {
                var e2, t4, n3, s3, r3;
                return s(this, function(a2) {
                  try {
                    for (e2 = o(this._groupChannelHandlers.values()), t4 = e2.next(); !t4.done; t4 = e2.next())
                      (n3 = t4.value).onPollUpdated && n3.onPollUpdated(Se, Ne);
                  } catch (e3) {
                    s3 = { error: e3 };
                  } finally {
                    try {
                      t4 && !t4.done && (r3 = e2.return) && r3.call(e2);
                    } finally {
                      if (s3)
                        throw s3.error;
                    }
                  }
                  return [2];
                });
              });
            }), os3.label = 42;
          case 42:
            return [3, 87];
          case 43:
            return Te = e.as(Hr), Ae = Te.event, Ie = Te.channelUrl, we = Te.channelType, Ie && we === H.GROUP ? [4, this.getChannel(Ie, true)] : [3, 45];
          case 44:
            Le = os3.sent(), this._dispatcher.dispatch(new So({ event: Ae, source: no.EVENT_POLL_VOTED })), kr(function() {
              return r(is2, void 0, void 0, function() {
                var e2, t4, n3, s3, r3;
                return s(this, function(a2) {
                  try {
                    for (e2 = o(this._groupChannelHandlers.values()), t4 = e2.next(); !t4.done; t4 = e2.next())
                      (n3 = t4.value).onPollVoted && n3.onPollVoted(Le, Ae);
                  } catch (e3) {
                    s3 = { error: e3 };
                  } finally {
                    try {
                      t4 && !t4.done && (r3 = e2.return) && r3.call(e2);
                    } finally {
                      if (s3)
                        throw s3.error;
                    }
                  }
                  return [2];
                });
              });
            }), os3.label = 45;
          case 45:
            return [3, 87];
          case 46:
            if (!(De3 = e.as(v3).event).isGroupChannelEvent)
              return [3, 85];
            switch (De3.category) {
              case f.CHANNEL_JOIN:
                return [3, 47];
              case f.CHANNEL_LEAVE:
                return [3, 49];
              case f.CHANNEL_OPERATOR_UPDATE:
                return [3, 53];
              case f.CHANNEL_INVITE:
                return [3, 55];
              case f.CHANNEL_DECLINE_INVITE:
                return [3, 57];
              case f.TYPING_START:
              case f.TYPING_END:
                return [3, 59];
              case f.USER_CHANNEL_MUTE:
              case f.USER_CHANNEL_UNMUTE:
                return [3, 61];
              case f.USER_CHANNEL_BAN:
                return [3, 63];
              case f.USER_CHANNEL_UNBAN:
                return [3, 67];
              case f.CHANNEL_FREEZE:
              case f.CHANNEL_UNFREEZE:
                return [3, 69];
              case f.CHANNEL_HIDE:
                return [3, 71];
              case f.CHANNEL_UNHIDE:
                return [3, 73];
              case f.CHANNEL_DELETED:
                return [3, 75];
              case f.CHANNEL_PROP_CHANGED:
                return [3, 77];
              case f.CHANNEL_META_DATA_CHANGED:
                return [3, 79];
              case f.CHANNEL_META_COUNTERS_CHANGED:
                return [3, 81];
              case f.PINNED_MESSAGE_CHANGED:
                return [3, 83];
            }
            return [3, 85];
          case 47:
            return [4, this.getChannel(De3.channelUrl, true)];
          case 48:
            if (xe2 = os3.sent(), Je3 = e.as(Zn), Xe2 = Je3.memberCount, Ze3 = Je3.joinedMemberCount, $e3 = Je3.members, et = false, $e3.forEach(function(e2) {
              xe2.isExclusive || xe2.isSuper || xe2.isBroadcast ? et = et || xe2._setLatestMemberCount(Xe2, Ze3, De3.ts) : (e2.state = Zt.JOINED, xe2.addMember(e2, De3.ts), is2._updateJoinedMemberCount(xe2)), e2.userId === is2._sdkState.userId && (xe2.myMemberState = Zt.JOINED);
            }), xe2.isSuper)
              try {
                for (tt = o($e3), nt = tt.next(); !nt.done; nt = tt.next())
                  Ht = nt.value, this._upsertCachedUserInfo(Ht, De3.ts);
              } catch (e2) {
                Yn2 = { error: e2 };
              } finally {
                try {
                  nt && !nt.done && (Kn2 = tt.return) && Kn2.call(tt);
                } finally {
                  if (Yn2)
                    throw Yn2.error;
                }
              }
            return this._dispatcher.dispatch(new Un({ channels: [xe2], context: { source: no.EVENT_CHANNEL_JOINED, users: $e3 } })), kr(function() {
              return r(is2, void 0, void 0, function() {
                return s(this, function(e2) {
                  return this._groupChannelHandlers.forEach(function(e3) {
                    var t4, n3;
                    try {
                      for (var s3 = o($e3), r3 = s3.next(); !r3.done; r3 = s3.next()) {
                        var a2 = r3.value;
                        e3.onUserJoined && e3.onUserJoined(xe2, a2);
                      }
                    } catch (e4) {
                      t4 = { error: e4 };
                    } finally {
                      try {
                        r3 && !r3.done && (n3 = s3.return) && n3.call(s3);
                      } finally {
                        if (t4)
                          throw t4.error;
                      }
                    }
                    xe2.isBroadcast && et && e3.onChannelMemberCountChanged && e3.onChannelMemberCountChanged([xe2]);
                  }), [2];
                });
              });
            }), [3, 85];
          case 49:
            return (Gt = this._leftChannels.get(De3.channelUrl)) ? (rt = Gt.channel, [3, 52]) : [3, 50];
          case 50:
            return [4, this.getChannel(De3.channelUrl, true)];
          case 51:
            rt = os3.sent(), os3.label = 52;
          case 52:
            return st = rt, at2 = e.as(es), Nt2 = at2.memberCount, Ut2 = at2.joinedMemberCount, it = at2.member, ot = false, ut2 = uo.of(this._iid).appInfo, st.isExclusive || st.isSuper || st.isBroadcast ? ot = st._setLatestMemberCount(Nt2, Ut2, De3.ts) : ((null == ut2 ? void 0 : ut2.enabledChannelMemberShipHistory) ? ((ct = st.members.find(function(e2) {
              return e2.userId === it.userId;
            })) && (ct.state = Zt.LEFT), st.memberCount = Nt2) : st.removeMember(it), this._updateJoinedMemberCount(st)), it.userId === this._sdkState.userId ? (st.myMemberState = Zt.NONE, st.invitedAt = 0, st.joinedAt = 0, st._updateUnreadCount(0, 0), st.isPublic ? this._dispatcher.dispatch(new Un({ channels: [st], context: { source: no.EVENT_CHANNEL_LEFT, user: it } })) : (this._markAsLeave(st), this._dispatcher.dispatch(new Sn({ channelUrls: [st.url], context: { source: no.EVENT_CHANNEL_LEFT, user: it } })))) : this._dispatcher.dispatch(new Un({ channels: [st], context: { source: no.EVENT_CHANNEL_LEFT, user: it } })), st.isSuper && this._upsertCachedUserInfo(it, De3.ts), kr(function() {
              return r(is2, void 0, void 0, function() {
                return s(this, function(e2) {
                  return this._groupChannelHandlers.forEach(function(e3) {
                    e3.onUserLeft && e3.onUserLeft(st, it), st.isBroadcast && ot && e3.onChannelMemberCountChanged && e3.onChannelMemberCountChanged([st]);
                  }), [2];
                });
              });
            }), [3, 85];
          case 53:
            return [4, this.getChannel(De3.channelUrl, true)];
          case 54:
            lt2 = os3.sent(), ht2 = e.as(T3).operators, dt2 = ht2.map(function(e2) {
              return e2.userId;
            });
            try {
              for (_t2 = o(lt2.members), pt = _t2.next(); !pt.done; pt = _t2.next())
                (Ht = pt.value).role = dt2.includes(Ht.userId) ? V.OPERATOR : V.NONE;
            } catch (e2) {
              Jn2 = { error: e2 };
            } finally {
              try {
                pt && !pt.done && (Xn2 = _t2.return) && Xn2.call(_t2);
              } finally {
                if (Jn2)
                  throw Jn2.error;
              }
            }
            return lt2.myRole = dt2.includes(this._sdkState.userId) ? V.OPERATOR : V.NONE, this._dispatcher.dispatch(new Un({ channels: [lt2], context: { source: no.EVENT_CHANNEL_OPERATOR_UPDATED, operators: ht2 } })), kr(function() {
              return r(is2, void 0, void 0, function() {
                return s(this, function(e2) {
                  return this._groupChannelHandlers.forEach(function(e3) {
                    e3.onOperatorUpdated && e3.onOperatorUpdated(lt2, ht2);
                  }), [2];
                });
              });
            }), [3, 85];
          case 55:
            return [4, this.getChannel(De3.channelUrl, true)];
          case 56:
            ft = os3.sent(), vt = e.as(ss), Nt2 = vt.memberCount, Ut2 = vt.joinedMemberCount, mt = vt.inviter, (gt = vt.invitees).forEach(function(e2) {
              return e2.state = Zt.INVITED;
            });
            try {
              for (Et = o(gt), Ct = Et.next(); !Ct.done; Ct = Et.next())
                yt2 = Ct.value, ft.isExclusive || ft.isSuper || ft.isBroadcast ? (ft.isSuper && this._userInfoCache.upsert(yt2, De3.ts), ft._setLatestMemberCount(Nt2, Ut2, De3.ts)) : ft.addMember(yt2, De3.ts), this._sdkState.userId === yt2.userId && (ft.hiddenState = ir.UNHIDDEN, ft.myMemberState !== Zt.JOINED && (ft.myMemberState = Zt.INVITED), ft.invitedAt = De3.ts);
            } catch (e2) {
              $n2 = { error: e2 };
            } finally {
              try {
                Ct && !Ct.done && (ts2 = Et.return) && ts2.call(Et);
              } finally {
                if ($n2)
                  throw $n2.error;
              }
            }
            return this._dispatcher.dispatch(new Un({ channels: [ft], context: { source: no.EVENT_CHANNEL_INVITED, inviter: mt, invitees: gt } })), kr(function() {
              return r(is2, void 0, void 0, function() {
                return s(this, function(e2) {
                  return this._groupChannelHandlers.forEach(function(e3) {
                    e3.onUserReceivedInvitation && e3.onUserReceivedInvitation(ft, mt, gt);
                  }), [2];
                });
              });
            }), [3, 85];
          case 57:
            return [4, this.getChannel(De3.channelUrl, true)];
          case 58:
            return Mt = os3.sent(), bt = e.as(as2), Nt2 = bt.memberCount, Ut2 = bt.joinedMemberCount, St2 = bt.inviter, Tt = bt.invitee, Mt.isExclusive || Mt.isSuper || Mt.isBroadcast ? (Mt.isSuper && this._userInfoCache.upsert(Tt, De3.ts), Mt._setLatestMemberCount(Nt2, Ut2, De3.ts)) : Mt.removeMember(Tt), this._sdkState.userId === Tt.userId ? (Mt.invitedAt = 0, Mt.myMemberState = Zt.NONE, Mt.isPublic ? this._dispatcher.dispatch(new Un({ channels: [Mt], context: { source: no.EVENT_CHANNEL_DECLINED_INVITE, inviter: St2, invitee: Tt } })) : this._dispatcher.dispatch(new Sn({ channelUrls: [Mt.url], context: { source: no.EVENT_CHANNEL_DECLINED_INVITE, inviter: St2, invitee: Tt } }))) : this._dispatcher.dispatch(new Un({ channels: [Mt], context: { source: no.EVENT_CHANNEL_DECLINED_INVITE, inviter: St2, invitee: Tt } })), kr(function() {
              return r(is2, void 0, void 0, function() {
                return s(this, function(e2) {
                  return this._groupChannelHandlers.forEach(function(e3) {
                    e3.onUserDeclinedInvitation && e3.onUserDeclinedInvitation(Mt, St2, Tt);
                  }), [2];
                });
              });
            }), [3, 85];
          case 59:
            return [4, this.getChannel(De3.channelUrl, true)];
          case 60:
            return At2 = os3.sent(), It2 = De3.category === f.TYPING_START, wt2 = e.as(It2 ? hs : _s).user, At2._updateTypingStatus(wt2, It2 ? De3.ts : 0), this._dispatcher.dispatch(new Un({ channels: [At2], context: { source: no.EVENT_CHANNEL_TYPING_STATUS_UPDATE } })), kr(function() {
              return r(is2, void 0, void 0, function() {
                return s(this, function(e2) {
                  return this._groupChannelHandlers.forEach(function(e3) {
                    e3.onTypingStatusUpdated && e3.onTypingStatusUpdated(At2);
                  }), [2];
                });
              });
            }), [3, 85];
          case 61:
            return [4, this.getChannel(De3.channelUrl, true)];
          case 62:
            Lt = os3.sent(), Dt = De3.category === f.USER_CHANNEL_MUTE, (xt = e.as(Dt ? ar : ur).user).userId === this._sdkState.userId && (Lt.myMutedState = Dt ? z.MUTED : z.UNMUTED, Lt._myMutedRemainingTime = xt.restrictionInfo.remainingDuration);
            try {
              for (Rt = o(Lt.members), Ft = Rt.next(); !Ft.done; Ft = Rt.next())
                if ((Ht = Ft.value).userId === xt.userId) {
                  Ht.isMuted = Dt;
                  break;
                }
            } catch (e2) {
              ns2 = { error: e2 };
            } finally {
              try {
                Ft && !Ft.done && (rs2 = Rt.return) && rs2.call(Rt);
              } finally {
                if (ns2)
                  throw ns2.error;
              }
            }
            return Lt.isSuper && this._userInfoCache.upsert(xt, De3.ts), this._dispatcher.dispatch(new Un({ channels: [Lt], context: { source: Dt ? no.EVENT_CHANNEL_MUTED : no.EVENT_CHANNEL_UNMUTED, user: xt } })), kr(function() {
              return r(is2, void 0, void 0, function() {
                return s(this, function(e2) {
                  return this._groupChannelHandlers.forEach(function(e3) {
                    Dt ? e3.onUserMuted && e3.onUserMuted(Lt, xt) : e3.onUserUnmuted && e3.onUserUnmuted(Lt, xt);
                  }), [2];
                });
              });
            }), [3, 85];
          case 63:
            return (Gt = this._leftChannels.get(De3.channelUrl)) ? ($t2 = Gt.channel, [3, 66]) : [3, 64];
          case 64:
            return [4, this.getChannel(De3.channelUrl, true)];
          case 65:
            $t2 = os3.sent(), os3.label = 66;
          case 66:
            return Bt = $t2, this._markAsLeave(Bt), en3 = e.as(lr).user, sn2 = en3.userId === this._sdkState.userId, Bt.isSuper && this._userInfoCache.upsert(en3, De3.ts), sn2 && this._dispatcher.dispatch(new Sn({ channelUrls: [Bt.url], context: { source: no.EVENT_CHANNEL_BANNED, user: en3 } })), kr(function() {
              return r(is2, void 0, void 0, function() {
                return s(this, function(e2) {
                  return this._groupChannelHandlers.forEach(function(e3) {
                    e3.onUserBanned && e3.onUserBanned(Bt, en3);
                  }), [2];
                });
              });
            }), [3, 85];
          case 67:
            return [4, this.getChannel(De3.channelUrl, true)];
          case 68:
            return tn2 = os3.sent(), nn3 = e.as(hr).user, sn2 = nn3.userId === this._sdkState.userId, tn2.isSuper && this._userInfoCache.upsert(nn3, De3.ts), sn2 && this._dispatcher.dispatch(new Sn({ channelUrls: [tn2.url], context: { source: no.EVENT_CHANNEL_UNBANNED, user: nn3 } })), kr(function() {
              return r(is2, void 0, void 0, function() {
                return s(this, function(e2) {
                  return this._groupChannelHandlers.forEach(function(e3) {
                    e3.onUserUnbanned && e3.onUserUnbanned(tn2, nn3);
                  }), [2];
                });
              });
            }), [3, 85];
          case 69:
            return [4, this.getChannel(De3.channelUrl, true)];
          case 70:
            return rn2 = os3.sent(), an2 = e.as(pr).freeze, rn2.isFrozen = an2, this._dispatcher.dispatch(new Un({ channels: [rn2], context: { source: an2 ? no.EVENT_CHANNEL_FROZEN : no.EVENT_CHANNEL_UNFROZEN } })), kr(function() {
              return r(is2, void 0, void 0, function() {
                return s(this, function(e2) {
                  return this._groupChannelHandlers.forEach(function(e3) {
                    an2 ? e3.onChannelFrozen && e3.onChannelFrozen(rn2) : e3.onChannelUnfrozen && e3.onChannelUnfrozen(rn2);
                  }), [2];
                });
              });
            }), [3, 85];
          case 71:
            return [4, this.getChannel(De3.channelUrl, true)];
          case 72:
            return on2 = os3.sent(), un3 = e.as(cs2), cn2 = un3.allowAutoUnhide, ln3 = un3.hidePreviousMessages, hn2 = un3.messageOffsetTimestamp, null !== cn2 && (on2.hiddenState = cn2 ? ir.HIDDEN_ALLOW_AUTO_UNHIDE : ir.HIDDEN_PREVENT_AUTO_UNHIDE), null !== ln3 && ln3 && on2._updateUnreadCount(0, 0), null !== hn2 && (on2.messageOffsetTimestamp = hn2), this._dispatcher.dispatch(new Un({ channels: [on2], context: { source: no.EVENT_CHANNEL_HIDDEN } })), kr(function() {
              return r(is2, void 0, void 0, function() {
                return s(this, function(e2) {
                  return this._groupChannelHandlers.forEach(function(e3) {
                    e3.onChannelHidden && e3.onChannelHidden(on2);
                  }), [2];
                });
              });
            }), [3, 85];
          case 73:
            return [4, this.getChannel(De3.channelUrl, true)];
          case 74:
            return (dn2 = os3.sent()).hiddenState = ir.UNHIDDEN, this._dispatcher.dispatch(new Un({ channels: [dn2], context: { source: no.EVENT_CHANNEL_UNHIDDEN } })), kr(function() {
              return r(is2, void 0, void 0, function() {
                return s(this, function(e2) {
                  return this._groupChannelHandlers.forEach(function(e3) {
                    e3.onChannelChanged && e3.onChannelChanged(dn2);
                  }), [2];
                });
              });
            }), [3, 85];
          case 75:
            return [4, this.getChannel(De3.channelUrl, true)];
          case 76:
            return _n3 = os3.sent(), this._dispatcher.dispatch(new Sn({ channelUrls: [De3.channelUrl], context: { source: no.EVENT_CHANNEL_DELETED } })), kr(function() {
              return r(is2, void 0, void 0, function() {
                return s(this, function(e2) {
                  return this._groupChannelHandlers.forEach(function(e3) {
                    e3.onChannelDeleted && e3.onChannelDeleted(_n3.url, _n3.channelType);
                  }), [2];
                });
              });
            }), [3, 85];
          case 77:
            return [4, this.getChannelWithoutCache(De3.channelUrl, true)];
          case 78:
            return pn2 = os3.sent(), this._dispatcher.dispatch(new Un({ channels: [pn2], context: { source: no.EVENT_CHANNEL_UPDATED } })), kr(function() {
              return r(is2, void 0, void 0, function() {
                return s(this, function(e2) {
                  return this._groupChannelHandlers.forEach(function(e3) {
                    e3.onChannelChanged && e3.onChannelChanged(pn2);
                  }), [2];
                });
              });
            }), [3, 85];
          case 79:
            return [4, this.getChannel(De3.channelUrl, true)];
          case 80:
            return fn2 = os3.sent(), vn3 = e.as(Gn), mn2 = vn3.created, gn2 = vn3.updated, En3 = vn3.deleted, mn2 && (fn2._upsertCachedMetaData(mn2, De3.ts), this._dispatcher.dispatch(new Un({ channels: [fn2], context: { source: no.EVENT_CHANNEL_METADATA_CREATED, metaData: mn2 }, ts: De3.ts }))), gn2 && (fn2._upsertCachedMetaData(gn2, De3.ts), this._dispatcher.dispatch(new Un({ channels: [fn2], context: { source: no.EVENT_CHANNEL_METADATA_UPDATED, metaData: gn2 }, ts: De3.ts }))), En3 && (fn2._removeFromCachedMetaData(En3, De3.ts), this._dispatcher.dispatch(new Un({ channels: [fn2], context: { source: no.EVENT_CHANNEL_METADATA_DELETED, metaDataKeys: En3 }, ts: De3.ts }))), kr(function() {
              return r(is2, void 0, void 0, function() {
                return s(this, function(e2) {
                  return this._groupChannelHandlers.forEach(function(e3) {
                    mn2 && e3.onMetaDataCreated && e3.onMetaDataCreated(fn2, mn2), gn2 && e3.onMetaDataUpdated && e3.onMetaDataUpdated(fn2, gn2), En3 && e3.onMetaDataDeleted && e3.onMetaDataDeleted(fn2, En3);
                  }), [2];
                });
              });
            }), [3, 85];
          case 81:
            return [4, this.getChannel(De3.channelUrl, true)];
          case 82:
            return Cn2 = os3.sent(), yn2 = e.as(nr), Mn2 = yn2.created, bn3 = yn2.updated, Nn2 = yn2.deleted, Mn2 && this._dispatcher.dispatch(new Un({ channels: [Cn2], context: { source: no.EVENT_CHANNEL_METACOUNTER_CREATED, metaCounters: Mn2 } })), bn3 && this._dispatcher.dispatch(new Un({ channels: [Cn2], context: { source: no.EVENT_CHANNEL_METACOUNTER_UPDATED, metaCounters: bn3 } })), Nn2 && this._dispatcher.dispatch(new Un({ channels: [Cn2], context: { source: no.EVENT_CHANNEL_METACOUNTER_DELETED, metaCounterKeys: Nn2 } })), kr(function() {
              return r(is2, void 0, void 0, function() {
                return s(this, function(e2) {
                  return this._groupChannelHandlers.forEach(function(e3) {
                    Mn2 && e3.onMetaCounterCreated && e3.onMetaCounterCreated(Cn2, Mn2), bn3 && e3.onMetaCounterUpdated && e3.onMetaCounterUpdated(Cn2, bn3), Nn2 && e3.onMetaCounterDeleted && e3.onMetaCounterDeleted(Cn2, Nn2);
                  }), [2];
                });
              });
            }), [3, 85];
          case 83:
            return [4, this.getChannel(De3.channelUrl, true)];
          case 84:
            return Tn3 = os3.sent(), An2 = e.as(H2), In3 = An2.pinnedMessageIds, wn2 = An2.latestPinnedMessage, (Ln2 = An2.ts) > Tn3._pinnedMessagesUpdatedAt && (Tn3.pinnedMessageIds = null != In3 ? In3 : [], Tn3.lastPinnedMessage = wn2, Tn3._pinnedMessagesUpdatedAt = Ln2, this._dispatcher.dispatch(new Un({ channels: [Tn3], context: { source: no.EVENT_PINNED_MESSAGE_UPDATED } })), kr(function() {
              return r(is2, void 0, void 0, function() {
                var e2, t4, n3, s3, r3;
                return s(this, function(a2) {
                  try {
                    for (e2 = o(this._groupChannelHandlers.values()), t4 = e2.next(); !t4.done; t4 = e2.next())
                      (n3 = t4.value).onChannelChanged && n3.onChannelChanged(Tn3);
                  } catch (e3) {
                    s3 = { error: e3 };
                  } finally {
                    try {
                      t4 && !t4.done && (r3 = e2.return) && r3.call(e2);
                    } finally {
                      if (s3)
                        throw s3.error;
                    }
                  }
                  return [2];
                });
              });
            }), kr(function() {
              return r(is2, void 0, void 0, function() {
                return s(this, function(e2) {
                  return this._groupChannelHandlers.forEach(function(e3) {
                    e3.onPinnedMessageUpdated && e3.onPinnedMessageUpdated(Tn3);
                  }), [2];
                });
              });
            })), [3, 85];
          case 85:
            return [3, 87];
          case 86:
            switch ((Dn2 = e.as(O).event).category) {
              case L.USER_BLOCK:
                xn2 = v2.getDataAsUserBlockEvent(this._iid, Dn2), Fn2 = xn2.blocker, kn2 = xn2.blockee, this._groupChannelCache.block(Fn2.userId, kn2.userId);
                break;
              case L.USER_UNBLOCK:
                Rn2 = v2.getDataAsUserBlockEvent(this._iid, Dn2), Fn2 = Rn2.blocker, kn2 = Rn2.blockee, this._groupChannelCache.unblock(Fn2.userId, kn2.userId);
            }
            return [3, 87];
          case 87:
            return [3, 89];
          case 88:
            if (Pn2 = os3.sent(), v(Pn2))
              throw Pn2;
            return [3, 89];
          case 89:
            return [2];
        }
      });
    });
  }, c2.prototype._markAsLeave = function(e) {
    var t3, n2 = this, s2 = null !== (t3 = this._leftChannels.get(e.url)) && void 0 !== t3 ? t3 : { channel: e, ref: 0 };
    s2.ref++, this._leftChannels.set(e.url, s2), setTimeout(function() {
      s2.ref--, 0 === s2.ref && n2._leftChannels.delete(e.url);
    }, 1e4);
  }, c2.prototype.addHandler = function(e, t3) {
    this._groupChannelHandlers.set(e, t3);
  }, c2.prototype.removeHandler = function(e) {
    this._groupChannelHandlers.delete(e);
  }, c2.prototype.clearHandler = function() {
    this._groupChannelHandlers.clear();
  }, c2.prototype.subscribeChannelEvent = function(e, t3) {
    this._groupChannelBroadcast.subscribe(e, t3);
  }, c2.prototype.unsubscribeChannelEvent = function(e) {
    this._groupChannelBroadcast.unsubscribe(e);
  }, c2.prototype._updateJoinedMemberCount = function(e) {
    e.joinedMemberCount = e.members.filter(function(e2) {
      return e2.state === Zt.JOINED;
    }).length;
  }, c2.prototype.getChannel = function(e, t3) {
    return void 0 === t3 && (t3 = false), r(this, void 0, void 0, function() {
      var n2;
      return s(this, function(s2) {
        switch (s2.label) {
          case 0:
            cs(S("string", e)).throw(b.invalidParameters), s2.label = 1;
          case 1:
            return s2.trys.push([1, 3, , 4]), [4, this.getChannelFromCache(e)];
          case 2:
            return (n2 = s2.sent()) ? [2, n2] : [3, 4];
          case 3:
            return s2.sent(), [3, 4];
          case 4:
            return [4, this.getChannelWithoutCache(e, t3)];
          case 5:
            return [2, s2.sent()];
        }
      });
    });
  }, c2.prototype.getChannelWithoutCache = function(e, t3) {
    return void 0 === t3 && (t3 = false), r(this, void 0, void 0, function() {
      var n2, s2, r2, a2, i;
      return s(this, function(o2) {
        switch (o2.label) {
          case 0:
            return cs(S("string", e)).throw(b.invalidParameters), n2 = new Ln({ channelUrl: e, isInternalCall: t3 }), [4, this._requestQueue.send(n2)];
          case 1:
            switch (s2 = o2.sent(), r2 = s2.as(Dn).channel, a2 = r2.unreadMessageCount, i = r2.unreadMentionCount, r2.myCountPreference) {
              case ar2.UNREAD_MESSAGE_COUNT_ONLY:
                i = 0;
                break;
              case ar2.UNREAD_MENTION_COUNT_ONLY:
                a2 = 0;
                break;
              case ar2.OFF:
                a2 = 0, i = 0;
            }
            return r2._updateUnreadCount(a2, i), [4, this.upsertChannelsToCache([r2])];
          case 2:
            return [2, o2.sent()[0]];
        }
      });
    });
  }, c2.prototype.refreshChannel = function(e, t3, n2, s2) {
    return void 0 === t3 && (t3 = true), void 0 === n2 && (n2 = no.REFRESH_CHANNEL), void 0 === s2 && (s2 = false), r(this, void 0, void 0, function() {
      var r2, a2, i, o2, u3;
      return s(this, function(c3) {
        switch (c3.label) {
          case 0:
            return c3.trys.push([0, 5, , 6]), r2 = new Ln({ channelUrl: e, isInternalCall: t3, showLatestMessage: s2 }), [4, this._requestQueue.send(r2)];
          case 1:
            return a2 = c3.sent(), (i = a2.as(Dn).channel).myMemberState !== Zt.NONE ? [3, 2] : (this._dispatcher.dispatch(new Sn({ channelUrls: [i.url], context: { source: n2 } })), [3, 4]);
          case 2:
            return [4, this.upsertChannelsToCache([i])];
          case 3:
            o2 = c3.sent(), this._dispatcher.dispatch(new Un({ channels: o2, context: { source: n2 } })), c3.label = 4;
          case 4:
            return [3, 6];
          case 5:
            return (u3 = c3.sent()).code !== u.NON_AUTHORIZED && u3.code !== u.NOT_FOUND_IN_DATABASE || this._dispatcher.dispatch(new Sn({ channelUrls: [e], context: { source: n2 } })), [3, 6];
          case 6:
            return [2];
        }
      });
    });
  }, c2.prototype.getMyGroupChannels = function(e, t3, n2, r2, a2) {
    return void 0 === r2 && (r2 = no.REQUEST_CHANNEL), void 0 === a2 && (a2 = false), r(this, void 0, void 0, function() {
      var i, o2, u3, c3, l, h, d, _2, p;
      return s(this, function(f2) {
        switch (f2.label) {
          case 0:
            return t3.createdAfter && (t3.createdAfter = Math.floor(t3.createdAfter / 1e3)), t3.createdBefore && (t3.createdBefore = Math.floor(t3.createdBefore / 1e3)), i = false, a2 && (o2 = uo.of(this._iid), u3 = o2.appInfo, (c3 = o2.cacheContext) && !c3.localCacheEnabled && (null == u3 ? void 0 : u3.enabledChannelMemberShipHistory) && (null == u3 ? void 0 : u3.applicationAttributes.includes("left_user_view_support")) && (i = true)), l = new Rn(n(n({}, t3), { userId: this._sdkState.userId, token: e, limit: n2, includeLeftChannel: a2 && i })), [4, this._requestQueue.send(l)];
          case 1:
            return h = f2.sent(), d = h.as(Fn), _2 = d.channels, p = d.token, this._dispatcher.dispatch(new Un({ channels: _2, context: { source: r2 } })), [2, { channels: _2, token: p }];
        }
      });
    });
  }, c2.prototype.getMyGroupChannelChangeLogs = function(e, t3, r2) {
    return void 0 === r2 && (r2 = no.REQUEST_CHANNEL_CHANGELOGS), r(this, void 0, void 0, function() {
      var a2, i, o2, u3, c3, d, _2, p;
      return s(this, function(f2) {
        switch (f2.label) {
          case 0:
            return a2 = n(n({}, fn), t3), cs((S("string", e) || S("number", e)) && vn2(a2)).throw(b.invalidParameters), i = new In2(oe({ userId: this._sdkState.userId, ts: "number" == typeof e ? e : null, token: "string" == typeof e ? e : null, filter: a2 })), [4, this._requestQueue.send(i)];
          case 1:
            return o2 = f2.sent(), u3 = o2.as(wn), c3 = u3.updatedChannels, d = u3.deletedChannelUrls, _2 = u3.hasMore, p = u3.ts, c3.length > 0 && this._dispatcher.dispatch(new Un({ channels: c3, context: { source: r2 }, ts: p })), d.length > 0 && this._dispatcher.dispatch(new Sn({ channelUrls: d, context: { source: r2 } })), [2, { updatedChannels: c3, deletedChannelUrls: d, hasMore: _2, token: u3.token }];
        }
      });
    });
  }, c2.prototype.getGroupChannelCount = function(e) {
    return r(this, void 0, void 0, function() {
      var t3, n2, r2;
      return s(this, function(a2) {
        switch (a2.label) {
          case 0:
            return t3 = n(n({}, mn), e), cs(gn(t3)).throw(b.invalidParameters), n2 = new kn({ userId: this._sdkState.userId, filter: t3 }), [4, this._requestQueue.send(n2)];
          case 1:
            return r2 = a2.sent(), [2, r2.as(Pn).groupChannelCount];
        }
      });
    });
  }, c2.prototype.getUnreadItemCount = function(e) {
    return r(this, void 0, void 0, function() {
      var n2, r2, a2, i, o2, u3, c3, d, _2, p, v4, g2, E2, C3, y3, M2;
      return s(this, function(f2) {
        switch (f2.label) {
          case 0:
            return n2 = n(n({}, En2), e), cs(function(e2) {
              return C(ln2, e2.keys) && C("string", e2.customTypeFilters, true) && C("string", e2.customTypesFilter, true);
            }(n2)).throw(b.invalidParameters), r2 = uo.of(this._iid), a2 = r2.sdkState, i = r2.requestQueue, o2 = new On({ userId: a2.userId, filter: n2 }), [4, i.send(o2)];
          case 1:
            return u3 = f2.sent(), c3 = u3.as(Hn), d = c3.groupChannelUnreadMentionCount, _2 = c3.groupChannelUnreadMessageCount, p = c3.groupChannelInvitationCount, v4 = c3.superGroupChannelUnreadMentionCount, g2 = c3.superGroupChannelUnreadMessageCount, E2 = c3.superGroupChannelInvitationCount, C3 = c3.nonSuperGroupChannelUnreadMentionCount, y3 = c3.nonSuperGroupChannelUnreadMessageCount, M2 = c3.nonSuperGroupChannelInvitationCount, [2, se({ groupChannelUnreadMentionCount: d, groupChannelUnreadMessageCount: _2, groupChannelInvitationCount: p, superGroupChannelUnreadMentionCount: v4, superGroupChannelUnreadMessageCount: g2, superGroupChannelInvitationCount: E2, nonSuperGroupChannelUnreadMentionCount: C3, nonSuperGroupChannelUnreadMessageCount: y3, nonSuperGroupChannelInvitationCount: M2 })];
        }
      });
    });
  }, c2.prototype.getTotalUnreadChannelCount = function() {
    return r(this, void 0, void 0, function() {
      var e, t3, n2, s2, r2;
      return s(this, function(a2) {
        switch (a2.label) {
          case 0:
            return e = uo.of(this._iid), t3 = e.sdkState, n2 = e.requestQueue, s2 = new Gn2({ userId: t3.userId }), [4, n2.send(s2)];
          case 1:
            return r2 = a2.sent(), [2, r2.as(Vn).unreadCount];
        }
      });
    });
  }, c2.prototype.getTotalUnreadMessageCount = function(e) {
    return r(this, void 0, void 0, function() {
      var t3, n2, r2, a2, i, o2;
      return s(this, function(u3) {
        switch (u3.label) {
          case 0:
            return t3 = n(n({}, Cn), e), cs(yn(t3)).throw(b.invalidParameters), n2 = uo.of(this._iid), r2 = n2.sdkState, a2 = n2.requestQueue, i = new Bn({ userId: r2.userId, filter: t3 }), [4, a2.send(i)];
          case 1:
            return o2 = u3.sent(), [2, o2.as(qn).unreadCount];
        }
      });
    });
  }, c2.prototype.getTotalScheduledMessageCount = function(e) {
    return void 0 === e && (e = {}), r(this, void 0, void 0, function() {
      var t3, n2, a2, i;
      return s(this, function(o2) {
        switch (o2.label) {
          case 0:
            return t3 = n(n({}, Mn), e), cs(function(e2) {
              return S("string", e2.channelUrl, true) && C(dt, e2.scheduledStatus, true) && T(j, e2.messageTypeFilter);
            }(t3)).throw(b.invalidParameters), n2 = uo.of(this._iid).requestQueue, a2 = new zn(t3), [4, n2.send(a2)];
          case 1:
            return i = o2.sent(), [2, i.as(Wn).count];
        }
      });
    });
  }, c2.prototype.getSubscribedTotalUnreadMessageCount = function() {
    var e = uo.of(this._iid).subscribedUnreadMessageCount;
    return e.all >= 0 ? e.all : 0;
  }, c2.prototype.getSubscribedCustomTypeTotalUnreadMessageCount = function() {
    var e = 0, t3 = uo.of(this._iid).subscribedUnreadMessageCount;
    return Object.keys(t3.customTypes).forEach(function(n2) {
      e += t3.customTypes[n2];
    }), e;
  }, c2.prototype.getSubscribedCustomTypeUnreadMessageCount = function(e) {
    var t3;
    return null !== (t3 = uo.of(this._iid).subscribedUnreadMessageCount.customTypes[e]) && void 0 !== t3 ? t3 : 0;
  }, c2.prototype.createChannel = function(e) {
    return r(this, void 0, void 0, function() {
      var t3, n2, r2, a2;
      return s(this, function(i) {
        switch (i.label) {
          case 0:
            return t3 = n(n({}, _n2), e), cs(pn(t3)).throw(b.invalidParameters), t3.isPublic || (t3.accessCode = void 0), n2 = new Qn(n({ userId: this._sdkState.userId }, t3)), [4, this._requestQueue.send(n2)];
          case 1:
            return r2 = i.sent(), a2 = r2.as(Yn).channel, [4, this.upsertChannelsToCache([a2])];
          case 2:
            return i.sent(), [2, a2];
        }
      });
    });
  }, c2.prototype.markAsReadAll = function() {
    return r(this, void 0, void 0, function() {
      var e, t3, n2, s2, r2, a2, i, o2;
      return s(this, function(u3) {
        switch (u3.label) {
          case 0:
            return e = Date.now(), cs(e - this._markAsReadAllLastSentAt >= 1e3).throw(b.markAsReadAllRateLimitExceeded), this._markAsReadAllLastSentAt = e, t3 = new Kn({ userId: this._sdkState.userId }), [4, this._requestQueue.send(t3)];
          case 1:
            u3.sent(), n2 = this._groupChannelCache.channels;
            try {
              for (s2 = o(n2), r2 = s2.next(); !r2.done; r2 = s2.next())
                (a2 = r2.value)._updateUnreadMemberState(this._sdkState.userId, e), a2._updateUnreadCount(0, 0);
            } catch (e2) {
              i = { error: e2 };
            } finally {
              try {
                r2 && !r2.done && (o2 = s2.return) && o2.call(s2);
              } finally {
                if (i)
                  throw i.error;
              }
            }
            return n2.length > 0 ? [4, this.upsertChannelsToCache(n2)] : [3, 3];
          case 2:
            u3.sent(), u3.label = 3;
          case 3:
            return [2];
        }
      });
    });
  }, c2.prototype.markAsReadWithChannelUrls = function(e) {
    return r(this, void 0, void 0, function() {
      var t3, n2, s2, r2, a2, i, o2, u3, c3;
      return s(this, function(d) {
        switch (d.label) {
          case 0:
            return t3 = Date.now(), cs(C("string", e) && t3 - this._markAsReadAllLastSentAt >= 1e3).throw(b.markAsReadAllRateLimitExceeded), this._markAsReadAllLastSentAt = t3, n2 = new Kn({ userId: this._sdkState.userId, channelUrls: e }), [4, this._requestQueue.send(n2)];
          case 1:
            d.sent(), s2 = this._groupChannelCache.channels, r2 = [];
            try {
              for (a2 = o(s2), i = a2.next(); !i.done; i = a2.next())
                o2 = i.value, e.includes(o2.url) && (o2._updateUnreadMemberState(this._sdkState.userId, t3), o2._updateUnreadCount(0, 0), r2.push(o2));
            } catch (e2) {
              u3 = { error: e2 };
            } finally {
              try {
                i && !i.done && (c3 = a2.return) && c3.call(a2);
              } finally {
                if (u3)
                  throw u3.error;
              }
            }
            return r2.length > 0 ? [4, this.upsertChannelsToCache(r2)] : [3, 3];
          case 2:
            d.sent(), d.label = 3;
          case 3:
            return [2];
        }
      });
    });
  }, c2.prototype.markAsDelivered = function(e) {
    return r(this, void 0, void 0, function() {
      return s(this, function(t3) {
        switch (t3.label) {
          case 0:
            return [4, this.getChannel(e)];
          case 1:
            return [4, t3.sent().markAsDelivered()];
          case 2:
            return t3.sent(), [2];
        }
      });
    });
  }, c2.prototype.getMessageFromCache = function(e) {
    var t3;
    return r(this, void 0, void 0, function() {
      return s(this, function(n2) {
        switch (n2.label) {
          case 0:
            return [4, this._messageCache.get(e)];
          case 1:
            return [2, null !== (t3 = n2.sent()) && void 0 !== t3 ? t3 : null];
        }
      });
    });
  }, c2.prototype.getExactlyMatchingMessagesForTokenFromCache = function(e, t3, n2) {
    return r(this, void 0, void 0, function() {
      return s(this, function(s2) {
        switch (s2.label) {
          case 0:
            return [4, this._messageCache.fetch({ channelUrl: e, token: t3, filter: n2, exactMatch: true })];
          case 1:
            return [2, s2.sent()];
        }
      });
    });
  }, c2.prototype.getMessagesFromCache = function(e, t3, n2, s2, r2, a2) {
    return void 0 === r2 && (r2 = Xr), void 0 === a2 && (a2 = true), r(this, void 0, void 0, function() {
      return s(this, function(i) {
        switch (i.label) {
          case 0:
            return [4, this._messageCache.fetch({ channelUrl: e, token: t3, limit: r2, filter: s2, backward: "next" === n2, inclusive: a2 })];
          case 1:
            return [2, i.sent()];
        }
      });
    });
  }, c2.prototype.getPollMessagesFromCache = function(e, t3, n2, s2) {
    return r(this, void 0, void 0, function() {
      return s(this, function(r2) {
        switch (r2.label) {
          case 0:
            return [4, this._messageCache.fetch({ channelUrl: e, token: t3, limit: s2, filter: n2, backward: false, isPollOnly: true })];
          case 1:
            return [2, r2.sent()];
        }
      });
    });
  }, c2.prototype.getCachedMessageCountBetween = function(e, t3, n2, s2) {
    return r(this, void 0, void 0, function() {
      return s(this, function(r2) {
        switch (r2.label) {
          case 0:
            return [4, this._messageCache.countBetween(e, t3, new Es({ top: n2, bottom: s2 }))];
          case 1:
            return [2, r2.sent()];
        }
      });
    });
  }, c2.prototype.getUnsentMessagesFromCache = function(e, t3) {
    return r(this, void 0, void 0, function() {
      return s(this, function(n2) {
        switch (n2.label) {
          case 0:
            return [4, this._unsentMessageCache.fetch({ channelUrl: e, filter: t3 })];
          case 1:
            return [2, n2.sent()];
        }
      });
    });
  }, c2.prototype.removeFailedMessageFromCache = function(e) {
    return r(this, void 0, void 0, function() {
      return s(this, function(t3) {
        switch (t3.label) {
          case 0:
            return [4, this._unsentMessageCache.remove([e])];
          case 1:
            return t3.sent(), [2];
        }
      });
    });
  }, c2;
}(g);
var Ms = function(e, t3) {
  return t3 instanceof _t ? e.findIndex(function(e2) {
    return e2 instanceof _t && t3.isIdentical(e2);
  }) : e.findIndex(function(e2) {
    return e2.isIdentical(t3);
  });
};
var bs = function(e, t3) {
  return e.findIndex(function(e2) {
    return e2 instanceof yt ? e2.messageId === t3 : e2 instanceof St ? e2.notificationId === t3 : void 0;
  });
};
var Ns = function(e, t3) {
  if (e.length > 0) {
    for (var n2 = 0, s2 = e.length - 1, r2 = Math.floor((n2 + s2) / 2); n2 < s2; ) {
      var a2 = e[r2].createdAt - t3.createdAt;
      if (a2 > 0)
        s2 = r2, r2 = Math.floor((n2 + s2) / 2);
      else {
        if (!(a2 < 0))
          return r2;
        n2 = r2 + 1, r2 = Math.floor((n2 + s2) / 2);
      }
    }
    return e[r2].createdAt > t3.createdAt ? r2 : r2 + 1;
  }
  return e.length;
};
var Us = {};
var Ss = function() {
  function e(e2) {
    var t3 = e2._iid, n2 = e2.channel, s2 = e2.limit, r2 = void 0 === s2 ? 100 : s2, a2 = this;
    this.ref = 0, this._iid = t3, this._channel = n2, this._limit = r2, this._prevSyncLoopCount = 0;
    var i, o2, u2 = uo.of(this._iid), c2 = u2.sdkState, l = u2.cacheContext, v4 = u2.dispatcher, m2 = u2.logger, g2 = u2.statManager, E2 = u2.messageBackgroundSyncThrottleController;
    this._metadataKey = (i = c2.userId, o2 = n2.url, "sendbird:".concat(i, "@groupchannel/").concat(o2, "/message/sync.meta"));
    var C3 = function(e3, t4) {
      return "sendbird:".concat(e3, "@groupchannel/").concat(t4, "/message/sync");
    }(c2.userId, n2.url);
    this._prevSync = new w(C3, function(e3) {
      return r(a2, void 0, void 0, function() {
        var t4 = this;
        return s(this, function(s3) {
          switch (s3.label) {
            case 0:
              return [4, E2.run("message-background-sync-".concat(n2.url, "-prev"), function() {
                return r(t4, void 0, void 0, function() {
                  var t5, s4, r3, a3, i2, o3, u3, c3, p, v5, E3, C4;
                  return s(this, function(f2) {
                    switch (f2.label) {
                      case 0:
                        return t5 = { hasNext: true, nextToken: 0 }, this._prevSyncLoopCount++, [4, this.loadMetadata()];
                      case 1:
                        if (f2.sent(), m2.debug("message background prev sync from", null === (o3 = this._metadata) || void 0 === o3 ? void 0 : o3.range.top), null === (u3 = this._metadata) || void 0 === u3 ? void 0 : u3.previousComplete)
                          return [3, 10];
                        f2.label = 2;
                      case 2:
                        return f2.trys.push([2, 5, 8, 9]), [4, la.of(this._iid)._getMessagesByTimestampForCollection(this._channel.url, this._channel.channelType, (null === (p = null === (c3 = this._metadata) || void 0 === c3 ? void 0 : c3.range) || void 0 === p ? void 0 : p.top) ? this._metadata.range.top : e3, { prevResultSize: this._limit, nextResultSize: 0, replyType: Q.ALL, includeReactions: true, includeMetaArray: true, includeParentMessageInfo: true, includeThreadInfo: true, isInclusive: true }, no.SYNC_MESSAGE_BACKGROUND, false, false, qt.INTERNAL_BACKSYNC)];
                      case 3:
                        return (s4 = f2.sent().messages).length > 0 && (r3 = s4.map(function(e4) {
                          return e4.createdAt;
                        }), (null === (v5 = this._metadata) || void 0 === v5 ? void 0 : (i2 = v5.range).intersect.apply(i2, c([], a(r3), false))) ? this.extendRange(s4) : this._metadata = { range: new Es({ top: Math.min.apply(Math, c([], a(r3), false)), bottom: Math.max.apply(Math, c([], a(r3), false)) }), previousComplete: false }), t5.hasNext = s4.length >= this._limit && this._prevSyncLoopCount < 1, this._metadata && (t5.nextToken = this._metadata.range.top, this._metadata.previousComplete = s4.length < this._limit), m2.debug("message background prev sync progress", t5), [4, this.saveMetadata()];
                      case 4:
                        return f2.sent(), [3, 9];
                      case 5:
                        return a3 = f2.sent(), m2.debug("message background prev sync error", a3), a3 instanceof b && a3.isInvalidTokenError ? [4, this.clearMetadata()] : [3, 7];
                      case 6:
                        f2.sent(), f2.label = 7;
                      case 7:
                        throw a3;
                      case 8:
                        return g2.put(new $e({ type: Me.FEATURE_LOCALCACHE_EVENT, ts: Date.now(), data: { channel_url: n2.url, measured_on: "back_sync", event: "cache_fetch", max_db_size: null !== (C4 = null === (E3 = l.localCacheConfig) || void 0 === E3 ? void 0 : E3.maxSize) && void 0 !== C4 ? C4 : 0, use_local_cache: l.localCacheEnabled, starting_point: 0, message_init_policy: "" } })), [7];
                      case 9:
                        return [3, 11];
                      case 10:
                        t5.hasNext = false, f2.label = 11;
                      case 11:
                        return [2, t5];
                    }
                  });
                });
              })];
            case 1:
              return [2, s3.sent()];
          }
        });
      });
    }), this._nextSync = new w(C3, function(e3) {
      return r(a2, void 0, void 0, function() {
        var t4 = this;
        return s(this, function(s3) {
          switch (s3.label) {
            case 0:
              return [4, E2.run("message-background-sync-".concat(n2.url, "-next"), function() {
                return r(t4, void 0, void 0, function() {
                  var t5, s4, r3, a3, i2, o3, u3, c3, h, p, v5;
                  return s(this, function(f2) {
                    switch (f2.label) {
                      case 0:
                        return t5 = { hasNext: true, nextToken: 0 }, [4, this.loadMetadata()];
                      case 1:
                        f2.sent(), m2.debug("message background next sync from", null === (o3 = this._metadata) || void 0 === o3 ? void 0 : o3.range.bottom), f2.label = 2;
                      case 2:
                        return f2.trys.push([2, 5, 6, 7]), [4, la.of(this._iid)._getMessagesByTimestampForCollection(this._channel.url, this._channel.channelType, (null === (c3 = null === (u3 = this._metadata) || void 0 === u3 ? void 0 : u3.range) || void 0 === c3 ? void 0 : c3.bottom) ? this._metadata.range.bottom : e3, { prevResultSize: 0, nextResultSize: this._limit, replyType: Q.ALL, includeReactions: true, includeMetaArray: true, includeParentMessageInfo: true, includeThreadInfo: true, isInclusive: true }, no.SYNC_MESSAGE_BACKGROUND, false, false, qt.INTERNAL_BACKSYNC)];
                      case 3:
                        return (s4 = f2.sent().messages).length > 0 && (r3 = s4.map(function(e4) {
                          return e4.createdAt;
                        }), (null === (h = this._metadata) || void 0 === h ? void 0 : (i2 = h.range).intersect.apply(i2, c([], a(r3), false))) ? this.extendRange(s4) : this._metadata = { range: new Es({ top: Math.min.apply(Math, c([], a(r3), false)), bottom: Math.max.apply(Math, c([], a(r3), false)) }), previousComplete: false }), t5.hasNext = s4.length >= this._limit, this._metadata && (t5.nextToken = this._metadata.range.bottom), m2.debug("message background next sync progress", t5), [4, this.saveMetadata()];
                      case 4:
                        return f2.sent(), [3, 7];
                      case 5:
                        throw a3 = f2.sent(), m2.debug("message background next sync error", a3), a3;
                      case 6:
                        return g2.put(new $e({ type: Me.FEATURE_LOCALCACHE_EVENT, ts: Date.now(), data: { channel_url: n2.url, measured_on: "back_sync", event: "cache_fetch", max_db_size: null !== (v5 = null === (p = l.localCacheConfig) || void 0 === p ? void 0 : p.maxSize) && void 0 !== v5 ? v5 : 0, use_local_cache: l.localCacheEnabled, starting_point: 0, message_init_policy: "" } })), [7];
                      case 7:
                        return [2, t5];
                    }
                  });
                });
              })];
            case 1:
              return [2, s3.sent()];
          }
        });
      });
    }), this._connectionEventContext = v4.on(function(e3) {
      if (e3 instanceof Fr)
        if (e3.stateType === Rr.CONNECTED)
          a2.resume();
        else
          a2.pause();
    });
  }
  return e.of = function(t3, n2) {
    return Us[t3] || (Us[t3] = {}), Us[t3][n2.url] || (Us[t3][n2.url] = new e({ _iid: t3, channel: n2 })), Us[t3][n2.url].ref++, Us[t3][n2.url];
  }, e.clear = function(e2, t3) {
    Us[e2] && Us[e2][t3] && (Us[e2][t3].close(), delete Us[e2]);
  }, Object.defineProperty(e.prototype, "range", { get: function() {
    var e2, t3;
    return null !== (t3 = null === (e2 = this._metadata) || void 0 === e2 ? void 0 : e2.range) && void 0 !== t3 ? t3 : new Es({});
  }, enumerable: false, configurable: true }), Object.defineProperty(e.prototype, "previousComplete", { get: function() {
    var e2;
    return !!(null === (e2 = this._metadata) || void 0 === e2 ? void 0 : e2.previousComplete);
  }, enumerable: false, configurable: true }), e.prototype.isWrappingMessages = function(e2) {
    var t3;
    return null === (t3 = this.range) || void 0 === t3 ? void 0 : t3.includes.apply(t3, c([], a(e2.map(function(e3) {
      return e3.createdAt;
    })), false));
  }, e.prototype.extendRange = function(e2) {
    var t3;
    this._metadata && (t3 = this._metadata.range).extends.apply(t3, c([], a(e2.map(function(e3) {
      return e3.createdAt;
    })), false));
  }, e.prototype.loadMetadata = function() {
    return r(this, void 0, void 0, function() {
      var e2;
      return s(this, function(t3) {
        switch (t3.label) {
          case 0:
            return this._metadata ? [3, 2] : [4, uo.of(this._iid).cacheContext.preference.get(this._metadataKey)];
          case 1:
            e2 = t3.sent(), this._metadata = e2 ? { range: new Es(e2.range), previousComplete: e2.previousComplete } : { range: new Es({}), previousComplete: false }, t3.label = 2;
          case 2:
            return [2, this._metadata];
        }
      });
    });
  }, e.prototype.saveMetadata = function() {
    return r(this, void 0, void 0, function() {
      return s(this, function(e2) {
        switch (e2.label) {
          case 0:
            return this._metadata ? [4, uo.of(this._iid).cacheContext.preference.set(this._metadataKey, this._metadata)] : [3, 2];
          case 1:
            return e2.sent(), [2, true];
          case 2:
            return [2, false];
        }
      });
    });
  }, e.prototype.clearMetadata = function() {
    return r(this, void 0, void 0, function() {
      return s(this, function(e2) {
        switch (e2.label) {
          case 0:
            return [4, uo.of(this._iid).cacheContext.preference.remove(this._metadataKey)];
          case 1:
            return e2.sent(), this._metadata = void 0, [2];
        }
      });
    });
  }, e.prototype.resume = function(e2) {
    var t3, n2, s2, r2;
    void 0 === e2 && (e2 = Date.now());
    var a2 = uo.of(this._iid), i = a2.logger, o2 = a2.sessionManager;
    a2.cacheContext.localCacheEnabled && o2.session.hasSession && (i.debug("message background sync resume()"), this._prevSyncLoopCount = 0, this._metadata && this._metadata.previousComplete || this._prevSync.start(null !== (n2 = null === (t3 = this._metadata) || void 0 === t3 ? void 0 : t3.range.top) && void 0 !== n2 ? n2 : e2), this._nextSync.start(null !== (r2 = null === (s2 = this._metadata) || void 0 === s2 ? void 0 : s2.range.bottom) && void 0 !== r2 ? r2 : e2));
  }, e.prototype.pause = function() {
    uo.of(this._iid).logger.debug("message background sync stop()"), this._prevSync.stop(), this._nextSync.stop();
  }, e.prototype.close = function() {
    this.ref--, this.ref <= 0 && (this.ref = 0, this.pause(), this._connectionEventContext.close(), delete Us[this._iid][this._channel.url]);
  }, e;
}();
var Ts = {};
var As = function() {
  function e(e2) {
    var t3 = e2._iid, n2 = e2.channel, r2 = e2.includeParams, a2 = this;
    this.ref = 0, this._iid = t3, this._channel = n2, this._includeParams = r2;
    var i, o2, u2 = uo.of(this._iid), c2 = u2.logger, l = u2.sdkState, d = u2.dispatcher;
    this._metadataKey = (i = l.userId, o2 = n2.url, "sendbird:".concat(i, "@groupchannel/").concat(o2, "/message/changelogs.meta"));
    var _2 = function(e3, t4) {
      return "sendbird:".concat(e3, "@groupchannel/").concat(t4, "/message/changelogs");
    }(l.userId, this._channel.url);
    this._sync = new w(_2, function() {
      return r(a2, void 0, void 0, function() {
        var e3, t4, n3, r3, a3, i2, o3, u3, l2;
        return s(this, function(d2) {
          switch (d2.label) {
            case 0:
              return e3 = { hasNext: true, nextToken: 0 }, [4, this.loadMetadata()];
            case 1:
              d2.sent(), c2.debug("message changelog sync from", null === (l2 = this._metadata) || void 0 === l2 ? void 0 : l2.token), d2.label = 2;
            case 2:
              return d2.trys.push([2, 5, , 8]), [4, la.of(this._iid).getMessageChangelogs(this._channel.url, this._channel.channelType, this._metadata.token, n({ replyType: Q.ALL }, this._includeParams), no.SYNC_MESSAGE_CHANGELOGS)];
            case 3:
              return t4 = d2.sent(), n3 = t4.updatedMessages, r3 = t4.deletedMessageIds, a3 = t4.hasMore, i2 = t4.token, o3 = t4.forceUseNextToken, e3.hasNext = a3, e3.nextToken = i2, n3.length > 0 || r3.length > 0 ? this._metadata && (this._metadata.token = i2) : o3 && this._metadata && (this._metadata.token = i2), c2.debug("message changelog sync progress", e3), [4, this.saveMetadata()];
            case 4:
              return d2.sent(), [3, 8];
            case 5:
              return u3 = d2.sent(), c2.debug("message changelog sync error", u3), u3 instanceof b && u3.isInvalidTokenError ? [4, this.clearMetadata()] : [3, 7];
            case 6:
              d2.sent(), d2.label = 7;
            case 7:
              throw u3;
            case 8:
              return [2, e3];
          }
        });
      });
    }), this._connectionEventContext = d.on(function(e3) {
      if (e3 instanceof Fr)
        if (e3.stateType === Rr.CONNECTED)
          a2.resume();
        else
          a2.pause();
    });
  }
  return e.of = function(t3, n2, s2) {
    return Ts[t3] || (Ts[t3] = {}), Ts[t3][n2.url] || (Ts[t3][n2.url] = new e({ _iid: t3, channel: n2, includeParams: s2 })), Ts[t3][n2.url].ref++, Ts[t3][n2.url];
  }, e.clear = function(e2, t3) {
    Ts[e2] && Ts[e2][t3] && (Ts[e2][t3].close(), delete Ts[e2]);
  }, e.prototype.loadMetadata = function() {
    return r(this, void 0, void 0, function() {
      var e2, t3, n2, s2;
      return s(this, function(r2) {
        switch (r2.label) {
          case 0:
            return this._metadata ? [3, 2] : (e2 = uo.of(this._iid), t3 = e2.cacheContext, n2 = e2.firstConnectedAt, [4, t3.preference.get(this._metadataKey)]);
          case 1:
            s2 = r2.sent(), this._metadata = { token: s2 ? s2.token : n2 }, r2.label = 2;
          case 2:
            return [2, this._metadata];
        }
      });
    });
  }, e.prototype.saveMetadata = function() {
    return r(this, void 0, void 0, function() {
      return s(this, function(e2) {
        switch (e2.label) {
          case 0:
            return this._metadata ? [4, uo.of(this._iid).cacheContext.preference.set(this._metadataKey, this._metadata)] : [3, 2];
          case 1:
            return e2.sent(), [2, true];
          case 2:
            return [2, false];
        }
      });
    });
  }, e.prototype.clearMetadata = function() {
    return r(this, void 0, void 0, function() {
      return s(this, function(e2) {
        switch (e2.label) {
          case 0:
            return [4, uo.of(this._iid).cacheContext.preference.remove(this._metadataKey)];
          case 1:
            return e2.sent(), this._metadata = void 0, [2];
        }
      });
    });
  }, e.prototype.resume = function() {
    var e2 = uo.of(this._iid), t3 = e2.logger;
    e2.sessionManager.session.hasSession && (t3.debug("message changelog sync resume()"), this._sync.start(0));
  }, e.prototype.pause = function() {
    uo.of(this._iid).logger.debug("message changelog sync pause()"), this._sync.stop();
  }, e.prototype.close = function() {
    this.ref--, this.ref <= 0 && (this.ref = 0, this.pause(), this._connectionEventContext.close(), delete Ts[this._iid][this._channel.url]);
  }, e;
}();
var Is = {};
var ws2 = function() {
  function e(e2) {
    var t3 = e2._iid, n2 = e2.channel, s2 = e2.hasPollMessage, r2 = this;
    this.ref = 0, this._iid = t3, this._channel = n2;
    var a2, i, o2 = uo.of(this._iid), u2 = o2.logger, c2 = o2.sdkState, l = o2.dispatcher;
    this._metadataKey = (a2 = c2.userId, i = n2.url, "sendbird:".concat(a2, "@groupchannel/").concat(i, "/poll/changelogs.meta"));
    var d = function(e3, t4) {
      return "sendbird:".concat(e3, "@groupchannel/").concat(t4, "/poll/changelogs");
    }(c2.userId, this._channel.url);
    this._sync = new w(d, function() {
      return r(r2, void 0, void 0, function() {
        var e3, t4, n3, r3, a3, i2, o3, c3;
        return s(this, function(l2) {
          switch (l2.label) {
            case 0:
              return e3 = { hasNext: true, nextToken: 0 }, [4, this.loadMetadata()];
            case 1:
              return l2.sent(), u2.debug("poll changelog sync from", null === (c3 = this._metadata) || void 0 === c3 ? void 0 : c3.token), (t4 = !this._metadata || !this._metadata.token) ? [4, s2()] : [3, 3];
            case 2:
              t4 = !l2.sent(), l2.label = 3;
            case 3:
              if (t4)
                return [2, { hasNext: false, nextToken: 0 }];
              this._metadata || (n3 = uo.of(this._iid).firstConnectedAt, this._metadata = { token: n3 }), l2.label = 4;
            case 4:
              return l2.trys.push([4, 7, , 10]), [4, Qo.of(this._iid).getPollChangeLogs(this._channel.url, this._channel.channelType, this._metadata.token)];
            case 5:
              return r3 = l2.sent(), a3 = r3.hasMore, i2 = r3.token, e3.hasNext = a3, e3.nextToken = i2, this._metadata.token = i2, u2.debug("poll changelog sync progress", e3), [4, this.saveMetadata()];
            case 6:
              return l2.sent(), [3, 10];
            case 7:
              return o3 = l2.sent(), u2.debug("poll changelog sync error", o3), o3 instanceof b && o3.isInvalidTokenError ? [4, this.clearMetadata()] : [3, 9];
            case 8:
              l2.sent(), l2.label = 9;
            case 9:
              throw o3;
            case 10:
              return [2, e3];
          }
        });
      });
    }), this._connectionEventContext = l.on(function(e3) {
      if (e3 instanceof Fr)
        if (e3.stateType === Rr.CONNECTED)
          r2.resume();
        else
          r2.pause();
    });
  }
  return e.of = function(t3, n2, s2) {
    return Is[t3] || (Is[t3] = {}), Is[t3][n2.url] || (Is[t3][n2.url] = new e({ _iid: t3, channel: n2, hasPollMessage: s2 })), Is[t3][n2.url].ref++, Is[t3][n2.url];
  }, e.prototype.loadMetadata = function() {
    return r(this, void 0, void 0, function() {
      var e2;
      return s(this, function(t3) {
        switch (t3.label) {
          case 0:
            return this._metadata ? [3, 2] : [4, uo.of(this._iid).cacheContext.preference.get(this._metadataKey)];
          case 1:
            e2 = t3.sent(), this._metadata = e2 ? { token: e2.token } : void 0, t3.label = 2;
          case 2:
            return [2];
        }
      });
    });
  }, e.prototype.saveMetadata = function() {
    return r(this, void 0, void 0, function() {
      return s(this, function(e2) {
        switch (e2.label) {
          case 0:
            return this._metadata ? [4, uo.of(this._iid).cacheContext.preference.set(this._metadataKey, this._metadata)] : [3, 2];
          case 1:
            e2.sent(), e2.label = 2;
          case 2:
            return [2];
        }
      });
    });
  }, e.prototype.clearMetadata = function() {
    return r(this, void 0, void 0, function() {
      return s(this, function(e2) {
        switch (e2.label) {
          case 0:
            return [4, uo.of(this._iid).cacheContext.preference.remove(this._metadataKey)];
          case 1:
            return e2.sent(), this._metadata = void 0, [2];
        }
      });
    });
  }, e.prototype.resume = function() {
    uo.of(this._iid).logger.debug("poll changelog sync resume()"), this._sync.start(0);
  }, e.prototype.pause = function() {
    uo.of(this._iid).logger.debug("poll changelog sync pause()"), this._sync.stop();
  }, e.prototype.close = function() {
    this.ref--, this.ref <= 0 && (this.ref = 0, this.pause(), this._connectionEventContext.close(), delete Is[this._iid][this._channel.url]);
  }, e;
}();
var Ls = function(n2) {
  function s2(e) {
    var s3, r2, a2, i, o2, u2, c2, l, h, d, _2 = this;
    return (_2 = n2.call(this) || this).method = ae.GET, _2.path = "".concat(Re(e.channelType), "/").concat(e.channelUrl, "/messages_gap"), _2.params = se({ prev_start_ts: e.prevStart, prev_end_ts: e.prevEnd, prev_cache_count: e.prevCount, next_start_ts: e.nextStart, next_end_ts: e.nextEnd, next_cache_count: e.nextCount, huge_gap_threshold: null !== (s3 = e.threshold) && void 0 !== s3 ? s3 : null, reverse: true, custom_types: null !== (r2 = e.customTypes) && void 0 !== r2 ? r2 : ["*"], message_type: null !== (a2 = e.messageType) && void 0 !== a2 ? a2 : null, include_reply_type: null !== (i = e.replyType) && void 0 !== i ? i : Q.NONE, include_reactions_summary: null === (o2 = e.includeReactions) || void 0 === o2 || o2, include_meta_array: null === (u2 = e.includeMetaArray) || void 0 === u2 || u2, include_thread_info: null === (c2 = e.includeThreadInfo) || void 0 === c2 || c2, include_parent_message_info: null === (l = e.includeParentMessageInfo) || void 0 === l || l, with_sorted_meta_array: null === (h = e.includeMetaArray) || void 0 === h || h, show_subchannel_messages_only: null !== (d = e.showSubchannelMessagesOnly) && void 0 !== d && d, include_poll_details: true, checking_continuous_messages: e.checkingContinuousMessages }), _2;
  }
  return t(s2, n2), s2;
}(Fe);
var Ds = function(t3) {
  function n2(e, n3) {
    var s2, r2, a2, i, o2, u2, c2 = this;
    return (c2 = t3.call(this, e, n3) || this).isHugeGap = n3.is_huge_gap, c2.prevMessages = (null !== (s2 = n3.prev_messages) && void 0 !== s2 ? s2 : []).map(function(t4) {
      return At(e, t4);
    }), c2.prevHasMore = null !== (r2 = n3.prev_hasmore) && void 0 !== r2 && r2, c2.isContinuousPrevMessages = null !== (a2 = n3.is_continuous_prev_messages) && void 0 !== a2 && a2, c2.nextMessages = (null !== (i = n3.next_messages) && void 0 !== i ? i : []).map(function(t4) {
      return At(e, t4);
    }), c2.nextHasmore = null !== (o2 = n3.next_hasmore) && void 0 !== o2 && o2, c2.isContinuousNextMessages = null !== (u2 = n3.is_continuous_next_messages) && void 0 !== u2 && u2, c2;
  }
  return t(n2, t3), n2;
}(qe);
var xs = { includeMetaArray: true, includeReactions: true, includeThreadInfo: true, includeParentMessageInfo: true };
!function(e) {
  e.CACHE_AND_REPLACE_BY_API = "cache_and_replace_by_api";
}(ms2 || (ms2 = {}));
var Rs;
var Fs;
var ks;
var Ps = function() {
  function e() {
    this._onCacheResult = ut, this._onApiResult = ut;
  }
  return e.prototype._invokeResponse = function(e2, t3, n2) {
    var s2 = this;
    kr(function() {
      return r(s2, void 0, void 0, function() {
        return s(this, function(s3) {
          switch (e2) {
            case "local":
              this._onCacheResult(t3, n2);
              break;
            case "remote":
              this._onApiResult(t3, n2);
          }
          return [2];
        });
      });
    });
  }, e.prototype.onCacheResult = function(e2) {
    return this._onCacheResult = e2, this;
  }, e.prototype.onApiResult = function(e2) {
    return this._onApiResult = e2, this;
  }, e;
}();
var Os2 = function() {
  function e(e2, t3) {
    var n2 = t3.filter, s2 = t3.startingPoint, r2 = t3.limit, a2 = t3.prevResultLimit, i = t3.nextResultLimit, o2 = t3.channel, u2 = t3.channelManager, c2 = t3.disableBackgroundSync, l = void 0 !== c2 && c2, h = this;
    this._messages = [], this._unsentMessages = [], this._isLoadingPrevious = false, this._isLoadingNext = false, this._iid = e2, this._key = "mc-".concat(ee()), this._isDisposed = false, this.filter = null != n2 ? n2 : new qs(), this._channel = o2, this._syncRange = new Es({}), this._hasPrevious = true, this._hasNext = true, this._startingPoint = "number" == typeof s2 && Number.isFinite(s2) ? s2 : Number.MAX_SAFE_INTEGER, this._limit = r2 || Xr, this._prevResultLimit = null != a2 ? a2 : Math.floor(this._limit / 2), this._nextResultLimit = null != i ? i : Math.floor(this._limit / 2), this._channelManager = u2;
    var m2 = uo.of(this._iid).statManager;
    this._channelManager.subscribeChannelEvent(this._key, { onUpdate: function(e3, t4) {
      var n3 = t4.source, s3 = e3.findIndex(function(e4) {
        return e4.isIdentical(h.channel);
      });
      s3 >= 0 && (h._replaceChannelOfCollection(e3[s3]), h.channel._runIfHandleableWithGroupChannel(function(e4) {
        switch (n3) {
          case no.EVENT_CHANNEL_UPDATED:
            for (var s4 = false, r3 = 0; r3 < h._messages.length; r3++) {
              if (h._messages[r3].createdAt >= e4.messageOffsetTimestamp) {
                s4 = true;
                var a3 = r3;
                if (a3 > 0) {
                  var i2 = h._messages.splice(0, a3);
                  h._removeMessagesFromView(i2.map(function(e5) {
                    return h.keyOf(e5);
                  }), no.EVENT_MESSAGE_OFFSET_UPDATED);
                }
                break;
              }
            }
            !s4 && h._messages.length > 0 && h._removeMessagesFromView(h._messages.map(function(e5) {
              return h.keyOf(e5);
            }), no.EVENT_MESSAGE_OFFSET_UPDATED);
            break;
          case no.EVENT_CHANNEL_UNMUTED:
            var o3 = uo.of(h._iid).sdkState, u3 = t4.user;
            o3.userId === u3.userId && h._clearCheckMyMutedTimer();
            break;
          case no.EVENT_CHANNEL_MUTED:
            o3 = uo.of(h._iid).sdkState, u3 = t4.user;
            o3.userId === u3.userId && -1 !== e4._myMutedRemainingTime && h._startCheckMyMutedTimer(e4._myMutedRemainingTime);
            break;
          case no.EVENT_CHANNEL_LEFT:
            e4.isPublic && h._clearCheckMyMutedTimer();
        }
        kr(function() {
          return r(h, void 0, void 0, function() {
            var e5;
            return s(this, function(s5) {
              return Nn(n3) && (null === (e5 = this._handler) || void 0 === e5 ? void 0 : e5.onChannelUpdated) && this._handler.onChannelUpdated(t4, this.channel), [2];
            });
          });
        });
      }), h._postprocessChannelUpdateEvent(e3[s3], n3));
    }, onRemove: function(e3, t4) {
      var n3 = e3.indexOf(h.channel.url);
      n3 >= 0 && h._channel._runIfHandleableWithGroupChannel(function(s3) {
        s3.myMemberState = Zt.NONE, h._clearCheckMyMutedTimer(), kr(function() {
          return r(h, void 0, void 0, function() {
            var e4;
            return s(this, function(n4) {
              return (null === (e4 = this._handler) || void 0 === e4 ? void 0 : e4.onChannelDeleted) && this._handler.onChannelDeleted(t4, this.channel.url), [2];
            });
          });
        }), h._postprocessChannelRemoveEvent(e3[n3]);
      });
    } }), this._channelManager.subscribeMessageEvent(this._key, { onUpdate: function(e3, t4) {
      var n3, s3, r3 = [], a3 = [];
      try {
        for (var i2 = o(e3), o3 = i2.next(); !o3.done; o3 = i2.next()) {
          var u3 = o3.value;
          u3.channelUrl === h._channel.url && (h.filter.match(u3) ? r3.push(u3) : a3.push(h.keyOf(u3)));
        }
      } catch (e4) {
        n3 = { error: e4 };
      } finally {
        try {
          o3 && !o3.done && (s3 = i2.return) && s3.call(i2);
        } finally {
          if (n3)
            throw n3.error;
        }
      }
      if (fo(t4)) {
        if (r3.length > 0)
          switch (t4) {
            case no.LOCAL_MESSAGE_CANCELED:
            case no.LOCAL_MESSAGE_RESEND_STARTED:
            case no.EVENT_MESSAGE_SENT_FAILED:
            case no.EVENT_MESSAGE_SENT_SUCCESS:
            case no.EVENT_MESSAGE_UPDATED:
            case no.EVENT_MESSAGE_THREADINFO_UPDATED:
            case no.EVENT_MESSAGE_REACTION_UPDATED:
            case no.EVENT_MESSAGE_FEEDBACK_ADDED:
            case no.EVENT_MESSAGE_FEEDBACK_UPDATED:
            case no.EVENT_MESSAGE_FEEDBACK_DELETED:
            case no.SYNC_MESSAGE_CHANGELOGS:
              h._updateMessagesToView(r3, t4);
              break;
            case no.EVENT_MESSAGE_SENT_PENDING:
              h._addMessagesToView(r3, t4);
              break;
            case no.EVENT_MESSAGE_RECEIVED:
              h.hasNext || h._addMessagesToView(r3, t4);
              break;
            case no.SYNC_MESSAGE_FILL:
              h._addMessagesToView(r3, t4);
          }
        a3.length > 0 && h._removeMessagesFromView(a3, t4);
      }
      h._postprocessMessageUpdateEvent(e3, t4);
    }, onRemove: function(e3, t4) {
      h._removeMessagesFromView(e3, t4), h._postprocessMessageRemoveEvent(e3);
    }, onRemoveUnsent: function(e3, t4) {
      h._removeUnsentMessageFromView(e3, t4);
    }, onPollChangeLogUpdate: function(e3, t4) {
      h._updatePollsToView(e3, t4);
    }, onPollUpdate: function(e3, t4) {
      h._applyPollUpdateEventToView(e3, t4);
    }, onPollVote: function(e3, t4) {
      h._applyPollVoteEventToView(e3, t4);
    }, onReactionUpdate: function(e3, t4) {
      h._applyReactionEventToView(e3, t4);
    }, onThreadInfoUpdate: function(e3, t4) {
      h._applyThreadInfoEventToView(e3, t4);
    }, onDeletedByRetentionPolicy: function(e3, t4, n3) {
      t4 === h.channel.url && h._messageRetention(e3, n3);
    } });
    var g2 = uo.of(this._iid), E2 = g2.cacheContext, C3 = g2.dispatcher, M2 = g2.messageBackgroundSyncThrottleController;
    this._channel._updateMessageCollectionLastAccessedAt(), C3.dispatch(new Un({ channels: [this._channel], context: { source: no.CHANNEL_LASTACCESSEDAT_UPDATED } })), this._backgroundSync = Ss.of(this._iid, this._channel), !l && this._shouldStartBackgroundSync() && this._backgroundSync.resume(this._startingPoint), this._changelogSync = As.of(this._iid, this._channel, this.changelogIncludeParams), this._changelogSync.resume(), this._pollChangelogSync = ws2.of(this._iid, this._channel, this._hasPollMessage.bind(this)), this._pollChangelogSync.resume(), this._prevFill = new w(this._key, function(e3) {
      return r(h, void 0, void 0, function() {
        var t4 = this;
        return s(this, function(n3) {
          switch (n3.label) {
            case 0:
              return [4, M2.run("message-fill-sync-".concat(o2.url, "-prev"), function() {
                return r(t4, void 0, void 0, function() {
                  var t5, n4, s3, r3, a3, i2, o3;
                  return s(this, function(u3) {
                    switch (u3.label) {
                      case 0:
                        return [4, this._getRemoteMessages(e3, { prevLimit: this._prevResultLimit, source: no.SYNC_MESSAGE_FILL, checkingContinuousMessages: E2.localCacheEnabled, sdkSource: qt.INTERNAL_FILL_GAP })];
                      case 1:
                        return t5 = u3.sent(), n4 = t5.messages, s3 = t5.isContinuousMessages, n4.length > 0 ? (r3 = Math.min.apply(Math, c([], a(n4.map(function(e4) {
                          return e4.createdAt;
                        })), false)), this._syncRange.extends(r3), s3 && (null === (a3 = this._backgroundSync) || void 0 === a3 || a3.range.extends(r3)), [2, { hasNext: n4.length >= this._prevResultLimit && this.viewTop < r3, nextToken: this._syncRange.top }]) : (E2.localCacheEnabled && m2.put(new $e({ type: Me.FEATURE_LOCALCACHE_EVENT, ts: Date.now(), data: { channel_url: this.channel.url, measured_on: "gap_check", event: "cache_fetch", max_db_size: null !== (o3 = null === (i2 = E2.localCacheConfig) || void 0 === i2 ? void 0 : i2.maxSize) && void 0 !== o3 ? o3 : 0, use_local_cache: E2.localCacheEnabled, starting_point: 0, message_init_policy: "" } })), [2, { hasNext: false, nextToken: 0 }]);
                    }
                  });
                });
              })];
            case 1:
              return [2, n3.sent()];
          }
        });
      });
    }), this._nextFill = new w(this._key, function(e3) {
      return r(h, void 0, void 0, function() {
        var t4 = this;
        return s(this, function(n3) {
          switch (n3.label) {
            case 0:
              return [4, M2.run("message-fill-sync-".concat(o2.url, "-next"), function() {
                return r(t4, void 0, void 0, function() {
                  var t5, n4, s3, r3, a3, i2, o3, u3;
                  return s(this, function(c3) {
                    switch (c3.label) {
                      case 0:
                        return [4, this._getRemoteMessages(e3, { nextLimit: this._nextResultLimit, source: no.SYNC_MESSAGE_FILL, checkingHasNext: true, checkingContinuousMessages: E2.localCacheEnabled, sdkSource: qt.INTERNAL_FILL_GAP })];
                      case 1:
                        return t5 = c3.sent(), n4 = t5.messages, s3 = t5.isContinuousMessages, r3 = t5.hasNext, n4.length > 0 ? (a3 = Math.max.apply(Math, c([], a(n4.map(function(e4) {
                          return e4.createdAt;
                        })), false)), this._syncRange.extends(a3), s3 && (null === (i2 = this._backgroundSync) || void 0 === i2 || i2.range.extends(a3)), [2, { hasNext: r3, nextToken: this._syncRange.bottom }]) : (E2.localCacheEnabled && m2.put(new $e({ type: Me.FEATURE_LOCALCACHE_EVENT, ts: Date.now(), data: { channel_url: this.channel.url, measured_on: "gap_check", event: "cache_fetch", max_db_size: null !== (u3 = null === (o3 = E2.localCacheConfig) || void 0 === o3 ? void 0 : o3.maxSize) && void 0 !== u3 ? u3 : 0, use_local_cache: E2.localCacheEnabled, starting_point: 0, message_init_policy: "" } })), [2, { hasNext: false, nextToken: 0 }]);
                    }
                  });
                });
              })];
            case 1:
              return [2, n3.sent()];
          }
        });
      });
    }), this._connectionEventContext = C3.on(function(e3) {
      if (e3 instanceof Fr)
        switch (e3.stateType) {
          case Rr.CONNECTED:
            Dr(function() {
              return r(h, void 0, void 0, function() {
                return s(this, function(e4) {
                  return this._activate(), [2];
                });
              });
            });
            break;
          case Rr.LOGOUT:
            h.dispose();
            break;
          default:
            h._clearCheckMyMutedTimer(), h._prevFill.stop(), h._nextFill.stop();
        }
    });
  }
  return e.prototype.keyOf = function(e2) {
    return 0;
  }, Object.defineProperty(e.prototype, "changelogIncludeParams", { get: function() {
    return { includeReactions: true, includeThreadInfo: true, includeMetaArray: true, includeParentMessageInfo: true };
  }, enumerable: false, configurable: true }), e.prototype._postprocessChannelUpdateEvent = function(e2, t3) {
  }, e.prototype._postprocessChannelRemoveEvent = function(e2) {
  }, e.prototype._postprocessMessageUpdateEvent = function(e2, t3) {
  }, e.prototype._postprocessMessageRemoveEvent = function(e2) {
  }, Object.defineProperty(e.prototype, "channel", { get: function() {
    return this._channel;
  }, enumerable: false, configurable: true }), Object.defineProperty(e.prototype, "succeededMessages", { get: function() {
    return c([], a(this._messages), false);
  }, enumerable: false, configurable: true }), Object.defineProperty(e.prototype, "failedMessages", { get: function() {
    return this._unsentMessages.filter(function(e2) {
      return e2.sendingStatus === Z.FAILED;
    });
  }, enumerable: false, configurable: true }), Object.defineProperty(e.prototype, "pendingMessages", { get: function() {
    return this._unsentMessages.filter(function(e2) {
      return e2.sendingStatus === Z.PENDING;
    });
  }, enumerable: false, configurable: true }), Object.defineProperty(e.prototype, "hasPrevious", { get: function() {
    return this._hasPrevious;
  }, enumerable: false, configurable: true }), Object.defineProperty(e.prototype, "hasNext", { get: function() {
    return this._hasNext;
  }, enumerable: false, configurable: true }), Object.defineProperty(e.prototype, "viewTop", { get: function() {
    return Math.min.apply(Math, c(c([], a(this._messages.map(function(e2) {
      return e2.createdAt;
    })), false), [Number.MAX_SAFE_INTEGER], false));
  }, enumerable: false, configurable: true }), Object.defineProperty(e.prototype, "viewBottom", { get: function() {
    return Math.max.apply(Math, c(c([], a(this._messages.map(function(e2) {
      return e2.createdAt;
    })), false), [0], false));
  }, enumerable: false, configurable: true }), e.prototype._activate = function() {
    return r(this, void 0, void 0, function() {
      return s(this, function(e2) {
        switch (e2.label) {
          case 0:
            return uo.of(this._iid).logger.debug("check huge gap"), this._checkHugeGap(), [4, this._refreshChannel(no.SYNC_CHANNEL_CHANGELOGS)];
          case 1:
            return e2.sent(), [2];
        }
      });
    });
  }, e.prototype._replaceChannelOfCollection = function(e2) {
    this._channel.isGroupChannel() ? this._channel = e2 : this._channel.isFeedChannel() && (this._channel._groupChannel = e2._groupChannel);
  }, e.prototype._shouldStartBackgroundSync = function() {
    var e2 = uo.of(this._iid).cacheContext;
    return this.channel.isGroupChannel() ? e2.localCacheEnabled && !this.channel.isSuper : e2.localCacheEnabled;
  }, e.prototype._setBaseMessageCollectionHandler = function(e2) {
    this._handler = e2;
  }, e.prototype._filterUnderOffsetMessage = function(e2) {
    return e2;
  }, e.prototype._updateChildMessagesInView = function(e2) {
    var t3 = [];
    return this._messages.forEach(function(n2) {
      n2 instanceof yt && n2.parentMessageId === e2.messageId && n2.applyParentMessage(e2) && t3.push(n2);
    }), t3;
  }, e.prototype._updatePollsToView = function(e2, t3) {
    var n2, s2, r2 = this, a2 = [];
    try {
      for (var i = o(e2), o2 = i.next(); !o2.done; o2 = i.next()) {
        var u2 = o2.value, c2 = bs(this._messages, u2.messageId);
        if (c2 >= 0) {
          var l = this._messages[c2];
          l.isUserMessage() && l.applyPoll(u2), a2.push(l);
        }
      }
    } catch (e3) {
      n2 = { error: e3 };
    } finally {
      try {
        o2 && !o2.done && (s2 = i.return) && s2.call(i);
      } finally {
        if (n2)
          throw n2.error;
      }
    }
    return a2.length > 0 && fo(t3) && kr(function() {
      return r(r2, void 0, void 0, function() {
        var e3, n3, s3;
        return s(this, function(r3) {
          return e3 = { source: t3 }, a2.length > 0 && (null === (s3 = (n3 = this._handler).onMessagesUpdated) || void 0 === s3 || s3.call(n3, e3, this.channel, a2)), [2];
        });
      });
    }), a2;
  }, e.prototype._applyPollUpdateEventToView = function(e2, t3) {
    var n2 = this, s2 = bs(this._messages, e2.messageId);
    if (s2 >= 0) {
      var r2 = this._messages[s2];
      r2 && r2.isUserMessage() && r2.poll && r2.poll.applyPollUpdateEvent(e2) && fo(t3) && kr(function() {
        return r(n2, void 0, void 0, function() {
          var e3, n3, s3;
          return s(this, function(a2) {
            return e3 = { source: t3 }, null === (s3 = null === (n3 = this._handler) || void 0 === n3 ? void 0 : n3.onMessagesUpdated) || void 0 === s3 || s3.call(n3, e3, this.channel, [r2]), [2];
          });
        });
      });
    }
  }, e.prototype._applyPollVoteEventToView = function(e2, t3) {
    var n2 = this, s2 = bs(this._messages, e2.messageId);
    if (s2 >= 0) {
      var r2 = this._messages[s2];
      r2 && r2.isUserMessage() && r2.poll && r2.poll.applyPollVoteEvent(e2) && fo(t3) && kr(function() {
        return r(n2, void 0, void 0, function() {
          var e3, n3, s3;
          return s(this, function(a2) {
            return e3 = { source: t3 }, null === (s3 = null === (n3 = this._handler) || void 0 === n3 ? void 0 : n3.onMessagesUpdated) || void 0 === s3 || s3.call(n3, e3, this.channel, [r2]), [2];
          });
        });
      });
    }
  }, e.prototype._applyReactionEventToView = function(e2, t3) {
    var n2 = this, s2 = bs(this._messages, e2.messageId);
    if (s2 >= 0) {
      var r2 = this._messages[s2];
      r2 && (r2.isUserMessage() || r2.isFileMessage() || r2.isMultipleFilesMessage()) && fo(t3) && (r2.applyReactionEvent(e2), kr(function() {
        return r(n2, void 0, void 0, function() {
          var e3, n3, s3;
          return s(this, function(a2) {
            return e3 = { source: t3 }, null === (s3 = null === (n3 = this._handler) || void 0 === n3 ? void 0 : n3.onMessagesUpdated) || void 0 === s3 || s3.call(n3, e3, this.channel, [r2]), [2];
          });
        });
      }));
    }
  }, e.prototype._applyThreadInfoEventToView = function(e2, t3) {
    var n2 = this, s2 = bs(this._messages, e2.targetMessageId);
    if (s2 >= 0) {
      var r2 = this._messages[s2];
      r2 && (r2.isUserMessage() || r2.isFileMessage() || r2.isMultipleFilesMessage()) && fo(t3) && (r2.applyThreadInfoUpdateEvent(e2), kr(function() {
        return r(n2, void 0, void 0, function() {
          var e3, n3, s3;
          return s(this, function(a2) {
            return e3 = { source: t3 }, null === (s3 = null === (n3 = this._handler) || void 0 === n3 ? void 0 : n3.onMessagesUpdated) || void 0 === s3 || s3.call(n3, e3, this.channel, [r2]), [2];
          });
        });
      }));
    }
  }, e.prototype._removeMessagesFromView = function(e2, t3) {
    var n2, s2, r2 = this, a2 = [], i = [], o2 = function(e3) {
      var t4 = u2._messages.findIndex(function(t5) {
        return r2.keyOf(t5) === e3;
      });
      if (t4 >= 0) {
        var n3 = u2._messages[t4];
        a2.push(u2.keyOf(n3)), i.push(n3), u2._messages.splice(t4, 1);
      }
    }, u2 = this;
    try {
      for (var c2 = o(e2), l = c2.next(); !l.done; l = c2.next()) {
        o2(l.value);
      }
    } catch (e3) {
      n2 = { error: e3 };
    } finally {
      try {
        l && !l.done && (s2 = c2.return) && s2.call(c2);
      } finally {
        if (n2)
          throw n2.error;
      }
    }
    return fo(t3) && i.length > 0 && kr(function() {
      return r(r2, void 0, void 0, function() {
        var e3, n3, s3;
        return s(this, function(r3) {
          return e3 = { source: t3 }, null === (s3 = null === (n3 = this._handler) || void 0 === n3 ? void 0 : n3.onMessagesDeleted) || void 0 === s3 || s3.call(n3, e3, this.channel, a2, i), [2];
        });
      });
    }), a2;
  }, e.prototype._messageRetention = function(e2, t3) {
    var n2, s2, r2 = [];
    try {
      for (var a2 = o(this._messages), i = a2.next(); !i.done; i = a2.next()) {
        var o2 = i.value;
        o2.createdAt <= e2 && r2.push(this.keyOf(o2));
      }
    } catch (e3) {
      n2 = { error: e3 };
    } finally {
      try {
        i && !i.done && (s2 = a2.return) && s2.call(a2);
      } finally {
        if (n2)
          throw n2.error;
      }
    }
    r2.length > 0 && this._removeMessagesFromView(r2, t3);
  }, e.prototype._removeUnsentMessageFromView = function(e2, t3) {
    var n2 = this._unsentMessages.findIndex(function(t4) {
      return t4.reqId === e2;
    });
    n2 >= 0 && this._unsentMessages.splice(n2, 1);
  }, e.prototype._getLocalMessages = function(e2, t3) {
    var n2 = t3.prevLimit, s2 = void 0 === n2 ? 0 : n2, r2 = t3.nextLimit, a2 = void 0 === r2 ? 0 : r2, i = t3.inclusive, o2 = void 0 === i || i;
    return r(this, void 0, void 0, function() {
      var t4, n3, r3, i2, u2;
      return s(this, function(c2) {
        switch (c2.label) {
          case 0:
            return t4 = [], o2 ? [4, this._channelManager.getExactlyMatchingMessagesForTokenFromCache(this._channel.url, e2, this.filter)] : [3, 2];
          case 1:
            t4 = c2.sent(), c2.label = 2;
          case 2:
            return s2 > 0 ? [4, this._channelManager.getMessagesFromCache(this._channel.url, e2, "prev", this.filter, s2, false)] : [3, 4];
          case 3:
            return r3 = c2.sent(), [3, 5];
          case 4:
            r3 = [], c2.label = 5;
          case 5:
            return n3 = r3, a2 > 0 ? [4, this._channelManager.getMessagesFromCache(this._channel.url, e2, "next", this.filter, a2, false)] : [3, 7];
          case 6:
            return u2 = c2.sent(), [3, 8];
          case 7:
            u2 = [], c2.label = 8;
          case 8:
            return i2 = u2, [2, { messages: c(c(c([], a(t4), false), a(n3), false), a(i2), false).sort(function(e3, t5) {
              return t5.createdAt - e3.createdAt;
            }), prevMessagesCount: n3.length, nextMessagesCount: i2.length }];
        }
      });
    });
  }, e.prototype._getRemoteMessages = function(e2, t3) {
    var r2 = t3.prevLimit, a2 = void 0 === r2 ? 0 : r2, i = t3.nextLimit, o2 = void 0 === i ? 0 : i, u2 = t3.source, c2 = void 0 === u2 ? no.REQUEST_MESSAGE : u2, l = t3.reverse, h = void 0 !== l && l, d = t3.checkingHasNext, _2 = void 0 !== d && d, v4 = t3.checkingContinuousMessages, m2 = void 0 !== v4 && v4, g2 = t3.sdkSource;
    return r(this, void 0, void 0, function() {
      var t4, r3;
      return s(this, function(i2) {
        switch (i2.label) {
          case 0:
            return t4 = la.of(this._iid), a2 > 0 || o2 > 0 ? [4, t4._getMessagesByTimestampForCollection(this._channel.url, this._channel.channelType, e2, oe(n(n(n({}, this.filter), xs), { isInclusive: true, reverse: h, prevResultSize: a2, nextResultSize: o2 })), c2, _2, m2, g2)] : [3, 2];
          case 1:
            return r3 = i2.sent(), [3, 3];
          case 2:
            r3 = { messages: [], isContinuousMessages: false }, i2.label = 3;
          case 3:
            return [2, r3];
        }
      });
    });
  }, e.prototype._checkHugeGap = function() {
    var e2, t3, n2, r2, a2;
    return r(this, void 0, void 0, function() {
      var i, o2, u2, c2, l, v4, m2, g2, E2, C3, M2, b3, N2, U2, S3, T4, A2, I2, w2, L3, D3, x, R2, F2, P2, O2 = this;
      return s(this, function(G) {
        switch (G.label) {
          case 0:
            return i = uo.of(this._iid), o2 = i.dispatcher, u2 = i.requestQueue, c2 = i.cacheContext, l = i.statManager, v4 = i.logger, this._messages.length > 0 ? (m2 = this._syncRange.top, g2 = this.viewTop, E2 = this._syncRange.bottom, C3 = this.hasNext ? this.viewBottom : Number.MAX_SAFE_INTEGER, [4, this._channelManager.getCachedMessageCountBetween(this._channel.url, this.filter, g2, m2)]) : [3, 8];
          case 1:
            return M2 = G.sent(), [4, this._channelManager.getCachedMessageCountBetween(this._channel.url, this.filter, E2, C3)];
          case 2:
            b3 = G.sent(), G.label = 3;
          case 3:
            return G.trys.push([3, 5, 6, 7]), [4, ws(function() {
              return r(O2, void 0, void 0, function() {
                var e3, t4, n3, r3, a3, i2, l2, h, v5, N3, U3, S4, T5, A3, I3, w3, L4, D4 = this;
                return s(this, function(x2) {
                  switch (x2.label) {
                    case 0:
                      return e3 = new Ls(n(n({ channelUrl: this._channel.url, channelType: this._channel.channelType, prevStart: g2, prevEnd: m2, prevCount: M2, nextStart: E2, nextEnd: C3, nextCount: b3, checkingContinuousMessages: c2.localCacheEnabled }, this.filter), xs)), [4, u2.send(e3)];
                    case 1:
                      return t4 = x2.sent(), n3 = t4.as(Ds), r3 = n3.isHugeGap, a3 = n3.prevMessages, i2 = void 0 === a3 ? [] : a3, l2 = n3.prevHasMore, h = n3.isContinuousPrevMessages, v5 = n3.nextMessages, N3 = void 0 === v5 ? [] : v5, U3 = n3.nextHasmore, S4 = n3.isContinuousNextMessages, r3 ? kr(function() {
                        return r(D4, void 0, void 0, function() {
                          var e4;
                          return s(this, function(t5) {
                            return (null === (e4 = this._handler) || void 0 === e4 ? void 0 : e4.onHugeGapDetected) && this._handler.onHugeGapDetected(), [2];
                          });
                        });
                      }) : (T5 = this.viewTop, A3 = this.viewBottom, I3 = Math.min.apply(Math, c([Number.MAX_SAFE_INTEGER, T5], a(i2.map(function(e4) {
                        return e4.createdAt;
                      })), false)), w3 = Math.max.apply(Math, c([0, A3], a(N3.map(function(e4) {
                        return e4.createdAt;
                      })), false)), o2.dispatch(new po({ messages: i2, source: no.SYNC_MESSAGE_FILL })), o2.dispatch(new po({ messages: N3, source: no.SYNC_MESSAGE_FILL })), this._syncRange.extends(I3, w3), (h || S4) && (null === (L4 = this._backgroundSync) || void 0 === L4 || L4.range.extends(I3, w3)), l2 && this._prevFill.start(I3), U3 && this._nextFill.start(w3)), [2];
                  }
                });
              });
            }, 1)];
          case 4:
            return G.sent(), [3, 7];
          case 5:
            return N2 = G.sent(), v4.debug("Failed HugeGap Check ", N2), [3, 7];
          case 6:
            return c2.localCacheEnabled && l.put(new $e({ type: Me.FEATURE_LOCALCACHE_EVENT, ts: Date.now(), data: { channel_url: this.channel.url, measured_on: "gap_check", event: "cache_fetch", max_db_size: null !== (t3 = null === (e2 = c2.localCacheConfig) || void 0 === e2 ? void 0 : e2.maxSize) && void 0 !== t3 ? t3 : 0, use_local_cache: c2.localCacheEnabled, starting_point: 0, message_init_policy: "" } })), [7];
          case 7:
            return [3, 13];
          case 8:
            U2 = Date.now(), G.label = 9;
          case 9:
            return G.trys.push([9, 11, 12, 13]), [4, this._getRemoteMessages(U2, { prevLimit: this._prevResultLimit, nextLimit: this._nextResultLimit, source: no.SYNC_MESSAGE_FILL, checkingHasNext: true, checkingContinuousMessages: c2.localCacheEnabled, sdkSource: qt.INTERNAL_FILL_GAP })];
          case 10:
            if (S3 = G.sent(), T4 = S3.messages, A2 = S3.isContinuousMessages, I2 = S3.hasNext, T4.length > 0) {
              for (w2 = T4.map(function(e3) {
                return e3.createdAt;
              }), L3 = 0, D3 = 0, x = 0; x < w2.length; x++)
                (R2 = w2[x]) <= U2 ? L3++ : R2 >= U2 && D3++;
              this._hasPrevious = L3 >= this._prevResultLimit, this._hasNext = null != I2 ? I2 : D3 >= this._nextResultLimit, (P2 = this._syncRange).extends.apply(P2, c([], a(w2), false)), A2 && (null === (n2 = this._backgroundSync) || void 0 === n2 || n2.range.extends(this._syncRange.top, this._syncRange.bottom)), this._addMessagesToView(T4, no.SYNC_MESSAGE_FILL);
            } else
              this._hasPrevious = false, this._hasNext = false;
            return [3, 13];
          case 11:
            return (F2 = G.sent()) instanceof b && F2.code === u.NOT_FOUND_IN_DATABASE && (this._hasPrevious = false, this._hasNext = false), [3, 13];
          case 12:
            return c2.localCacheEnabled && l.put(new $e({ type: Me.FEATURE_LOCALCACHE_EVENT, ts: Date.now(), data: { channel_url: this.channel.url, measured_on: "gap_check", event: "cache_fetch", max_db_size: null !== (a2 = null === (r2 = c2.localCacheConfig) || void 0 === r2 ? void 0 : r2.maxSize) && void 0 !== a2 ? a2 : 0, use_local_cache: c2.localCacheEnabled, starting_point: 0, message_init_policy: "" } })), [7];
          case 13:
            return [2];
        }
      });
    });
  }, e.prototype._loadUnsentMessages = function() {
    return r(this, void 0, void 0, function() {
      var e2;
      return s(this, function(t3) {
        switch (t3.label) {
          case 0:
            return e2 = this, [4, this._channelManager.getUnsentMessagesFromCache(this._channel.url, this.filter)];
          case 1:
            return e2._unsentMessages = t3.sent(), [2];
        }
      });
    });
  }, e.prototype._hasPollMessage = function() {
    return r(this, void 0, void 0, function() {
      return s(this, function(e2) {
        switch (e2.label) {
          case 0:
            return [4, this._channelManager.getPollMessagesFromCache(this._channel.url, Date.now() + 6e5, this.filter, 1)];
          case 1:
            return e2.sent().length > 0 ? [2, true] : [2, false];
        }
      });
    });
  }, e.prototype._refreshChannel = function(e2, t3) {
    return void 0 === t3 && (t3 = false), r(this, void 0, void 0, function() {
      var n2, s2, r2 = this;
      return s(this, function(a2) {
        switch (a2.label) {
          case 0:
            n2 = uo.of(this._iid).logger, a2.label = 1;
          case 1:
            return a2.trys.push([1, 3, , 4]), [4, this._channelManager.refreshChannel(this.channel.url, true, e2, t3)];
          case 2:
            return a2.sent(), this.channel._runIfHandleableWithGroupChannel(function(e3) {
              e3.myMutedState === z.MUTED && Dr(function() {
                return r(r2, void 0, void 0, function() {
                  var e4;
                  return s(this, function(t4) {
                    switch (t4.label) {
                      case 0:
                        return [4, this.channel.getMyMutedInfo()];
                      case 1:
                        return (e4 = t4.sent()).isMuted && -1 !== e4.remainingDuration && this._startCheckMyMutedTimer(e4.remainingDuration), [2];
                    }
                  });
                });
              });
            }), [3, 4];
          case 3:
            return s2 = a2.sent(), n2.warn("Failed to refresh channel", s2), [3, 4];
          case 4:
            return [2];
        }
      });
    });
  }, e.prototype._startCheckMyMutedTimer = function(e2) {
    var t3 = this;
    this._clearCheckMyMutedTimer(), this._checkMyMutedStateTimer = setTimeout(function() {
      return r(t3, void 0, void 0, function() {
        var e3, t4, n2, s2 = this;
        return s(this, function(r2) {
          switch (r2.label) {
            case 0:
              this._checkMyMutedStateTimer = void 0, e3 = true, r2.label = 1;
            case 1:
              return r2.trys.push([1, 3, 4, 5]), [4, this._channel.getMyMutedInfo()];
            case 2:
              return t4 = r2.sent(), e3 = !t4.isMuted, [3, 5];
            case 3:
              return r2.sent(), e3 = true, [3, 5];
            case 4:
              return e3 && (n2 = uo.of(this._iid).sessionManager, this.channel._runIfHandleableWithGroupChannel(function(e4) {
                var t5, r3;
                e4.myMutedState = z.UNMUTED;
                var a2 = { source: no.EVENT_CHANNEL_UNMUTED, user: n2.currentUser };
                null === (r3 = null === (t5 = s2._handler) || void 0 === t5 ? void 0 : t5.onChannelUpdated) || void 0 === r3 || r3.call(t5, a2, s2.channel);
              })), [7];
            case 5:
              return [2];
          }
        });
      });
    }, e2 + 1e3);
  }, e.prototype._clearCheckMyMutedTimer = function() {
    this._checkMyMutedStateTimer && (clearTimeout(this._checkMyMutedStateTimer), this._checkMyMutedStateTimer = void 0);
  }, e.prototype._setHasNextAndHasPrevious = function(e2, t3) {
    for (var n2 = e2.map(function(e3) {
      return e3.createdAt;
    }), s2 = 0, r2 = 0, a2 = 0; a2 < n2.length; a2++) {
      var i = n2[a2];
      i < this._startingPoint ? s2++ : i > this._startingPoint && r2++;
    }
    this._hasPrevious = s2 >= this._prevResultLimit, this._hasNext = null != t3 ? t3 : r2 >= this._nextResultLimit;
  }, e.prototype.initialize = function(e2) {
    var t3 = this, n2 = new Ps();
    this._messages = [], this._unsentMessages = [], this._syncRange = new Es({}), this._hasNext = true, this._hasPrevious = true;
    var s2 = [], r2 = { messages: [], prevMessagesCount: 0, nextMessagesCount: 0 };
    return kr(function() {
      return r(t3, void 0, void 0, function() {
        var t4, a2, i, o2, u2, c2 = this;
        return s(this, function(l) {
          switch (l.label) {
            case 0:
              return [4, null === (u2 = this._backgroundSync) || void 0 === u2 ? void 0 : u2.loadMetadata()];
            case 1:
              if (t4 = l.sent(), a2 = uo.of(this._iid), i = a2.cacheContext, o2 = a2.statManager, e2 === ms2.CACHE_AND_REPLACE_BY_API)
                this._getLocalMessages(this._startingPoint, { prevLimit: this._prevResultLimit, nextLimit: this._nextResultLimit }).then(function(e3) {
                  return r(c2, void 0, void 0, function() {
                    return s(this, function(t5) {
                      switch (t5.label) {
                        case 0:
                          return r2 = e3, s2 = this._filterUnderOffsetMessage(r2.messages), this._addMessagesToView(s2, no.REQUEST_MESSAGE), [4, this._loadUnsentMessages()];
                        case 1:
                          return t5.sent(), n2._invokeResponse("local", null, s2), [2];
                      }
                    });
                  });
                }).catch(function(e3) {
                  if (v(e3))
                    throw e3;
                  n2._invokeResponse("local", e3, null);
                }).finally(function() {
                  return r(c2, void 0, void 0, function() {
                    var a3, i2, u3, c3, l2, h, p, v4 = this;
                    return s(this, function(f2) {
                      switch (f2.label) {
                        case 0:
                          return a3 = uo.of(this._iid).cacheContext, i2 = true, u3 = true, c3 = false, a3.localCacheEnabled && s2.length > 0 && (l2 = t4.range).includes.apply(l2, c([], a(s2.map(function(e3) {
                            return e3.createdAt;
                          })), false)) && (!t4.previousComplete && r2.prevMessagesCount < this._prevResultLimit ? u3 = true : this._startingPoint > t4.range.bottom || r2.nextMessagesCount < this._nextResultLimit ? c3 = true : u3 = false), [4, this._refreshChannel(no.REFRESH_CHANNEL, c3)];
                        case 1:
                          return f2.sent(), c3 && this._channel._runIfHandleableWithGroupChannel(function(e3) {
                            var t5 = Math.max.apply(Math, c([], a(s2.map(function(e4) {
                              return e4.createdAt;
                            })), false));
                            e3._latestMessageInfo && t5 >= e3._latestMessageInfo.createdAt && (u3 = false);
                          }), u3 ? (i2 = false, this._getRemoteMessages(this._startingPoint, { prevLimit: this._prevResultLimit, nextLimit: this._nextResultLimit, reverse: true, checkingHasNext: true, checkingContinuousMessages: a3.localCacheEnabled, sdkSource: qt.EXTERNAL_COLLECTION }).then(function(e3) {
                            var t5, s3, r3, a4 = e3.messages, i3 = e3.isContinuousMessages, o3 = e3.hasNext, u4 = v4._filterUnderOffsetMessage(a4);
                            v4._messages = [], u4.length > 0 ? (v4._setHasNextAndHasPrevious(u4, o3), (t5 = v4._syncRange).extends.apply(t5, c([], a(u4.map(function(e4) {
                              return e4.createdAt;
                            })), false)), i3 && (null === (s3 = v4._backgroundSync) || void 0 === s3 ? void 0 : s3.range.overlap(v4._syncRange)) && (null === (r3 = v4._backgroundSync) || void 0 === r3 || r3.range.extends(v4._syncRange.top, v4._syncRange.bottom)), v4._addMessagesToView(u4, no.REQUEST_MESSAGE)) : (v4._hasPrevious = false, v4._hasNext = false), n2._invokeResponse("remote", null, u4);
                          }).catch(function(e3) {
                            if (v(e3))
                              throw e3;
                            n2._invokeResponse("remote", e3, null);
                          })) : (this._setHasNextAndHasPrevious(s2), n2._invokeResponse("remote", null, s2)), a3.localCacheEnabled && o2.put(new $e({ type: Me.FEATURE_LOCALCACHE_EVENT, ts: Date.now(), data: { channel_url: this.channel.url, starting_point: this._startingPoint, measured_on: "initial_load", event: i2 ? "cache_hit" : "cache_miss", max_db_size: null !== (p = null === (h = a3.localCacheConfig) || void 0 === h ? void 0 : h.maxSize) && void 0 !== p ? p : 0, message_init_policy: e2, use_local_cache: a3.localCacheEnabled, collection_id: this._key } })), [2];
                      }
                    });
                  });
                });
              return o2.put(new Ws({ type: Me.FEATURE_LOCALCACHE, data: { use_local_cache: i.localCacheEnabled, collection_interface: { message_init_policy: e2, message: true } } })), [2];
          }
        });
      });
    }), n2;
  }, e.prototype.loadPrevious = function() {
    var e2, t3, n2;
    return r(this, void 0, void 0, function() {
      var s2, r2, a2, i, o2, u2, c2, l, v4 = this;
      return s(this, function(m2) {
        switch (m2.label) {
          case 0:
            if (this._isDisposed)
              throw new b({ code: u.COLLECTION_DISPOSED, message: "Collection has been disposed." });
            return s2 = uo.of(this._iid), r2 = s2.cacheContext, a2 = s2.statManager, i = s2.logger, this._hasPrevious ? this._isLoadingPrevious ? (i.warn("Messages are already fetching."), [2, []]) : (this._isLoadingPrevious = true, o2 = this.viewTop, u2 = [], [4, Dr(function() {
              return r(v4, void 0, void 0, function() {
                var e3;
                return s(this, function(t4) {
                  switch (t4.label) {
                    case 0:
                      return [4, this._getLocalMessages(o2, { prevLimit: this._prevResultLimit, inclusive: false })];
                    case 1:
                      return e3 = t4.sent(), u2 = this._filterUnderOffsetMessage(e3.messages), [2];
                  }
                });
              });
            })]) : [2, []];
          case 1:
            return m2.sent(), c2 = u2.length >= this._prevResultLimit, r2.localCacheEnabled && a2.put(new $e({ type: Me.FEATURE_LOCALCACHE_EVENT, ts: Date.now(), data: { channel_url: this.channel.url, starting_point: this._startingPoint, measured_on: "load_prev", event: c2 ? "cache_hit" : "cache_miss", max_db_size: null !== (t3 = null === (e2 = r2.localCacheConfig) || void 0 === e2 ? void 0 : e2.maxSize) && void 0 !== t3 ? t3 : 0, use_local_cache: r2.localCacheEnabled, collection_id: this._key, message_init_policy: "" } })), c2 && (null === (n2 = this._backgroundSync) || void 0 === n2 ? void 0 : n2.isWrappingMessages(u2)) ? [3, 3] : (l = false, [4, Dr(function() {
              return r(v4, void 0, void 0, function() {
                var e3, t4, n3, s3, r3, i2, c3, h = this;
                return s(this, function(p) {
                  switch (p.label) {
                    case 0:
                      return e3 = uo.of(this._iid).cacheContext, [4, this._getRemoteMessages(o2, { prevLimit: this._prevResultLimit, reverse: true, checkingContinuousMessages: e3.localCacheEnabled, sdkSource: qt.EXTERNAL_COLLECTION })];
                    case 1:
                      return t4 = p.sent(), (u2 = this._filterUnderOffsetMessage(t4.messages)).length > 0 && ((n3 = this._syncRange).extends.apply(n3, c([], a(u2.map(function(e4) {
                        return e4.createdAt;
                      })), false)), (null === (s3 = this._backgroundSync) || void 0 === s3 ? void 0 : s3.range.overlap(this._syncRange)) && t4.isContinuousMessages && (l = true, null === (r3 = this._backgroundSync) || void 0 === r3 || r3.range.extends(this._syncRange.top))), u2 = u2.filter(function(e4) {
                        return Ms(h._messages, e4) < 0;
                      }), this._hasPrevious = u2.length >= this._prevResultLimit, l && a2.put(new $e({ type: Me.FEATURE_LOCALCACHE_EVENT, ts: Date.now(), data: { channel_url: this.channel.url, starting_point: this._startingPoint, measured_on: "load_prev", event: "cache_fetch", max_db_size: null !== (c3 = null === (i2 = e3.localCacheConfig) || void 0 === i2 ? void 0 : i2.maxSize) && void 0 !== c3 ? c3 : 0, use_local_cache: e3.localCacheEnabled, collection_id: this._key, message_init_policy: "" } })), [2];
                  }
                });
              });
            })]);
          case 2:
            return m2.sent(), this._addMessagesToView(u2, no.REQUEST_MESSAGE), [3, 4];
          case 3:
            this._hasPrevious = u2.length >= this._prevResultLimit, u2.length > 0 && this._addMessagesToView(u2, no.REQUEST_MESSAGE), m2.label = 4;
          case 4:
            return this._isLoadingPrevious = false, [2, u2];
        }
      });
    });
  }, e.prototype.loadNext = function() {
    var e2, t3, n2;
    return r(this, void 0, void 0, function() {
      var s2, r2, a2, i, o2, u2, c2, l, v4 = this;
      return s(this, function(m2) {
        switch (m2.label) {
          case 0:
            if (this._isDisposed)
              throw new b({ code: u.COLLECTION_DISPOSED, message: "Collection has been disposed." });
            return s2 = uo.of(this._iid), r2 = s2.cacheContext, a2 = s2.statManager, i = s2.logger, this._hasNext ? this._isLoadingNext ? (i.warn("Messages are already fetching."), [2, []]) : (this._isLoadingNext = true, o2 = this.viewBottom, u2 = [], [4, Dr(function() {
              return r(v4, void 0, void 0, function() {
                var e3;
                return s(this, function(t4) {
                  switch (t4.label) {
                    case 0:
                      return [4, this._getLocalMessages(o2, { nextLimit: this._nextResultLimit, inclusive: false })];
                    case 1:
                      return e3 = t4.sent(), u2 = this._filterUnderOffsetMessage(e3.messages), [2];
                  }
                });
              });
            })]) : [2, []];
          case 1:
            return m2.sent(), c2 = u2.length >= this._nextResultLimit, r2.localCacheEnabled && a2.put(new $e({ type: Me.FEATURE_LOCALCACHE_EVENT, ts: Date.now(), data: { channel_url: this.channel.url, starting_point: this._startingPoint, measured_on: "load_next", event: c2 ? "cache_hit" : "cache_miss", max_db_size: null !== (t3 = null === (e2 = r2.localCacheConfig) || void 0 === e2 ? void 0 : e2.maxSize) && void 0 !== t3 ? t3 : 0, use_local_cache: r2.localCacheEnabled, collection_id: this._key, message_init_policy: "" } })), c2 && (null === (n2 = this._backgroundSync) || void 0 === n2 ? void 0 : n2.isWrappingMessages(u2)) ? [3, 3] : (l = false, [4, Dr(function() {
              return r(v4, void 0, void 0, function() {
                var e3, t4, n3, s3, r3, i2, c3, h, p = this;
                return s(this, function(f2) {
                  switch (f2.label) {
                    case 0:
                      return e3 = uo.of(this._iid).cacheContext, [4, this._getRemoteMessages(o2, { nextLimit: this._nextResultLimit, reverse: true, checkingHasNext: true, checkingContinuousMessages: e3.localCacheEnabled, sdkSource: qt.EXTERNAL_COLLECTION })];
                    case 1:
                      return t4 = f2.sent(), (u2 = this._filterUnderOffsetMessage(t4.messages)).length > 0 && ((n3 = this._syncRange).extends.apply(n3, c([], a(u2.map(function(e4) {
                        return e4.createdAt;
                      })), false)), (null === (s3 = this._backgroundSync) || void 0 === s3 ? void 0 : s3.range.overlap(this._syncRange)) && t4.isContinuousMessages && (l = true, null === (r3 = this._backgroundSync) || void 0 === r3 || r3.range.extends(this._syncRange.bottom))), u2 = u2.filter(function(e4) {
                        return Ms(p._messages, e4) < 0;
                      }), this._hasNext = null !== (i2 = t4.hasNext) && void 0 !== i2 ? i2 : u2.length >= this._nextResultLimit, l && a2.put(new $e({ type: Me.FEATURE_LOCALCACHE_EVENT, ts: Date.now(), data: { channel_url: this.channel.url, starting_point: this._startingPoint, measured_on: "load_next", event: "cache_fetch", max_db_size: null !== (h = null === (c3 = e3.localCacheConfig) || void 0 === c3 ? void 0 : c3.maxSize) && void 0 !== h ? h : 0, use_local_cache: e3.localCacheEnabled, collection_id: this._key, message_init_policy: "" } })), [2];
                  }
                });
              });
            })]);
          case 2:
            return m2.sent(), this._addMessagesToView(u2, no.REQUEST_MESSAGE), [3, 4];
          case 3:
            this._hasNext = u2.length >= this._nextResultLimit, u2.length > 0 && this._addMessagesToView(u2, no.REQUEST_MESSAGE), m2.label = 4;
          case 4:
            return this._isLoadingNext = false, [2, u2];
        }
      });
    });
  }, e.prototype.removeFailedMessage = function(e2) {
    return r(this, void 0, void 0, function() {
      var t3;
      return s(this, function(n2) {
        switch (n2.label) {
          case 0:
            if (this._isDisposed)
              throw new b({ code: u.COLLECTION_DISPOSED, message: "Collection has been disposed." });
            return [4, this._channelManager.removeFailedMessageFromCache(e2)];
          case 1:
            return n2.sent(), (t3 = this._unsentMessages.findIndex(function(t4) {
              return t4.reqId === e2;
            })) > -1 && this._unsentMessages.splice(t3, 1), [2];
        }
      });
    });
  }, e.prototype.dispose = function() {
    var e2, t3, n2, s2 = this;
    if (!this._isDisposed) {
      this._isDisposed = true;
      var r2 = uo.of(this._iid), a2 = r2.cacheContext, i = r2.dispatcher;
      this._messages = [], this._clearCheckMyMutedTimer(), this._channel._runIfHandleableWithGroupChannel(function(e3) {
        e3.myMemberState !== Zt.NONE && (s2._channel._updateMessageCollectionLastAccessedAt(), i.dispatch(new Un({ channels: [s2._channel], context: { source: no.CHANNEL_LASTACCESSEDAT_UPDATED } })));
      }), a2.localCacheEnabled && (this._prevFill.stop(), this._nextFill.stop()), null === (e2 = this._backgroundSync) || void 0 === e2 || e2.close(), null === (t3 = this._changelogSync) || void 0 === t3 || t3.close(), null === (n2 = this._pollChangelogSync) || void 0 === n2 || n2.close(), this._channelManager.unsubscribeChannelEvent(this._key), this._channelManager.unsubscribeMessageEvent(this._key), this._connectionEventContext && this._connectionEventContext.close();
    }
  }, e;
}();
var Hs = function(t3) {
  function n2(e, n3) {
    return t3.call(this, e, n(n({}, n3), { channelManager: ys.of(e) })) || this;
  }
  return t(n2, t3), n2.prototype.keyOf = function(e) {
    return e.messageId;
  }, n2.prototype.initialize = function(e) {
    return t3.prototype.initialize.call(this, e);
  }, n2.prototype.setMessageCollectionHandler = function(e) {
    this._setBaseMessageCollectionHandler(e);
  }, n2.prototype._addMessagesToView = function(e, t4) {
    var n3, s2, r2 = this, a2 = this._filterUnderOffsetMessage(e), i = [], o2 = [];
    try {
      for (var u2 = o(a2), c2 = u2.next(); !c2.done; c2 = u2.next()) {
        var l = c2.value;
        if (t4 === no.SYNC_MESSAGE_FILL) {
          if (l.messageId > 0) {
            if ((E2 = Ms(this._messages, l)) < 0) {
              Ms(this._unsentMessages, l) < 0 && i.push(l);
              var h = Ns(this._messages, l);
              this._messages.splice(h, 0, l);
            }
          } else if (l instanceof _t) {
            (E2 = Ms(this._unsentMessages, l)) < 0 && Ms(this._messages, l) < 0 && (this._unsentMessages.push(l), i.push(l));
          }
        } else if (l.messageId > 0) {
          if ((E2 = Ms(this._messages, l)) < 0) {
            var m2 = Ms(this._unsentMessages, l);
            m2 < 0 ? i.push(l) : (this._unsentMessages.splice(m2, 1), o2.push(l));
            h = Ns(this._messages, l);
            this._messages.splice(h, 0, l);
          } else
            o2.push(l), this._messages[E2] = l;
          if (l.updatedAt > 0) {
            var g2 = this._updateChildMessagesInView(l);
            o2.push.apply(o2, c([], a(g2), false));
          }
        } else if (l instanceof _t) {
          var E2;
          (E2 = Ms(this._unsentMessages, l)) < 0 ? Ms(this._messages, l) < 0 && (this._unsentMessages.push(l), i.push(l)) : (o2.push(l), this._unsentMessages[E2] = l);
        }
      }
    } catch (e2) {
      n3 = { error: e2 };
    } finally {
      try {
        c2 && !c2.done && (s2 = u2.return) && s2.call(u2);
      } finally {
        if (n3)
          throw n3.error;
      }
    }
    fo(t4) && kr(function() {
      return r(r2, void 0, void 0, function() {
        var e2, n4, s3, r3, a3;
        return s(this, function(u3) {
          return e2 = { source: t4 }, i.length > 0 && (null === (s3 = null === (n4 = this._handler) || void 0 === n4 ? void 0 : n4.onMessagesAdded) || void 0 === s3 || s3.call(n4, e2, this.channel, i)), o2.length > 0 && (null === (a3 = null === (r3 = this._handler) || void 0 === r3 ? void 0 : r3.onMessagesUpdated) || void 0 === a3 || a3.call(r3, e2, this.channel, o2)), [2];
        });
      });
    });
  }, n2.prototype._updateMessagesToView = function(e, t4) {
    var n3, s2, r2 = this, a2 = [], i = [], o2 = [];
    try {
      for (var u2 = o(e), c2 = u2.next(); !c2.done; c2 = u2.next()) {
        var l, h = c2.value;
        if (h.messageId > 0)
          if ((l = Ms(this._messages, h)) >= 0)
            i.push(h), this._messages[l] = h;
          else {
            var m2 = Ms(this._unsentMessages, h);
            if (m2 >= 0) {
              var g2 = a(this._unsentMessages.splice(m2, 1), 1)[0];
              if (this.hasNext && g2)
                o2.push(g2);
              else {
                i.push(h);
                var E2 = Ns(this._messages, h);
                this._messages.splice(E2, 0, h);
              }
            } else {
              var C3 = this._messages.map(function(e2) {
                return e2.createdAt;
              });
              (h.createdAt < Math.min.apply(Math, c([], a(C3), false)) && !this._hasPrevious || h.createdAt > Math.max.apply(Math, c([], a(C3), false)) && !this._hasNext) && a2.push(h);
            }
          }
        else if (h instanceof _t)
          (l = Ms(this._unsentMessages, h)) >= 0 && (i.push(h), this._unsentMessages[l] = h);
      }
    } catch (e2) {
      n3 = { error: e2 };
    } finally {
      try {
        c2 && !c2.done && (s2 = u2.return) && s2.call(u2);
      } finally {
        if (n3)
          throw n3.error;
      }
    }
    return fo(t4) && kr(function() {
      return r(r2, void 0, void 0, function() {
        var e2, n4, s3, r3, u3;
        return s(this, function(c3) {
          return e2 = { source: t4 }, i.length > 0 ? null === (s3 = null === (n4 = this._handler) || void 0 === n4 ? void 0 : n4.onMessagesUpdated) || void 0 === s3 || s3.call(n4, e2, this.channel, i) : o2.length > 0 ? null === (u3 = null === (r3 = this._handler) || void 0 === r3 ? void 0 : r3.onMessagesDeleted) || void 0 === u3 || u3.call(r3, e2, this.channel, [], o2) : a2.length > 0 && this._addMessagesToView(a2, t4), [2];
        });
      });
    }), i;
  }, n2;
}(Os2);
var Gs2 = { coverUrl: void 0, coverImage: void 0, isDistinct: void 0, isPublic: void 0, isDiscoverable: void 0, accessCode: void 0, name: void 0, data: void 0, customType: void 0, operatorUserIds: void 0, messageSurvivalSeconds: void 0 };
var Vs2 = function(t3) {
  function n2(e) {
    var n3 = this, s2 = e.channelUrl, r2 = e.token, a2 = e.limit, i = e.order, o2 = e.mutedMemberFilter, u2 = e.memberStateFilter, c2 = e.nicknameStartsWithFilter, l = e.operatorFilter;
    return (n3 = t3.call(this) || this).method = ae.GET, n3.path = "".concat(de, "/").concat(encodeURIComponent(s2), "/members"), n3.params = { token: r2, limit: a2, order: i, muted_member_filter: o2, member_state_filter: u2, nickname_startswith: c2, operator_filter: l, show_member_is_muted: true, show_read_receipt: true, show_delivery_receipt: true }, n3;
  }
  return t(n2, t3), n2;
}(Fe);
var Bs = function(t3) {
  function n2(e, n3) {
    var s2 = t3.call(this, e, n3) || this;
    s2.members = [];
    var r2 = n3.next, a2 = n3.members;
    return s2.token = r2, a2 && a2.length > 0 && (s2.members = a2.map(function(t4) {
      return new un2(e, t4);
    })), s2;
  }
  return t(n2, t3), n2;
}(qe);
!function(e) {
  e.ALL = "all", e.MUTED = "muted", e.UNMUTED = "unmuted";
}(Rs || (Rs = {})), function(e) {
  e.MEMBER_NICKNAME_ALPHABETICAL = "member_nickname_alphabetical", e.OPERATOR_THEN_MEMBER_ALPHABETICAL = "operator_then_member_alphabetical";
}(Fs || (Fs = {})), function(e) {
  e.ALL = "all", e.JOINED = "joined_only", e.INVITED = "invited_only", e.INVITED_BY_FRIEND = "invited_by_friend", e.INVITED_BY_NON_FRIEND = "invited_by_non_friend";
}(ks || (ks = {}));
var qs2 = function(t3) {
  function a2(e, n2, s2) {
    var r2, a3, o2, u2, c2 = this;
    return (c2 = t3.call(this, e, n2, H.GROUP, s2) || this).mutedMemberFilter = Rs.ALL, c2.memberStateFilter = ks.ALL, c2.nicknameStartsWithFilter = null, c2.operatorFilter = rn.ALL, c2.order = Fs.MEMBER_NICKNAME_ALPHABETICAL, c2.mutedMemberFilter = null !== (r2 = s2.mutedMemberFilter) && void 0 !== r2 ? r2 : Rs.ALL, c2.memberStateFilter = null !== (a3 = s2.memberStateFilter) && void 0 !== a3 ? a3 : ks.ALL, c2.nicknameStartsWithFilter = null !== (o2 = s2.nicknameStartsWithFilter) && void 0 !== o2 ? o2 : null, c2.order = null !== (u2 = s2.order) && void 0 !== u2 ? u2 : Fs.MEMBER_NICKNAME_ALPHABETICAL, c2;
  }
  return t(a2, t3), a2.prototype._validate = function() {
    return t3.prototype._validate.call(this) && T(Rs, this.mutedMemberFilter) && T(ks, this.memberStateFilter) && (S("string", this.nicknameStartsWithFilter) || null === this.nicknameStartsWithFilter) && T(rn, this.operatorFilter) && T(Fs, this.order);
  }, a2.prototype.next = function() {
    return r(this, void 0, void 0, function() {
      var e, t4, r2, a3, i, o2;
      return s(this, function(u2) {
        switch (u2.label) {
          case 0:
            return this._validate() ? this._isLoading ? [3, 3] : this._hasNext ? (this._isLoading = true, e = uo.of(this._iid).requestQueue, t4 = new Vs2(oe(n(n({}, this), { token: this._token }))), [4, e.send(t4)]) : [3, 2] : [3, 5];
          case 1:
            return r2 = u2.sent(), a3 = r2.as(Bs), i = a3.members, o2 = a3.token, this._token = o2, this._hasNext = !!o2, this._isLoading = false, [2, i];
          case 2:
            return [2, []];
          case 3:
            throw b.queryInProgress;
          case 4:
            return [3, 6];
          case 5:
            throw b.invalidParameters;
          case 6:
            return [2];
        }
      });
    });
  }, a2;
}(ko);
var zs = function(t3) {
  function n2(e) {
    var n3 = this, s2 = e.channelUrl, r2 = e.userId, a2 = e.accessCode;
    return (n3 = t3.call(this) || this).method = ae.PUT, n3.path = "".concat(de, "/").concat(encodeURIComponent(s2), "/accept"), n3.params = { user_id: r2, access_code: a2 }, n3;
  }
  return t(n2, t3), n2;
}(Fe);
var Ws2 = function(t3) {
  function n2(e, n3) {
    var s2 = t3.call(this, e, n3) || this;
    return s2.channel = new fr(e, n3), s2.channel.myMemberState = Zt.JOINED, s2;
  }
  return t(n2, t3), n2;
}(qe);
var js = function(n2) {
  function s2(e) {
    var s3 = this, r2 = e.channelUrl, a2 = e.isDistinct, i = e.isPublic, o2 = e.isDiscoverable, u2 = e.coverUrl, c2 = e.coverImage, l = e.accessCode, h = e.name, d = e.data, _2 = e.customType, p = e.operatorUserIds, f2 = e.messageSurvivalSeconds;
    return (s3 = n2.call(this) || this).method = ae.PUT, s3.path = "".concat(de, "/").concat(encodeURIComponent(r2)), s3.params = se({ is_distinct: a2, is_public: i, is_discoverable: o2, name: h, data: d, custom_type: _2, cover_url: u2, cover_file: c2, access_code: l, operator_ids: p, message_survival_seconds: f2 }), s3;
  }
  return t(s2, n2), s2;
}(Fe);
var Qs2 = function(t3) {
  function n2(e, n3) {
    var s2 = t3.call(this, e, n3) || this;
    return s2.channel = new fr(e, n3), s2;
  }
  return t(n2, t3), n2;
}(qe);
var Ys = function(t3) {
  function n2(e) {
    var n3 = this, s2 = e.channelUrl;
    return (n3 = t3.call(this) || this).method = ae.DELETE, n3.path = "".concat(de, "/").concat(encodeURIComponent(s2)), n3;
  }
  return t(n2, t3), n2;
}(Fe);
!function(t3) {
  function n2(e, n3) {
    return t3.call(this, e, n3) || this;
  }
  t(n2, t3);
}(qe);
var Ks2 = function(t3) {
  function n2(e) {
    var n3 = this, s2 = e.channelUrl;
    return (n3 = t3.call(this) || this).method = ae.DELETE, n3.path = "".concat(de, "/").concat(encodeURIComponent(s2), "/hide"), n3;
  }
  return t(n2, t3), n2;
}(Fe);
!function(t3) {
  function n2() {
    return null !== t3 && t3.apply(this, arguments) || this;
  }
  t(n2, t3);
}(qe);
var Js2 = function(t3) {
  function n2(e) {
    var n3 = e.userId, s2 = e.channelUrl, r2 = e.countPreference, a2 = t3.call(this) || this;
    return a2.method = ae.PUT, a2.path = "".concat(ue, "/").concat(encodeURIComponent(n3), "/count_preference/").concat(encodeURIComponent(s2)), a2.params = { count_preference: r2 }, a2;
  }
  return t(n2, t3), n2;
}(Fe);
var Xs = function(t3) {
  function n2(e, n3) {
    var s2 = t3.call(this, e, n3) || this;
    return s2.countPreference = n3.count_preference, s2;
  }
  return t(n2, t3), n2;
}(qe);
var Zs2 = function(n2) {
  function s2(e) {
    var s3 = this, r2 = e.channelUrl, a2 = e.locale;
    return (s3 = n2.call(this) || this).method = ae.PUT, s3.path = "".concat(de, "/").concat(encodeURIComponent(r2), "/reset_user_history"), s3.params = se({ locale: a2 }), s3;
  }
  return t(s2, n2), s2;
}(Fe);
var $s = function(t3) {
  function n2(e, n3) {
    var s2 = t3.call(this, e, n3) || this, r2 = n3.ts_message_offset;
    return s2.messageOffsetTimestamp = r2, s2;
  }
  return t(n2, t3), n2;
}(qe);
var er = n(n({}, bn), { scheduledAt: void 0, file: void 0, fileUrl: void 0, fileName: void 0, mimeType: void 0, fileSize: void 0, thumbnailSizes: void 0, requireAuth: false });
var tr = n(n({}, En), { scheduledAt: void 0 });
var nr2 = function(s2) {
  function r2(e) {
    var r3, a2, i = this;
    i = s2.call(this) || this;
    var o2 = [];
    e.mentionType === B.USERS && (e.mentionedUserIds ? o2 = e.mentionedUserIds : e.mentionedUsers && (o2 = e.mentionedUsers.map(function(e2) {
      return e2.userId;
    })));
    var u2 = e.channelType, c2 = e.channelUrl, l = e.scheduledMessageId;
    return i.method = ae.PUT, i.path = "".concat(Re(u2), "/").concat(encodeURIComponent(c2), "/scheduled_messages/").concat(encodeURIComponent(l)), i.params = se(oe({ req_id: e.reqId, scheduled_at: e.scheduledAt, message_type: K.FILE, url: e.fileUrl, file_name: e.fileName, file_size: e.fileSize, file_type: e.mimeType, thumbnails: null === (r3 = e._thumbnails) || void 0 === r3 ? void 0 : r3.map(function(e2) {
      return Pe.payloadify(e2);
    }), custom_type: e.customType, data: e.data, require_auth: e.requireAuth, mention_type: e.mentionType, mentioned_user_ids: o2, sorted_metaarray: null === (a2 = e.metaArrays) || void 0 === a2 ? void 0 : a2.map(function(e2) {
      return Ve.payloadify(e2);
    }), apple_critical_alert_options: e.appleCriticalAlertOptions ? Ke.payloadify(e.appleCriticalAlertOptions) : null, push_option: e.pushNotificationDeliveryOption })), i;
  }
  return t(r2, s2), r2;
}(Fe);
var sr = function(t3) {
  function n2(e, n3) {
    var s2 = t3.call(this, e, n3) || this;
    return s2.message = new Nt(e, n3), s2;
  }
  return t(n2, t3), n2;
}(qe);
var rr = function(s2) {
  function r2(e) {
    var r3, a2 = this;
    a2 = s2.call(this) || this;
    var i = [];
    e.mentionType === B.USERS && (e.mentionedUserIds ? i = e.mentionedUserIds : e.mentionedUsers && (i = e.mentionedUsers.map(function(e2) {
      return e2.userId;
    })));
    var o2 = e.channelType, u2 = e.channelUrl, c2 = e.scheduledMessageId;
    return a2.method = ae.PUT, a2.path = "".concat(Re(o2), "/").concat(encodeURIComponent(u2), "/scheduled_messages/").concat(encodeURIComponent(c2)), a2.params = se(oe({ req_id: e.reqId, scheduled_at: e.scheduledAt, message_type: K.USER, message: e.message, custom_type: e.customType, data: e.data, mention_type: e.mentionType, mentioned_user_ids: i, sorted_metaarray: null === (r3 = e.metaArrays) || void 0 === r3 ? void 0 : r3.map(function(e2) {
      return Ve.payloadify(e2);
    }), apple_critical_alert_options: e.appleCriticalAlertOptions ? Ke.payloadify(e.appleCriticalAlertOptions) : null, target_langs: e.translationTargetLanguages, push_option: e.pushNotificationDeliveryOption })), a2;
  }
  return t(r2, s2), r2;
}(Fe);
!function(t3) {
  function n2(e, n3) {
    var s2 = t3.call(this, e, n3) || this;
    return s2.message = new wt(e, n3), s2;
  }
  t(n2, t3);
}(qe);
var ar2;
var ir;
var or = function(t3) {
  function n2(e) {
    var n3 = t3.call(this) || this, s2 = e.channelType, r2 = e.channelUrl, a2 = e.scheduledMessageId;
    return n3.method = ae.DELETE, n3.path = "".concat(Re(s2), "/").concat(encodeURIComponent(r2), "/scheduled_messages/").concat(encodeURIComponent(a2)), n3;
  }
  return t(n2, t3), n2;
}(Fe);
var ur2 = function(t3) {
  function n2(e) {
    var n3 = t3.call(this) || this, s2 = e.channelType, r2 = e.channelUrl, a2 = e.scheduledMessageId;
    return n3.method = ae.POST, n3.path = "".concat(Re(s2), "/").concat(encodeURIComponent(r2), "/scheduled_messages/").concat(encodeURIComponent(a2), "/send_now"), n3;
  }
  return t(n2, t3), n2;
}(Fe);
var cr = function(t3) {
  function n2(e) {
    var n3 = e.userId, s2 = e.channelUrl, r2 = e.pushTriggerOption, a2 = t3.call(this) || this;
    return a2.method = ae.PUT, a2.path = "".concat(ue, "/").concat(encodeURIComponent(n3), "/push_preference/").concat(encodeURIComponent(s2)), a2.params = { push_trigger_option: r2 }, a2;
  }
  return t(n2, t3), n2;
}(Fe);
var lr2 = function(t3) {
  function n2(e, n3) {
    var s2 = t3.call(this, e, n3) || this;
    return s2.pushTriggerOption = n3.push_trigger_option, s2.enabled = n3.enable, s2;
  }
  return t(n2, t3), n2;
}(qe);
var hr2 = function(t3) {
  function n2(e) {
    var n3 = e.userId, s2 = e.channelUrl, r2 = t3.call(this) || this;
    return r2.method = ae.GET, r2.path = "".concat(ue, "/").concat(encodeURIComponent(n3), "/push_preference/").concat(encodeURIComponent(s2)), r2;
  }
  return t(n2, t3), n2;
}(Fe);
var dr = function(t3) {
  function n2(e, n3) {
    var s2 = t3.call(this, e, n3) || this;
    return s2.pushTriggerOption = n3.push_trigger_option, s2.enabled = n3.enable, s2;
  }
  return t(n2, t3), n2;
}(qe);
var _r = function(t3) {
  function n2(e) {
    var n3 = this, s2 = e.channelUrl, r2 = e.channelType;
    return (n3 = t3.call(this) || this).method = ae.GET, n3.path = "".concat(Re(r2), "/").concat(encodeURIComponent(s2), "/message_purge_offset"), n3;
  }
  return t(n2, t3), n2;
}(Fe);
var pr2 = function(t3) {
  function n2(e, n3) {
    var s2 = t3.call(this, e, n3) || this, r2 = n3.message_purge_offset;
    return s2.messageDeletionTimestamp = r2, s2;
  }
  return t(n2, t3), n2;
}(qe);
!function(e) {
  e.ALL = "all", e.UNREAD_MESSAGE_COUNT_ONLY = "unread_message_count_only", e.UNREAD_MENTION_COUNT_ONLY = "unread_mention_count_only", e.OFF = "off";
}(ar2 || (ar2 = {})), function(e) {
  e.UNHIDDEN = "unhidden", e.HIDDEN_ALLOW_AUTO_UNHIDE = "hidden_allow_auto_unhide", e.HIDDEN_PREVENT_AUTO_UNHIDE = "hidden_prevent_auto_unhide";
}(ir || (ir = {}));
var fr = function(u2) {
  function c2(e, t3) {
    var n2, c3, l, h, p, f2, v4, m2, E2, C3, y3, M2, b3, N2, U2, S3, T4, A2, I2, w2, L3, D3 = this;
    return (D3 = u2.call(this, e, t3) || this)._unreadMemberStateMap = /* @__PURE__ */ new Map(), D3._undeliveredMemberStateMap = /* @__PURE__ */ new Map(), D3._typingStatus = /* @__PURE__ */ new Map(), D3._lastMemberCountUpdated = 0, D3._typingStarted = 0, D3._typingEnded = 0, D3._hasBotInfo = { general: false, ai: false }, D3.isDistinct = false, D3.isSuper = false, D3.isBroadcast = false, D3.isExclusive = false, D3.isPublic = false, D3.isDiscoverable = true, D3.isChatNotification = false, D3.isAccessCodeRequired = false, D3.isPushEnabled = false, D3.unreadMessageCount = 0, D3.unreadMentionCount = 0, D3.totalUnreadReplyCount = 0, D3.members = [], D3.memberCount = 0, D3.joinedMemberCount = 0, D3.hiddenState = ir.UNHIDDEN, D3.lastMessage = null, D3.messageOffsetTimestamp = 0, D3.messageSurvivalSeconds = -1, D3.myMemberState = Zt.NONE, D3.myRole = V.NONE, D3.myMutedState = z.UNMUTED, D3.myLastRead = 0, D3.myCountPreference = ar2.ALL, D3.myPushTriggerOption = _.DEFAULT, D3.inviter = null, D3.invitedAt = 0, D3.joinedAt = 0, D3.lastPinnedMessage = null, D3._latestMessageInfo = null, D3._pinnedMessagesUpdatedAt = 0, D3._myMutedRemainingTime = -1, D3._messageDeletionTimestamp = 0, D3.channelType = H.GROUP, D3.isDistinct = null !== (c3 = t3.is_distinct) && void 0 !== c3 && c3, D3.isSuper = null !== (l = t3.is_super) && void 0 !== l && l, D3.isBroadcast = null !== (h = t3.is_broadcast) && void 0 !== h && h, D3.isExclusive = null !== (p = t3.is_exclusive) && void 0 !== p && p, D3.isPublic = null !== (f2 = t3.is_public) && void 0 !== f2 && f2, D3.isDiscoverable = null !== (v4 = t3.is_discoverable) && void 0 !== v4 ? v4 : D3.isPublic, D3.isChatNotification = null !== (m2 = t3.is_chat_notification) && void 0 !== m2 && m2, D3.isAccessCodeRequired = null !== (E2 = t3.is_access_code_required) && void 0 !== E2 && E2, D3.isPushEnabled = null !== (C3 = t3.is_push_enabled) && void 0 !== C3 && C3, Array.isArray(t3.members) && (n2 = D3.members).push.apply(n2, c([], a(t3.members.map(function(e2) {
      return new un2(D3._iid, e2);
    })), false)), D3.memberCount = null !== (y3 = t3.member_count) && void 0 !== y3 ? y3 : 0, D3.joinedMemberCount = null !== (M2 = t3.joined_member_count) && void 0 !== M2 ? M2 : 0, D3.hiddenState = T(ir, t3.hidden_state) ? t3.hidden_state : ir.UNHIDDEN, D3.messageOffsetTimestamp = null !== (b3 = t3.ts_message_offset) && void 0 !== b3 ? b3 : 0, D3.messageSurvivalSeconds = null !== (N2 = t3.message_survival_seconds) && void 0 !== N2 ? N2 : -1, D3.lastMessage = t3.last_message ? At(D3._iid, n({ channel_type: D3.channelType }, t3.last_message)) : null, t3.read_receipt && Object.keys(t3.read_receipt).forEach(function(e2) {
      S("number", t3.read_receipt[e2]) && D3._updateUnreadMemberState(e2, t3.read_receipt[e2]);
    }), t3.delivery_receipt && Object.keys(t3.delivery_receipt).forEach(function(e2) {
      S("number", t3.delivery_receipt[e2]) && D3._updateUndeliveredMemberState(e2, t3.delivery_receipt[e2]);
    }), D3.myMemberState = T(Zt, t3.member_state) ? t3.member_state : Zt.NONE, D3.myRole = T(V, t3.my_role) ? t3.my_role : V.NONE, T(z, t3.is_muted) ? D3.myMutedState = t3.is_muted : S("boolean", t3.is_muted) ? D3.myMutedState = t3.is_muted ? z.MUTED : z.UNMUTED : D3.myMutedState = z.UNMUTED, D3.myCountPreference = T(ar2, t3.count_preference) ? t3.count_preference : ar2.ALL, D3.myPushTriggerOption = T(_, t3.push_trigger_option) ? t3.push_trigger_option : _.ALL, D3.myLastRead = null !== (U2 = t3.user_last_read) && void 0 !== U2 ? U2 : 0, D3.inviter = t3.inviter ? new ls(D3._iid, t3.inviter) : null, D3.invitedAt = null !== (S3 = t3.invited_at) && void 0 !== S3 ? S3 : 0, D3.joinedAt = null !== (T4 = t3.joined_ts) && void 0 !== T4 ? T4 : 0, D3._updateUnreadCount(null !== (A2 = t3.unread_message_count) && void 0 !== A2 ? A2 : 0, null !== (I2 = t3.unread_mention_count) && void 0 !== I2 ? I2 : 0), D3.totalUnreadReplyCount = null !== (w2 = t3.total_unread_thread_message_count) && void 0 !== w2 ? w2 : 0, D3.lastPinnedMessage = t3.latest_pinned_message ? At(D3._iid, n({ channel_type: D3.channelType }, t3.latest_pinned_message)) : null, t3.latest_message && (D3._latestMessageInfo = { messageId: t3.latest_message.message_id, createdAt: t3.latest_message.created_at }), D3._hasBotInfo = { general: !!t3.has_bot, ai: !!t3.has_ai_bot }, D3._messageDeletionTimestamp = null !== (L3 = t3.message_purge_offset) && void 0 !== L3 ? L3 : 0, D3;
  }
  return t(c2, u2), Object.defineProperty(c2.prototype, "isHidden", { get: function() {
    return this.hiddenState !== ir.UNHIDDEN;
  }, enumerable: false, configurable: true }), Object.defineProperty(c2.prototype, "isTyping", { get: function() {
    return this._typingStatus.size > 0;
  }, enumerable: false, configurable: true }), Object.defineProperty(c2.prototype, "cachedUnreadMemberState", { get: function() {
    var e, t3, n2 = {};
    try {
      for (var s2 = o(this._unreadMemberStateMap), r2 = s2.next(); !r2.done; r2 = s2.next()) {
        var a2 = a(r2.value, 2), i = a2[0], o2 = a2[1];
        n2[i] = o2;
      }
    } catch (t4) {
      e = { error: t4 };
    } finally {
      try {
        r2 && !r2.done && (t3 = s2.return) && t3.call(s2);
      } finally {
        if (e)
          throw e.error;
      }
    }
    return n2;
  }, enumerable: false, configurable: true }), Object.defineProperty(c2.prototype, "cachedUndeliveredMemberState", { get: function() {
    var e, t3, n2 = {};
    try {
      for (var s2 = o(this._undeliveredMemberStateMap), r2 = s2.next(); !r2.done; r2 = s2.next()) {
        var a2 = a(r2.value, 2), i = a2[0], o2 = a2[1];
        n2[i] = o2;
      }
    } catch (t4) {
      e = { error: t4 };
    } finally {
      try {
        r2 && !r2.done && (t3 = s2.return) && t3.call(s2);
      } finally {
        if (e)
          throw e.error;
      }
    }
    return n2;
  }, enumerable: false, configurable: true }), Object.defineProperty(c2.prototype, "hasBot", { get: function() {
    return this._hasBotInfo.general;
  }, enumerable: false, configurable: true }), Object.defineProperty(c2.prototype, "hasAiBot", { get: function() {
    return this._hasBotInfo.ai;
  }, enumerable: false, configurable: true }), Object.defineProperty(c2.prototype, "messageDeletionTimestamp", { get: function() {
    return this._messageDeletionTimestamp;
  }, enumerable: false, configurable: true }), c2.payloadify = function(e) {
    return se(oe(n(n({}, u2.payloadify.call(this, e)), { is_access_code_required: e.isAccessCodeRequired, is_distinct: e.isDistinct, is_super: e.isSuper, is_broadcast: e.isBroadcast, is_exclusive: e.isExclusive, is_public: e.isPublic, is_discoverable: e.isDiscoverable, is_muted: e.myMutedState, is_push_enabled: e.isPushEnabled, unread_message_count: e.unreadMessageCount, unread_mention_count: e.unreadMentionCount, total_unread_thread_message_count: e.totalUnreadReplyCount, push_trigger_option: e.myPushTriggerOption, count_preference: e.myCountPreference, hidden_state: e.hiddenState, member_count: e.memberCount, joined_member_count: e.joinedMemberCount, member_state: e.myMemberState, my_role: e.myRole, user_last_read: e.myLastRead, ts_message_offset: e.messageOffsetTimestamp, message_survival_seconds: e.messageSurvivalSeconds, read_receipt: e.cachedUnreadMemberState, delivery_receipt: e.cachedUndeliveredMemberState, members: e.members.map(function(e2) {
      return un2.payloadify(e2);
    }), last_message: e.lastMessage ? Ut(e.lastMessage) : null, inviter: e.inviter ? ls.payloadify(e.inviter) : null, invited_at: e.invitedAt, joined_ts: e.joinedAt, latest_pinned_message: e.lastPinnedMessage ? Ut(e.lastPinnedMessage) : null, latest_message: e._latestMessageInfo ? { message_id: e._latestMessageInfo.messageId, created_at: e._latestMessageInfo.createdAt } : null, has_bot: e.hasBot, has_ai_bot: e.hasAiBot, message_purge_offset: e.messageDeletionTimestamp })));
  }, c2.prototype._shouldUpdateLastMessageWith = function(e) {
    if (e.silent)
      return false;
    var t3 = uo.of(this._iid).appInfo;
    switch (null == t3 ? void 0 : t3.lastMessageThreadingPolicy) {
      case Mr.NONE:
      case Mr.INCLUDE_REPLY:
        break;
      case Mr.EXCLUDE_REPLY:
        if (e.parentMessageId > 0)
          return false;
        break;
      case Mr.INCLUDE_REPLY_TO_CHANNEL:
        if (e instanceof _t && e.parentMessageId > 0 && !e.replyToChannel)
          return false;
    }
    return !this.lastMessage || this.lastMessage.createdAt < e.createdAt || this.lastMessage.createdAt === e.createdAt && this.lastMessage.messageId === e.messageId && this.lastMessage.updatedAt < e.updatedAt;
  }, c2.prototype._tryUpdateLastMessageAndCallEvents = function(e, t3) {
    var n2 = uo.of(this._iid).dispatcher, s2 = ys.of(this._iid);
    this._updateLastMessage(t3), s2.handlers.map(function(t4) {
      t4.onChannelChanged && t4.onChannelChanged(e);
    }), n2.dispatch(new Un({ channels: [e], context: { source: no.EVENT_MESSAGE_SENT } }));
  }, c2.prototype._shouldUpdateUnreadCountWith = function(e) {
    var t3 = uo.of(this._iid).appInfo;
    switch (null == t3 ? void 0 : t3.unreadCountThreadingPolicy) {
      case Pr.NONE:
      case Pr.INCLUDE_REPLY:
        break;
      case Pr.EXCLUDE_REPLY:
        if (e.parentMessageId > 0)
          return false;
        break;
      case Pr.INCLUDE_REPLY_TO_CHANNEL:
        if (e instanceof _t && e.parentMessageId > 0 && !e.replyToChannel)
          return false;
    }
    return true;
  }, c2.prototype._updateLastMessage = function(e) {
    return !!this._shouldUpdateLastMessageWith(e) && (this.lastMessage = e, true);
  }, c2.prototype._updateUnreadCount = function(e, t3) {
    if ("number" == typeof e && e >= 0)
      if (this.myCountPreference === ar2.ALL || this.myCountPreference === ar2.UNREAD_MESSAGE_COUNT_ONLY)
        if (this.isExclusive || this.isSuper || this.isBroadcast) {
          var n2 = uo.of(this._iid).maxSuperGroupChannelUnreadCount;
          this.unreadMessageCount = n2 && e >= n2 ? n2 : e;
        } else
          this.unreadMessageCount = e;
      else
        this.unreadMessageCount = 0;
    else
      this.unreadMessageCount = 0;
    "number" == typeof t3 && t3 >= 0 && (this.myCountPreference === ar2.ALL || this.myCountPreference === ar2.UNREAD_MENTION_COUNT_ONLY) ? this.unreadMentionCount = t3 : this.unreadMentionCount = 0;
  }, c2.prototype._updateUnreadMemberState = function(e, t3) {
    var n2 = this._unreadMemberStateMap.get(e);
    return (!n2 || n2 < t3) && (this._unreadMemberStateMap.set(e, t3), uo.of(this._iid).sdkState.userId === e && (this.myLastRead = t3), true);
  }, c2.prototype._updateUndeliveredMemberState = function(e, t3) {
    var n2 = this._undeliveredMemberStateMap.get(e);
    return (!n2 || n2 < t3) && (this._undeliveredMemberStateMap.set(e, t3), true);
  }, c2.prototype._updateTypingStatus = function(e, t3) {
    void 0 === t3 && (t3 = (/* @__PURE__ */ new Date()).getTime()), t3 > 0 ? this._typingStatus.set(e.userId, { user: e, ts: t3 }) : this._typingStatus.delete(e.userId);
  }, c2.prototype._clearTypingStatus = function() {
    this._typingStatus.clear(), this._typingStarted = 0, this._typingEnded = 0;
  }, c2.prototype._setLatestMemberCount = function(e, t3, n2) {
    var s2 = false;
    return n2 >= this._lastMemberCountUpdated && (this._lastMemberCountUpdated = n2, s2 = e !== this.memberCount || t3 !== this.joinedMemberCount, this.memberCount = e, this.joinedMemberCount = t3), s2;
  }, c2.prototype.isReadMessage = function(e) {
    var t3 = uo.of(this._iid).sdkState, n2 = this._unreadMemberStateMap.get(t3.userId);
    return !!n2 && n2 >= e.createdAt;
  }, c2.prototype.serialize = function() {
    var e = this;
    return os(this, function(t3) {
      t3.cachedUnreadMemberState = e.cachedUnreadMemberState, t3.cachedUndeliveredMemberState = e.cachedUndeliveredMemberState, Object.assign(t3, e._serializeCachedMetaData());
    });
  }, c2.prototype.createMessageCollection = function(e) {
    return void 0 === e && (e = {}), new Hs(this._iid, n(n({}, e), { channel: this }));
  }, c2.prototype.createMemberListQuery = function(e) {
    return void 0 === e && (e = {}), new qs2(this._iid, this.url, e);
  }, c2.prototype.createThreadedParentMessageListQuery = function(e) {
    return void 0 === e && (e = {}), new _a(this._iid, this.url, this.channelType, e);
  }, c2.prototype.addMember = function(e, t3) {
    if (void 0 === t3 && (t3 = 0), !this.isExclusive && !this.isSuper && !this.isBroadcast) {
      var n2 = this.members.findIndex(function(t4) {
        return t4.userId === e.userId;
      });
      if (n2 > -1) {
        var s2 = this.members[n2];
        s2.state === Zt.JOINED && (e.state = s2.state), this.members.splice(n2, 1), this.memberCount--;
      }
      this.members.push(e), this.memberCount++, this._updateUnreadMemberState(e.userId, t3), this._updateUndeliveredMemberState(e.userId, t3);
    }
  }, c2.prototype.removeMember = function(e) {
    if (!this.isExclusive && !this.isSuper && !this.isBroadcast) {
      var t3 = e instanceof un2 ? e.userId : e, n2 = this.members.findIndex(function(e2) {
        return e2.userId === t3;
      });
      if (n2 > -1)
        return this.members.splice(n2, 1), this.memberCount--, true;
    }
    return false;
  }, c2.prototype.getUnreadMemberCount = function(e) {
    var t3, n2;
    if (e instanceof _t && !this.isExclusive && !this.isSuper && !this.isBroadcast) {
      var s2 = uo.of(this._iid).sdkState, r2 = e.createdAt, a2 = 0;
      try {
        for (var i = o(this.members), o2 = i.next(); !o2.done; o2 = i.next()) {
          var u3 = o2.value;
          if (s2.userId !== u3.userId && u3.state === Zt.JOINED && e.sender.userId !== u3.userId)
            (this.cachedUnreadMemberState[u3.userId] || 0) < r2 && a2++;
        }
      } catch (e2) {
        t3 = { error: e2 };
      } finally {
        try {
          o2 && !o2.done && (n2 = i.return) && n2.call(i);
        } finally {
          if (t3)
            throw t3.error;
        }
      }
      return a2;
    }
    return 0;
  }, c2.prototype.getUndeliveredMemberCount = function(e) {
    var t3, n2;
    if (e instanceof _t && !this.isExclusive && !this.isSuper && !this.isBroadcast) {
      var s2 = uo.of(this._iid).sdkState, r2 = e.createdAt, a2 = 0;
      try {
        for (var i = o(this.members), o2 = i.next(); !o2.done; o2 = i.next()) {
          var u3 = o2.value;
          if (s2.userId !== u3.userId && u3.state === Zt.JOINED && e.sender.userId !== u3.userId)
            (this.cachedUndeliveredMemberState[u3.userId] || 0) < r2 && a2++;
        }
      } catch (e2) {
        t3 = { error: e2 };
      } finally {
        try {
          o2 && !o2.done && (n2 = i.return) && n2.call(i);
        } finally {
          if (t3)
            throw t3.error;
        }
      }
      return a2;
    }
    return 0;
  }, c2.prototype.getReadMembers = function(e, t3) {
    var n2 = this;
    void 0 === t3 && (t3 = false);
    var s2 = uo.of(this._iid).sdkState;
    if (!s2.userId || this.isExclusive || this.isSuper || this.isBroadcast)
      return [];
    var r2 = e instanceof _t ? e.sender : null, a2 = [];
    return this.members.forEach(function(i) {
      if (t3 || i.userId !== s2.userId && i.userId !== (null == r2 ? void 0 : r2.userId)) {
        var o2 = n2._unreadMemberStateMap.get(i.userId);
        o2 && o2 >= e.createdAt && a2.push(i);
      }
    }), a2;
  }, c2.prototype.getUnreadMembers = function(e, t3) {
    var n2 = this;
    void 0 === t3 && (t3 = false);
    var s2 = uo.of(this._iid).sdkState;
    if (!s2.userId || this.isExclusive || this.isSuper || this.isBroadcast)
      return [];
    var r2 = e instanceof _t ? e.sender : null, a2 = [];
    return this.members.forEach(function(i) {
      if (t3 || i.userId !== s2.userId && i.userId !== (null == r2 ? void 0 : r2.userId)) {
        var o2 = n2._unreadMemberStateMap.get(i.userId);
        o2 && o2 < e.createdAt && a2.push(i);
      }
    }), a2;
  }, c2.prototype.getReadStatus = function(e) {
    var t3 = this;
    void 0 === e && (e = false);
    var n2 = uo.of(this._iid).sdkState;
    if (!n2.userId || this.isExclusive || this.isSuper || this.isBroadcast)
      return null;
    var s2 = {};
    return this.members.forEach(function(r2) {
      if (e || r2.userId !== n2.userId) {
        var a2 = t3._unreadMemberStateMap.get(r2.userId);
        s2[r2.userId] = new Ye(t3._iid, { channel_url: t3.url, channel_type: t3.channelType, user: un2.payloadify(r2), ts: null != a2 ? a2 : 0 });
      }
    }), s2;
  }, c2.prototype.getDeliveryStatus = function(e) {
    var t3 = this;
    void 0 === e && (e = true);
    var n2 = uo.of(this._iid).sdkState;
    if (!n2.userId || this.isExclusive || this.isSuper || this.isBroadcast)
      return null;
    var s2 = {};
    return this.members.forEach(function(r2) {
      if (e || r2.userId !== n2.userId) {
        var a2 = t3._undeliveredMemberStateMap.get(r2.userId);
        s2[r2.userId] = new cn(t3._iid, { channel_url: t3.url, channel_type: t3.channelType, user: un2.payloadify(r2), ts: null != a2 ? a2 : 0 });
      }
    }), s2;
  }, c2.prototype.getTypingUsers = function() {
    var e = [];
    return this._typingStatus.forEach(function(t3) {
      var n2 = t3.user;
      e.push(n2);
    }), e;
  }, c2.prototype.invalidateTypingStatus = function() {
    var e = this, t3 = uo.of(this._iid).typingIndicatorInvalidateTime, n2 = Date.now(), s2 = false;
    return this._typingStatus.forEach(function(r2, a2) {
      var i = r2.ts;
      n2 - i >= t3 && (e._typingStatus.delete(a2), s2 = true);
    }), s2;
  }, c2.prototype.refresh = function() {
    return r(this, void 0, void 0, function() {
      return s(this, function(e) {
        return [2, this._refresh()];
      });
    });
  }, c2.prototype._refresh = function(e) {
    return void 0 === e && (e = false), r(this, void 0, void 0, function() {
      var t3, n2, s2, r2, a2, i;
      return s(this, function(o2) {
        switch (o2.label) {
          case 0:
            return t3 = uo.of(this._iid), n2 = t3.requestQueue, s2 = t3.dispatcher, r2 = new Ln({ channelUrl: this.url }), [4, n2.send(r2)];
          case 1:
            return a2 = o2.sent(), i = a2.as(Dn).channel, this._update(i), e || s2.dispatch(new Un({ channels: [i], context: { source: no.REFRESH_CHANNEL } })), [2, this];
        }
      });
    });
  }, c2.prototype.freeze = function() {
    return r(this, void 0, void 0, function() {
      return s(this, function(e) {
        switch (e.label) {
          case 0:
            return [4, u2.prototype.freeze.call(this)];
          case 1:
            return e.sent(), uo.of(this._iid).dispatcher.dispatch(new Un({ channels: [this], context: { source: no.EVENT_CHANNEL_FROZEN }, isWebSocketEventComing: true })), [2];
        }
      });
    });
  }, c2.prototype.unfreeze = function() {
    return r(this, void 0, void 0, function() {
      return s(this, function(e) {
        switch (e.label) {
          case 0:
            return [4, u2.prototype.unfreeze.call(this)];
          case 1:
            return e.sent(), uo.of(this._iid).dispatcher.dispatch(new Un({ channels: [this], context: { source: no.EVENT_CHANNEL_UNFROZEN }, isWebSocketEventComing: true })), [2];
        }
      });
    });
  }, c2.prototype.updateChannel = function(e) {
    return r(this, void 0, void 0, function() {
      var t3, n2, r2, a2, i, o2, u3;
      return s(this, function(c3) {
        switch (c3.label) {
          case 0:
            return t3 = n(n({}, Gs2), e), cs(function(e2) {
              return S("string", e2.coverUrl, true) && (k(e2.coverImage) || S("string", e2.coverImage, true)) && S("boolean", e2.isDistinct, true) && S("boolean", e2.isPublic, true) && S("boolean", e2.isDiscoverable, true) && S("string", e2.accessCode, true) && S("string", e2.name, true) && S("string", e2.data, true) && S("string", e2.customType, true) && C("string", e2.operatorUserIds, true) && S("number", e2.messageSurvivalSeconds, true);
            }(t3)).throw(b.invalidParameters), n2 = uo.of(this._iid), r2 = n2.dispatcher, a2 = n2.requestQueue, i = new js(n({ channelUrl: this.url }, t3)), [4, a2.send(i)];
          case 1:
            return o2 = c3.sent(), u3 = o2.as(Qs2).channel, this._update(u3), r2.dispatch(new Un({ channels: [u3], context: { source: no.EVENT_CHANNEL_UPDATED }, isWebSocketEventComing: true })), [2, this];
        }
      });
    });
  }, c2.prototype.invite = function(e) {
    return r(this, void 0, void 0, function() {
      return s(this, function(t3) {
        return cs(e.every(function(e2) {
          return e2 instanceof ls;
        })).throw(b.invalidParameters), [2, this.inviteWithUserIds(e.map(function(e2) {
          return e2.userId;
        }))];
      });
    });
  }, c2.prototype.inviteWithUserIds = function(e) {
    return r(this, void 0, void 0, function() {
      var t3, n2, s2, r2, a2, i, o2;
      return s(this, function(u3) {
        switch (u3.label) {
          case 0:
            return cs(C("string", e)).throw(b.invalidParameters), t3 = uo.of(this._iid), n2 = t3.dispatcher, s2 = t3.requestQueue, r2 = t3.sessionManager, a2 = new ts({ channelUrl: this.url, userIds: e }), [4, s2.send(a2)];
          case 1:
            return i = u3.sent(), o2 = i.as(ns).channel, this._update(o2), n2.dispatch(new Un({ channels: [o2], context: { source: no.EVENT_CHANNEL_INVITED, inviter: r2.currentUser, invitees: [] }, isWebSocketEventComing: true })), [2, this];
        }
      });
    });
  }, c2.prototype.join = function(e) {
    return r(this, void 0, void 0, function() {
      var t3, n2, s2, r2, a2, i, o2;
      return s(this, function(u3) {
        switch (u3.label) {
          case 0:
            return cs(S("string", e, true)).throw(b.invalidParameters), t3 = uo.of(this._iid), n2 = t3.dispatcher, s2 = t3.sdkState, r2 = t3.requestQueue, a2 = new Jn({ channelUrl: this.url, userId: s2.userId, accessCode: e }), [4, r2.send(a2)];
          case 1:
            return i = u3.sent(), (o2 = i.as(Xn).channel).myMemberState = this.myMemberState = Zt.JOINED, this._update(o2), n2.dispatch(new Un({ channels: [o2], context: { source: no.EVENT_CHANNEL_JOINED, users: [] }, isWebSocketEventComing: true })), [2, this];
        }
      });
    });
  }, c2.prototype.leave = function(e) {
    return void 0 === e && (e = false), r(this, void 0, void 0, function() {
      var t3, n2, s2, r2;
      return s(this, function(a2) {
        switch (a2.label) {
          case 0:
            return t3 = uo.of(this._iid), n2 = t3.sdkState, s2 = t3.requestQueue, r2 = new $n({ channelUrl: this.url, userId: n2.userId, shouldRemoveOperatorStatus: e }), [4, s2.send(r2)];
          case 1:
            return a2.sent(), this.myMemberState = Zt.NONE, [2];
        }
      });
    });
  }, c2.prototype.acceptInvitation = function(e) {
    return r(this, void 0, void 0, function() {
      var t3, n2, s2, r2, a2, i, o2;
      return s(this, function(u3) {
        switch (u3.label) {
          case 0:
            return cs(S("string", e, true)).throw(b.invalidParameters), t3 = uo.of(this._iid), n2 = t3.dispatcher, s2 = t3.sdkState, r2 = t3.requestQueue, a2 = new zs({ channelUrl: this.url, userId: s2.userId, accessCode: e }), [4, r2.send(a2)];
          case 1:
            return i = u3.sent(), (o2 = i.as(Ws2).channel).myMemberState = this.myMemberState = Zt.JOINED, this._update(o2), n2.dispatch(new Un({ channels: [o2], context: { source: no.EVENT_CHANNEL_ACCEPTED_INVITE }, isWebSocketEventComing: true })), [2, this];
        }
      });
    });
  }, c2.prototype.declineInvitation = function() {
    return r(this, void 0, void 0, function() {
      var e, t3, n2, s2;
      return s(this, function(r2) {
        switch (r2.label) {
          case 0:
            return e = uo.of(this._iid), t3 = e.sdkState, n2 = e.requestQueue, s2 = new rs({ channelUrl: this.url, userId: t3.userId }), [4, n2.send(s2)];
          case 1:
            return r2.sent(), this.myMemberState = Zt.NONE, [2, this];
        }
      });
    });
  }, c2.prototype.sendUserMessage = function(e) {
    var t3 = this, n2 = new nn(), s2 = uo.of(this._iid).dispatcher, r2 = N.of(this._iid);
    return u2.prototype.sendUserMessage.call(this, e).onPending(function(e2) {
      r2.completeCurrentAndProcessNextAutoResend(e2), n2._trigger(e2);
    }).onFailed(function(e2, t4) {
      t4 && r2.completeCurrentAndProcessNextAutoResend(t4), n2._triggerFailed(e2, t4);
    }).onSucceeded(function(e2) {
      r2.completeCurrentAndProcessNextAutoResend(e2), t3._updateLastMessage(e2), ys.of(t3._iid).handlers.map(function(e3) {
        e3.onChannelChanged && e3.onChannelChanged(t3);
      }), s2.dispatch(new Un({ channels: [t3], context: { source: no.EVENT_MESSAGE_SENT } })), n2._trigger(e2);
    }), n2;
  }, c2.prototype.updateUserMessage = function(e, t3) {
    return r(this, void 0, void 0, function() {
      var n2, s2, r2, a2, i = this;
      return s(this, function(o2) {
        switch (o2.label) {
          case 0:
            return n2 = uo.of(this._iid).dispatcher, [4, u2.prototype.updateUserMessage.call(this, e, t3)];
          case 1:
            return s2 = o2.sent(), r2 = this._updateLastMessage(s2), a2 = false, this.lastPinnedMessage && this.lastPinnedMessage.messageId === s2.messageId && (this.lastPinnedMessage = s2, r2 = true, a2 = true), r2 && (ys.of(this._iid).handlers.map(function(e2) {
              e2.onChannelChanged && e2.onChannelChanged(i);
            }), n2.dispatch(new Un({ channels: [this], context: { source: a2 ? no.EVENT_PINNED_MESSAGE_UPDATED : no.EVENT_MESSAGE_UPDATED } }))), a2 && ys.of(this._iid).handlers.map(function(e2) {
              e2.onPinnedMessageUpdated && e2.onPinnedMessageUpdated(i);
            }), n2.dispatch(new po({ messages: [s2], source: no.EVENT_MESSAGE_UPDATED })), [2, s2];
        }
      });
    });
  }, c2.prototype._autoResendUserMessage = function(e) {
    var t3 = this, n2 = new nn(), s2 = uo.of(this._iid).dispatcher, r2 = N.of(this._iid);
    return u2.prototype._autoResendUserMessage.call(this, e).onPending(function(e2) {
      r2.completeCurrentAndProcessNextAutoResend(e2), n2._trigger(e2);
    }).onFailed(function(e2, t4) {
      r2.completeCurrentAndProcessNextAutoResend(t4), n2._triggerFailed(e2, t4);
    }).onSucceeded(function(e2) {
      var a2 = ys.of(t3._iid);
      r2.completeCurrentAndProcessNextAutoResend(e2), t3._updateLastMessage(e2), a2.handlers.map(function(e3) {
        e3.onChannelChanged && e3.onChannelChanged(t3);
      }), s2.dispatch(new Un({ channels: [t3], context: { source: no.EVENT_MESSAGE_SENT } })), n2._trigger(e2);
    }), n2;
  }, c2.prototype.sendFileMessage = function(e) {
    var t3 = this, n2 = new nn(), s2 = uo.of(this._iid).dispatcher, r2 = N.of(this._iid);
    return u2.prototype.sendFileMessage.call(this, e).onPending(function(e2) {
      r2.completeCurrentAndProcessNextAutoResend(e2), n2._trigger(e2);
    }).onFailed(function(e2, t4) {
      t4 && r2.completeCurrentAndProcessNextAutoResend(t4), n2._triggerFailed(e2, t4);
    }).onSucceeded(function(e2) {
      var a2 = ys.of(t3._iid);
      r2.completeCurrentAndProcessNextAutoResend(e2), t3._updateLastMessage(e2), a2.handlers.map(function(e3) {
        e3.onChannelChanged && e3.onChannelChanged(t3);
      }), s2.dispatch(new Un({ channels: [t3], context: { source: no.EVENT_MESSAGE_SENT } })), n2._trigger(e2);
    }), n2;
  }, c2.prototype.sendMultipleFilesMessage = function(e) {
    var t3 = this, n2 = new fi(), s2 = uo.of(this._iid).dispatcher;
    return u2.prototype.sendMultipleFilesMessage.call(this, e).onPending(function(e2) {
      n2._trigger(e2);
    }).onFailed(function(e2, t4) {
      n2._triggerFailed(e2, t4);
    }).onSucceeded(function(e2) {
      var r2 = ys.of(t3._iid);
      t3._updateLastMessage(e2), r2.handlers.map(function(e3) {
        e3.onChannelChanged && e3.onChannelChanged(t3);
      }), s2.dispatch(new Un({ channels: [t3], context: { source: no.EVENT_MESSAGE_SENT } })), n2._trigger(e2);
    }).onFileUploaded(function(e2, t4, s3, r2) {
      n2._triggerOnFileUploaded(e2, t4, s3, r2);
    }), n2;
  }, c2.prototype.updateFileMessage = function(e, t3) {
    return r(this, void 0, void 0, function() {
      var n2, s2, r2, a2, i = this;
      return s(this, function(o2) {
        switch (o2.label) {
          case 0:
            return n2 = uo.of(this._iid).dispatcher, [4, u2.prototype.updateFileMessage.call(this, e, t3)];
          case 1:
            return s2 = o2.sent(), r2 = this._updateLastMessage(s2), a2 = false, this.lastPinnedMessage && this.lastPinnedMessage.messageId === s2.messageId && (this.lastPinnedMessage = s2, r2 = true, a2 = true), r2 && (ys.of(this._iid).handlers.map(function(e2) {
              e2.onChannelChanged && e2.onChannelChanged(i);
            }), n2.dispatch(new Un({ channels: [this], context: { source: a2 ? no.EVENT_PINNED_MESSAGE_UPDATED : no.EVENT_MESSAGE_UPDATED } }))), a2 && ys.of(this._iid).handlers.map(function(e2) {
              e2.onPinnedMessageUpdated && e2.onPinnedMessageUpdated(i);
            }), n2.dispatch(new po({ messages: [s2], source: no.EVENT_MESSAGE_UPDATED })), [2, s2];
        }
      });
    });
  }, c2.prototype._autoResendFileMessage = function(e) {
    var t3 = this, n2 = new nn(), s2 = uo.of(this._iid).dispatcher, r2 = N.of(this._iid);
    return u2.prototype._autoResendFileMessage.call(this, e).onPending(function(e2) {
      r2.completeCurrentAndProcessNextAutoResend(e2), n2._trigger(e2);
    }).onFailed(function(e2, t4) {
      r2.completeCurrentAndProcessNextAutoResend(t4), n2._triggerFailed(e2, t4);
    }).onSucceeded(function(e2) {
      var a2 = ys.of(t3._iid);
      r2.completeCurrentAndProcessNextAutoResend(e2), t3._updateLastMessage(e2), a2.handlers.map(function(e3) {
        e3.onChannelChanged && e3.onChannelChanged(t3);
      }), s2.dispatch(new Un({ channels: [t3], context: { source: no.EVENT_MESSAGE_SENT } })), n2._trigger(e2);
    }), n2;
  }, c2.prototype.deleteMessage = function(e) {
    return r(this, void 0, void 0, function() {
      return s(this, function(t3) {
        switch (t3.label) {
          case 0:
            return [4, u2.prototype.deleteMessage.call(this, e)];
          case 1:
            return t3.sent(), 0 === e.messageId && e instanceof _t && uo.of(this._iid).dispatcher.dispatch(new mo({ reqId: e.reqId, source: no.EVENT_MESSAGE_DELETED })), [2];
        }
      });
    });
  }, c2.prototype.hide = function(e) {
    return r(this, void 0, void 0, function() {
      var t3, n2, r2, a2, i, o2, u3, c3;
      return s(this, function(d) {
        switch (d.label) {
          case 0:
            return t3 = n(n({}, is), e), cs(function(e2) {
              return S("boolean", e2.hidePreviousMessages, true) && S("boolean", e2.allowAutoUnhide, true);
            }(t3)).throw(b.invalidParameters), n2 = uo.of(this._iid), r2 = n2.dispatcher, a2 = n2.sdkState, i = n2.requestQueue, o2 = new os2(n({ channelUrl: this.url, userId: a2.userId }, t3)), [4, i.send(o2)];
          case 1:
            return u3 = d.sent(), c3 = u3.as(us).messageOffsetTimestamp, this.hiddenState = t3.allowAutoUnhide ? ir.HIDDEN_ALLOW_AUTO_UNHIDE : ir.HIDDEN_PREVENT_AUTO_UNHIDE, t3.hidePreviousMessages && this._updateUnreadCount(0, 0), c3 && (this.messageOffsetTimestamp = c3), r2.dispatch(new Un({ channels: [this], context: { source: no.EVENT_CHANNEL_HIDDEN }, isWebSocketEventComing: true })), [2, this];
        }
      });
    });
  }, c2.prototype.unhide = function() {
    return r(this, void 0, void 0, function() {
      var e, t3, n2, s2;
      return s(this, function(r2) {
        switch (r2.label) {
          case 0:
            return e = uo.of(this._iid), t3 = e.dispatcher, n2 = e.requestQueue, s2 = new Ks2({ channelUrl: this.url }), [4, n2.send(s2)];
          case 1:
            return r2.sent(), this.hiddenState = ir.UNHIDDEN, t3.dispatch(new Un({ channels: [this], context: { source: no.EVENT_CHANNEL_UNHIDDEN }, isWebSocketEventComing: true })), [2, this];
        }
      });
    });
  }, c2.prototype.delete = function() {
    return r(this, void 0, void 0, function() {
      var e, t3;
      return s(this, function(n2) {
        switch (n2.label) {
          case 0:
            return e = uo.of(this._iid).requestQueue, t3 = new Ys({ channelUrl: this.url }), [4, e.send(t3)];
          case 1:
            return n2.sent(), [2];
        }
      });
    });
  }, c2.prototype.markAsRead = function() {
    return r(this, void 0, void 0, function() {
      var e, t3, n2, s2, r2, a2, i, o2 = this;
      return s(this, function(u3) {
        switch (u3.label) {
          case 0:
            return e = uo.of(this._iid), t3 = e.sdkState, n2 = e.dispatcher, s2 = e.requestQueue, r2 = new Je({ channelUrl: this.url }), [4, s2.send(r2)];
          case 1:
            return a2 = u3.sent(), i = a2.as(Ze).readStatus, this._updateUnreadMemberState(t3.userId, i.readAt), (this.unreadMessageCount > 0 || this.unreadMentionCount > 0) && (this._updateUnreadCount(0, 0), ys.of(this._iid).handlers.map(function(e2) {
              e2.onChannelChanged && e2.onChannelChanged(o2);
            })), n2.dispatch(new Un({ channels: [this], context: { source: no.EVENT_CHANNEL_READ } })), [2];
        }
      });
    });
  }, c2.prototype.markAsDelivered = function() {
    return r(this, void 0, void 0, function() {
      var e, t3, n2, s2;
      return s(this, function(r2) {
        switch (r2.label) {
          case 0:
            return e = uo.of(this._iid), t3 = e.sdkState, n2 = e.requestQueue, s2 = new vs({ channelUrl: this.url, userId: t3.userId }), [4, n2.send(s2)];
          case 1:
            return r2.sent(), [2];
        }
      });
    });
  }, c2.prototype.startTyping = function() {
    return r(this, void 0, void 0, function() {
      var e, t3, n2, s2, r2;
      return s(this, function(a2) {
        switch (a2.label) {
          case 0:
            return e = uo.of(this._iid), t3 = e.requestQueue, n2 = e.typingIndicatorThrottle, (s2 = (/* @__PURE__ */ new Date()).getTime()) - this._typingStarted >= n2 ? (this._typingStarted = s2, this._typingEnded = 0, r2 = new ls2({ channelUrl: this.url, time: this._typingStarted }), [4, t3.send(r2)]) : [3, 2];
          case 1:
            a2.sent(), a2.label = 2;
          case 2:
            return [2];
        }
      });
    });
  }, c2.prototype.endTyping = function() {
    return r(this, void 0, void 0, function() {
      var e, t3, n2, s2, r2;
      return s(this, function(a2) {
        switch (a2.label) {
          case 0:
            return e = uo.of(this._iid), t3 = e.requestQueue, n2 = e.typingIndicatorThrottle, (s2 = (/* @__PURE__ */ new Date()).getTime()) - this._typingEnded >= n2 ? (this._typingStarted = 0, this._typingEnded = s2, r2 = new ds({ channelUrl: this.url, time: this._typingStarted }), [4, t3.send(r2)]) : [3, 2];
          case 1:
            a2.sent(), a2.label = 2;
          case 2:
            return [2];
        }
      });
    });
  }, c2.prototype.createScheduledUserMessage = function(e) {
    e = n(n({}, Ks), e), cs(Qs(e)).throw(b.invalidParameters);
    var t3 = new nn();
    return this._createScheduledUserMessage(e, t3), t3;
  }, c2.prototype.updateScheduledUserMessage = function(e, t3) {
    return r(this, void 0, void 0, function() {
      var n2, r2, a2, i;
      return s(this, function(o2) {
        switch (o2.label) {
          case 0:
            return n2 = n(n({}, tr), t3), cs(function(e2) {
              return Tn(e2) && S("number", e2.scheduledAt, true);
            }(n2)).throw(b.invalidParameters), r2 = uo.of(this._iid).requestQueue, a2 = new rr(n({ reqId: this._generateRequestId(), scheduledMessageId: e, channelType: this.channelType, channelUrl: this.url }, n2)), [4, r2.send(a2)];
          case 1:
            return i = o2.sent(), [2, i.as(Pr2).message];
        }
      });
    });
  }, c2.prototype.createScheduledFileMessage = function(e) {
    var t3 = this;
    e = n(n({}, Gs), e), cs(Vs(e)).throw(b.invalidParameters);
    var n2 = Date.now(), r2 = this._generateRequestId(), a2 = new nn();
    return ms(Ii).then(function() {
      var s2 = t3._createPendingScheduledFileMessage(e, r2, n2);
      kr(function() {
        return r(t3, void 0, void 0, function() {
          return s(this, function(e2) {
            return [2, a2._trigger(s2)];
          });
        });
      });
    }), k(e.file) ? this._uploadFileAndUpdateParams(e).then(function() {
      return t3._createScheduledFileMessage(e, a2, r2, n2);
    }) : this._createScheduledFileMessage(e, a2, r2, n2), a2;
  }, c2.prototype.updateScheduledFileMessage = function(e, t3) {
    return r(this, void 0, void 0, function() {
      var n2, r2, a2;
      return s(this, function(i) {
        switch (i.label) {
          case 0:
            return n2 = n(n({}, er), t3), cs(function(e2) {
              return In(e2) && S("number", e2.scheduledAt, true) && (k(e2.file) || S("string", e2.fileUrl)) && S("string", e2.fileName, true) && S("string", e2.mimeType, true) && S("number", e2.fileSize, true) && (null === e2.thumbnailSizes || void 0 === e2.thumbnailSizes || e2.thumbnailSizes.every(function(e3) {
                return S("object", e3) && e3.maxWidth > 0 && e3.maxHeight > 0;
              }));
            }(n2)).throw(b.invalidParameters), k(n2.file) ? [4, this._uploadFileAndUpdateParams(n2)] : [3, 2];
          case 1:
            i.sent(), i.label = 2;
          case 2:
            return r2 = new nr2(n({ reqId: this._generateRequestId(), scheduledMessageId: e, channelType: this.channelType, channelUrl: this.url }, n2)), [4, uo.of(this._iid).requestQueue.send(r2)];
          case 3:
            return a2 = i.sent(), [2, a2.as(sr).message];
        }
      });
    });
  }, c2.prototype.cancelScheduledMessage = function(e) {
    return r(this, void 0, void 0, function() {
      var t3;
      return s(this, function(n2) {
        switch (n2.label) {
          case 0:
            return t3 = new or({ scheduledMessageId: e, channelType: this.channelType, channelUrl: this.url }), [4, uo.of(this._iid).requestQueue.send(t3)];
          case 1:
            return n2.sent(), [2];
        }
      });
    });
  }, c2.prototype.sendScheduledMessageNow = function(e) {
    return r(this, void 0, void 0, function() {
      var t3;
      return s(this, function(n2) {
        switch (n2.label) {
          case 0:
            return t3 = new ur2({ scheduledMessageId: e, channelType: this.channelType, channelUrl: this.url }), [4, uo.of(this._iid).requestQueue.send(t3)];
          case 1:
            return n2.sent(), [2];
        }
      });
    });
  }, c2.prototype.getMyPushTriggerOption = function() {
    return r(this, void 0, void 0, function() {
      var e, t3, n2, s2, r2, a2;
      return s(this, function(i) {
        switch (i.label) {
          case 0:
            return e = uo.of(this._iid), t3 = e.sdkState, n2 = e.requestQueue, s2 = new hr2({ userId: t3.userId, channelUrl: this.url }), [4, n2.send(s2)];
          case 1:
            return r2 = i.sent(), a2 = r2.as(dr).pushTriggerOption, this.myPushTriggerOption = a2, [2, a2];
        }
      });
    });
  }, c2.prototype.setMyPushTriggerOption = function(e) {
    return r(this, void 0, void 0, function() {
      var t3, n2, s2, a2, i, o2, u3;
      return s(this, function(c3) {
        switch (c3.label) {
          case 0:
            return cs(T(_, e)).throw(b.invalidParameters), t3 = uo.of(this._iid), n2 = t3.dispatcher, s2 = t3.sdkState, a2 = t3.requestQueue, i = new cr({ userId: s2.userId, channelUrl: this.url, pushTriggerOption: e }), [4, a2.send(i)];
          case 1:
            return o2 = c3.sent(), u3 = o2.as(lr2).pushTriggerOption, this.myPushTriggerOption = u3, n2.dispatch(new Un({ channels: [this], context: { source: no.EVENT_CHANNEL_UPDATED }, isWebSocketEventComing: true })), [2, u3];
        }
      });
    });
  }, c2.prototype.setMyCountPreference = function(e) {
    return r(this, void 0, void 0, function() {
      var t3, n2, s2, a2, i, o2, u3;
      return s(this, function(c3) {
        switch (c3.label) {
          case 0:
            return cs(T(ar2, e)).throw(b.invalidParameters), t3 = uo.of(this._iid), n2 = t3.dispatcher, s2 = t3.sdkState, a2 = t3.requestQueue, i = new Js2({ channelUrl: this.url, userId: s2.userId, countPreference: e }), [4, a2.send(i)];
          case 1:
            return o2 = c3.sent(), u3 = o2.as(Xs).countPreference, this.myCountPreference = u3, this._updateUnreadCount(this.unreadMessageCount, this.unreadMentionCount), n2.dispatch(new Un({ channels: [this], context: { source: no.EVENT_CHANNEL_UPDATED }, isWebSocketEventComing: true })), [2, u3];
        }
      });
    });
  }, c2.prototype.resetMyHistory = function() {
    return r(this, void 0, void 0, function() {
      var e, t3, n2, s2, r2, a2, i;
      return s(this, function(o2) {
        switch (o2.label) {
          case 0:
            return e = uo.of(this._iid), t3 = e.dispatcher, n2 = e.requestQueue, s2 = e.sdkState, r2 = new Zs2({ channelUrl: this.url, locale: s2.localeForChatbot }), [4, n2.send(r2)];
          case 1:
            return a2 = o2.sent(), i = a2.as($s).messageOffsetTimestamp, this.messageOffsetTimestamp = i, this.lastMessage && this.lastMessage.createdAt < i && (this.lastMessage = null), this._updateUnreadCount(0, 0), this.totalUnreadReplyCount = 0, t3.dispatch(new Un({ channels: [this], context: { source: no.EVENT_CHANNEL_RESET_HISTORY }, isWebSocketEventComing: true })), [2, this];
        }
      });
    });
  }, c2.prototype._uploadFileAndUpdateParams = function(e) {
    return r(this, void 0, void 0, function() {
      var t3, n2, s2, r2, a2, i, o2, u3, c3, l;
      return s(this, function(h) {
        switch (h.label) {
          case 0:
            return k(e.file) ? (t3 = uo.of(this._iid).requestQueue, n2 = new Re2({ file: e.file, channelUrl: this.url, thumbnailSizes: e.thumbnailSizes, requestId: this._generateRequestId() }), [4, t3.send(n2)]) : [3, 2];
          case 1:
            s2 = h.sent(), r2 = s2.as(xe), a2 = r2.url, i = r2.fileSize, o2 = void 0 === i ? e.fileSize : i, u3 = r2.thumbnails, c3 = r2.requireAuth, l = void 0 !== c3 && c3, e.fileUrl = a2, e.fileSize = o2, e.requireAuth = l, e._thumbnails = u3, h.label = 2;
          case 2:
            return [2];
        }
      });
    });
  }, c2.prototype.resendMessage = function(e, t3) {
    var n2, s2 = this;
    if (cs(e instanceof _t && !e.scheduledInfo && e.isResendable).throw(b.invalidParameters), e.isUserMessage()) {
      var r2 = null !== (n2 = e.messageParams) && void 0 !== n2 ? n2 : ln(e), a2 = new nn();
      return this._sendUserMessage(r2, bi.RESEND, e.reqId).onPending(function(e2) {
        a2._trigger(e2);
      }).onFailed(function(e2, t4) {
        a2._triggerFailed(e2, t4);
      }).onSucceeded(function(e2) {
        s2._tryUpdateLastMessageAndCallEvents(s2, e2), a2._trigger(e2);
      }), a2;
    }
    if (e.isFileMessage()) {
      var i = this._validateFailedFileMessageHasFile(e, t3);
      cs(i).throw(b.invalidParameters);
      r2 = _n(e, t3);
      var o2 = new nn();
      return this._sendFileMessage(r2, bi.RESEND, e.reqId).onPending(function(e2) {
        o2._trigger(e2);
      }).onFailed(function(e2, t4) {
        o2._triggerFailed(e2, t4);
      }).onSucceeded(function(e2) {
        s2._tryUpdateLastMessageAndCallEvents(s2, e2), o2._trigger(e2);
      }), o2;
    }
    if (e.isMultipleFilesMessage()) {
      r2 = e.messageParams;
      var u3 = new fi();
      return this._sendMultipleFilesMessage(r2, bi.RESEND, e.reqId).onPending(function(e2) {
        u3._trigger(e2);
      }).onFailed(function(e2, t4) {
        u3._triggerFailed(e2, t4);
      }).onSucceeded(function(e2) {
        s2._tryUpdateLastMessageAndCallEvents(s2, e2), u3._trigger(e2);
      }).onFileUploaded(function(e2, t4, n3, s3) {
        u3._triggerOnFileUploaded(e2, t4, n3, s3);
      }), u3;
    }
  }, c2.prototype.copyMessage = function(e, t3) {
    var n2 = this;
    if (cs(e instanceof Ti && t3 instanceof _t && t3.sendingStatus === Z.SUCCEEDED && this.url === t3.channelUrl && !t3.scheduledInfo).throw(b.invalidParameters), t3.isUserMessage()) {
      cs(!t3.poll).throw(b.notSupportedError);
      var s2 = un(t3), r2 = new nn();
      return e._sendUserMessage(s2).onPending(function(e2) {
        r2._trigger(e2);
      }).onFailed(function(e2, t4) {
        r2._triggerFailed(e2, t4);
      }).onSucceeded(function(t4) {
        e.isGroupChannel() && n2._tryUpdateLastMessageAndCallEvents(e, t4), r2._trigger(t4);
      }), r2;
    }
    if (t3.isFileMessage()) {
      s2 = vn(t3);
      var a2 = new nn();
      return e._sendFileMessage(s2).onPending(function(e2) {
        a2._trigger(e2);
      }).onFailed(function(e2, t4) {
        a2._triggerFailed(e2, t4);
      }).onSucceeded(function(t4) {
        e.isGroupChannel() && n2._tryUpdateLastMessageAndCallEvents(e, t4), a2._trigger(t4);
      }), a2;
    }
    if (t3.isMultipleFilesMessage()) {
      if (e.isGroupChannel()) {
        s2 = li(t3);
        var i = new fi();
        return e._sendMultipleFilesMessage(s2, bi.COPY).onPending(function(e2) {
          i._trigger(e2);
        }).onFailed(function(e2, t4) {
          i._triggerFailed(e2, t4);
        }).onSucceeded(function(t4) {
          n2._tryUpdateLastMessageAndCallEvents(e, t4), i._trigger(t4);
        }).onFileUploaded(function(e2, t4, n3, s3) {
          i._triggerOnFileUploaded(e2, t4, n3, s3);
        }), i;
      }
      throw b.channelTypeNotSupportedError;
    }
  }, c2.prototype.getMessageDeletionTimestamp = function() {
    return r(this, void 0, void 0, function() {
      var e, t3, n2, s2, r2, a2;
      return s(this, function(i) {
        switch (i.label) {
          case 0:
            return e = uo.of(this._iid), t3 = e.requestQueue, n2 = e.dispatcher, s2 = new _r({ channelUrl: this.url, channelType: this.channelType }), [4, t3.send(s2)];
          case 1:
            return r2 = i.sent(), a2 = r2.as(pr2).messageDeletionTimestamp, this._messageDeletionTimestamp = a2, n2.dispatch(new Tn2({ channel: this })), [2, a2];
        }
      });
    });
  }, c2;
}(Ti);

// node_modules/@sendbird/chat/groupChannel.js
var De2;
var Pe2 = {};
var He = function() {
  function e(e2) {
    var t3 = e2._iid, n2 = e2.limit, a2 = void 0 === n2 ? 100 : n2, r2 = this;
    this.ref = 0, this._iid = t3, this._limit = a2;
    var i, o2 = uo.of(this._iid), l = o2.sdkState, u2 = o2.dispatcher, c2 = o2.logger, p = o2.cacheContext, _2 = o2.statManager;
    this._metadataKey = (i = l.userId, "sendbird:".concat(i, "@groupchannel/sync.meta"));
    var m2 = function(e3) {
      return "sendbird:".concat(e3, "@groupchannel/sync");
    }(l.userId);
    this._sync = new w(m2, function() {
      return r(r2, void 0, void 0, function() {
        var e3, t4, n3, a3, r3, i2, s2, o3, u3, h, f2, v4, m3, C3, b3, S3;
        return s(this, function(d) {
          switch (d.label) {
            case 0:
              return e3 = { hasNext: true, nextToken: "" }, [4, this.loadMetadata()];
            case 1:
              if (d.sent(), c2.debug("channel background sync from", null === (u3 = this._metadata) || void 0 === u3 ? void 0 : u3.token), null === (h = this._metadata) || void 0 === h ? void 0 : h.completed)
                return [3, 14];
              t4 = { includeEmpty: true, includeMetaData: true, hiddenChannelFilter: sn.ALL, order: E.CHRONOLOGICAL }, d.label = 2;
            case 2:
              if (d.trys.push([2, 9, 12, 13]), t4.order !== E.LATEST_LAST_MESSAGE)
                return [3, 6];
              d.label = 3;
            case 3:
              return d.trys.push([3, 5, , 6]), [4, p.preference.get(Gr(l.appId))];
            case 4:
              return n3 = d.sent(), t4.includeChatNotification = Boolean(n3), [3, 6];
            case 5:
              return d.sent(), t4.includeChatNotification = false, [3, 6];
            case 6:
              return [4, ys.of(this._iid).getMyGroupChannels(null !== (v4 = null === (f2 = this._metadata) || void 0 === f2 ? void 0 : f2.token) && void 0 !== v4 ? v4 : "", t4, this._limit, no.SYNC_CHANNEL_BACKGROUND)];
            case 7:
              return a3 = d.sent(), r3 = a3.channels, i2 = a3.token, e3.hasNext = r3.length >= this._limit && !!i2, e3.nextToken = i2, this._metadata && (this._metadata.token = i2, (o3 = this._metadata.range).extends.apply(o3, c([], a(r3.map(function(e4) {
                return e4.createdAt;
              })), false)), this._metadata.completed = !e3.hasNext), c2.debug("channel background sync progress", e3), [4, this.saveMetadata()];
            case 8:
              return d.sent(), [3, 13];
            case 9:
              return s2 = d.sent(), c2.debug("channel background sync error", s2), s2 instanceof b && s2.isInvalidTokenError ? [4, this.clearMetaData()] : [3, 11];
            case 10:
              d.sent(), d.label = 11;
            case 11:
              throw s2;
            case 12:
              return _2.put(new $e({ type: Me.FEATURE_LOCALCACHE_EVENT, ts: Date.now(), data: { channel_url: "", measured_on: "channel_back_sync", event: "cache_fetch", max_db_size: null !== (C3 = null === (m3 = p.localCacheConfig) || void 0 === m3 ? void 0 : m3.maxSize) && void 0 !== C3 ? C3 : 0, use_local_cache: p.localCacheEnabled, starting_point: 0, message_init_policy: null !== (S3 = null === (b3 = t4.order) || void 0 === b3 ? void 0 : b3.toString()) && void 0 !== S3 ? S3 : "", collection_id: l.userId } })), [7];
            case 13:
              return [3, 15];
            case 14:
              e3.hasNext = false, e3.nextToken = "", d.label = 15;
            case 15:
              return [2, e3];
          }
        });
      });
    }), this._connectionEventContext = u2.on(function(e3) {
      if (e3 instanceof Fr)
        if (e3.stateType === Rr.CONNECTED)
          r2.resume();
        else
          r2.pause();
    });
  }
  return e.of = function(t3) {
    return Pe2[t3] || (Pe2[t3] = new e({ _iid: t3 })), Pe2[t3].ref++, Pe2[t3];
  }, e.clear = function(e2) {
    Pe2[e2] && (Pe2[e2].close(), delete Pe2[e2]);
  }, Object.defineProperty(e.prototype, "range", { get: function() {
    var e2, t3;
    return null !== (t3 = null === (e2 = this._metadata) || void 0 === e2 ? void 0 : e2.range) && void 0 !== t3 ? t3 : new Es({});
  }, enumerable: false, configurable: true }), Object.defineProperty(e.prototype, "completed", { get: function() {
    var e2;
    return !!(null === (e2 = this._metadata) || void 0 === e2 ? void 0 : e2.completed);
  }, enumerable: false, configurable: true }), e.prototype.loadMetadata = function() {
    return r(this, void 0, void 0, function() {
      var e2;
      return s(this, function(t3) {
        switch (t3.label) {
          case 0:
            return this._metadata ? [3, 2] : [4, uo.of(this._iid).cacheContext.preference.get(this._metadataKey)];
          case 1:
            e2 = t3.sent(), this._metadata = { token: e2 ? e2.token : "", range: new Es(e2 ? e2.range : { top: Number.MAX_SAFE_INTEGER, bottom: 0 }), completed: !!e2 && e2.completed }, t3.label = 2;
          case 2:
            return [2, this._metadata];
        }
      });
    });
  }, e.prototype.saveMetadata = function() {
    return r(this, void 0, void 0, function() {
      return s(this, function(e2) {
        switch (e2.label) {
          case 0:
            return this._metadata ? [4, uo.of(this._iid).cacheContext.preference.set(this._metadataKey, this._metadata)] : [3, 2];
          case 1:
            return e2.sent(), [2, true];
          case 2:
            return [2, false];
        }
      });
    });
  }, e.prototype.clearMetaData = function() {
    return r(this, void 0, void 0, function() {
      return s(this, function(e2) {
        switch (e2.label) {
          case 0:
            return [4, uo.of(this._iid).cacheContext.preference.remove(this._metadataKey)];
          case 1:
            return e2.sent(), this._metadata = void 0, [2];
        }
      });
    });
  }, e.prototype.resume = function() {
    var e2, t3, n2 = uo.of(this._iid), a2 = n2.logger;
    n2.sessionManager.session.hasSession && (a2.debug("channel background sync resume()"), this._sync.start(null !== (t3 = null === (e2 = this._metadata) || void 0 === e2 ? void 0 : e2.token) && void 0 !== t3 ? t3 : ""));
  }, e.prototype.pause = function() {
    uo.of(this._iid).logger.debug("channel background sync stop()"), this._sync.stop();
  }, e.prototype.close = function() {
    this.ref--, this.ref <= 0 && (this.ref = 0, this.pause(), this._connectionEventContext.close(), delete Pe2[this._iid]);
  }, e;
}();
var Re3 = {};
var Ve2 = function() {
  function e(e2) {
    var t3 = e2._iid, n2 = this;
    this.ref = 0, this._iid = t3;
    var a2, r2 = uo.of(this._iid), i = r2.logger, o2 = r2.sdkState, l = r2.dispatcher, u2 = r2.cacheContext, c2 = r2.statManager;
    this._metadataKey = (a2 = o2.userId, "sendbird:".concat(a2, "@groupchannel/changelogs.meta")), this._subscribers = new ne();
    var p = function(e3) {
      return "sendbird:".concat(e3, "@groupchannel/changelogs");
    }(o2.userId);
    this._sync = new w(p, function() {
      return r(n2, void 0, void 0, function() {
        var e3, t4, n3, a3, r3, s2, l2, h, p2, f2, _2, v4;
        return s(this, function(d) {
          switch (d.label) {
            case 0:
              return e3 = { hasNext: true, nextToken: 0 }, [4, this.loadMetadata()];
            case 1:
              d.sent(), i.debug("channel changelog sync from", null === (f2 = this._metadata) || void 0 === f2 ? void 0 : f2.token), d.label = 2;
            case 2:
              d.trys.push([2, 9, , 12]), t4 = { includeEmpty: true, includeMetaData: true }, d.label = 3;
            case 3:
              return d.trys.push([3, 5, , 6]), [4, u2.preference.get(Gr(o2.appId))];
            case 4:
              return n3 = d.sent(), t4.includeChatNotification = Boolean(n3), [3, 6];
            case 5:
              return d.sent(), t4.includeChatNotification = false, [3, 6];
            case 6:
              return [4, ys.of(this._iid).getMyGroupChannelChangeLogs(null !== (v4 = null === (_2 = this._metadata) || void 0 === _2 ? void 0 : _2.token) && void 0 !== v4 ? v4 : "", t4, no.SYNC_CHANNEL_CHANGELOGS)];
            case 7:
              return a3 = d.sent(), r3 = a3.updatedChannels, s2 = a3.deletedChannelUrls, l2 = a3.hasMore, h = a3.token, this._subscribers.dispatch("progress", { updatedChannels: r3, deletedChannelUrls: s2, hasMore: l2, token: h }), e3.hasNext = l2, e3.nextToken = h, this._metadata && (this._metadata.token = h), i.debug("channel changelog sync progress", e3), [4, this.saveMetadata()];
            case 8:
              return d.sent(), u2.localCacheEnabled && c2.put(new $e({ type: Me.FEATURE_LOCALCACHE_EVENT, ts: Date.now(), data: { channel_url: "", measured_on: "channel_change_log_sync", event: r3.length > 0 || s2.length > 0 ? "cache_miss" : "cache_hit", max_db_size: r3.length, use_local_cache: u2.localCacheEnabled, starting_point: 0, message_init_policy: s2.length.toString(), collection_id: o2.userId } })), [3, 12];
            case 9:
              return p2 = d.sent(), i.debug("channel changelog sync error", p2), p2 instanceof b && p2.isInvalidTokenError ? [4, this.clearMetadata()] : [3, 11];
            case 10:
              d.sent(), d.label = 11;
            case 11:
              throw p2;
            case 12:
              return [2, e3];
          }
        });
      });
    }), this._sync.on("stop", function() {
      n2._subscribers.dispatch("pause");
    }), this._connectionEventContext = l.on(function(e3) {
      if (e3 instanceof Fr)
        if (e3.stateType === Rr.CONNECTED)
          n2.resume();
        else
          n2.pause();
    });
  }
  return e.of = function(t3) {
    return Re3[t3] || (Re3[t3] = new e({ _iid: t3 })), Re3[t3].ref++, Re3[t3];
  }, e.clear = function(e2) {
    Re3[e2] && (Re3[e2].close(), delete Re3[e2]);
  }, Object.defineProperty(e.prototype, "isRunning", { get: function() {
    return this._sync.isRunning;
  }, enumerable: false, configurable: true }), e.prototype.loadMetadata = function() {
    return r(this, void 0, void 0, function() {
      var e2, t3, n2, a2;
      return s(this, function(r2) {
        switch (r2.label) {
          case 0:
            return this._metadata ? [3, 2] : (e2 = uo.of(this._iid), t3 = e2.cacheContext, n2 = e2.firstConnectedAt, [4, t3.preference.get(this._metadataKey)]);
          case 1:
            a2 = r2.sent(), this._metadata = { token: a2 ? a2.token : n2 }, r2.label = 2;
          case 2:
            return [2, this._metadata];
        }
      });
    });
  }, e.prototype.saveMetadata = function() {
    return r(this, void 0, void 0, function() {
      return s(this, function(e2) {
        switch (e2.label) {
          case 0:
            return this._metadata ? [4, uo.of(this._iid).cacheContext.preference.set(this._metadataKey, this._metadata)] : [3, 2];
          case 1:
            return e2.sent(), [2, true];
          case 2:
            return [2, false];
        }
      });
    });
  }, e.prototype.clearMetadata = function() {
    return r(this, void 0, void 0, function() {
      return s(this, function(e2) {
        switch (e2.label) {
          case 0:
            return [4, uo.of(this._iid).cacheContext.preference.remove(this._metadataKey)];
          case 1:
            return e2.sent(), this._metadata = void 0, [2];
        }
      });
    });
  }, e.prototype.on = function(e2, t3) {
    return this._subscribers.on(e2, t3);
  }, e.prototype.resume = function() {
    uo.of(this._iid).sessionManager.session.hasSession && this._sync.start(0);
  }, e.prototype.pause = function() {
    this._sync.stop();
  }, e.prototype.close = function() {
    this.ref--, this.ref <= 0 && (this.ref = 0, this.pause(), this._connectionEventContext.close(), delete Re3[this._iid]);
  }, e;
}();
var je = function(e, t3) {
  return e.findIndex(function(e2) {
    return e2.isIdentical(t3);
  });
};
var Ke2 = function(e, t3, n2) {
  if (e.length > 0) {
    for (var a2 = je(e, t3), r2 = 0, i = e.length - 1, s2 = Math.floor((r2 + i) / 2); r2 < i; ) {
      var o2 = ze2(e[s2], t3, n2);
      if (o2 > 0)
        i = s2, s2 = Math.floor((r2 + i) / 2);
      else {
        if (!(o2 < 0))
          return { place: s2, oldPosition: a2 };
        r2 = s2 + 1, s2 = Math.floor((r2 + i) / 2);
      }
    }
    return { place: ze2(e[s2], t3, n2) >= 0 ? s2 : s2 + 1, oldPosition: a2 };
  }
  return { place: e.length, oldPosition: -1 };
};
var ze2 = function(e, t3, n2) {
  switch (n2) {
    case E.LATEST_LAST_MESSAGE:
      return e.lastMessage && t3.lastMessage ? 0 === (a2 = t3.lastMessage.createdAt - e.lastMessage.createdAt) ? t3.createdAt - e.createdAt : a2 : e.lastMessage ? -1 : t3.lastMessage ? 1 : t3.createdAt - e.createdAt;
    case E.CHRONOLOGICAL:
      return t3.createdAt - e.createdAt;
    case E.CHANNEL_NAME_ALPHABETICAL:
      var a2;
      return 0 === (a2 = e.name.localeCompare(t3.name)) ? e.createdAt - t3.createdAt : a2;
    default:
      return 0;
  }
};
var Qe = function() {
  function e(e2, t3) {
    var n2 = t3.filter, a2 = void 0 === n2 ? new hn() : n2, r2 = t3.order, i = void 0 === r2 ? E.LATEST_LAST_MESSAGE : r2, o2 = t3.limit, l = void 0 === o2 ? Wr : o2, u2 = t3.includeChangesOnInitialLoad, c2 = void 0 !== u2 && u2, p = this;
    this.channels = [], this._isInitialized = false, this._iid = e2, this._key = "gcc-".concat(ee()), this._isDisposed = false, this._isGetRemoteChannelsSucceeded = true, this._includeChangesOnInitialLoad = c2, this.filter = a2, this.order = i, this._hasMore = true, this._token = "", this._limit = l;
    var _2 = uo.of(this._iid), m2 = _2.sdkState, g2 = _2.cacheContext, y3 = _2.dispatcher;
    g2.localCacheEnabled && (this._backgroundSync = He.of(e2), this._backgroundSync.resume()), this._changelogSync = Ve2.of(e2), this._changelogSync.resume(), ys.of(this._iid).subscribeChannelEvent(this._key, { onUpdate: function(e3, t4) {
      var n3 = t4.source;
      if (Nn(n3)) {
        var a3 = e3.filter(function(e4) {
          return p.filter.match(e4, m2.userId);
        }), r3 = e3.filter(function(e4) {
          return !p.filter.match(e4, m2.userId);
        }).map(function(e4) {
          return e4.url;
        });
        a3.length > 0 && p._addChannelsToView(a3, t4), r3.length > 0 && p._removeChannelsFromView(r3, t4);
      }
    }, onRemove: function(e3, t4) {
      p._removeChannelsFromView(e3, t4);
    } }), y3.on(function(e3) {
      e3 instanceof Fr && (e3.stateType === Rr.CONNECTED ? p._isGetRemoteChannelsSucceeded || r(p, void 0, void 0, function() {
        return s(this, function(e4) {
          switch (e4.label) {
            case 0:
              return [4, this._revokeLoadMore()];
            case 1:
              return e4.sent(), [2];
          }
        });
      }) : e3.stateType === Rr.LOGOUT && p.dispose());
    });
  }
  return Object.defineProperty(e.prototype, "hasMore", { get: function() {
    return !this._isDisposed && this._hasMore;
  }, enumerable: false, configurable: true }), e.prototype.setGroupChannelCollectionHandler = function(e2) {
    this._handler = e2;
  }, e.prototype._addChannelsToView = function(e2, t3, n2) {
    var a2, r2, i, o2, l = this;
    void 0 === n2 && (n2 = false);
    var u2 = [], c2 = [], h = [];
    try {
      for (var p = o(e2), f2 = p.next(); !f2.done; f2 = p.next()) {
        var _2 = f2.value, v4 = je(this.channels, _2);
        v4 >= 0 && this.channels.splice(v4, 1);
        var m2 = Ke2(this.channels, _2, this.order).place;
        if (v4 < 0)
          m2 === this.channels.length ? !n2 && this._hasMore || (u2.push(_2), this.channels.push(_2)) : (u2.push(_2), this.channels.splice(m2, 0, _2));
        else
          switch (t3.source) {
            case no.EVENT_CHANNEL_UPDATED:
            case no.EVENT_MESSAGE_RECEIVED:
            case no.SYNC_CHANNEL_CHANGELOGS:
            case no.EVENT_MESSAGE_SENT:
              this.order === E.CHANNEL_NAME_ALPHABETICAL && this._hasMore && m2 === this.channels.length ? h.push(_2) : (this.channels.splice(m2, 0, _2), c2.push(_2));
              break;
            default:
              this.channels.splice(m2, 0, _2), c2.push(_2);
          }
      }
    } catch (e3) {
      a2 = { error: e3 };
    } finally {
      try {
        f2 && !f2.done && (r2 = p.return) && r2.call(p);
      } finally {
        if (a2)
          throw a2.error;
      }
    }
    if (h.length > 0)
      try {
        for (var g2 = o(h), y3 = g2.next(); !y3.done; y3 = g2.next()) {
          _2 = y3.value;
          var C3 = je(this.channels, _2);
          -1 !== C3 && this.channels.splice(C3, 1);
        }
      } catch (e3) {
        i = { error: e3 };
      } finally {
        try {
          y3 && !y3.done && (o2 = g2.return) && o2.call(g2);
        } finally {
          if (i)
            throw i.error;
        }
      }
    Nn(t3.source) && kr(function() {
      return r(l, void 0, void 0, function() {
        var e3, n3, a3;
        return s(this, function(r3) {
          return u2.length > 0 && (null === (e3 = this._handler) || void 0 === e3 ? void 0 : e3.onChannelsAdded) && this._handler.onChannelsAdded(t3, u2), c2.length > 0 && (null === (n3 = this._handler) || void 0 === n3 ? void 0 : n3.onChannelsUpdated) && this._handler.onChannelsUpdated(t3, c2), h.length > 0 && (null === (a3 = this._handler) || void 0 === a3 ? void 0 : a3.onChannelsDeleted) && this._handler.onChannelsDeleted(t3, h.map(function(e4) {
            return e4.url;
          })), [2];
        });
      });
    });
  }, e.prototype._removeChannelsFromView = function(e2, t3) {
    var n2, a2, r2 = this, i = [], o2 = function(e3) {
      var t4 = l.channels.findIndex(function(t5) {
        return t5.url === e3;
      });
      t4 >= 0 && (i.push(l.channels[t4].url), l.channels.splice(t4, 1));
    }, l = this;
    try {
      for (var u2 = o(e2), c2 = u2.next(); !c2.done; c2 = u2.next()) {
        o2(c2.value);
      }
    } catch (e3) {
      n2 = { error: e3 };
    } finally {
      try {
        c2 && !c2.done && (a2 = u2.return) && a2.call(u2);
      } finally {
        if (n2)
          throw n2.error;
      }
    }
    return Nn(t3.source) && i.length > 0 && kr(function() {
      return r(r2, void 0, void 0, function() {
        var e3;
        return s(this, function(n3) {
          return (null === (e3 = this._handler) || void 0 === e3 ? void 0 : e3.onChannelsDeleted) && this._handler.onChannelsDeleted(t3, i), [2];
        });
      });
    }), i;
  }, e.prototype._getLocalChannels = function() {
    return r(this, void 0, void 0, function() {
      var e2, t3;
      return s(this, function(n2) {
        switch (n2.label) {
          case 0:
            return e2 = ys.of(this._iid), t3 = this.channels.length > 0 ? function(e3, t4) {
              var n3, a2, r2, i;
              switch (t4) {
                case E.LATEST_LAST_MESSAGE:
                  return null !== (a2 = null === (n3 = e3.lastMessage) || void 0 === n3 ? void 0 : n3.createdAt) && void 0 !== a2 ? a2 : e3.createdAt;
                case E.CHRONOLOGICAL:
                  return e3.createdAt;
                case E.CHANNEL_NAME_ALPHABETICAL:
                  return e3.name;
                default:
                  return null !== (i = null === (r2 = e3.lastMessage) || void 0 === r2 ? void 0 : r2.createdAt) && void 0 !== i ? i : e3.createdAt;
              }
            }(this.channels[this.channels.length - 1], this.order) : null, [4, e2.getChannelsFromCache(t3, this.filter, this.order, this._limit, t3 ? this.channels[this.channels.length - 1].url : void 0)];
          case 1:
            return [2, n2.sent()];
        }
      });
    });
  }, e.prototype._getRemoteChannels = function() {
    return r(this, void 0, void 0, function() {
      var e2, t3, n2;
      return s(this, function(a2) {
        switch (a2.label) {
          case 0:
            return [4, ys.of(this._iid).getMyGroupChannels(this._token, oe(n(n({}, this.filter), { userIdsFilter: this.filter.userIdsFilter, searchFilter: this.filter.searchFilter, order: this.order })), this._limit)];
          case 1:
            return e2 = a2.sent(), t3 = e2.channels, n2 = e2.token, this._token = n2, this._hasMore = !!n2, [2, t3];
        }
      });
    });
  }, e.prototype._revokeLoadMore = function() {
    return r(this, void 0, void 0, function() {
      var e2;
      return s(this, function(t3) {
        switch (t3.label) {
          case 0:
            if (this._isDisposed)
              return [2];
            t3.label = 1;
          case 1:
            return t3.trys.push([1, 3, , 4]), [4, this._getRemoteChannels()];
          case 2:
            return e2 = t3.sent(), this._isGetRemoteChannelsSucceeded = true, this._addChannelsToView(e2, { source: no.REQUEST_CHANNEL }, true), [3, 4];
          case 3:
            return t3.sent(), this._isGetRemoteChannelsSucceeded = false, [3, 4];
          case 4:
            return [2];
        }
      });
    });
  }, e.prototype.loadMore = function() {
    var e2;
    return r(this, void 0, void 0, function() {
      var t3, n2, a2, r2, i, o2, l, u2, c2, p, f2, _2, v4, m2, g2, C3, b3, S3, M2, A2 = this;
      return s(this, function(L3) {
        switch (L3.label) {
          case 0:
            if (this._isDisposed)
              throw new b({ code: u.COLLECTION_DISPOSED, message: "Collection has been disposed." });
            return t3 = null, this._includeChangesOnInitialLoad && 0 === this.channels.length && this._changelogSync.isRunning ? [4, new Promise(function(e3) {
              A2._changelogSyncSubscriberContext = A2._changelogSync.on("progress", function(t4) {
                return e3(t4);
              }).on("pause", function() {
                return e3(null);
              });
            })] : [3, 2];
          case 1:
            t3 = L3.sent(), null === (e2 = this._changelogSyncSubscriberContext) || void 0 === e2 || e2.close(), L3.label = 2;
          case 2:
            return n2 = uo.of(this._iid), a2 = n2.cacheContext, r2 = n2.connectionManager, i = n2.statManager, this._isInitialized ? [3, 5] : (this._isInitialized = true, a2.localCacheEnabled ? [4, this._backgroundSync.loadMetadata()] : [3, 4]);
          case 3:
            L3.sent(), L3.label = 4;
          case 4:
            i.put(new Ws({ type: Me.FEATURE_LOCALCACHE, data: { use_local_cache: a2.localCacheEnabled, collection_interface: { group_channel: true } } })), L3.label = 5;
          case 5:
            return o2 = [], this._hasMore ? !a2.localCacheEnabled || r2.isConnected && !this._backgroundSync.completed ? [3, 7] : [4, Dr(function() {
              return r(A2, void 0, void 0, function() {
                return s(this, function(e3) {
                  switch (e3.label) {
                    case 0:
                      return [4, this._getLocalChannels()];
                    case 1:
                      return o2 = e3.sent(), [2];
                  }
                });
              });
            })] : [3, 11];
          case 6:
            return L3.sent(), this._hasMore = o2.length >= this._limit, [3, 10];
          case 7:
            return L3.trys.push([7, 9, , 10]), [4, this._getRemoteChannels()];
          case 8:
            return o2 = L3.sent(), this._isGetRemoteChannelsSucceeded = true, [3, 10];
          case 9:
            return L3.sent(), this._isGetRemoteChannelsSucceeded = false, [3, 10];
          case 10:
            this._addChannelsToView(o2, { source: no.REQUEST_CHANNEL }, true), L3.label = 11;
          case 11:
            if (t3) {
              try {
                for (l = o(t3.updatedChannels), u2 = l.next(); !u2.done; u2 = l.next())
                  c2 = u2.value, (g2 = je(o2, c2)) >= 0 ? o2[g2] = c2 : (p = Ke2(o2, c2, this.order).place, o2.splice(p, 0, c2));
              } catch (e3) {
                C3 = { error: e3 };
              } finally {
                try {
                  u2 && !u2.done && (b3 = l.return) && b3.call(l);
                } finally {
                  if (C3)
                    throw C3.error;
                }
              }
              f2 = o2.map(function(e3) {
                return e3.url;
              });
              try {
                for (_2 = o(t3.deletedChannelUrls), v4 = _2.next(); !v4.done; v4 = _2.next())
                  m2 = v4.value, (g2 = f2.indexOf(m2)) >= 0 && (o2.splice(g2, 1), f2.splice(g2, 1));
              } catch (e3) {
                S3 = { error: e3 };
              } finally {
                try {
                  v4 && !v4.done && (M2 = _2.return) && M2.call(_2);
                } finally {
                  if (S3)
                    throw S3.error;
                }
              }
            }
            return [2, o2];
        }
      });
    });
  }, e.prototype.dispose = function() {
    var e2, t3, n2;
    this._isDisposed || (this._isDisposed = true, this.channels.length > 0 && this.channels.splice(0, this.channels.length), null === (e2 = this._backgroundSync) || void 0 === e2 || e2.close(), null === (t3 = this._changelogSync) || void 0 === t3 || t3.close(), null === (n2 = this._changelogSyncSubscriberContext) || void 0 === n2 || n2.close(), ys.of(this._iid).unsubscribeChannelEvent(this._key));
  }, e;
}();
var We = function(e) {
  function t3(t4) {
    var n2 = this, a2 = t4.token, r2 = t4.limit, i = t4.order, s2 = t4.includeEmpty, o2 = t4.membershipFilter, l = t4.channelNameContainsFilter, u2 = t4.channelUrlsFilter, c2 = t4.customTypesFilter, h = t4.customTypeStartsWithFilter, d = t4.superChannelFilter, p = t4.metadataOrderKeyFilter, f2 = t4.metadataKey, _2 = t4.metadataValues, v4 = t4.metadataValueStartsWith, m2 = t4.includeFrozen, g2 = t4.includeMetaData;
    return (n2 = e.call(this) || this).method = ae.GET, n2.path = de, n2.params = se(oe({ token: a2, limit: r2, order: i, show_member: true, show_read_receipt: true, show_delivery_receipt: true, show_empty: s2, public_mode: $t.PUBLIC, public_membership_mode: o2, name_contains: l, channel_urls: u2, custom_types: c2, custom_type_startswith: h, super_mode: d, metadata_order_key: p, metadata_key: f2, metadata_values: _2, metadata_value_startswith: v4, show_frozen: m2, show_metadata: g2 })), n2;
  }
  return t(t3, e), t3;
}(Fe);
var Be = function(e) {
  function t3(t4, n2) {
    var a2 = e.call(this, t4, n2) || this;
    a2.channels = [];
    var r2 = n2.next, i = n2.channels, s2 = n2.ts;
    return a2.token = r2, i && i.length > 0 && (a2.channels = i.map(function(e2) {
      return e2.ts = s2, new fr(t4, e2);
    })), a2.ts = "number" == typeof s2 ? s2 : 0, a2;
  }
  return t(t3, e), t3;
}(qe);
!function(e) {
  e.ALL = "all", e.JOINED = "joined";
}(De2 || (De2 = {}));
var qe2 = function(e) {
  function t3(t4, n2) {
    var a2, r2, i, s2, o2, l, u2, c2, h, d, p, f2, _2, v4, m2 = this;
    return (m2 = e.call(this, t4, n2) || this).includeEmpty = false, m2.includeFrozen = true, m2.includeMetaData = true, m2.channelUrlsFilter = null, m2.customTypesFilter = null, m2.customTypeStartsWithFilter = null, m2.channelNameContainsFilter = null, m2.membershipFilter = De2.ALL, m2.superChannelFilter = tn.ALL, m2.metadataKey = null, m2.metadataValues = null, m2.metadataOrderKeyFilter = null, m2.metadataValueStartsWith = null, m2.order = C2.CHRONOLOGICAL, m2.includeEmpty = null !== (a2 = n2.includeEmpty) && void 0 !== a2 && a2, m2.includeFrozen = null === (r2 = n2.includeFrozen) || void 0 === r2 || r2, m2.includeMetaData = null === (i = n2.includeMetaData) || void 0 === i || i, m2.channelUrlsFilter = null !== (s2 = n2.channelUrlsFilter) && void 0 !== s2 ? s2 : null, m2.customTypesFilter = null !== (o2 = n2.customTypesFilter) && void 0 !== o2 ? o2 : null, m2.customTypeStartsWithFilter = null !== (l = n2.customTypeStartsWithFilter) && void 0 !== l ? l : null, m2.channelNameContainsFilter = null !== (u2 = n2.channelNameContainsFilter) && void 0 !== u2 ? u2 : null, m2.membershipFilter = null !== (c2 = n2.membershipFilter) && void 0 !== c2 ? c2 : De2.ALL, m2.superChannelFilter = null !== (h = n2.superChannelFilter) && void 0 !== h ? h : tn.ALL, m2.metadataKey = null !== (d = n2.metadataKey) && void 0 !== d ? d : null, m2.metadataValues = null !== (p = n2.metadataValues) && void 0 !== p ? p : null, m2.metadataOrderKeyFilter = null !== (f2 = n2.metadataOrderKeyFilter) && void 0 !== f2 ? f2 : null, m2.metadataValueStartsWith = null !== (_2 = n2.metadataValueStartsWith) && void 0 !== _2 ? _2 : null, m2.order = null !== (v4 = n2.order) && void 0 !== v4 ? v4 : C2.CHRONOLOGICAL, m2;
  }
  return t(t3, e), t3.prototype._validate = function() {
    return e.prototype._validate.call(this) && S("boolean", this.includeEmpty) && S("boolean", this.includeFrozen) && S("boolean", this.includeMetaData) && S("string", this.channelNameContainsFilter, true) && C("string", this.channelUrlsFilter, true) && C("string", this.customTypesFilter, true) && S("string", this.customTypeStartsWithFilter, true) && T(De2, this.membershipFilter) && T(tn, this.superChannelFilter) && T(C2, this.order) && S("string", this.metadataOrderKeyFilter, true) && S("string", this.metadataKey, true) && C("string", this.metadataValues, true) && S("string", this.metadataValueStartsWith, true);
  }, t3.prototype.next = function() {
    return r(this, void 0, void 0, function() {
      var e2, t4, n2, a2, r2, i, s2;
      return s(this, function(o2) {
        switch (o2.label) {
          case 0:
            return this._validate() ? this._isLoading ? [3, 3] : (e2 = [], this._hasNext ? (this._isLoading = true, t4 = uo.of(this._iid).requestQueue, n2 = new We(oe(n(n({}, this), { token: this._token }))), [4, t4.send(n2)]) : [3, 2]) : [3, 5];
          case 1:
            return a2 = o2.sent(), r2 = a2.as(Be), i = r2.channels, s2 = r2.token, this._token = s2, this._hasNext = !!s2, this._isLoading = false, [2, i];
          case 2:
            return [2, e2];
          case 3:
            throw b.queryInProgress;
          case 4:
            return [3, 6];
          case 5:
            throw b.invalidParameters;
          case 6:
            return [2];
        }
      });
    });
  }, t3;
}(Oo);
var Ye2 = function(e) {
  function t3(t4) {
    void 0 === t4 && (t4 = {});
    var n2 = e.call(this) || this;
    return Object.keys(t4).forEach(function(e2) {
      n2.hasOwnProperty(e2) && (n2[e2] = t4[e2]);
    }), n2;
  }
  return t(t3, e), t3;
}(function(e) {
  function t3() {
    var t4 = null !== e && e.apply(this, arguments) || this;
    return t4.onUserJoined = ut, t4.onUserLeft = ut, t4.onUserReceivedInvitation = ut, t4.onUserDeclinedInvitation = ut, t4.onChannelHidden = ut, t4.onUnreadMemberStatusUpdated = ut, t4.onUndeliveredMemberStatusUpdated = ut, t4.onTypingStatusUpdated = ut, t4.onPollUpdated = ut, t4.onPollVoted = ut, t4.onPollDeleted = ut, t4.onPinnedMessageUpdated = ut, t4;
  }
  return t(t3, e), t3;
}(t2));
var Xe = function(e) {
  function t3(t4) {
    var n2 = this, a2 = t4.token, r2 = t4.limit, i = t4.order, s2 = t4.reverse, o2 = t4.channelUrl, l = t4.messageTypeFilter, u2 = t4.scheduledStatus;
    return (n2 = e.call(this) || this).method = ae.GET, n2.path = "".concat(ye), n2.params = se(oe({ token: a2, limit: r2, reverse: s2, channel_url: o2, order: i, message_type: l, status: u2 })), n2;
  }
  return t(t3, e), t3;
}(Fe);
var Je2 = function(e) {
  function t3(t4, n2) {
    var a2 = e.call(this, t4, n2) || this;
    a2.scheduledMessages = [];
    var r2 = n2.next, i = n2.scheduled_messages;
    return a2.token = r2, a2.scheduledMessages = i.map(function(e2) {
      return At(t4, e2);
    }), a2;
  }
  return t(t3, e), t3;
}(qe);
var Ze2 = function(e) {
  function t3(t4, n2) {
    var a2, r2, i, s2, o2, l = this;
    return (l = e.call(this, t4, n2) || this).channelUrl = null, l.order = null, l.reverse = false, l.scheduledStatus = null, l.messageTypeFilter = j.ALL, l.channelUrl = null !== (a2 = n2.channelUrl) && void 0 !== a2 ? a2 : null, l.order = null !== (r2 = n2.order) && void 0 !== r2 ? r2 : null, l.reverse = null !== (i = n2.reverse) && void 0 !== i && i, l.scheduledStatus = null !== (s2 = n2.scheduledStatus) && void 0 !== s2 ? s2 : null, l.messageTypeFilter = null !== (o2 = n2.messageTypeFilter) && void 0 !== o2 ? o2 : j.ALL, l;
  }
  return t(t3, e), t3.prototype._validate = function() {
    return e.prototype._validate.call(this) && S("string", this.channelUrl, true) && (T(R, this.order) || null === this.order) && S("boolean", this.reverse) && (C(dt, this.scheduledStatus) || null === this.scheduledStatus) && T(j, this.messageTypeFilter);
  }, t3.prototype.next = function() {
    return r(this, void 0, void 0, function() {
      var e2, t4, n2, a2, r2, i;
      return s(this, function(s2) {
        switch (s2.label) {
          case 0:
            return this._validate() ? this._isLoading ? [3, 3] : this._hasNext ? (this._isLoading = true, e2 = uo.of(this._iid).requestQueue, t4 = new Xe(oe(n(n({}, this), { token: this._token }))), [4, e2.send(t4)]) : [3, 2] : [3, 5];
          case 1:
            return n2 = s2.sent(), a2 = n2.as(Je2), r2 = a2.scheduledMessages, i = a2.token, this._token = i, this._hasNext = !!i, this._isLoading = false, [2, r2];
          case 2:
            return [2, []];
          case 3:
            throw b.queryInProgress;
          case 4:
            return [3, 6];
          case 5:
            throw b.invalidParameters;
          case 6:
            return [2];
        }
      });
    });
  }, t3;
}(Oo);
var $e2 = function(e) {
  function t3() {
    var t4 = null !== e && e.apply(this, arguments) || this;
    return t4.name = "groupChannel", t4;
  }
  return t(t3, e), t3.prototype.init = function(t4, n2) {
    var a2 = n2.sdkState, r2 = n2.dispatcher, i = n2.sessionManager, s2 = n2.requestQueue, o2 = n2.logger, l = n2.onlineDetector, u2 = n2.cacheContext;
    e.prototype.init.call(this, t4, { sdkState: a2, dispatcher: r2, sessionManager: i, requestQueue: s2, logger: o2, onlineDetector: l, cacheContext: u2 }), this._manager = new ys(t4, { sdkState: a2, cacheContext: u2, dispatcher: r2, sessionManager: i, requestQueue: s2, logger: o2 });
  }, t3.prototype.createGroupChannelCollection = function(e2) {
    return void 0 === e2 && (e2 = {}), new Qe(this._iid, e2);
  }, t3.prototype.createMyGroupChannelListQuery = function(e2) {
    return void 0 === e2 && (e2 = {}), new fs(this._iid, e2);
  }, t3.prototype.createPublicGroupChannelListQuery = function(e2) {
    return void 0 === e2 && (e2 = {}), new qe2(this._iid, e2);
  }, t3.prototype.createScheduledMessageListQuery = function(e2) {
    return void 0 === e2 && (e2 = {}), new Ze2(this._iid, e2);
  }, t3.prototype.addGroupChannelHandler = function(e2, t4) {
    cs(S("string", e2) && t4 instanceof Ye2).throw(b.invalidParameters), this._manager.addHandler(e2, t4);
  }, t3.prototype.removeGroupChannelHandler = function(e2) {
    cs(S("string", e2)).throw(b.invalidParameters), this._manager.removeHandler(e2);
  }, t3.prototype.removeAllGroupChannelHandlers = function() {
    this._manager.clearHandler();
  }, t3.prototype.buildGroupChannelFromSerializedData = function(e2) {
    return this._manager.buildGroupChannelFromSerializedData(e2);
  }, t3.prototype.buildGroupChannelListQueryFromSerializedData = function(e2) {
    return this._manager.buildGroupChannelListQueryFromSerializedData(e2);
  }, t3.prototype.buildMemberFromSerializedData = function(e2) {
    return this._manager.buildMemberFromSerializedData(e2);
  }, t3.prototype.getChannel = function(e2) {
    return r(this, void 0, void 0, function() {
      return s(this, function(t4) {
        return cs(S("string", e2)).throw(b.invalidParameters), [2, this._manager.getChannel(e2)];
      });
    });
  }, t3.prototype.getChannelWithoutCache = function(e2) {
    return r(this, void 0, void 0, function() {
      return s(this, function(t4) {
        return cs(S("string", e2)).throw(b.invalidParameters), [2, this._manager.getChannelWithoutCache(e2)];
      });
    });
  }, t3.prototype.getMyGroupChannelChangeLogsByToken = function(e2, t4) {
    return void 0 === t4 && (t4 = {}), r(this, void 0, void 0, function() {
      var n2;
      return s(this, function(a2) {
        switch (a2.label) {
          case 0:
            return n2 = n(n({}, fn), t4), cs(S("string", e2) && vn2(n2)).throw(b.invalidParameters), [4, this._manager.getMyGroupChannelChangeLogs(e2, n2)];
          case 1:
            return [2, a2.sent()];
        }
      });
    });
  }, t3.prototype.getMyGroupChannelChangeLogsByTimestamp = function(e2, t4) {
    return void 0 === t4 && (t4 = {}), r(this, void 0, void 0, function() {
      var n2;
      return s(this, function(a2) {
        switch (a2.label) {
          case 0:
            return n2 = n(n({}, fn), t4), cs(S("number", e2) && vn2(n2)).throw(b.invalidParameters), [4, this._manager.getMyGroupChannelChangeLogs(e2, n2)];
          case 1:
            return [2, a2.sent()];
        }
      });
    });
  }, t3.prototype.getGroupChannelCount = function(e2) {
    return r(this, void 0, void 0, function() {
      var t4;
      return s(this, function(n2) {
        return t4 = n(n({}, mn), e2), cs(gn(t4)).throw(b.invalidParameters), [2, this._manager.getGroupChannelCount(t4)];
      });
    });
  }, t3.prototype.getUnreadItemCount = function(e2) {
    return void 0 === e2 && (e2 = {}), r(this, void 0, void 0, function() {
      return s(this, function(t4) {
        switch (t4.label) {
          case 0:
            return [4, this._manager.getUnreadItemCount(e2)];
          case 1:
            return [2, t4.sent()];
        }
      });
    });
  }, t3.prototype.getTotalUnreadChannelCount = function() {
    return r(this, void 0, void 0, function() {
      return s(this, function(e2) {
        switch (e2.label) {
          case 0:
            return [4, this._manager.getTotalUnreadChannelCount()];
          case 1:
            return [2, e2.sent()];
        }
      });
    });
  }, t3.prototype.getTotalUnreadMessageCount = function(e2) {
    return void 0 === e2 && (e2 = {}), r(this, void 0, void 0, function() {
      return s(this, function(t4) {
        switch (t4.label) {
          case 0:
            return [4, this._manager.getTotalUnreadMessageCount(e2)];
          case 1:
            return [2, t4.sent()];
        }
      });
    });
  }, t3.prototype.getTotalScheduledMessageCount = function(e2) {
    return void 0 === e2 && (e2 = {}), r(this, void 0, void 0, function() {
      return s(this, function(t4) {
        switch (t4.label) {
          case 0:
            return [4, this._manager.getTotalScheduledMessageCount(e2)];
          case 1:
            return [2, t4.sent()];
        }
      });
    });
  }, t3.prototype.getSubscribedTotalUnreadMessageCount = function() {
    return this._manager.getSubscribedTotalUnreadMessageCount();
  }, t3.prototype.getSubscribedCustomTypeTotalUnreadMessageCount = function() {
    return this._manager.getSubscribedCustomTypeTotalUnreadMessageCount();
  }, t3.prototype.getSubscribedCustomTypeUnreadMessageCount = function(e2) {
    return this._manager.getSubscribedCustomTypeUnreadMessageCount(e2);
  }, t3.prototype.createChannel = function(e2) {
    return void 0 === e2 && (e2 = {}), r(this, void 0, void 0, function() {
      var t4;
      return s(this, function(n2) {
        return t4 = n(n({}, _n2), e2), cs(pn(t4)).throw(b.invalidParameters), [2, this._manager.createChannel(t4)];
      });
    });
  }, t3.prototype.createDistinctChannelIfNotExist = function(e2) {
    return void 0 === e2 && (e2 = {}), r(this, void 0, void 0, function() {
      var t4;
      return s(this, function(n2) {
        return t4 = n(n({}, _n2), e2), cs(pn(t4)).throw(b.invalidParameters), t4 && (t4.isDistinct = true), [2, this.createChannel(t4)];
      });
    });
  }, t3.prototype.createChannelWithUserIds = function(e2, t4, n2, a2, r2, i) {
    return void 0 === t4 && (t4 = false), void 0 === r2 && (r2 = ""), void 0 === i && (i = ""), r(this, void 0, void 0, function() {
      var s2;
      return s(this, function(o2) {
        return s2 = n(n({}, _n2), { invitedUserIds: e2, isDistinct: t4, name: n2, data: r2, customType: i }), "string" == typeof a2 ? s2.coverUrl = a2 : s2.coverImage = a2, [2, this.createChannel(s2)];
      });
    });
  }, t3.prototype.markAsReadAll = function() {
    return r(this, void 0, void 0, function() {
      return s(this, function(e2) {
        return this._manager.markAsReadAll(), [2];
      });
    });
  }, t3.prototype.markAsReadWithChannelUrls = function(e2) {
    return r(this, void 0, void 0, function() {
      return s(this, function(t4) {
        return cs(C("string", e2)).throw(b.invalidParameters), this._manager.markAsReadWithChannelUrls(e2), [2];
      });
    });
  }, t3.prototype.markAsDelivered = function(e2) {
    return r(this, void 0, void 0, function() {
      return s(this, function(t4) {
        switch (t4.label) {
          case 0:
            return cs(S("string", e2)).throw(b.invalidParameters), [4, this.getChannel(e2)];
          case 1:
            return [4, t4.sent().markAsDelivered()];
          case 2:
            return t4.sent(), [2];
        }
      });
    });
  }, t3;
}(lo);

export {
  Zt,
  $t,
  en2 as en,
  tn,
  nn2 as nn,
  sn,
  rn,
  an,
  on,
  un2 as un,
  cn,
  ln2 as ln,
  hn,
  bn2 as bn,
  fs,
  ms2 as ms,
  Rs,
  Fs,
  ks,
  Ps,
  Hs,
  qs2 as qs,
  ar2 as ar,
  ir,
  fr,
  De2 as De,
  Qe,
  qe2 as qe,
  Ye2 as Ye,
  Ze2 as Ze,
  $e2 as $e
};
//# sourceMappingURL=chunk-JVBXJ32W.js.map

import {
  Avatar$1,
  Button,
  ButtonSizes,
  ButtonTypes,
  ChannelAvatar,
  Header$1,
  Icon,
  IconButton,
  IconColors,
  IconTypes,
  Input,
  InputLabel,
  Label,
  LabelColors,
  LabelTypography,
  LocalizationContext,
  MenuItem$1,
  MenuItems,
  Modal,
  PlaceHolder,
  PlaceHolderTypes,
  TextButton,
  UserListItem,
  UserProfileProvider,
  __assign,
  __awaiter,
  __generator,
  __rest,
  __spreadArray,
  classnames,
  compareIds,
  createStore,
  deleteNullish,
  isDefaultChannelName,
  isOperator,
  noop,
  shimExports,
  useLocalization,
  useMediaQueryContext,
  useOnScrollPositionChangeDetector,
  useSendbird,
  useStore,
  uuidv4
} from "./chunk-G45O5RRC.js";
import {
  require_react_dom
} from "./chunk-G52XTN3B.js";
import {
  xe
} from "./chunk-7RQKLDUL.js";
import {
  require_react
} from "./chunk-LXGCQ6UQ.js";
import {
  Ye,
  rn
} from "./chunk-JVBXJ32W.js";
import {
  V
} from "./chunk-KXGQOUB2.js";
import {
  __toESM
} from "./chunk-ROME4SDB.js";

// node_modules/@sendbird/uikit-react/ChannelSettings.js
var import_react15 = __toESM(require_react());

// node_modules/@sendbird/uikit-react/ChannelSettings/components/ChannelSettingsUI.js
var import_react14 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-Cb5wfoUA.js
var import_react = __toESM(require_react(), 1);
function useSetChannel(_a) {
  var _this = this;
  var channelUrl = _a.channelUrl, sdk = _a.sdk, logger = _a.logger, initialized = _a.initialized, _b = _a.dependencies, dependencies = _b === void 0 ? [] : _b;
  var _c = useChannelSettings().actions, setChannel = _c.setChannel, setInvalid = _c.setInvalid, setLoading = _c.setLoading;
  (0, import_react.useEffect)(function() {
    var controller = new AbortController();
    var signal = controller.signal;
    var fetchChannel = function() {
      return __awaiter(_this, void 0, void 0, function() {
        var groupChannel, error_1;
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              _a2.trys.push([0, 2, 3, 4]);
              if (!channelUrl) {
                logger.warning("ChannelSettings: channel url is required");
                setLoading(false);
                return [
                  2
                  /*return*/
                ];
              }
              if (!initialized || !sdk) {
                logger.warning("ChannelSettings: SDK is not initialized");
                setLoading(false);
                return [
                  2
                  /*return*/
                ];
              }
              if (!sdk.groupChannel) {
                logger.warning("ChannelSettings: GroupChannelModule is not specified in the SDK");
                setLoading(false);
                return [
                  2
                  /*return*/
                ];
              }
              setLoading(true);
              return [4, sdk.groupChannel.getChannel(channelUrl)];
            case 1:
              groupChannel = _a2.sent();
              if (!signal.aborted) {
                logger.info("ChannelSettings | useSetChannel: fetched group channel", groupChannel);
                setChannel(groupChannel);
              }
              return [3, 4];
            case 2:
              error_1 = _a2.sent();
              if (!signal.aborted) {
                logger.error("ChannelSettings | useSetChannel: failed fetching channel", error_1);
                setInvalid(true);
              }
              return [3, 4];
            case 3:
              if (!signal.aborted) {
                setLoading(false);
              }
              return [
                7
                /*endfinally*/
              ];
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    fetchChannel();
    return function() {
      return controller.abort();
    };
  }, __spreadArray([channelUrl, initialized, sdk], dependencies, true));
}
var useChannelHandler = function(_a) {
  var sdk = _a.sdk, channelUrl = _a.channelUrl, logger = _a.logger, forceUpdateUI = _a.forceUpdateUI, _b = _a.dependencies, dependencies = _b === void 0 ? [] : _b;
  (0, import_react.useEffect)(function() {
    if (!sdk || !sdk.groupChannel) {
      logger.warning("ChannelSettings: SDK or GroupChannelModule is not available");
      return;
    }
    var newChannelHandlerId = uuidv4();
    var channelHandler = new Ye({
      onUserLeft: function(channel, user) {
        if (compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl)) {
          logger.info("ChannelSettings: onUserLeft", { channel, user });
          forceUpdateUI();
        }
      },
      onUserBanned: function(channel, user) {
        if (compareIds(channel === null || channel === void 0 ? void 0 : channel.url, channelUrl) && channel.isGroupChannel()) {
          logger.info("ChannelSettings: onUserBanned", { channel, user });
          forceUpdateUI();
        }
      }
    });
    sdk.groupChannel.addGroupChannelHandler(newChannelHandlerId, channelHandler);
    return function() {
      if (sdk.groupChannel && newChannelHandlerId) {
        logger.info("ChannelSettings: Removing message receiver handler", newChannelHandlerId);
        sdk.groupChannel.removeGroupChannelHandler(newChannelHandlerId);
      }
    };
  }, __spreadArray([sdk, channelUrl, logger], dependencies, true));
  return null;
};
var ChannelSettingsContext = (0, import_react.createContext)(null);
var initialState = {
  // Props
  channelUrl: "",
  onCloseClick: void 0,
  onLeaveChannel: void 0,
  onChannelModified: void 0,
  onBeforeUpdateChannel: void 0,
  renderUserListItem: void 0,
  queries: {},
  overrideInviteUser: void 0,
  // Managed states
  channel: null,
  loading: false,
  invalidChannel: false,
  forceUpdateUI: function() {
  },
  setChannelUpdateId: function() {
  }
};
var useChannelSettingsStore = function() {
  return useStore(ChannelSettingsContext, function(state) {
    return state;
  }, initialState);
};
var ChannelSettingsManager = function(_a) {
  var _b;
  var channelUrl = _a.channelUrl, onCloseClick = _a.onCloseClick, onLeaveChannel = _a.onLeaveChannel, onChannelModified = _a.onChannelModified, overrideInviteUser = _a.overrideInviteUser, onBeforeUpdateChannel = _a.onBeforeUpdateChannel, queries = _a.queries, renderUserListItem = _a.renderUserListItem;
  var state = useSendbird().state;
  var config = state.config, stores = state.stores;
  var updateState = useChannelSettingsStore().updateState;
  var logger = config.logger;
  var _c = (_b = stores === null || stores === void 0 ? void 0 : stores.sdkStore) !== null && _b !== void 0 ? _b : {}, sdk = _c.sdk, initialized = _c.initialized;
  var _d = (0, import_react.useState)(function() {
    return uuidv4();
  }), channelUpdateId = _d[0], setChannelUpdateId = _d[1];
  var forceUpdateUI = (0, import_react.useCallback)(function() {
    return setChannelUpdateId(uuidv4());
  }, []);
  var dependencies = [channelUpdateId];
  useSetChannel({
    channelUrl,
    sdk,
    logger,
    initialized,
    dependencies
  });
  useChannelHandler({
    sdk,
    channelUrl,
    logger,
    forceUpdateUI,
    dependencies
  });
  (0, import_react.useEffect)(function() {
    updateState({
      channelUrl,
      onCloseClick,
      onLeaveChannel,
      onChannelModified,
      onBeforeUpdateChannel,
      renderUserListItem,
      queries,
      overrideInviteUser,
      forceUpdateUI,
      setChannelUpdateId
    });
  }, [
    channelUrl,
    onCloseClick,
    onLeaveChannel,
    onChannelModified,
    onBeforeUpdateChannel,
    renderUserListItem,
    queries,
    overrideInviteUser,
    forceUpdateUI
  ]);
  return null;
};
var createChannelSettingsStore = function(props) {
  return createStore(__assign(__assign({}, initialState), props));
};
var InternalChannelSettingsProvider = function(props) {
  var children = props.children;
  var defaultProps = deleteNullish({
    channelUrl: props === null || props === void 0 ? void 0 : props.channelUrl,
    onCloseClick: props === null || props === void 0 ? void 0 : props.onCloseClick,
    onLeaveChannel: props === null || props === void 0 ? void 0 : props.onLeaveChannel,
    onChannelModified: props === null || props === void 0 ? void 0 : props.onChannelModified,
    onBeforeUpdateChannel: props === null || props === void 0 ? void 0 : props.onBeforeUpdateChannel,
    renderUserListItem: props === null || props === void 0 ? void 0 : props.renderUserListItem,
    queries: props === null || props === void 0 ? void 0 : props.queries,
    overrideInviteUser: props === null || props === void 0 ? void 0 : props.overrideInviteUser
  });
  var storeRef = (0, import_react.useRef)(createChannelSettingsStore(defaultProps));
  return import_react.default.createElement(ChannelSettingsContext.Provider, { value: storeRef.current }, children);
};
var ChannelSettingsProvider = function(props) {
  var children = props.children, className = props.className;
  return import_react.default.createElement(
    InternalChannelSettingsProvider,
    __assign({}, props),
    import_react.default.createElement(ChannelSettingsManager, __assign({}, props)),
    import_react.default.createElement(
      UserProfileProvider,
      __assign({}, props),
      import_react.default.createElement("div", { className: classnames("sendbird-channel-settings", className) }, children)
    )
  );
};
var useChannelSettings = function() {
  var store = (0, import_react.useContext)(ChannelSettingsContext);
  if (!store)
    throw new Error("useChannelSettings must be used within a ChannelSettingsProvider");
  var state = shimExports.useSyncExternalStore(store.subscribe, store.getState);
  var actions = (0, import_react.useMemo)(function() {
    return {
      setChannel: function(channel) {
        return store.setState(function(state2) {
          return __assign(__assign({}, state2), { channel });
        });
      },
      setLoading: function(loading) {
        return store.setState(function(state2) {
          return __assign(__assign({}, state2), { loading });
        });
      },
      setInvalid: function(invalid) {
        return store.setState(function(state2) {
          return __assign(__assign({}, state2), { invalidChannel: invalid });
        });
      }
    };
  }, [store]);
  return { state, actions };
};

// node_modules/@sendbird/uikit-react/ChannelSettings/hooks/useMenuList.js
var import_react8 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-kHmbI-mw.js
var import_react3 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/chunks/bundle-B6EYZPPA.js
var import_react2 = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);
var processToggleAction = function(isProcessing, action, errorHandler) {
  return __awaiter(void 0, void 0, void 0, function() {
    var error_1;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (isProcessing.current) {
            errorHandler === null || errorHandler === void 0 ? void 0 : errorHandler(new Error("Processing in progress"));
            return [
              2
              /*return*/
            ];
          }
          isProcessing.current = true;
          _a.label = 1;
        case 1:
          _a.trys.push([1, 3, 4, 5]);
          return [4, action()];
        case 2:
          _a.sent();
          return [3, 5];
        case 3:
          error_1 = _a.sent();
          errorHandler === null || errorHandler === void 0 ? void 0 : errorHandler(error_1);
          return [3, 5];
        case 4:
          isProcessing.current = false;
          return [
            7
            /*endfinally*/
          ];
        case 5:
          return [
            2
            /*return*/
          ];
      }
    });
  });
};
var getInitialIsOperator = function(channel, user) {
  if (!channel)
    return false;
  if (channel instanceof xe) {
    return channel.isOperator(user);
  }
  return (user === null || user === void 0 ? void 0 : user.role) === V.OPERATOR;
};
var getInitialIsMuted = function(channel, user) {
  return channel ? user === null || user === void 0 ? void 0 : user.isMuted : false;
};
var useToggleOperator = function(_a) {
  var channel = _a.channel, user = _a.user, onToggleOperatorState = _a.onToggleOperatorState, _isOperator = _a.isOperator;
  var _b = (0, import_react2.useState)(_isOperator !== null && _isOperator !== void 0 ? _isOperator : getInitialIsOperator(channel, user)), isOperator2 = _b[0], setIsOperator = _b[1];
  var isProcessing = (0, import_react2.useRef)(false);
  var toggleOperator = (0, import_react2.useCallback)(function() {
    if (!channel)
      return Promise.resolve();
    return processToggleAction(isProcessing, function() {
      return __awaiter(void 0, void 0, void 0, function() {
        var togglePromise, newStatus;
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              togglePromise = isOperator2 ? channel.removeOperators([user.userId]) : channel.addOperators([user.userId]);
              return [4, togglePromise];
            case 1:
              _a2.sent();
              newStatus = !isOperator2;
              setIsOperator(newStatus);
              onToggleOperatorState === null || onToggleOperatorState === void 0 ? void 0 : onToggleOperatorState({ user, newStatus });
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }, function(error) {
      onToggleOperatorState === null || onToggleOperatorState === void 0 ? void 0 : onToggleOperatorState({ user, newStatus: isOperator2, error });
    });
  }, [isOperator2, channel.url, user.userId, onToggleOperatorState]);
  return {
    isOperator: isOperator2,
    toggleOperator
  };
};
var useToggleMute = function(_a) {
  var channel = _a.channel, user = _a.user, onToggleMuteState = _a.onToggleMuteState, _isMuted = _a.isMuted;
  var _b = (0, import_react2.useState)(_isMuted !== null && _isMuted !== void 0 ? _isMuted : getInitialIsMuted(channel, user)), isMuted = _b[0], setIsMuted = _b[1];
  var isProcessing = (0, import_react2.useRef)(false);
  var toggleMute = (0, import_react2.useCallback)(function() {
    if (!channel)
      return Promise.resolve();
    return processToggleAction(isProcessing, function() {
      return __awaiter(void 0, void 0, void 0, function() {
        var togglePromise, newStatus;
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              togglePromise = isMuted ? channel.unmuteUser(user) : channel.muteUser(user);
              return [4, togglePromise];
            case 1:
              _a2.sent();
              newStatus = !isMuted;
              setIsMuted(newStatus);
              onToggleMuteState === null || onToggleMuteState === void 0 ? void 0 : onToggleMuteState({ user, newStatus });
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }, function(error) {
      onToggleMuteState === null || onToggleMuteState === void 0 ? void 0 : onToggleMuteState({ user, newStatus: isMuted, error });
    });
  }, [isMuted, channel.url, user.userId, onToggleMuteState]);
  return {
    isMuted,
    toggleMute
  };
};
var useToggleBan = function(_a) {
  var channel = _a.channel, user = _a.user, onToggleBanState = _a.onToggleBanState, _isBanned = _a.isBanned;
  var _b = (0, import_react2.useState)(_isBanned !== null && _isBanned !== void 0 ? _isBanned : false), isBanned = _b[0], setIsBanned = _b[1];
  var isProcessing = (0, import_react2.useRef)(false);
  var toggleBan = (0, import_react2.useCallback)(function() {
    if (!channel)
      return Promise.resolve();
    return processToggleAction(isProcessing, function() {
      return __awaiter(void 0, void 0, void 0, function() {
        var togglePromise, newStatus;
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              togglePromise = isBanned ? channel.unbanUser(user) : channel.banUser(user);
              return [4, togglePromise];
            case 1:
              _a2.sent();
              newStatus = !isBanned;
              setIsBanned(newStatus);
              onToggleBanState === null || onToggleBanState === void 0 ? void 0 : onToggleBanState({ user, newStatus });
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }, function(error) {
      onToggleBanState === null || onToggleBanState === void 0 ? void 0 : onToggleBanState({ user, newStatus: isBanned, error });
    });
  }, [isBanned, channel.url, user.userId, onToggleBanState]);
  return {
    isBanned,
    toggleBan
  };
};
var UserListItemMenuContext = (0, import_react2.createContext)(void 0);
var UserListItemMenuProvider = function(_a) {
  var children = _a.children, values = __rest(_a, ["children"]);
  var config = useSendbird().state.config;
  var currentUserId = config.userId;
  var channel = values.channel, user = values.user;
  var isCurrentUser = user.userId === currentUserId;
  var isCurrentUserOperator = function() {
    if (!channel)
      return false;
    return channel instanceof xe ? channel.isOperator(currentUserId) : channel.myRole === V.OPERATOR;
  }();
  var operatorState = useToggleOperator(values);
  var muteState = useToggleMute(values);
  var banState = useToggleBan(values);
  return import_react2.default.createElement(UserListItemMenuContext.Provider, { value: __assign(__assign(__assign(__assign(__assign({}, values), operatorState), muteState), banState), { isCurrentUser, isCurrentUserOperator }) }, children);
};
var useUserListItemMenuContext = function() {
  var context = (0, import_react2.useContext)(UserListItemMenuContext);
  if (!context) {
    throw new Error("useUserListItemMenuContext must be used within a UserListItemMenuProvider.");
  }
  return context;
};
var OperatorToggleMenuItem = function(props) {
  var _a;
  var stringSet = useLocalization().stringSet;
  var _b = useUserListItemMenuContext(), isOperator2 = _b.isOperator, toggleOperator = _b.toggleOperator, isCurrentUser = _b.isCurrentUser, isCurrentUserOperator = _b.isCurrentUserOperator, hideMenu = _b.hideMenu;
  if (!isCurrentUserOperator)
    return import_react2.default.createElement(import_react2.default.Fragment, null);
  return import_react2.default.createElement(MenuItem$1, __assign({}, props, { onClick: function(e) {
    var _a2;
    (_a2 = props === null || props === void 0 ? void 0 : props.onClick) === null || _a2 === void 0 ? void 0 : _a2.call(props, e);
    toggleOperator();
    hideMenu();
  }, disabled: isCurrentUser }), (_a = props === null || props === void 0 ? void 0 : props.children) !== null && _a !== void 0 ? _a : isOperator2 ? stringSet.CHANNEL_SETTING__MODERATION__UNREGISTER_OPERATOR : stringSet.CHANNEL_SETTING__MODERATION__REGISTER_AS_OPERATOR);
};
var MuteToggleMenuItem = function(props) {
  var _a;
  var stringSet = useLocalization().stringSet;
  var _b = useUserListItemMenuContext(), isMuted = _b.isMuted, toggleMute = _b.toggleMute, isCurrentUserOperator = _b.isCurrentUserOperator, hideMenu = _b.hideMenu, channel = _b.channel;
  if (!isCurrentUserOperator || (channel === null || channel === void 0 ? void 0 : channel.isBroadcast))
    return import_react2.default.createElement(import_react2.default.Fragment, null);
  return import_react2.default.createElement(MenuItem$1, __assign({}, props, { onClick: function(e) {
    var _a2;
    (_a2 = props === null || props === void 0 ? void 0 : props.onClick) === null || _a2 === void 0 ? void 0 : _a2.call(props, e);
    toggleMute();
    hideMenu();
  } }), (_a = props === null || props === void 0 ? void 0 : props.children) !== null && _a !== void 0 ? _a : isMuted ? stringSet.CHANNEL_SETTING__MODERATION__UNMUTE : stringSet.CHANNEL_SETTING__MODERATION__MUTE);
};
var BanToggleMenuItem = function(props) {
  var _a;
  var stringSet = useLocalization().stringSet;
  var _b = useUserListItemMenuContext(), isBanned = _b.isBanned, toggleBan = _b.toggleBan, isCurrentUserOperator = _b.isCurrentUserOperator, hideMenu = _b.hideMenu;
  if (!isCurrentUserOperator)
    return import_react2.default.createElement(import_react2.default.Fragment, null);
  return import_react2.default.createElement(MenuItem$1, __assign({}, props, { onClick: function(e) {
    var _a2;
    (_a2 = props === null || props === void 0 ? void 0 : props.onClick) === null || _a2 === void 0 ? void 0 : _a2.call(props, e);
    toggleBan();
    hideMenu();
  } }), (_a = props === null || props === void 0 ? void 0 : props.children) !== null && _a !== void 0 ? _a : isBanned ? stringSet.CHANNEL_SETTING__MODERATION__UNBAN : stringSet.CHANNEL_SETTING__MODERATION__BAN);
};
var TriggerIcon = function(_a) {
  var toggleMenu = _a.toggleMenu, ref = _a.ref;
  return import_react2.default.createElement(
    IconButton,
    { ref, className: "sendbird-user-message__more__menu", width: "32px", height: "32px", onClick: toggleMenu },
    import_react2.default.createElement(Icon, { width: "24px", height: "24px", type: IconTypes.MORE, fillColor: IconColors.CONTENT_INVERSE })
  );
};
var DefaultMenuItems = function(_a) {
  var items = _a.items;
  var OperatorToggleMenuItem2 = items.OperatorToggleMenuItem, MuteToggleMenuItem2 = items.MuteToggleMenuItem, BanToggleMenuItem2 = items.BanToggleMenuItem;
  return import_react2.default.createElement(
    import_react2.default.Fragment,
    null,
    import_react2.default.createElement(OperatorToggleMenuItem2, null),
    import_react2.default.createElement(MuteToggleMenuItem2, null),
    import_react2.default.createElement(BanToggleMenuItem2, null)
  );
};
var UserListItemMenu = function(props) {
  var user = props.user, className = props.className, _a = props.renderTrigger, renderTrigger = _a === void 0 ? TriggerIcon : _a, _b = props.renderMenuItems, renderMenuItems = _b === void 0 ? DefaultMenuItems : _b;
  var _c = (0, import_react2.useState)(false), isMenuVisible = _c[0], setMenuVisibility = _c[1];
  var containerRef = (0, import_react2.useRef)(null);
  var triggerRef = (0, import_react2.useRef)(null);
  var config = useSendbird().state.config;
  var currentUserId = config.userId;
  var toggleMenu = function() {
    setMenuVisibility(function(prev) {
      return !prev;
    });
  };
  var hideMenu = function() {
    setMenuVisibility(false);
  };
  if (user.userId === currentUserId) {
    return null;
  }
  return import_react2.default.createElement(
    "div",
    { className: classnames("sendbird-user-list-item-menu", className), ref: containerRef },
    import_react2.default.createElement(
      UserListItemMenuProvider,
      __assign({}, props, { hideMenu, toggleMenu }),
      renderTrigger({ ref: triggerRef, toggleMenu }),
      isMenuVisible && import_react2.default.createElement(
        MenuItems,
        {
          // TODO: Add id using getObservingId for useElementObserver
          parentRef: triggerRef,
          parentContainRef: containerRef,
          closeDropdown: hideMenu
        },
        renderMenuItems({
          items: {
            OperatorToggleMenuItem,
            MuteToggleMenuItem,
            BanToggleMenuItem
          }
        })
      )
    )
  );
};

// node_modules/@sendbird/uikit-react/chunks/bundle-kHmbI-mw.js
function OperatorsModal(_a) {
  var _this = this;
  var onCancel = _a.onCancel, _b = _a.renderUserListItem, renderUserListItem = _b === void 0 ? function(props) {
    return import_react3.default.createElement(UserListItem, __assign({}, props));
  } : _b, _c = _a.operatorListQueryParams, operatorListQueryParams = _c === void 0 ? {} : _c;
  var _d = (0, import_react3.useState)([]), operators = _d[0], setOperators = _d[1];
  var _e = (0, import_react3.useState)(null), operatorQuery = _e[0], setOperatorQuery = _e[1];
  var channel = useChannelSettings().state.channel;
  var stringSet = (0, import_react3.useContext)(LocalizationContext).stringSet;
  (0, import_react3.useEffect)(function() {
    var operatorListQuery = channel === null || channel === void 0 ? void 0 : channel.createOperatorListQuery(__assign({ limit: 20 }, operatorListQueryParams));
    operatorListQuery === null || operatorListQuery === void 0 ? void 0 : operatorListQuery.next().then(function(operators2) {
      setOperators(operators2);
    });
    setOperatorQuery(operatorListQuery !== null && operatorListQuery !== void 0 ? operatorListQuery : null);
  }, []);
  return import_react3.default.createElement(
    "div",
    null,
    import_react3.default.createElement(
      Modal,
      { isFullScreenOnMobile: true, hideFooter: true, titleText: stringSet.CHANNEL_SETTING__OPERATORS__TITLE_ALL, onCancel },
      import_react3.default.createElement("div", { className: "sendbird-more-members__popup-scroll", onScroll: useOnScrollPositionChangeDetector({
        onReachedBottom: function() {
          return __awaiter(_this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              if (operatorQuery && operatorQuery.hasNext) {
                operatorQuery.next().then(function(o) {
                  setOperators(__spreadArray(__spreadArray([], operators, true), o, true));
                });
              }
              return [
                2
                /*return*/
              ];
            });
          });
        }
      }) }, operators.map(function(member) {
        return import_react3.default.createElement(import_react3.default.Fragment, { key: member.userId }, renderUserListItem({
          user: member,
          channel,
          renderListItemMenu: function(props) {
            return import_react3.default.createElement(UserListItemMenu, __assign({}, props, { isOperator: true, onToggleOperatorState: function(_a2) {
              var user = _a2.user;
              setOperators(operators.filter(function(_a3) {
                var userId = _a3.userId;
                return userId !== user.userId;
              }));
            }, renderMenuItems: function(_a2) {
              var items = _a2.items;
              return import_react3.default.createElement(items.OperatorToggleMenuItem, null);
            } }));
          }
        }));
      }))
    )
  );
}
function AddOperatorsModal(_a) {
  var _this = this;
  var onCancel = _a.onCancel, onSubmit = _a.onSubmit, _b = _a.renderUserListItem, renderUserListItem = _b === void 0 ? function(props) {
    return import_react3.default.createElement(UserListItem, __assign({}, props));
  } : _b;
  var _c = (0, import_react3.useState)([]), members = _c[0], setMembers = _c[1];
  var _d = (0, import_react3.useState)({}), selectedMembers = _d[0], setSelectedMembers = _d[1];
  var _e = (0, import_react3.useState)(null), memberQuery = _e[0], setMemberQuery = _e[1];
  var stringSet = (0, import_react3.useContext)(LocalizationContext).stringSet;
  var channel = useChannelSettings().state.channel;
  (0, import_react3.useEffect)(function() {
    var memberListQuery = channel === null || channel === void 0 ? void 0 : channel.createMemberListQuery({
      operatorFilter: rn.NONOPERATOR,
      limit: 20
    });
    memberListQuery === null || memberListQuery === void 0 ? void 0 : memberListQuery.next().then(function(members2) {
      setMembers(members2);
    });
    setMemberQuery(memberListQuery !== null && memberListQuery !== void 0 ? memberListQuery : null);
  }, []);
  var selectedCount = Object.keys(selectedMembers).filter(function(m) {
    return selectedMembers[m];
  }).length;
  return import_react3.default.createElement(
    "div",
    null,
    import_react3.default.createElement(
      Modal,
      { isFullScreenOnMobile: true, type: ButtonTypes.PRIMARY, submitText: stringSet.CHANNEL_SETTING__OPERATORS__ADD_BUTTON, onCancel, onSubmit: function() {
        var members2 = Object.keys(selectedMembers).filter(function(m) {
          return selectedMembers[m];
        });
        channel === null || channel === void 0 ? void 0 : channel.addOperators(members2).then(function() {
          onSubmit(members2);
        });
      }, titleText: stringSet.CHANNEL_SETTING__MEMBERS__SELECT_TITLE },
      import_react3.default.createElement(Label, { color: selectedCount > 0 ? LabelColors.PRIMARY : LabelColors.ONBACKGROUND_3, type: LabelTypography.CAPTION_1 }, "".concat(selectedCount, " ").concat(stringSet.MODAL__INVITE_MEMBER__SELECTED)),
      import_react3.default.createElement("div", { className: "sendbird-more-members__popup-scroll", onScroll: useOnScrollPositionChangeDetector({
        onReachedBottom: function() {
          return __awaiter(_this, void 0, void 0, function() {
            var hasNext;
            return __generator(this, function(_a2) {
              hasNext = memberQuery.hasNext;
              if (hasNext) {
                memberQuery.next().then(function(o) {
                  setMembers(__spreadArray(__spreadArray([], members, true), o, true));
                });
              }
              return [
                2
                /*return*/
              ];
            });
          });
        }
      }) }, members.map(function(member) {
        return import_react3.default.createElement(import_react3.default.Fragment, { key: member.userId }, renderUserListItem({
          user: member,
          checkBox: true,
          checked: selectedMembers[member.userId],
          disabled: (member === null || member === void 0 ? void 0 : member.role) === "operator",
          onChange: function(event) {
            var _a2;
            var modifiedSelectedMembers = __assign(__assign({}, selectedMembers), (_a2 = {}, _a2[event.target.id] = event.target.checked, _a2));
            if (!event.target.checked) {
              delete modifiedSelectedMembers[event.target.id];
            }
            setSelectedMembers(modifiedSelectedMembers);
          }
        }));
      }))
    )
  );
}
var OperatorList = function(_a) {
  var _b = _a.renderUserListItem, renderUserListItem = _b === void 0 ? function(props) {
    return import_react3.default.createElement(UserListItem, __assign({}, props));
  } : _b, _c = _a.operatorListQueryParams, operatorListQueryParams = _c === void 0 ? {} : _c;
  var _d = (0, import_react3.useState)([]), operators = _d[0], setOperators = _d[1];
  var _e = (0, import_react3.useState)(false), showMore = _e[0], setShowMore = _e[1];
  var _f = (0, import_react3.useState)(false), showAdd = _f[0], setShowAdd = _f[1];
  var _g = (0, import_react3.useState)(false), hasNext = _g[0], setHasNext = _g[1];
  var stringSet = useLocalization().stringSet;
  var channel = useChannelSettings().state.channel;
  var refreshList = (0, import_react3.useCallback)(function() {
    if (!channel) {
      setOperators([]);
      return;
    }
    var operatorListQuery = channel === null || channel === void 0 ? void 0 : channel.createOperatorListQuery(__assign({ limit: 10 }, operatorListQueryParams));
    operatorListQuery.next().then(function(operators2) {
      setOperators(operators2);
      setHasNext(operatorListQuery.hasNext);
    });
  }, [channel === null || channel === void 0 ? void 0 : channel.url, channel === null || channel === void 0 ? void 0 : channel.createOperatorListQuery]);
  (0, import_react3.useEffect)(refreshList, [channel === null || channel === void 0 ? void 0 : channel.url]);
  return import_react3.default.createElement(
    import_react3.default.Fragment,
    null,
    operators.map(function(operator) {
      return import_react3.default.createElement(import_react3.default.Fragment, { key: operator.userId }, renderUserListItem({
        user: operator,
        channel,
        size: "small",
        avatarSize: "24px",
        renderListItemMenu: function(props) {
          return import_react3.default.createElement(UserListItemMenu, __assign({}, props, {
            /**
             * isOperator:
             * The ReturnType of createOperatorListQuery is User[].
             * We can't determine if this user is an operator, because User doesn't have a `role` property.
             * Therefore, we need to explicitly specify that this user is an operator.
            */
            isOperator: true,
            onToggleOperatorState: function() {
              setTimeout(function() {
                refreshList();
              }, 500);
            },
            renderMenuItems: function(_a2) {
              var items = _a2.items;
              return import_react3.default.createElement(items.OperatorToggleMenuItem, null);
            }
          }));
        }
      }));
    }),
    import_react3.default.createElement(
      "div",
      { className: "sendbird-channel-settings-accordion__footer" },
      import_react3.default.createElement(Button, { type: ButtonTypes.SECONDARY, size: ButtonSizes.SMALL, onClick: function() {
        setShowAdd(true);
      } }, stringSet.CHANNEL_SETTING__OPERATORS__TITLE_ADD),
      hasNext && import_react3.default.createElement(Button, { type: ButtonTypes.SECONDARY, size: ButtonSizes.SMALL, onClick: function() {
        setShowMore(true);
      } }, stringSet.CHANNEL_SETTING__OPERATORS__TITLE_ALL)
    ),
    showMore && import_react3.default.createElement(OperatorsModal, { onCancel: function() {
      setShowMore(false);
      refreshList();
    }, renderUserListItem, operatorListQueryParams }),
    showAdd && import_react3.default.createElement(AddOperatorsModal, { onCancel: function() {
      return setShowAdd(false);
    }, onSubmit: function() {
      setTimeout(function() {
        refreshList();
      }, 500);
      setShowAdd(false);
    }, renderUserListItem })
  );
};
function BannedUsersModal(_a) {
  var _this = this;
  var onCancel = _a.onCancel, _b = _a.renderUserListItem, renderUserListItem = _b === void 0 ? function(props) {
    return import_react3.default.createElement(UserListItem, __assign({}, props));
  } : _b, _c = _a.bannedUserListQueryParams, bannedUserListQueryParams = _c === void 0 ? {} : _c;
  var _d = (0, import_react3.useState)([]), members = _d[0], setMembers = _d[1];
  var _e = (0, import_react3.useState)(null), memberQuery = _e[0], setMemberQuery = _e[1];
  var channel = useChannelSettings().state.channel;
  var stringSet = useLocalization().stringSet;
  (0, import_react3.useEffect)(function() {
    var bannedUserListQuery = channel === null || channel === void 0 ? void 0 : channel.createBannedUserListQuery(__assign({ limit: 20 }, bannedUserListQueryParams));
    if (bannedUserListQuery) {
      bannedUserListQuery.next().then(function(users) {
        setMembers(users);
      });
      setMemberQuery(bannedUserListQuery);
    }
  }, []);
  return import_react3.default.createElement(
    "div",
    null,
    import_react3.default.createElement(
      Modal,
      { isFullScreenOnMobile: true, hideFooter: true, onCancel: function() {
        return onCancel();
      }, onSubmit: noop, titleText: stringSet.CHANNEL_SETTING__BANNED_MEMBERS__TITLE },
      import_react3.default.createElement("div", { className: "sendbird-more-members__popup-scroll", onScroll: useOnScrollPositionChangeDetector({
        onReachedBottom: function() {
          return __awaiter(_this, void 0, void 0, function() {
            var hasNext;
            return __generator(this, function(_a2) {
              if (!memberQuery)
                return [
                  2
                  /*return*/
                ];
              hasNext = memberQuery.hasNext;
              if (hasNext) {
                memberQuery.next().then(function(o) {
                  setMembers(__spreadArray(__spreadArray([], members, true), o, true));
                });
              }
              return [
                2
                /*return*/
              ];
            });
          });
        }
      }) }, members.map(function(member) {
        return renderUserListItem({
          user: member,
          channel,
          renderListItemMenu: function(props) {
            return import_react3.default.createElement(UserListItemMenu, __assign({}, props, { isBanned: true, onToggleBanState: function() {
              setMembers(members.filter(function(m) {
                return m.userId !== member.userId;
              }));
            }, renderMenuItems: function(_a2) {
              var items = _a2.items;
              return import_react3.default.createElement(items.BanToggleMenuItem, null);
            } }));
          }
        });
      }))
    )
  );
}
var BannedUserList = function(_a) {
  var _b = _a.renderUserListItem, renderUserListItem = _b === void 0 ? function(props) {
    return import_react3.default.createElement(UserListItem, __assign({}, props));
  } : _b, _c = _a.bannedUserListQueryParams, bannedUserListQueryParams = _c === void 0 ? {} : _c;
  var _d = (0, import_react3.useState)([]), members = _d[0], setMembers = _d[1];
  var _e = (0, import_react3.useState)(false), hasNext = _e[0], setHasNext = _e[1];
  var _f = (0, import_react3.useState)(false), showModal = _f[0], setShowModal = _f[1];
  var stringSet = (0, import_react3.useContext)(LocalizationContext).stringSet;
  var channel = useChannelSettings().state.channel;
  var refreshList = (0, import_react3.useCallback)(function() {
    if (!channel) {
      setMembers([]);
      return;
    }
    var bannedUserListQuery = channel === null || channel === void 0 ? void 0 : channel.createBannedUserListQuery(__assign({ limit: 10 }, bannedUserListQueryParams));
    bannedUserListQuery.next().then(function(users) {
      setMembers(users);
      setHasNext(bannedUserListQuery.hasNext);
    });
  }, [channel === null || channel === void 0 ? void 0 : channel.url, channel === null || channel === void 0 ? void 0 : channel.createBannedUserListQuery]);
  (0, import_react3.useEffect)(refreshList, [channel === null || channel === void 0 ? void 0 : channel.url]);
  return import_react3.default.createElement(
    import_react3.default.Fragment,
    null,
    members.map(function(member) {
      return import_react3.default.createElement(import_react3.default.Fragment, { key: member.userId }, renderUserListItem({
        user: member,
        channel,
        size: "small",
        avatarSize: "24px",
        renderListItemMenu: function(props) {
          return import_react3.default.createElement(UserListItemMenu, __assign({}, props, { isBanned: true, onToggleBanState: function() {
            return refreshList();
          }, renderMenuItems: function(_a2) {
            var items = _a2.items;
            return import_react3.default.createElement(items.BanToggleMenuItem, null);
          } }));
        }
      }));
    }),
    members && members.length === 0 && import_react3.default.createElement(Label, { className: "sendbird-channel-settings__empty-list", type: LabelTypography.SUBTITLE_2, color: LabelColors.ONBACKGROUND_3 }, stringSet.CHANNEL_SETTING__MODERATION__EMPTY_BAN),
    hasNext && import_react3.default.createElement(
      "div",
      { className: "sendbird-channel-settings-accordion__footer" },
      import_react3.default.createElement(Button, { type: ButtonTypes.SECONDARY, size: ButtonSizes.SMALL, onClick: function() {
        setShowModal(true);
      } }, stringSet.CHANNEL_SETTING__MODERATION__ALL_BAN)
    ),
    showModal && import_react3.default.createElement(BannedUsersModal, { onCancel: function() {
      setShowModal(false);
      refreshList();
    }, renderUserListItem, bannedUserListQueryParams })
  );
};
function MutedMembersModal(_a) {
  var _this = this;
  var onCancel = _a.onCancel, _b = _a.renderUserListItem, renderUserListItem = _b === void 0 ? function(props) {
    return import_react3.default.createElement(UserListItem, __assign({}, props));
  } : _b, _c = _a.memberListQueryParams, memberListQueryParams = _c === void 0 ? {} : _c;
  var _d = (0, import_react3.useState)([]), members = _d[0], setMembers = _d[1];
  var _e = (0, import_react3.useState)(null), memberQuery = _e[0], setMemberQuery = _e[1];
  var channel = useChannelSettings().state.channel;
  var stringSet = useLocalization().stringSet;
  (0, import_react3.useEffect)(function() {
    var memberUserListQuery = channel === null || channel === void 0 ? void 0 : channel.createMemberListQuery(__assign(__assign({ limit: 20 }, memberListQueryParams), {
      // @ts-ignore
      mutedMemberFilter: "muted"
    }));
    memberUserListQuery === null || memberUserListQuery === void 0 ? void 0 : memberUserListQuery.next().then(function(members2) {
      setMembers(members2);
    });
    setMemberQuery(memberUserListQuery !== null && memberUserListQuery !== void 0 ? memberUserListQuery : null);
  }, []);
  return import_react3.default.createElement(
    "div",
    null,
    import_react3.default.createElement(
      Modal,
      { isFullScreenOnMobile: true, hideFooter: true, onCancel: function() {
        return onCancel();
      }, onSubmit: noop, titleText: stringSet.CHANNEL_SETTING__MUTED_MEMBERS__TITLE },
      import_react3.default.createElement("div", { className: "sendbird-more-members__popup-scroll", onScroll: useOnScrollPositionChangeDetector({
        onReachedBottom: function() {
          return __awaiter(_this, void 0, void 0, function() {
            var hasNext;
            return __generator(this, function(_a2) {
              hasNext = memberQuery.hasNext;
              if (hasNext) {
                memberQuery.next().then(function(o) {
                  setMembers(__spreadArray(__spreadArray([], members, true), o, true));
                });
              }
              return [
                2
                /*return*/
              ];
            });
          });
        }
      }) }, members.map(function(member) {
        return import_react3.default.createElement(import_react3.default.Fragment, { key: member.userId }, renderUserListItem({
          user: member,
          channel,
          renderListItemMenu: function(props) {
            return import_react3.default.createElement(UserListItemMenu, __assign({}, props, { onToggleMuteState: function() {
              setMembers(members.filter(function(m) {
                return m.userId !== member.userId;
              }));
            }, renderMenuItems: function(_a2) {
              var items = _a2.items;
              return import_react3.default.createElement(items.MuteToggleMenuItem, null);
            } }));
          }
        }));
      }))
    )
  );
}
var MutedMemberList = function(_a) {
  var _b = _a.renderUserListItem, renderUserListItem = _b === void 0 ? function(props) {
    return import_react3.default.createElement(UserListItem, __assign({}, props));
  } : _b, _c = _a.memberListQueryParams, memberListQueryParams = _c === void 0 ? {} : _c;
  var _d = (0, import_react3.useState)([]), members = _d[0], setMembers = _d[1];
  var _e = (0, import_react3.useState)(false), hasNext = _e[0], setHasNext = _e[1];
  var _f = (0, import_react3.useState)(false), showModal = _f[0], setShowModal = _f[1];
  var stringSet = useLocalization().stringSet;
  var channel = useChannelSettings().state.channel;
  var refreshList = (0, import_react3.useCallback)(function() {
    if (!channel) {
      setMembers([]);
      return;
    }
    var memberUserListQuery = channel === null || channel === void 0 ? void 0 : channel.createMemberListQuery(__assign(__assign({ limit: 10 }, memberListQueryParams), {
      // @ts-ignore
      mutedMemberFilter: "muted"
    }));
    memberUserListQuery.next().then(function(members2) {
      setMembers(members2);
      setHasNext(memberUserListQuery.hasNext);
    });
  }, [channel === null || channel === void 0 ? void 0 : channel.url, channel === null || channel === void 0 ? void 0 : channel.createMemberListQuery]);
  (0, import_react3.useEffect)(refreshList, [channel === null || channel === void 0 ? void 0 : channel.url]);
  return import_react3.default.createElement(
    import_react3.default.Fragment,
    null,
    members.map(function(member) {
      return import_react3.default.createElement(import_react3.default.Fragment, { key: member.userId }, renderUserListItem({
        user: member,
        channel,
        size: "small",
        avatarSize: "24px",
        renderListItemMenu: function(props) {
          return import_react3.default.createElement(UserListItemMenu, __assign({}, props, { onToggleMuteState: function() {
            setTimeout(function() {
              refreshList();
            }, 500);
          }, renderMenuItems: function(_a2) {
            var items = _a2.items;
            return import_react3.default.createElement(items.MuteToggleMenuItem, null);
          } }));
        }
      }));
    }),
    members && members.length === 0 && import_react3.default.createElement(Label, { className: "sendbird-channel-settings__empty-list", type: LabelTypography.SUBTITLE_2, color: LabelColors.ONBACKGROUND_3 }, stringSet.CHANNEL_SETTING__NO_UNMUTED),
    hasNext && import_react3.default.createElement(
      "div",
      { className: "sendbird-channel-settings-accordion__footer" },
      import_react3.default.createElement(Button, { type: ButtonTypes.SECONDARY, size: ButtonSizes.SMALL, onClick: function() {
        setShowModal(true);
      } }, stringSet.CHANNEL_SETTING__MUTED_MEMBERS__TITLE_ALL)
    ),
    showModal && import_react3.default.createElement(MutedMembersModal, { onCancel: function() {
      setShowModal(false);
      refreshList();
    }, renderUserListItem, memberListQueryParams })
  );
};

// node_modules/@sendbird/uikit-react/chunks/bundle-BshVXhPZ.js
var import_react4 = __toESM(require_react(), 1);
function MembersModal(_a) {
  var _this = this;
  var onCancel = _a.onCancel, _b = _a.renderUserListItem, renderUserListItem = _b === void 0 ? function(props) {
    return import_react4.default.createElement(UserListItem, __assign({}, props));
  } : _b, _c = _a.memberListQueryParams, memberListQueryParams = _c === void 0 ? {} : _c;
  var _d = (0, import_react4.useState)([]), members = _d[0], setMembers = _d[1];
  var _e = (0, import_react4.useState)(null), memberQuery = _e[0], setMemberQuery = _e[1];
  var channel = useChannelSettings().state.channel;
  var stringSet = (0, import_react4.useContext)(LocalizationContext).stringSet;
  (0, import_react4.useEffect)(function() {
    var memberListQuery = channel === null || channel === void 0 ? void 0 : channel.createMemberListQuery(__assign({ limit: 20 }, memberListQueryParams));
    memberListQuery === null || memberListQuery === void 0 ? void 0 : memberListQuery.next().then(function(members2) {
      setMembers(members2);
    });
    setMemberQuery(memberListQuery !== null && memberListQuery !== void 0 ? memberListQuery : null);
  }, []);
  return import_react4.default.createElement(
    "div",
    null,
    import_react4.default.createElement(
      Modal,
      { isFullScreenOnMobile: true, hideFooter: true, onCancel: function() {
        return onCancel();
      }, onSubmit: noop, titleText: stringSet.CHANNEL_SETTING__MEMBERS__SEE_ALL_MEMBERS },
      import_react4.default.createElement("div", { className: "sendbird-more-members__popup-scroll", onScroll: useOnScrollPositionChangeDetector({
        onReachedBottom: function() {
          return __awaiter(_this, void 0, void 0, function() {
            return __generator(this, function(_a2) {
              if (memberQuery && memberQuery.hasNext) {
                memberQuery.next().then(function(o) {
                  setMembers(__spreadArray(__spreadArray([], members, true), o, true));
                });
              }
              return [
                2
                /*return*/
              ];
            });
          });
        }
      }) }, members.map(function(member, index) {
        return import_react4.default.createElement(import_react4.default.Fragment, { key: member.userId }, renderUserListItem({
          // NOTE: This `index` is used to display the current user's user item at the top when customizing externally.
          index,
          user: member,
          channel,
          renderListItemMenu: function(props) {
            return import_react4.default.createElement(UserListItemMenu, __assign({}, props, { onToggleOperatorState: function(_a2) {
              var isOperator2 = _a2.newStatus;
              var newMembers = __spreadArray([], members, true);
              for (var _i = 0, newMembers_1 = newMembers; _i < newMembers_1.length; _i++) {
                var newMember = newMembers_1[_i];
                if (newMember.userId === member.userId) {
                  newMember.role = isOperator2 ? V.OPERATOR : V.NONE;
                  break;
                }
              }
              setMembers(newMembers);
            }, onToggleMuteState: function(_a2) {
              var isMuted = _a2.newStatus;
              var newMembers = __spreadArray([], members, true);
              for (var _i = 0, newMembers_2 = newMembers; _i < newMembers_2.length; _i++) {
                var newMember = newMembers_2[_i];
                if (newMember.userId === member.userId) {
                  newMember.isMuted = isMuted;
                  break;
                }
              }
              setMembers(newMembers);
            }, onToggleBanState: function() {
              setMembers(members.filter(function(_a2) {
                var userId = _a2.userId;
                return userId !== member.userId;
              }));
            } }));
          }
        }));
      }))
    )
  );
}
function InviteUsersModal(_a) {
  var _this = this;
  var _b, _c, _d;
  var onCancel = _a.onCancel, onSubmit = _a.onSubmit, _e = _a.renderUserListItem, renderUserListItem = _e === void 0 ? function(props) {
    return import_react4.default.createElement(UserListItem, __assign({}, props));
  } : _e;
  var _f = (0, import_react4.useState)([]), users = _f[0], setUsers = _f[1];
  var _g = (0, import_react4.useState)(null), userListQuery = _g[0], setUserListQuery = _g[1];
  var _h = (0, import_react4.useState)({}), selectedUsers = _h[0], setSelectedUsers = _h[1];
  var state = useSendbird().state;
  var sdk = (_c = (_b = state === null || state === void 0 ? void 0 : state.stores) === null || _b === void 0 ? void 0 : _b.sdkStore) === null || _c === void 0 ? void 0 : _c.sdk;
  var globalUserListQuery = (_d = state === null || state === void 0 ? void 0 : state.config) === null || _d === void 0 ? void 0 : _d.userListQuery;
  var _j = useChannelSettings().state, channel = _j.channel, overrideInviteUser = _j.overrideInviteUser, queries = _j.queries;
  var stringSet = useLocalization().stringSet;
  var onScroll = useOnScrollPositionChangeDetector({
    onReachedBottom: function() {
      return __awaiter(this, void 0, void 0, function() {
        var users_1;
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              if (!(userListQuery === null || userListQuery === void 0 ? void 0 : userListQuery.hasNext))
                return [3, 2];
              return [4, userListQuery.next()];
            case 1:
              users_1 = _a2.sent();
              setUsers(function(prev) {
                return __spreadArray(__spreadArray([], prev, true), users_1, true);
              });
              _a2.label = 2;
            case 2:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }
  });
  var onInviteUsers = function() {
    return __awaiter(_this, void 0, void 0, function() {
      var userIdsToInvite;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            userIdsToInvite = Object.keys(selectedUsers);
            if (!(channel && typeof overrideInviteUser === "function"))
              return [3, 1];
            overrideInviteUser({ users: userIdsToInvite, onClose: onCancel, channel });
            return [3, 3];
          case 1:
            return [4, channel === null || channel === void 0 ? void 0 : channel.inviteWithUserIds(userIdsToInvite)];
          case 2:
            _a2.sent();
            onSubmit(userIdsToInvite);
            _a2.label = 3;
          case 3:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  };
  var onSelectUser = function(user) {
    setSelectedUsers(function(_a2) {
      var draft = __rest(_a2, []);
      if (draft[user.userId]) {
        delete draft[user.userId];
      } else {
        draft[user.userId] = user;
      }
      return draft;
    });
  };
  var membersMap = (0, import_react4.useMemo)(function() {
    var _a2;
    var _b2, _c2;
    if ((channel === null || channel === void 0 ? void 0 : channel.isSuper) || (channel === null || channel === void 0 ? void 0 : channel.isBroadcast))
      return _a2 = {}, _a2[(_c2 = (_b2 = sdk.currentUser) === null || _b2 === void 0 ? void 0 : _b2.userId) !== null && _c2 !== void 0 ? _c2 : ""] = sdk.currentUser, _a2;
    return channel === null || channel === void 0 ? void 0 : channel.members.reduce(function(acc, cur) {
      acc[cur.userId] = cur;
      return acc;
    }, {});
  }, [channel === null || channel === void 0 ? void 0 : channel.members.length]);
  (0, import_react4.useEffect)(function() {
    var fetchUsersAndSetQuery = function() {
      return __awaiter(_this, void 0, void 0, function() {
        var query, users_2;
        var _a2;
        return __generator(this, function(_b2) {
          switch (_b2.label) {
            case 0:
              query = (_a2 = globalUserListQuery === null || globalUserListQuery === void 0 ? void 0 : globalUserListQuery()) !== null && _a2 !== void 0 ? _a2 : sdk === null || sdk === void 0 ? void 0 : sdk.createApplicationUserListQuery(queries === null || queries === void 0 ? void 0 : queries.applicationUserListQuery);
              if (!query)
                return [3, 2];
              return [4, query.next()];
            case 1:
              users_2 = _b2.sent();
              setUserListQuery(query);
              setUsers(users_2);
              _b2.label = 2;
            case 2:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    fetchUsersAndSetQuery();
  }, [sdk]);
  return import_react4.default.createElement(
    "div",
    null,
    import_react4.default.createElement(
      Modal,
      { isFullScreenOnMobile: true, disabled: Object.keys(selectedUsers).length === 0, submitText: stringSet.BUTTON__INVITE, type: ButtonTypes.PRIMARY, onCancel: function() {
        return onCancel();
      }, onSubmit: onInviteUsers, titleText: stringSet.CHANNEL_SETTING__MEMBERS__SELECT_TITLE },
      import_react4.default.createElement(
        "div",
        { className: "sendbird-more-members__popup-scroll", onScroll },
        import_react4.default.createElement("div", { className: "sendbird-more-members__popup-scroll__inner" }, users.map(function(user) {
          var isMember = Boolean(membersMap ? membersMap[user.userId] : false);
          var isSelected = Boolean(selectedUsers[user.userId]);
          return import_react4.default.createElement(import_react4.default.Fragment, { key: user.userId }, renderUserListItem({
            user,
            checkBox: true,
            checked: isMember || isSelected,
            disabled: isMember,
            onChange: function() {
              return onSelectUser(user);
            }
          }));
        }))
      )
    )
  );
}
var MemberList = function(_a) {
  var _b = _a.renderUserListItem, renderUserListItem = _b === void 0 ? function(props) {
    return import_react4.default.createElement(UserListItem, __assign({}, props));
  } : _b, _c = _a.memberListQueryParams, memberListQueryParams = _c === void 0 ? {} : _c;
  var _d = (0, import_react4.useState)([]), members = _d[0], setMembers = _d[1];
  var _e = (0, import_react4.useState)(false), hasNext = _e[0], setHasNext = _e[1];
  var _f = (0, import_react4.useState)(false), showAllMembers = _f[0], setShowAllMembers = _f[1];
  var _g = (0, import_react4.useState)(false), showInviteUsers = _g[0], setShowInviteUsers = _g[1];
  var _h = useChannelSettings().state, channel = _h.channel, forceUpdateUI = _h.forceUpdateUI;
  var stringSet = (0, import_react4.useContext)(LocalizationContext).stringSet;
  var isOperator2 = channel.myRole === V.OPERATOR;
  var refreshList = (0, import_react4.useCallback)(function() {
    if (!channel) {
      setMembers([]);
      return;
    }
    var memberUserListQuery = channel === null || channel === void 0 ? void 0 : channel.createMemberListQuery(__assign({ limit: 10 }, memberListQueryParams));
    memberUserListQuery.next().then(function(members2) {
      setMembers(members2);
      setHasNext(memberUserListQuery.hasNext);
    });
  }, [channel === null || channel === void 0 ? void 0 : channel.url, channel === null || channel === void 0 ? void 0 : channel.createMemberListQuery]);
  (0, import_react4.useEffect)(refreshList, [channel === null || channel === void 0 ? void 0 : channel.url]);
  return import_react4.default.createElement(
    "div",
    { className: "sendbird-channel-settings-member-list" },
    members.map(function(member, index) {
      return import_react4.default.createElement(import_react4.default.Fragment, { key: member.userId }, renderUserListItem({
        // NOTE: This `index` is used to display the current user's user item at the top when customizing externally.
        index,
        user: member,
        channel,
        size: "small",
        avatarSize: "24px",
        renderListItemMenu: isOperator2 ? function(props) {
          return import_react4.default.createElement(UserListItemMenu, __assign({}, props, { onToggleOperatorState: function(_a2) {
            var isOperator3 = _a2.newStatus;
            var newMembers = __spreadArray([], members, true);
            for (var _i = 0, newMembers_1 = newMembers; _i < newMembers_1.length; _i++) {
              var newMember = newMembers_1[_i];
              if (newMember.userId === member.userId) {
                newMember.role = isOperator3 ? V.OPERATOR : V.NONE;
                break;
              }
            }
            setMembers(newMembers);
          }, onToggleMuteState: function(_a2) {
            var isMuted = _a2.newStatus;
            var newMembers = __spreadArray([], members, true);
            for (var _i = 0, newMembers_2 = newMembers; _i < newMembers_2.length; _i++) {
              var newMember = newMembers_2[_i];
              if (newMember.userId === member.userId) {
                newMember.isMuted = isMuted;
                break;
              }
            }
            setMembers(newMembers);
          }, onToggleBanState: function() {
            setMembers(members.filter(function(_a2) {
              var userId = _a2.userId;
              return userId !== member.userId;
            }));
          } }));
        } : function() {
          return import_react4.default.createElement(import_react4.default.Fragment, null);
        }
      }));
    }),
    import_react4.default.createElement(
      "div",
      { className: "sendbird-channel-settings-accordion__footer" },
      hasNext && import_react4.default.createElement(Button, { type: ButtonTypes.SECONDARY, size: ButtonSizes.SMALL, onClick: function() {
        return setShowAllMembers(true);
      } }, stringSet.CHANNEL_SETTING__MEMBERS__SEE_ALL_MEMBERS),
      import_react4.default.createElement(Button, { type: ButtonTypes.SECONDARY, size: ButtonSizes.SMALL, onClick: function() {
        return setShowInviteUsers(true);
      } }, stringSet.CHANNEL_SETTING__MEMBERS__INVITE_MEMBER)
    ),
    showAllMembers && import_react4.default.createElement(MembersModal, { onCancel: function() {
      setShowAllMembers(false);
      refreshList();
      forceUpdateUI();
    }, renderUserListItem, memberListQueryParams }),
    showInviteUsers && import_react4.default.createElement(InviteUsersModal, { onCancel: function() {
      return setShowInviteUsers(false);
    }, onSubmit: function() {
      setShowInviteUsers(false);
      refreshList();
      forceUpdateUI();
    }, renderUserListItem })
  );
};

// node_modules/@sendbird/uikit-react/ui/Badge.js
var import_react5 = __toESM(require_react(), 1);
function Badge(_a) {
  var count = _a.count, _b = _a.maxLevel, maxLevel = _b === void 0 ? 2 : _b, _c = _a.className, className = _c === void 0 ? "" : _c;
  var stringSet = (0, import_react5.useContext)(LocalizationContext).stringSet;
  var maximumNumber = parseInt("9".repeat(maxLevel > 6 ? 6 : maxLevel), 10);
  return import_react5.default.createElement(
    "div",
    { className: __spreadArray(__spreadArray([], Array.isArray(className) ? className : [className], true), [
      "sendbird-badge"
    ], false).join(" ") },
    import_react5.default.createElement(
      "div",
      { className: "sendbird-badge__text" },
      import_react5.default.createElement(Label, { type: LabelTypography.CAPTION_2, color: LabelColors.ONCONTENT_1 }, typeof count === "string" ? count : count > maximumNumber ? "".concat(maximumNumber).concat(stringSet.BADGE__OVER) : count)
    )
  );
}

// node_modules/@sendbird/uikit-react/ui/Toggle.js
var import_react6 = __toESM(require_react(), 1);
var noop2 = function() {
};
var TOGGLE_DEFAULT_VALUE = {
  checked: null,
  defaultChecked: false,
  disabled: false,
  onChange: noop2,
  onFocus: noop2,
  onBlur: noop2
};
var ToggleContext = import_react6.default.createContext(TOGGLE_DEFAULT_VALUE);
function useToggleContext() {
  var context = import_react6.default.useContext(ToggleContext);
  if (context === void 0) {
    throw new Error("@sendbird/uikit-react/ui/Toggle: useToggleContext must be used within a ToggleContainer.");
  }
  return context;
}
function ToggleContainer(_a) {
  var _b = _a.checked, checked = _b === void 0 ? TOGGLE_DEFAULT_VALUE.checked : _b, _c = _a.defaultChecked, defaultChecked = _c === void 0 ? TOGGLE_DEFAULT_VALUE.defaultChecked : _c, _d = _a.disabled, disabled = _d === void 0 ? TOGGLE_DEFAULT_VALUE.disabled : _d, _e = _a.onChange, onChange = _e === void 0 ? TOGGLE_DEFAULT_VALUE.onChange : _e, _f = _a.onFocus, onFocus = _f === void 0 ? TOGGLE_DEFAULT_VALUE.onFocus : _f, _g = _a.onBlur, onBlur = _g === void 0 ? TOGGLE_DEFAULT_VALUE.onBlur : _g, children = _a.children;
  var _h = (0, import_react6.useState)(defaultChecked || false), isChecked = _h[0], setChecked = _h[1];
  var handleChange = (0, import_react6.useCallback)(function(e) {
    if (disabled) {
      return;
    }
    if (checked === null) {
      setChecked(e.currentTarget.checked);
    }
    onChange(e);
  }, [onChange, checked]);
  return import_react6.default.createElement(ToggleContext.Provider, { value: {
    checked: checked !== null ? checked : isChecked,
    disabled,
    onChange: handleChange,
    onFocus: function(e) {
      if (!disabled) {
        onFocus(e);
      }
    },
    onBlur: function(e) {
      if (!disabled) {
        onBlur(e);
      }
    }
  } }, children);
}
function filterNumber(input) {
  if (typeof input !== "string" && typeof input !== "number") {
    try {
      var logger = useSendbird().state.config.logger;
      logger.warning("@sendbird/uikit-react/ui/Toggle: TypeError - expected string or number.", input);
    } catch (_) {
    }
    return [];
  }
  if (typeof input === "number") {
    return [input];
  }
  var regex = /(-?\d+)(\.\d+)?/g;
  var numbers = input.match(regex) || [];
  return numbers.map(parseFloat);
}
function ToggleUI(props) {
  var _a;
  var _b = props.reversed, reversed = _b === void 0 ? false : _b, _c = props.width, width = _c === void 0 ? "40px" : _c, _d = props.animationDuration, animationDuration = _d === void 0 ? "0.5s" : _d, _e = props.style, style = _e === void 0 ? {} : _e, _f = props.name, name = _f === void 0 ? "" : _f, _g = props.id, id = _g === void 0 ? "" : _g, _h = props.ariaLabel, ariaLabel = _h === void 0 ? "" : _h, _j = props.ariaLabelledby, ariaLabelledby = _j === void 0 ? "" : _j;
  var _k = useToggleContext(), checked = _k.checked, disabled = _k.disabled, onChange = _k.onChange, onFocus = _k.onFocus, onBlur = _k.onBlur;
  var _l = (0, import_react6.useState)(""), animatedClassName = _l[0], setAnimatedClassName = _l[1];
  var toggleWidth = (_a = filterNumber(width)) === null || _a === void 0 ? void 0 : _a[0];
  var toggleHeight = toggleWidth / 2;
  var dotSize = toggleHeight * 0.6;
  return import_react6.default.createElement(
    "label",
    { className: [
      "sendbird-input-toggle-button",
      animatedClassName,
      checked ? "sendbird-input-toggle-button--checked" : "sendbird-input-toggle-button--unchecked",
      disabled ? "sendbird-input-toggle-button--disabled" : [],
      reversed ? "sendbird-input-toggle-button--reversed" : []
    ].flat().join(" "), "data-testid": "sendbird-input-toggle-button", style: __assign({ width: "".concat(toggleWidth, "px"), height: "".concat(toggleHeight, "px"), borderRadius: "".concat(dotSize, "px") }, style) },
    import_react6.default.createElement("div", { className: [
      "sendbird-input-toggle-button__inner-dot",
      checked ? "sendbird-input-toggle-button__inner-dot--activate" : "sendbird-input-toggle-button__inner-dot--inactivate"
    ].join(" "), style: {
      width: "".concat(dotSize, "px"),
      height: "".concat(dotSize, "px"),
      animationDuration
    } }),
    import_react6.default.createElement("input", { type: "checkbox", "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, name, id, checked: checked !== null && checked !== void 0 ? checked : void 0, disabled, onChange: function(e) {
      onChange === null || onChange === void 0 ? void 0 : onChange(e);
      setAnimatedClassName(e.currentTarget.checked ? "sendbird-input-toggle-button--turned-on" : "sendbird-input-toggle-button--turned-off");
    }, onFocus, onBlur })
  );
}
function Toggle(props) {
  var checked = props.checked, defaultChecked = props.defaultChecked, disabled = props.disabled, onChange = props.onChange, onFocus = props.onFocus, onBlur = props.onBlur, className = props.className, reversed = props.reversed, width = props.width, animationDuration = props.animationDuration, style = props.style, name = props.name, id = props.id, ariaLabel = props.ariaLabel, ariaLabelledby = props.ariaLabelledby;
  return import_react6.default.createElement(
    "div",
    { className: "sendbird-ui-toggle ".concat(className) },
    import_react6.default.createElement(
      ToggleContainer,
      { checked, defaultChecked, disabled, onChange, onFocus, onBlur },
      import_react6.default.createElement(ToggleUI, { reversed, width, animationDuration, style, name, id, ariaLabel, ariaLabelledby })
    )
  );
}

// node_modules/@sendbird/uikit-react/ChannelSettings/components/ChannelSettingsMenuItem.js
var import_react7 = __toESM(require_react(), 1);
var MenuItem = function(_a) {
  var renderLeft = _a.renderLeft, renderMiddle = _a.renderMiddle, _b = _a.renderRight, renderRight = _b === void 0 ? function(props) {
    return import_react7.default.createElement(MenuItemAction, __assign({}, props));
  } : _b, renderAccordion = _a.renderAccordion, className = _a.className, onClick = _a.onClick, onKeyDown = _a.onKeyDown, accordionOpened = _a.accordionOpened, setAccordionOpened = _a.setAccordionOpened;
  var useAccordion = typeof renderAccordion === "function";
  return import_react7.default.createElement(
    import_react7.default.Fragment,
    null,
    import_react7.default.createElement(
      "div",
      { className: classnames("sendbird-channel-settings__panel-item", className), onClick: function(e) {
        onClick === null || onClick === void 0 ? void 0 : onClick(e);
        if (useAccordion)
          setAccordionOpened(!accordionOpened);
      }, onKeyDown: function(e) {
        onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(e);
        if (useAccordion)
          setAccordionOpened(!accordionOpened);
      } },
      renderLeft(),
      renderMiddle(),
      renderRight({
        useAccordion,
        accordionOpened
      })
    ),
    accordionOpened && (renderAccordion === null || renderAccordion === void 0 ? void 0 : renderAccordion())
  );
};
var MenuItemAction = function(_a) {
  var useAccordion = _a.useAccordion, accordionOpened = _a.accordionOpened, children = _a.children;
  if (useAccordion) {
    return import_react7.default.createElement(Icon, { type: IconTypes.CHEVRON_RIGHT, className: [
      "sendbird-accordion__panel-icon-right",
      "sendbird-accordion__panel-icon--chevron",
      accordionOpened ? "sendbird-accordion__panel-icon--open" : ""
    ].join(" "), height: "24px", width: "24px" });
  }
  return children || null;
};

// node_modules/@sendbird/uikit-react/ChannelSettings/hooks/useMenuList.js
var import_react_dom2 = __toESM(require_react_dom(), 1);
var kFormatter = function(num) {
  return Math.abs(num) > 999 ? "".concat((Math.abs(num) / 1e3).toFixed(1), "K") : num;
};
var commonIconProps = {
  fillColor: IconColors.PRIMARY,
  width: 24,
  height: 24,
  className: "sendbird-channel-settings__accordion-icon"
};
var commonLabelProps = {
  type: LabelTypography.SUBTITLE_1,
  color: LabelColors.ONBACKGROUND_1
};
var useMenuItems = function() {
  var _a = (0, import_react8.useState)(false), frozen = _a[0], setFrozen = _a[1];
  var stringSet = (0, import_react8.useContext)(LocalizationContext).stringSet;
  var _b = useChannelSettings().state, channel = _b.channel, renderUserListItem = _b.renderUserListItem;
  (0, import_react8.useEffect)(function() {
    var _a2;
    setFrozen((_a2 = channel === null || channel === void 0 ? void 0 : channel.isFrozen) !== null && _a2 !== void 0 ? _a2 : false);
  }, [channel === null || channel === void 0 ? void 0 : channel.isFrozen]);
  return (0, import_react8.useMemo)(function() {
    return {
      operator: {
        operators: {
          icon: __assign(__assign({}, commonIconProps), { type: IconTypes.OPERATOR }),
          label: __assign(__assign({}, commonLabelProps), { children: stringSet.CHANNEL_SETTING__OPERATORS__TITLE }),
          accordionComponent: function() {
            return import_react8.default.createElement(OperatorList, { renderUserListItem });
          }
        },
        allUsers: {
          icon: __assign(__assign({}, commonIconProps), { type: IconTypes.MEMBERS }),
          label: __assign(__assign({}, commonLabelProps), { children: stringSet.CHANNEL_SETTING__MEMBERS__TITLE }),
          rightComponent: function(props) {
            return import_react8.default.createElement(
              "div",
              { className: "sendbird-channel-settings__members" },
              import_react8.default.createElement(Badge, { count: (channel === null || channel === void 0 ? void 0 : channel.memberCount) ? kFormatter(channel.memberCount) : "" }),
              import_react8.default.createElement(MenuItemAction, __assign({}, props))
            );
          },
          accordionComponent: function() {
            return import_react8.default.createElement(MemberList, { renderUserListItem });
          }
        },
        mutedUsers: {
          icon: __assign(__assign({}, commonIconProps), { type: IconTypes.MUTE }),
          label: __assign(__assign({}, commonLabelProps), { children: stringSet.CHANNEL_SETTING__MUTED_MEMBERS__TITLE }),
          accordionComponent: function() {
            return import_react8.default.createElement(MutedMemberList, { renderUserListItem });
          }
        },
        bannedUsers: {
          icon: __assign(__assign({}, commonIconProps), { type: IconTypes.BAN }),
          label: __assign(__assign({}, commonLabelProps), { children: stringSet.CHANNEL_SETTING__BANNED_MEMBERS__TITLE }),
          accordionComponent: function() {
            return import_react8.default.createElement(BannedUserList, { renderUserListItem });
          }
        },
        freezeChannel: {
          hideMenu: channel === null || channel === void 0 ? void 0 : channel.isBroadcast,
          icon: __assign(__assign({}, commonIconProps), { type: IconTypes.FREEZE }),
          label: __assign(__assign({}, commonLabelProps), { children: stringSet.CHANNEL_SETTING__FREEZE_CHANNEL }),
          rightComponent: function() {
            return import_react8.default.createElement(Toggle, { className: "sendbird-channel-settings__frozen-icon", checked: frozen, onChange: function() {
              if (frozen) {
                channel === null || channel === void 0 ? void 0 : channel.unfreeze().then(function() {
                  setFrozen(function(prev) {
                    return !prev;
                  });
                });
              } else {
                channel === null || channel === void 0 ? void 0 : channel.freeze().then(function() {
                  setFrozen(function(prev) {
                    return !prev;
                  });
                });
              }
            } });
          }
        }
      },
      nonOperator: {
        allUsers: {
          icon: __assign(__assign({}, commonIconProps), { type: IconTypes.MEMBERS }),
          label: __assign(__assign({}, commonLabelProps), { children: stringSet.CHANNEL_SETTING__MEMBERS__TITLE }),
          rightComponent: function(props) {
            return import_react8.default.createElement(
              "div",
              { className: "sendbird-channel-settings__members" },
              import_react8.default.createElement(Badge, { count: (channel === null || channel === void 0 ? void 0 : channel.memberCount) ? kFormatter(channel.memberCount) : "" }),
              import_react8.default.createElement(MenuItemAction, __assign({}, props))
            );
          },
          accordionComponent: function() {
            return import_react8.default.createElement(MemberList, { renderUserListItem });
          }
        }
      }
    };
  }, [channel === null || channel === void 0 ? void 0 : channel.url, frozen]);
};

// node_modules/@sendbird/uikit-react/ChannelSettings/components/ChannelSettingsHeader.js
var import_react9 = __toESM(require_react(), 1);
var ChannelSettingsHeader = function(_a) {
  var onCloseClick = _a.onCloseClick, renderLeft = _a.renderLeft, renderMiddle = _a.renderMiddle, renderRight = _a.renderRight;
  var stringSet = useLocalization().stringSet;
  var state = useSendbird().state;
  var config = state.config;
  var logger = config.logger;
  return import_react9.default.createElement(Header$1, { className: "sendbird-channel-settings__header", renderLeft, renderMiddle: renderMiddle !== null && renderMiddle !== void 0 ? renderMiddle : function() {
    return import_react9.default.createElement(Header$1.Title, { title: stringSet.CHANNEL_SETTING__HEADER__TITLE });
  }, renderRight: renderRight !== null && renderRight !== void 0 ? renderRight : function() {
    return import_react9.default.createElement(
      "div",
      { className: "sendbird-channel-settings__header-icon" },
      import_react9.default.createElement(Header$1.IconButton, { type: IconTypes.CLOSE, onClick: function(e) {
        logger.info("ChannelSettings: Click close");
        onCloseClick(e);
      } })
    );
  } });
};

// node_modules/@sendbird/uikit-react/ChannelSettings/components/ChannelProfile.js
var import_react11 = __toESM(require_react(), 1);

// node_modules/@sendbird/uikit-react/ChannelSettings/components/EditDetailsModal.js
var import_react10 = __toESM(require_react(), 1);
var import_react_dom3 = __toESM(require_react_dom(), 1);
var EditDetails = function(props) {
  var _a, _b, _c;
  var onSubmit = props.onSubmit, onCancel = props.onCancel;
  var _d = useChannelSettings().state, channel = _d.channel, onChannelModified = _d.onChannelModified, onBeforeUpdateChannel = _d.onBeforeUpdateChannel, setChannelUpdateId = _d.setChannelUpdateId;
  var title = channel === null || channel === void 0 ? void 0 : channel.name;
  var state = useSendbird().state;
  var userId = (_a = state === null || state === void 0 ? void 0 : state.config) === null || _a === void 0 ? void 0 : _a.userId;
  var theme = (_b = state === null || state === void 0 ? void 0 : state.config) === null || _b === void 0 ? void 0 : _b.theme;
  var logger = (_c = state === null || state === void 0 ? void 0 : state.config) === null || _c === void 0 ? void 0 : _c.logger;
  var inputRef = (0, import_react10.useRef)(null);
  var formRef = (0, import_react10.useRef)(null);
  var hiddenInputRef = (0, import_react10.useRef)(null);
  var _e = (0, import_react10.useState)(null), currentImg = _e[0], setCurrentImg = _e[1];
  var _f = (0, import_react10.useState)(null), newFile = _f[0], setNewFile = _f[1];
  var stringSet = (0, import_react10.useContext)(LocalizationContext).stringSet;
  return import_react10.default.createElement(
    Modal,
    { isFullScreenOnMobile: true, titleText: stringSet.MODAL__CHANNEL_INFORMATION__TITLE, submitText: stringSet.BUTTON__SAVE, onCancel, onSubmit: function() {
      var _a2, _b2, _c2;
      if (title !== "" && !((_a2 = inputRef.current) === null || _a2 === void 0 ? void 0 : _a2.value)) {
        if ((_b2 = formRef.current) === null || _b2 === void 0 ? void 0 : _b2.reportValidity) {
          formRef.current.reportValidity();
        }
        return;
      }
      var currentTitle = (_c2 = inputRef.current) === null || _c2 === void 0 ? void 0 : _c2.value;
      var currentImg2 = newFile;
      logger.info("ChannelSettings: Channel information being updated", {
        currentTitle,
        currentImg: currentImg2
      });
      if (onBeforeUpdateChannel) {
        logger.info("ChannelSettings: onBeforeUpdateChannel");
        var params = onBeforeUpdateChannel(currentTitle !== null && currentTitle !== void 0 ? currentTitle : "", currentImg2, channel === null || channel === void 0 ? void 0 : channel.data);
        channel === null || channel === void 0 ? void 0 : channel.updateChannel(params).then(function(groupChannel) {
          onChannelModified === null || onChannelModified === void 0 ? void 0 : onChannelModified(groupChannel);
          setChannelUpdateId(uuidv4());
          onSubmit();
        });
      } else {
        logger.info("ChannelSettings: normal");
        channel === null || channel === void 0 ? void 0 : channel.updateChannel({
          coverImage: currentImg2,
          name: currentTitle,
          data: (channel === null || channel === void 0 ? void 0 : channel.data) || ""
        }).then(function(groupChannel) {
          logger.info("ChannelSettings: Channel information updated", groupChannel);
          onChannelModified === null || onChannelModified === void 0 ? void 0 : onChannelModified(groupChannel);
          setChannelUpdateId === null || setChannelUpdateId === void 0 ? void 0 : setChannelUpdateId(uuidv4());
          onSubmit();
        });
      }
    }, type: ButtonTypes.PRIMARY },
    import_react10.default.createElement(
      "form",
      { className: "channel-profile-form", ref: formRef, onSubmit: function(e) {
        e.preventDefault();
      } },
      import_react10.default.createElement(
        "div",
        { className: "channel-profile-form__img-section" },
        import_react10.default.createElement(InputLabel, null, stringSet.MODAL__CHANNEL_INFORMATION__CHANNEL_IMAGE),
        import_react10.default.createElement("div", { className: "channel-profile-form__avatar" }, currentImg ? import_react10.default.createElement(Avatar$1, { height: "80px", width: "80px", src: currentImg }) : import_react10.default.createElement(ChannelAvatar, { height: 80, width: 80, channel, userId, theme })),
        import_react10.default.createElement("input", { ref: hiddenInputRef, type: "file", accept: "image/gif, image/jpeg, image/png", style: { display: "none" }, onChange: function(e) {
          if (e.target.files) {
            setCurrentImg(URL.createObjectURL(e.target.files[0]));
            setNewFile(e.target.files[0]);
          }
          if (hiddenInputRef.current) {
            hiddenInputRef.current.value = "";
          }
        } }),
        import_react10.default.createElement(
          TextButton,
          { className: "channel-profile-form__avatar-button", onClick: function() {
            var _a2;
            return (_a2 = hiddenInputRef.current) === null || _a2 === void 0 ? void 0 : _a2.click();
          }, disableUnderline: true },
          import_react10.default.createElement(Label, { type: LabelTypography.BUTTON_1, color: LabelColors.PRIMARY }, stringSet.MODAL__CHANNEL_INFORMATION__UPLOAD)
        )
      ),
      import_react10.default.createElement(
        "div",
        { className: "channel-profile-form__name-section" },
        import_react10.default.createElement(InputLabel, null, stringSet.MODAL__CHANNEL_INFORMATION__CHANNEL_NAME),
        import_react10.default.createElement(Input, { required: title !== "", name: "channel-profile-form__name", ref: inputRef, value: title, placeHolder: stringSet.MODAL__CHANNEL_INFORMATION__INPUT__PLACE_HOLDER })
      )
    )
  );
};

// node_modules/@sendbird/uikit-react/ChannelSettings/components/ChannelProfile.js
var import_react_dom4 = __toESM(require_react_dom(), 1);
var ChannelProfile = function() {
  var _a, _b, _c;
  var state = useSendbird().state;
  var channel = useChannelSettings().state.channel;
  var stringSet = (0, import_react11.useContext)(LocalizationContext).stringSet;
  var _d = (0, import_react11.useState)(false), showModal = _d[0], setShowModal = _d[1];
  var userId = (_a = state === null || state === void 0 ? void 0 : state.config) === null || _a === void 0 ? void 0 : _a.userId;
  var theme = ((_b = state === null || state === void 0 ? void 0 : state.config) === null || _b === void 0 ? void 0 : _b.theme) || "light";
  var isOnline = (_c = state === null || state === void 0 ? void 0 : state.config) === null || _c === void 0 ? void 0 : _c.isOnline;
  var disabled = !isOnline;
  var channelName = (0, import_react11.useMemo)(function() {
    if (!(channel === null || channel === void 0 ? void 0 : channel.name) && !(channel === null || channel === void 0 ? void 0 : channel.members))
      return stringSet.NO_TITLE;
    if (isDefaultChannelName(channel))
      return ((channel === null || channel === void 0 ? void 0 : channel.members) || []).map(function(member) {
        return member.nickname || stringSet.NO_NAME;
      }).join(", ");
    return channel.name;
  }, [channel === null || channel === void 0 ? void 0 : channel.name, channel === null || channel === void 0 ? void 0 : channel.joinedMemberCount]);
  return import_react11.default.createElement(
    "div",
    { className: "sendbird-channel-profile" },
    import_react11.default.createElement(
      "div",
      { className: "sendbird-channel-profile--inner" },
      import_react11.default.createElement(
        "div",
        { className: "sendbird-channel-profile__avatar" },
        import_react11.default.createElement(ChannelAvatar, { channel, userId, theme, width: 80, height: 80 })
      ),
      import_react11.default.createElement(Label, { className: "sendbird-channel-profile__title", type: LabelTypography.SUBTITLE_2, color: LabelColors.ONBACKGROUND_1 }, channelName),
      import_react11.default.createElement(
        TextButton,
        { disabled, className: "sendbird-channel-profile__edit", onClick: function() {
          if (disabled) {
            return;
          }
          setShowModal(true);
        }, disableUnderline: true },
        import_react11.default.createElement(Label, { type: LabelTypography.BUTTON_1, color: disabled ? LabelColors.ONBACKGROUND_2 : LabelColors.PRIMARY }, stringSet.CHANNEL_SETTING__PROFILE__EDIT)
      ),
      showModal && import_react11.default.createElement(EditDetails, { onCancel: function() {
        return setShowModal(false);
      }, onSubmit: function() {
        return setShowModal(false);
      } })
    )
  );
};

// node_modules/@sendbird/uikit-react/ChannelSettings/components/LeaveChannel.js
var import_react12 = __toESM(require_react(), 1);
var import_react_dom5 = __toESM(require_react_dom(), 1);
var LeaveChannel = function(props) {
  var _a, _b;
  var _c = props.onSubmit, onSubmit = _c === void 0 ? noop : _c, _d = props.onCancel, onCancel = _d === void 0 ? noop : _d;
  var _e = useChannelSettings().state, channel = _e.channel, onLeaveChannel = _e.onLeaveChannel;
  var stringSet = useLocalization().stringSet;
  var state = useSendbird().state;
  var logger = (_a = state === null || state === void 0 ? void 0 : state.config) === null || _a === void 0 ? void 0 : _a.logger;
  var isOnline = (_b = state === null || state === void 0 ? void 0 : state.config) === null || _b === void 0 ? void 0 : _b.isOnline;
  var isMobile = useMediaQueryContext().isMobile;
  var getChannelName = function(channel2) {
    if (!(channel2 === null || channel2 === void 0 ? void 0 : channel2.name) && !(channel2 === null || channel2 === void 0 ? void 0 : channel2.members))
      return stringSet.NO_TITLE;
    if (isDefaultChannelName(channel2))
      return ((channel2 === null || channel2 === void 0 ? void 0 : channel2.members) || []).map(function(member) {
        return member.nickname || stringSet.NO_NAME;
      }).join(", ");
    return channel2.name;
  };
  if (isMobile) {
    return import_react12.default.createElement(
      Modal,
      { className: "sendbird-channel-settings__leave--mobile", titleText: getChannelName(channel), hideFooter: true, isCloseOnClickOutside: true, onCancel },
      import_react12.default.createElement(
        TextButton,
        { onClick: function() {
          logger.info("ChannelSettings: Leaving channel", channel);
          channel === null || channel === void 0 ? void 0 : channel.leave().then(function() {
            logger.info("ChannelSettings: Leaving channel successful!", channel);
            onLeaveChannel === null || onLeaveChannel === void 0 ? void 0 : onLeaveChannel();
          });
        }, className: "sendbird-channel-settings__leave-label--mobile" },
        import_react12.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.CHANNEL_PREVIEW_MOBILE_LEAVE)
      )
    );
  }
  return import_react12.default.createElement(Modal, { isFullScreenOnMobile: true, disabled: !isOnline, onCancel, onSubmit: function() {
    logger.info("ChannelSettings: Leaving channel", channel);
    channel === null || channel === void 0 ? void 0 : channel.leave().then(function() {
      logger.info("ChannelSettings: Leaving channel successful!", channel);
      if (onLeaveChannel) {
        onLeaveChannel();
      } else {
        onSubmit();
      }
    });
  }, submitText: stringSet.MODAL__LEAVE_CHANNEL__FOOTER, titleText: stringSet.MODAL__LEAVE_CHANNEL__TITLE });
};

// node_modules/@sendbird/uikit-react/ChannelSettings/components/ChannelSettingMenuList.js
var import_react13 = __toESM(require_react(), 1);
var MenuListByRole = function(_a) {
  var menuItems = _a.menuItems;
  var channel = useChannelSettings().state.channel;
  var menuItemsByRole = isOperator(channel) ? menuItems.operator : menuItems.nonOperator;
  var _b = (0, import_react13.useState)(null), openAccordionKey = _b[0], setOpenAccordionKey = _b[1];
  return import_react13.default.createElement("div", { className: "sendbird-channel-settings__operator" }, Object.entries(menuItemsByRole).map(function(_a2) {
    var key = _a2[0], item = _a2[1];
    if (item.hideMenu)
      return null;
    return import_react13.default.createElement(MenuItem, { key, onClick: item.onClick, onKeyDown: item.onKeyDown, renderLeft: function() {
      return import_react13.default.createElement(Icon, __assign({}, item.icon));
    }, renderMiddle: function() {
      return import_react13.default.createElement(Label, __assign({}, item.label));
    }, renderRight: item.rightComponent, renderAccordion: item.accordionComponent, accordionOpened: openAccordionKey === key, setAccordionOpened: function() {
      setOpenAccordionKey(function(prevKey) {
        return prevKey === key ? null : key;
      });
    } });
  }));
};

// node_modules/@sendbird/uikit-react/ChannelSettings/components/ChannelSettingsUI.js
var import_react_dom6 = __toESM(require_react_dom(), 1);
var ChannelSettingsUI = function(props) {
  var _a = deleteNullish(props), _b = _a.renderHeader, renderHeader = _b === void 0 ? function(props2) {
    return import_react14.default.createElement(ChannelSettingsHeader, __assign({}, props2));
  } : _b, renderLeaveChannel = _a.renderLeaveChannel, renderChannelProfile = _a.renderChannelProfile, _c = _a.renderModerationPanel, renderModerationPanel = _c === void 0 ? function(props2) {
    return import_react14.default.createElement(MenuListByRole, __assign({}, props2));
  } : _c, renderPlaceholderError = _a.renderPlaceholderError, renderPlaceholderLoading = _a.renderPlaceholderLoading;
  var state = useSendbird().state;
  var isOnline = state.config.isOnline;
  var _d = useChannelSettings().state, channel = _d.channel, invalidChannel = _d.invalidChannel, onCloseClick = _d.onCloseClick, loading = _d.loading;
  var stringSet = useLocalization().stringSet;
  var menuItems = useMenuItems();
  var _e = (0, import_react14.useState)(false), showLeaveChannelModal = _e[0], setShowLeaveChannelModal = _e[1];
  if (loading) {
    if (renderPlaceholderLoading)
      return renderPlaceholderLoading();
    return import_react14.default.createElement(PlaceHolder, { type: PlaceHolderTypes.LOADING });
  }
  var headerProps = { onCloseClick };
  if (invalidChannel || !channel) {
    return import_react14.default.createElement(
      "div",
      null,
      renderHeader(headerProps),
      import_react14.default.createElement("div", null, renderPlaceholderError ? renderPlaceholderError() : import_react14.default.createElement(PlaceHolder, { type: PlaceHolderTypes.WRONG }))
    );
  }
  return import_react14.default.createElement(
    import_react14.default.Fragment,
    null,
    renderHeader(headerProps),
    import_react14.default.createElement(
      "div",
      { className: "sendbird-channel-settings__scroll-area" },
      (renderChannelProfile === null || renderChannelProfile === void 0 ? void 0 : renderChannelProfile()) || import_react14.default.createElement(ChannelProfile, null),
      renderModerationPanel === null || renderModerationPanel === void 0 ? void 0 : renderModerationPanel({ menuItems }),
      (renderLeaveChannel === null || renderLeaveChannel === void 0 ? void 0 : renderLeaveChannel()) || import_react14.default.createElement(MenuItem, { className: classnames(!isOnline ? "sendbird-channel-settings__panel-item__disabled" : "", "sendbird-channel-settings__panel-item__leave-channel"), onKeyDown: function() {
        if (!isOnline)
          return;
        setShowLeaveChannelModal(true);
      }, onClick: function() {
        if (!isOnline)
          return;
        setShowLeaveChannelModal(true);
      }, renderLeft: function() {
        return import_react14.default.createElement(Icon, { className: ["sendbird-channel-settings__panel-icon-left", "sendbird-channel-settings__panel-icon__leave"].join(" "), type: IconTypes.LEAVE, fillColor: IconColors.ERROR, height: "24px", width: "24px" });
      }, renderMiddle: function() {
        return import_react14.default.createElement(Label, { type: LabelTypography.SUBTITLE_1, color: LabelColors.ONBACKGROUND_1 }, stringSet.CHANNEL_SETTING__LEAVE_CHANNEL__TITLE);
      } }),
      showLeaveChannelModal && import_react14.default.createElement(LeaveChannel, { onCancel: function() {
        setShowLeaveChannelModal(false);
      }, onSubmit: function() {
        setShowLeaveChannelModal(false);
        onCloseClick === null || onCloseClick === void 0 ? void 0 : onCloseClick();
      } })
    )
  );
};

// node_modules/@sendbird/uikit-react/ChannelSettings.js
var import_react_dom7 = __toESM(require_react_dom());
var ChannelSettings = function(props) {
  return import_react15.default.createElement(
    ChannelSettingsProvider,
    __assign({}, props),
    import_react15.default.createElement(ChannelSettingsUI, __assign({}, props))
  );
};

export {
  Badge,
  ChannelSettings
};
//# sourceMappingURL=chunk-JJFSYBLM.js.map
